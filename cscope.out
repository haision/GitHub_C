cscope 15 $HOME               0001217136
	@arp.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

25 
	~<√tdb.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

28 
	~<√töë/ö.h
>

29 
	~<√töë/ù.h
>

30 
	~<¨∑/öë.h
>

31 
	~<sys/io˘l.h
>

32 
	~<bôs/io˘ls.h
>

33 
	~<√t/if.h
>

34 
	~<löux/if_ëhî.h
>

35 
	~<löux/if_∑ckë.h
>

36 
	~<√t/ëhî√t.h
>

38 
	~<î∫o.h
>

41 
_¨p_hdr
 
	t¨p_hdr
;

42 
	s_¨p_hdr
 {

43 
uöt16_t
 
	mhty≥
;

44 
uöt16_t
 
	m±y≥
;

45 
uöt8_t
 
	mhÀn
;

46 
uöt8_t
 
	m∂í
;

47 
uöt16_t
 
	m›code
;

48 
uöt8_t
 
	m£ndî_mac
[6];

49 
uöt8_t
 
	m£ndî_ù
[4];

50 
uöt8_t
 
	mèrgë_mac
[6];

51 
uöt8_t
 
	mèrgë_ù
[4];

55 
	#ETH_HDRLEN
 14

56 
	#IP4_HDRLEN
 20

57 
	#ARP_HDRLEN
 28

58 
	#ARPOP_REQUEST
 1

59 
	#ARPOP_REPLY
 2

	)

62 *
Æloˇã_°rmem
 ();

63 
uöt8_t
 *
Æloˇã_u°rmem
 ();

66 
	$maö
 (
¨gc
, **
¨gv
)

68 
i
, 
°©us
, 
‰ame_Àngth
, 
sd
, 
byãs
;

69 *
öãrÁ˚
, *
èrgë
, *
§c_ù
;

70 
¨p_hdr
 
¨phdr
;

71 
uöt8_t
 *
§c_mac
, *
d°_mac
, *
ëhî_‰ame
;

72 
addröfo
 
höts
, *
ªs
;

73 
sockaddr_ö
 *
ùv4
;

74 
sockaddr_Œ
 
devi˚
;

75 
i‰eq
 
i‰
;

78 
§c_mac
 = 
	`Æloˇã_u°rmem
 (6);

79 
d°_mac
 = 
	`Æloˇã_u°rmem
 (6);

80 
ëhî_‰ame
 = 
	`Æloˇã_u°rmem
 (
IP_MAXPACKET
);

81 
öãrÁ˚
 = 
	`Æloˇã_°rmem
 (40);

82 
èrgë
 = 
	`Æloˇã_°rmem
 (40);

83 
§c_ù
 = 
	`Æloˇã_°rmem
 (
INET_ADDRSTRLEN
);

86 
	`°r˝y
 (
öãrÁ˚
, "eth1");

89 i‡((
sd
 = 
	`sockë
 (
AF_INET
, 
SOCK_RAW
, 
IPPROTO_RAW
)) < 0) {

90 
	`≥º‹
 ("socket() failedÅo get socket descriptor for using ioctl() ");

91 
	`exô
 (
EXIT_FAILURE
);

95 
	`mem£t
 (&
i‰
, 0,  (ifr));

96 
	`¢¥ötf
 (
i‰
.
i‰_«me
,  (i‰.i‰_«me), "%s", 
öãrÁ˚
);

97 i‡(
	`io˘l
 (
sd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

98 
	`≥º‹
 ("ioctl() failedÅo get source MACáddress ");

99  (
EXIT_FAILURE
);

101 
	`˛o£
 (
sd
);

105 
	`mem˝y
 (
§c_mac
, "001122334455", 6 *  (
uöt8_t
));

108 
	`¥ötf
 ("MACáddªs†f‹ i¡îÁ˚ %†i†", 
öãrÁ˚
);

109 
i
=0; i<5; i++) {

110 
	`¥ötf
 ("%02x:", 
§c_mac
[
i
]);

112 
	`¥ötf
 ("%02x\n", 
§c_mac
[5]);

116 
	`mem£t
 (&
devi˚
, 0,  (device));

117 i‡((
devi˚
.
¶l_ifödex
 = 
	`if_«mëoödex
 (
öãrÁ˚
)) == 0) {

118 
	`≥º‹
 ("if_nametoindex() failedÅo obtain interface index ");

119 
	`exô
 (
EXIT_FAILURE
);

121 
	`¥ötf
 ("Index f‹ i¡îÁ˚ %†i†%i\n", 
öãrÁ˚
, 
devi˚
.
¶l_ifödex
);

124 
	`mem£t
 (
d°_mac
, 0xff, 6 *  (
uöt8_t
));

127 
	`°r˝y
 (
§c_ù
, "192.168.1.1");

130 
	`°r˝y
 (
èrgë
, "192.168.1.190");

133 
	`mem£t
 (&
höts
, 0,  (
addröfo
));

134 
höts
.
ai_Ámûy
 = 
AF_INET
;

135 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

136 
höts
.
ai_Êags
 = höts.ai_Êag†| 
AI_CANONNAME
;

139 i‡((
°©us
 = 
	`öë_±⁄
 (
AF_INET
, 
§c_ù
, &
¨phdr
.
£ndî_ù
)) != 1) {

140 
	`Ârötf
 (
°dîr
, "öë_±⁄(ËÁûed f‹ sour˚ IPáddªss.\nEº‹ mesßge: %s", 
	`°ªº‹
 (
°©us
));

141 
	`exô
 (
EXIT_FAILURE
);

145 i‡((
°©us
 = 
	`gëaddröfo
 (
èrgë
, 
NULL
, &
höts
, &
ªs
)) != 0) {

146 
	`Ârötf
 (
°dîr
, "gëaddröfo(ËÁûed: %s\n", 
	`gai_°ªº‹
 (
°©us
));

147 
	`exô
 (
EXIT_FAILURE
);

149 
ùv4
 = (
sockaddr_ö
 *Ë
ªs
->
ai_addr
;

150 
	`mem˝y
 (&
¨phdr
.
èrgë_ù
, &
ùv4
->
sö_addr
, 4 *  (
uöt8_t
));

151 
	`‰ìaddröfo
 (
ªs
);

154 
devi˚
.
¶l_Ámûy
 = 
AF_PACKET
;

155 
	`mem˝y
 (
devi˚
.
¶l_addr
, 
§c_mac
, 6 *  (
uöt8_t
));

156 
devi˚
.
¶l_hÆí
 = 
	`ht⁄s
 (6);

161 
¨phdr
.
hty≥
 = 
	`ht⁄s
 (1);

164 
¨phdr
.
±y≥
 = 
	`ht⁄s
 (
ETH_P_IP
);

167 
¨phdr
.
hÀn
 = 6;

170 
¨phdr
.
∂í
 = 4;

174 
¨phdr
.
›code
 = 
	`ht⁄s
 (
ARPOP_REPLY
);

177 
	`mem˝y
 (&
¨phdr
.
£ndî_mac
, 
§c_mac
, 6 *  (
uöt8_t
));

183 
	`mem£t
 (&
¨phdr
.
èrgë_mac
, 0, 6 *  (
uöt8_t
));

191 
‰ame_Àngth
 = 6 + 6 + 2 + 
ARP_HDRLEN
;

194 
	`mem˝y
 (
ëhî_‰ame
, 
d°_mac
, 6 *  (
uöt8_t
));

195 
	`mem˝y
 (
ëhî_‰ame
 + 6, 
§c_mac
, 6 *  (
uöt8_t
));

199 
ëhî_‰ame
[12] = 
ETH_P_ARP
 / 256;

200 
ëhî_‰ame
[13] = 
ETH_P_ARP
 % 256;

205 
	`mem˝y
 (
ëhî_‰ame
 + 
ETH_HDRLEN
, &
¨phdr
, 
ARP_HDRLEN
 *  (
uöt8_t
));

208 i‡((
sd
 = 
	`sockë
 (
PF_PACKET
, 
SOCK_RAW
, 
	`ht⁄s
 (
ETH_P_ALL
))) < 0) {

209 
	`≥º‹
 ("socket() failed ");

210 
	`exô
 (
EXIT_FAILURE
);

215 i‡((
byãs
 = 
	`£ndto
 (
sd
, 
ëhî_‰ame
, 
‰ame_Àngth
, 0, (
sockaddr
 *Ë&
devi˚
,  (device))) <= 0) {

216 
	`≥º‹
 ("sendto() failed");

217 
	`exô
 (
EXIT_FAILURE
);

222 
	`˛o£
 (
sd
);

225 
	`‰ì
 (
§c_mac
);

226 
	`‰ì
 (
d°_mac
);

227 
	`‰ì
 (
ëhî_‰ame
);

228 
	`‰ì
 (
öãrÁ˚
);

229 
	`‰ì
 (
èrgë
);

230 
	`‰ì
 (
§c_ù
);

232  (
EXIT_SUCCESS
);

233 
	}
}

237 
	$Æloˇã_°rmem
 (
Àn
)

239 *
tmp
;

241 i‡(
Àn
 <= 0) {

242 
	`Ârötf
 (
°dîr
, "ERROR: C™nŸáŒoˇã mem‹y beˇu£Üí = %òöáŒoˇã_°rmem().\n", 
Àn
);

243 
	`exô
 (
EXIT_FAILURE
);

246 
tmp
 = (*Ë
	`mÆloc
 (
Àn
 *  ());

247 i‡(
tmp
 !
NULL
) {

248 
	`mem£t
 (
tmp
, 0, 
Àn
 *  ());

249  (
tmp
);

251 
	`Ârötf
 (
°dîr
, "ERROR: Cannotállocate memory forárrayállocate_strmem().\n");

252 
	`exô
 (
EXIT_FAILURE
);

254 
	}
}

257 
uöt8_t
 *

258 
	$Æloˇã_u°rmem
 (
Àn
)

260 *
tmp
;

262 i‡(
Àn
 <= 0) {

263 
	`Ârötf
 (
°dîr
, "ERROR: C™nŸáŒoˇã mem‹y beˇu£Üí = %òöáŒoˇã_u°rmem().\n", 
Àn
);

264 
	`exô
 (
EXIT_FAILURE
);

267 
tmp
 = (
uöt8_t
 *Ë
	`mÆloc
 (
Àn
 *  (uint8_t));

268 i‡(
tmp
 !
NULL
) {

269 
	`mem£t
 (
tmp
, 0, 
Àn
 *  (
uöt8_t
));

270  (
tmp
);

272 
	`Ârötf
 (
°dîr
, "ERROR: Cannotállocate memory forárrayállocate_ustrmem().\n");

273 
	`exô
 (
EXIT_FAILURE
);

275 
	}
}

	@ascii.c

1 
	~<°dio.h
>

2 
	$maö
()

4 
c1
,
c2
;

5 
	`ty≥of
 (
c1
Ë
c4
,
c5
;

6 
c3
;

7 
c1
 = 'a'-'A';

8 
c2
 = 'b'-'B';

9 
c3
 = 'c'-32;

10 
c4
 = 'd'-'\0';

11 
c5
 = 'd'-'0';

13 
	`¥ötf
("c1 i†%dánd c2 i†%d====c4 i†%d\n",
c1
,
c2
,
c4
);

14 
	`¥ötf
("c3 i†%dánd %c,™d c5 i†%d\n",
c3
,c3,
c5
);

15 
	}
}

	@asm_test.c

1 
	$b¨
(
c
, 
d
)

3 
e
 = 
c
 + 
d
;

4  
e
;

5 
	}
}

7 
	$foo
(
a
, 
b
)

9  
	`b¨
(
a
, 
b
);

10 
	}
}

12 
	$maö
()

14 
	`foo
(2, 3);

16 
	}
}

	@base.c

1 
	~<gtk/gtk.h
>

2 
	$maö
–
¨gc
,*
¨gv
[] )

4 
GtkWidgë
 *
wödow
;

5 
	`gtk_öô
 (&
¨gc
, &
¨gv
);

6 
wödow
 = 
	`gtk_wödow_√w
 (
GTK_WINDOW_TOPLEVEL
);

7 
	`gtk_widgë_show
 (
wödow
);

10 
	}
}

	@breakpoint.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
sum
 = 0, 
i
 = 0;

6 
öput
[5];

9 
	`sˇnf
("%s", 
öput
);

10 
i
 = 0; 
öput
[i] != '\0'; i++)

11 
sum
 = sum*10 + 
öput
[
i
] - '0';

12 
	`¥ötf
("öput=%d\n", 
sum
);

15 
	}
}

	@factorial.c

1 
	~<°dio.h
>

3 
	$Á˘‹ül
(
n
)

5 i‡(
n
 == 0)

8 
ªcur£
 = 
	`Á˘‹ül
(
n
-1);

9 
ªsu…
 = 
n
 * 
ªcur£
;

10  
ªsu…
;

12 
	}
}

14 
	$maö
 ()

16 
ªsu…
 = 
	`Á˘‹ül
(8);

17 
	`¥ötf
("%d\n",
ªsu…
);

19 
	}
}

	@fcntl.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<î∫o.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

7 
	#MSG_TRY
 "åyágaö\n"

	)

9 
	$maö
()

11 
buf
[10];

12 
n
;

13 
Êags
;

14 
Êags
 = 
	`f˙é
(
STDIN_FILENO
, 
F_GETFL
);

15 
Êags
 |
O_NONBLOCK
;

16 i‡(
	`f˙é
(
STDIN_FILENO
, 
F_SETFL
, 
Êags
) == -1) {

17 
	`≥º‹
("fcntl");

18 
	`exô
(1);

20 
åyagaö
:

21 
n
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 10);

22 i‡(
n
 < 0) {

23 i‡(
î∫o
 =
EAGAIN
) {

24 
	`¶ìp
(1);

25 
	`wrôe
(
STDOUT_FILENO
, 
MSG_TRY
, 
	`°æí
(MSG_TRY));

26 
åyagaö
;

28 
	`≥º‹
("read stdin");

29 
	`exô
(1);

31 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
);

33 
	}
}

	@fcntl_redirect.c

1 
	~<sys/ty≥s.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
vÆ
;

9 i‡(
¨gc
 != 2) {

10 
	`Âuts
("ußge:á.ouà<des¸ùt‹#>\n", 
°dîr
);

11 
	`exô
(1);

13 i‡((
vÆ
 = 
	`f˙é
(
	`©oi
(
¨gv
[1]), 
F_GETFL
)) < 0) {

14 
	`¥ötf
("f˙éÉº‹ f‹ fd %d\n", 
	`©oi
(
¨gv
[1]));

15 
	`exô
(1);

17 
vÆ
 & 
O_ACCMODE
) {

18 
O_RDONLY
:

19 
	`¥ötf
("read only");

21 
O_WRONLY
:

22 
	`¥ötf
("write only");

24 
O_RDWR
:

25 
	`¥ötf
("read write");

28 
	`Âuts
("övÆidác˚s†mode\n", 
°dîr
);

29 
	`exô
(1);

31 i‡(
vÆ
 & 
O_APPEND
)

32 
	`¥ötf
(",áppend");

33 i‡(
vÆ
 & 
O_NONBLOCK
)

34 
	`¥ötf
(",Çonblocking");

35 
	`putch¨
('\n');

37 
	}
}

	@firstGTK.c

1 
	~<gtk/gtk.h
>

3 
	$hñlo
(
GtkWidgë
 *
widgë
,
gpoöãr
 *
d©a
)

5 
	`g_¥öt
("buâ⁄ clickedánd d©®=%s\n",(*)
d©a
);

6 
	}
}

8 
	$de°roy
(
GtkWidgë
 *
widgë
,
gpoöãr
 *
d©a
)

10 
	`gtk_maö_quô
();

11 
	}
}

13 
	$maö
(
¨gc
,** 
¨gv
)

15 
GtkWidgë
 *
wödow
;

16 
GtkWidgë
 *
buâ⁄
;

17 
	`gtk_öô
(&
¨gc
,&
¨gv
);

19 
wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

20 
	`g_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
wödow
),"de°roy",
	`GTK_SIGNAL_FUNC
(
de°roy
),
NULL
);

22 
	`gtk_c⁄èöî_b‹dî_width
(
	`GTK_CONTAINER
(
wödow
),20);

24 
buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("Hello World");

25 
	`g_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
buâ⁄
),"˛icked",
	`GTK_SIGNAL_FUNC
(
hñlo
),"Iám from button");

27 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wödow
),
buâ⁄
);

29 
	`gtk_widgë_show
(
buâ⁄
);

30 
	`gtk_widgë_show
(
wödow
);

32 
	`gtk_maö
();

35 
	}
}

	@fputc.c

1 
	~<°dio.h
>

3 
	$maö
(){

4 
	`Âuts
("adddd\n",
°dîr
);

5 
	`¥ötf
("%d\n",());

7 
a
= '12';

8 
	`¥ötf
("%d\n",
a
);

10 
	}
}

	@fseek.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	$maö
()

6 
FILE
* 
Â
;

7 i‡–(
Â
 = 
	`f›í
("ãxtfûe","r+")Ë=
NULL
) {

8 
	`≥º‹
("Open fileÅextfile");

9 
	`exô
(1);

11 i‡(
	`f£ek
(
Â
, 10, 
SEEK_SET
) != 0) {

12 
	`≥º‹
("Seek fileÅextfile");

13 
	`exô
(1);

15 
	`Âutc
('K', 
Â
);

16 
	`f˛o£
(
Â
);

18 
	}
}

	@gdb_test.c

1 
	~<°dio.h
>

3 
	$add_ønge
(
low
, 
high
)

5 
i
=0;

6 
sum
=0;

7 
i
 = 
low
; i <
high
; i++)

8 
sum
 = sum + 
i
;

9  
sum
;

10 
	}
}

12 
	$maö
()

14 
ªsu…
[100];

15 
ªsu…
[0] = 
	`add_ønge
(1, 10);

16 
ªsu…
[1] = 
	`add_ønge
(1, 100);

17 
	`¥ötf
("ªsu…[0]=%d\ƒesu…[1]=%d\n", 
ªsu…
[0],Ñesult[1]);

19 
	}
}

	@helloword.c

1 
	~<gtk/gtk.h
>

3 
	$maö
(
¨gc
, *
¨gv
[])

5 
GtkWidgë
 *
wödow
;

7 
	`gtk_öô
(&
¨gc
, &
¨gv
);

9 
wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

11 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wödow
), "Hello,Dubuntu!");

13 
	`gtk_widgë_show
(
wödow
);

15 
	`gtk_maö
();

19 
	}
}

	@i++.c

1 
	~<°dio.h
>

3 
	$f1
(
i
){

4 
i
++;

5  
i
;

6 
	}
}

9 
	$f2
(
j
){

10 ++
j
;

11  
j
;

12 
	}
}

14 
	$maö
(){

15 
	`¥ötf
("f1(3)===%d\n",
	`f1
(3));

16 
	`¥ötf
("f2(3)===%d\n",
	`f2
(3));

19 
a
=0;

20 
a
 = (++a)+(++a)+(++a)+(++a);

21 
	`¥ötf
("a%d\n",
a
);

24 
	}
}

	@ioctl.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<sys/io˘l.h
>

6 
	$maö
()

8 
wösize
 
size
;

9 i‡(
	`ißây
(
STDOUT_FILENO
) == 0)

10 
	`exô
(1);

11 if(
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
size
)<0) {

12 
	`≥º‹
("ioctl TIOCGWINSZÉrror");

13 
	`exô
(1);

15 
	`¥ötf
("%dÑows, %d cﬁumns\n", 
size
.
ws_row
, size.
ws_cﬁ
);

17 
	}
}

	@malloc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

6 
	mnumbî
;

7 *
	mmsg
;

8 } 
	tunô_t
;

10 
	$maö
()

12 
unô_t
 *
p
 = 
	`mÆloc
((unit_t));

14 i‡(
p
 =
NULL
) {

15 
	`¥ötf
("out of memory\n");

16 
	`exô
(1);

18 
p
->
numbî
 = 3;

19 
p
->
msg
 = 
	`mÆloc
(20);

20 
	`°r˝y
(
p
->
msg
, "Hello world!");

21 
	`¥ötf
("numbî: %d\nmsg: %s\n", 
p
->
numbî
,Ö->
msg
);

22 
	`‰ì
(
p
);

23 
	`‰ì
(
p
->
msg
);

25 
p
 = 
NULL
;

28 
	}
}

	@malloc_test.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

4 
	$maö
(){

5 *
p
;

6 
i
;

9 
p
 = 
	`mÆloc
(1000);

13 
	}
}

	@maze.c

1 
	~<°dio.h
>

3 
	#MAX_ROW
 5

	)

4 
	#MAX_COL
 5

	)

6 
	spoöt
 { 
	mrow
, 
	mcﬁ
; } 
	g°ack
[512];

7 
	gt›
 = 0;

9 
	$push
(
poöt
 
p
)

11 
°ack
[
t›
++] = 
p
;

12 
	}
}

14 
poöt
 
	$p›
()

16  
°ack
[--
t›
];

17 
	}
}

19 
	$is_em±y
()

21  
t›
 == 0;

22 
	}
}

24 
	gmaze
[
MAX_ROW
][
MAX_COL
] = {

32 
¥öt_maze
(
	$ty≥of
(
maze
Ë
p
)

34 
i
, 
j
;

35 
i
 = 0; i < 
MAX_ROW
; i++) {

36 
j
 = 0; j < 
MAX_COL
; j++)

37 
	`¥ötf
("%d ", 
p
[
i
][
j
]);

38 
	`putch¨
('\n');

40 
	`¥ötf
("*********\n");

41 
	}
}

43 
poöt
 
	g¥ede˚ss‹
[
MAX_ROW
][
MAX_COL
] = {

51 
	$visô
(
row
, 
cﬁ
, 
poöt
 
¥e
)

53 
poöt
 
visô_poöt
 = { 
row
, 
cﬁ
 };

54 
maze
[
row
][
cﬁ
] = 2;

55 
¥ede˚ss‹
[
row
][
cﬁ
] = 
¥e
;

56 
	`push
(
visô_poöt
);

57 
	}
}

59 
	$maö
()

61 
poöt
 
p
 = { 0, 0 };

63 
maze
[
p
.
row
][p.
cﬁ
] = 2;

64 
	`push
(
p
);

66 !
	`is_em±y
()) {

67 
p
 = 
	`p›
();

68 i‡(
p
.
row
 =
MAX_ROW
 - 1

69 && 
p
.
cﬁ
 =
MAX_COL
 - 1)

71 i‡(
p
.
cﬁ
+1 < 
MAX_COL


72 && 
maze
[
p
.
row
][p.
cﬁ
+1] == 0)

73 
	`visô
(
p
.
row
,Ö.
cﬁ
+1,Ö);

74 i‡(
p
.
row
+1 < 
MAX_ROW


75 && 
maze
[
p
.
row
+1][p.
cﬁ
] == 0)

76 
	`visô
(
p
.
row
+1,Ö.
cﬁ
,Ö);

77 i‡(
p
.
cﬁ
-1 >= 0

78 && 
maze
[
p
.
row
][p.
cﬁ
-1] == 0)

79 
	`visô
(
p
.
row
,Ö.
cﬁ
-1,Ö);

80 i‡(
p
.
row
-1 >= 0

81 && 
maze
[
p
.
row
-1][p.
cﬁ
] == 0)

82 
	`visô
(
p
.
row
-1,Ö.
cﬁ
,Ö);

83 
	`¥öt_maze
(
maze
);

86 i‡(
p
.
row
 =
MAX_ROW
 - 1 &&Ö.
cﬁ
 =
MAX_COL
 - 1) {

87 
	`¥ötf
("(%d, %d)\n", 
p
.
row
,Ö.
cﬁ
);

88 
¥ede˚ss‹
[
p
.
row
][p.
cﬁ
].row != -1) {

89 
p
 = 
¥ede˚ss‹
[p.
row
][p.
cﬁ
];

90 
	`¥ötf
("(%d, %d)\n", 
p
.
row
,Ö.
cﬁ
);

93 
	`¥ötf
("NoÖath!\n");

96 
	}
}

	@maze_queue.c

1 
	~<°dio.h
>

3 
	#MAX_ROW
 5

	)

4 
	#MAX_COL
 5

	)

6 
	spoöt
 { 
	mrow
, 
	mcﬁ
, 
	m¥ede˚ss‹
; } 
	gqueue
[512];

7 
	ghód
 = 0, 
	gèû
 = 0;

9 
	$íqueue
(
poöt
 
p
)

11 
queue
[
èû
++] = 
p
;

12 
	}
}

14 
poöt
 
	$dequeue
()

16  
queue
[
hód
++];

17 
	}
}

19 
	$is_em±y
()

21  
hód
 =
èû
;

22 
	}
}

24 
	gmaze
[
MAX_ROW
][
MAX_COL
] = {

32 
	$¥öt_maze
()

34 
i
, 
j
;

35 
i
 = 0; i < 
MAX_ROW
; i++) {

36 
j
 = 0; j < 
MAX_COL
; j++)

37 
	`¥ötf
("%d ", 
maze
[
i
][
j
]);

38 
	`putch¨
('\n');

40 
	`¥ötf
("*********\n");

41 
	}
}

43 
	$visô
(
row
, 
cﬁ
)

45 
poöt
 
visô_poöt
 = { 
row
, 
cﬁ
, 
hód
-1 };

46 
maze
[
row
][
cﬁ
] = 2;

47 
	`íqueue
(
visô_poöt
);

48 
	}
}

50 
	$maö
()

52 
poöt
 
p
 = { 0, 0, -1 };

54 
maze
[
p
.
row
][p.
cﬁ
] = 2;

55 
	`íqueue
(
p
);

57 !
	`is_em±y
()) {

58 
p
 = 
	`dequeue
();

59 i‡(
p
.
row
 =
MAX_ROW
 - 1

60 && 
p
.
cﬁ
 =
MAX_COL
 - 1)

62 i‡(
p
.
cﬁ
+1 < 
MAX_COL


63 && 
maze
[
p
.
row
][p.
cﬁ
+1] == 0)

64 
	`visô
(
p
.
row
,Ö.
cﬁ
+1);

65 i‡(
p
.
row
+1 < 
MAX_ROW


66 && 
maze
[
p
.
row
+1][p.
cﬁ
] == 0)

67 
	`visô
(
p
.
row
+1,Ö.
cﬁ
);

68 i‡(
p
.
cﬁ
-1 >= 0

69 && 
maze
[
p
.
row
][p.
cﬁ
-1] == 0)

70 
	`visô
(
p
.
row
,Ö.
cﬁ
-1);

71 i‡(
p
.
row
-1 >= 0

72 && 
maze
[
p
.
row
-1][p.
cﬁ
] == 0)

73 
	`visô
(
p
.
row
-1,Ö.
cﬁ
);

74 
	`¥öt_maze
();

76 i‡(
p
.
row
 =
MAX_ROW
 - 1 &&Ö.
cﬁ
 =
MAX_COL
 - 1) {

77 
	`¥ötf
("(%d, %d)\n", 
p
.
row
,Ö.
cﬁ
);

78 
p
.
¥ede˚ss‹
 != -1) {

79 
p
 = 
queue
[p.
¥ede˚ss‹
];

80 
	`¥ötf
("(%d, %d,%d)\n", 
p
.
row
,Ö.
cﬁ
,p.
¥ede˚ss‹
);

83 
	`¥ötf
("NoÖath!\n");

86 
	}
}

	@maze_recursive.c

1 
	~<°dio.h
>

3 
	#MAX_ROW
 5

	)

4 
	#MAX_COL
 5

	)

6 
	spoöt
 { 
	mrow
, 
	mcﬁ
; } 
	g°ack
[512];

7 
	gt›
 = 0;

9 
	$push
(
poöt
 
p
)

11 
°ack
[
t›
++] = 
p
;

12 
	}
}

14 
poöt
 
	$p›
()

16  
°ack
[--
t›
];

17 
	}
}

19 
	$is_em±y
()

21  
t›
 == 0;

22 
	}
}

24 
	gmaze
[
MAX_ROW
][
MAX_COL
] = {

32 
¥öt_maze
(
	$ty≥of
(
maze
Ë
p
)

34 
i
, 
j
;

35 
i
 = 0; i < 
MAX_ROW
; i++) {

36 
j
 = 0; j < 
MAX_COL
; j++)

37 
	`¥ötf
("%d ", 
p
[
i
][
j
]);

38 
	`putch¨
('\n');

40 
	`¥ötf
("*********\n");

41 
	}
}

43 
poöt
 
	g¥ede˚ss‹
[
MAX_ROW
][
MAX_COL
] = {

51 
	$visô
(
row
, 
cﬁ
, 
poöt
 
¥e
)

53 
poöt
 
visô_poöt
 = { 
row
, 
cﬁ
 };

54 
maze
[
row
][
cﬁ
] = 2;

55 
¥ede˚ss‹
[
row
][
cﬁ
] = 
¥e
;

56 
	`push
(
visô_poöt
);

57 
	}
}

59 
	$maö
()

61 
poöt
 
p
 = { 0, 0 };

63 
maze
[
p
.
row
][p.
cﬁ
] = 2;

64 
	`push
(
p
);

66 !
	`is_em±y
()) {

67 
p
 = 
	`p›
();

68 i‡(
p
.
row
 =
MAX_ROW
 - 1

69 && 
p
.
cﬁ
 =
MAX_COL
 - 1)

71 i‡(
p
.
cﬁ
+1 < 
MAX_COL


72 && 
maze
[
p
.
row
][p.
cﬁ
+1] == 0)

73 
	`visô
(
p
.
row
,Ö.
cﬁ
+1,Ö);

74 i‡(
p
.
row
+1 < 
MAX_ROW


75 && 
maze
[
p
.
row
+1][p.
cﬁ
] == 0)

76 
	`visô
(
p
.
row
+1,Ö.
cﬁ
,Ö);

77 i‡(
p
.
cﬁ
-1 >= 0

78 && 
maze
[
p
.
row
][p.
cﬁ
-1] == 0)

79 
	`visô
(
p
.
row
,Ö.
cﬁ
-1,Ö);

80 i‡(
p
.
row
-1 >= 0

81 && 
maze
[
p
.
row
-1][p.
cﬁ
] == 0)

82 
	`visô
(
p
.
row
-1,Ö.
cﬁ
,Ö);

83 
	`¥öt_maze
(
maze
);

86 i‡(
p
.
row
 =
MAX_ROW
 - 1 &&Ö.
cﬁ
 =
MAX_COL
 - 1) {

87 
	`¥ötf
("(%d, %d)\n", 
p
.
row
,Ö.
cﬁ
);

88 
¥ede˚ss‹
[
p
.
row
][p.
cﬁ
].row != -1) {

89 
p
 = 
¥ede˚ss‹
[p.
row
][p.
cﬁ
];

90 
	`¥ötf
("(%d, %d)\n", 
p
.
row
,Ö.
cﬁ
);

93 
	`¥ötf
("NoÖath!\n");

96 
	}
}

	@maze_ring.c

1 
	~<°dio.h
>

3 
	#MAX_ROW
 5

	)

4 
	#MAX_COL
 5

	)

6 
	spoöt
 { 
	mrow
, 
	mcﬁ
, 
	m¥ede˚ss‹
; } 
	gqueue
[512];

7 
	ghód
 = -1, 
	gèû
 = -1;

9 
	$íqueue
(
poöt
 
p
)

11 if(
èû
==5){tail=-1;}

12 
queue
[
èû
++] = 
p
;

13 
	}
}

15 
poöt
 
	$dequeue
()

17 if(
hód
==5){head=-1;}

18  
queue
[
hód
++];

19 
	}
}

21 
	$is_em±y
()

23  
hód
 =
èû
;

24 
	}
}

26 
	gmaze
[
MAX_ROW
][
MAX_COL
] = {

34 
	$¥öt_maze
()

36 
i
, 
j
;

37 
i
 = 0; i < 
MAX_ROW
; i++) {

38 
j
 = 0; j < 
MAX_COL
; j++)

39 
	`¥ötf
("%d ", 
maze
[
i
][
j
]);

40 
	`putch¨
('\n');

42 
	`¥ötf
("*********\n");

43 
	}
}

45 
	$visô
(
row
, 
cﬁ
)

47 
poöt
 
visô_poöt
 = { 
row
, 
cﬁ
, 
hód
-1 };

48 
maze
[
row
][
cﬁ
] = 2;

49 
	`íqueue
(
visô_poöt
);

50 
	}
}

52 
	$maö
()

54 
poöt
 
p
 = { 0, 0, -1 };

56 
maze
[
p
.
row
][p.
cﬁ
] = 2;

57 
	`íqueue
(
p
);

59 !
	`is_em±y
()) {

60 
p
 = 
	`dequeue
();

61 i‡(
p
.
row
 =
MAX_ROW
 - 1

62 && 
p
.
cﬁ
 =
MAX_COL
 - 1){

63 
	`¥ötf
("===============break!\n");

66 i‡(
p
.
cﬁ
+1 < 
MAX_COL


67 && 
maze
[
p
.
row
][p.
cﬁ
+1] == 0)

68 {
	`visô
(
p
.
row
,Ö.
cﬁ
+1);}

69 i‡(
p
.
row
+1 < 
MAX_ROW


70 && 
maze
[
p
.
row
+1][p.
cﬁ
] == 0)

71 {
	`visô
(
p
.
row
+1,Ö.
cﬁ
);}

72 i‡(
p
.
cﬁ
-1 >= 0

73 && 
maze
[
p
.
row
][p.
cﬁ
-1] == 0)

74 {
	`visô
(
p
.
row
,Ö.
cﬁ
-1);}

75 i‡(
p
.
row
-1 >= 0

76 && 
maze
[
p
.
row
-1][p.
cﬁ
] == 0)

77 {
	`visô
(
p
.
row
-1,Ö.
cﬁ
);}

78 
	`¥öt_maze
();

80 i‡(
p
.
row
 =
MAX_ROW
 - 1 &&Ö.
cﬁ
 =
MAX_COL
 - 1) {

81 
	`¥ötf
("path!\n");

84 
	`¥ötf
("NoÖath!\n");

87 
	}
}

	@memcpy.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	$maö
 ()

6 
§c
[]="thy431======12";

7 
d°
[22];

8 
	`¥ötf
("§¯addªs†is: %x\n",
§c
);

9 
	`¥ötf
("d°áddªs†is: %x\n",
d°
);

11 
	`°∫˝y
(
d°
,
§c
,
	`°æí
(src));

14 
	`¥ötf
("d°Üí: %d\n",
	`°æí
(
d°
));

16 
	`¥ötf
("§¯Àn: %d\n",
	`°æí
(
§c
));

17 
	`¥ötf
("§¯is: %s\n",
§c
);

19 
	`¥ötf
("d° is: %s\n",
d°
);

20 
	`¥ötf
("d°Üí: %d\n",
	`°æí
(
d°
));

22 
	}
}

	@memmove.c

1 
	~<°rög.h
>

2 
	~<°dio.h
>

4 
	$maö
()

6 
de°
[] = "abcdefghijklmnopqrstuvwxyz0123456789";

7 *
§c
 = "******************************";

9 
	`¥ötf
("de°ö©i⁄Öri‹Åÿmemmove: %s\n", 
de°
);

10 
	`memmove
(
de°
, 
§c
, 26);

11 
	`¥ötf
("de°ö©i⁄á·î memmove: %s\n", 
de°
);

12 
	`mem£t
(
de°
, 'a',10);

13 
	`puts
(
de°
);

15 
	}
}

	@mmap.c

1 
	~<°dlib.h
>

2 
	~<sys/mm™.h
>

3 
	~<f˙é.h
>

5 
	$maö
()

7 *
p
;

8 
fd
 = 
	`›í
("hñlo", 
O_RDWR
);

9 i‡(
fd
 < 0) {

10 
	`≥º‹
("open hello");

11 
	`exô
(1);

13 
p
 = 
	`mm≠
(
NULL
, 300000, 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

14 
	`¶ìp
(5);

15 i‡(
p
 =
MAP_FAILED
) {

16 
	`≥º‹
("mmap");

17 
	`exô
(1);

19 
	`˛o£
(
fd
);

20 
p
[0] = 0x30313233;

21 
	`munm≠
(
p
, 6);

23 
	}
}

	@noblock.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<î∫o.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

7 
	#MSG_TRY
 "åyágaö\n"

	)

9 
	$maö
()

11 
buf
[10];

12 
fd
, 
n
;

13 
fd
 = 
	`›í
("/dev/ây", 
O_RDONLY
|
O_NONBLOCK
);

14 if(
fd
<0) {

15 
	`≥º‹
("open /dev/tty");

16 
	`exô
(1);

18 
åyagaö
:

19 
n
 = 
	`ªad
(
fd
, 
buf
, 10);

20 i‡(
n
 < 0) {

21 i‡(
î∫o
 =
EAGAIN
) {

22 
	`¶ìp
(1);

23 
	`wrôe
(
STDOUT_FILENO
, 
MSG_TRY
, 
	`°æí
(MSG_TRY));

24 
åyagaö
;

26 
	`≥º‹
("read /dev/tty");

27 
	`exô
(1);

29 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
);

30 
	`˛o£
(
fd
);

32 
	}
}

	@noblock_timeout.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<î∫o.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

7 
	#MSG_TRY
 "åyágaö\n"

	)

8 
	#MSG_TIMEOUT
 "timeout\n"

	)

10 
	$maö
()

12 
buf
[10];

13 
fd
, 
n
, 
i
;

14 
fd
 = 
	`›í
("/dev/ây", 
O_RDONLY
|
O_NONBLOCK
);

15 if(
fd
<0) {

16 
	`≥º‹
("open /dev/tty");

17 
	`exô
(1);

19 
i
=0; i<5; i++) {

20 
n
 = 
	`ªad
(
fd
, 
buf
, 10);

21 if(
n
>=0)

23 if(
î∫o
!=
EAGAIN
) {

24 
	`≥º‹
("read /dev/tty");

25 
	`exô
(1);

27 
	`¶ìp
(1);

28 
	`wrôe
(
STDOUT_FILENO
, 
MSG_TRY
, 
	`°æí
(MSG_TRY));

30 if(
i
==5)

31 
	`wrôe
(
STDOUT_FILENO
, 
MSG_TIMEOUT
, 
	`°æí
(MSG_TIMEOUT));

33 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
);

34 
	`˛o£
(
fd
);

36 
	}
}

	@observe.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
sum
 = 0, 
i
 = 0;

6 
öput
[5];

9 
sum
 = 0;

10 
	`sˇnf
("%s", 
öput
);

11 
i
 = 0; 
öput
[i] != '\0'; i++){

12 i‡(
öput
[
i
] < '0' || input[i] > '9') {

13 
	`¥ötf
("Invalid input!\n");

14 
sum
 = -1;

17 
sum
 = sum*10 + 
öput
[
i
] - '0';

19 
	`¥ötf
("öput=%d\n", 
sum
);

22 
	}
}

	@print_backward.c

1 
	~<°dio.h
>

2 
	#LEN
 3

	)

4 
	gbuf
[
LEN
]={'a', 'b', 'c'};

6 
	$¥öt_backw¨d
(
pos
)

8 if(
pos
 =
LEN
)

10 
	`¥öt_backw¨d
(
pos
+1);

11 
	`putch¨
(
buf
[
pos
]);

12 
	}
}

14 
	$maö
()

16 
	`¥öt_backw¨d
(0);

17 
	`putch¨
('\n');

20 
	}
}

	@printf.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

4 
	$maö
()

6 
	`¥ötf
("hello world");

9 
	`_exô
(0);

11 
	}
}

	@random.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	#N
 20

	)

5 
	ga
[
N
];

7 
	$gí_øndom
(
uµî_bound
)

9 
i
;

10 
i
 = 0; i < 
N
; i++)

11 
a
[
i
] = 
	`ønd
(Ë% 
uµî_bound
;

12 
	}
}

14 
	$¥öt_øndom
()

16 
i
;

17 
i
 = 0; i < 
N
; i++)

18 
	`¥ötf
("%d ", 
a
[
i
]);

19 
	`¥ötf
("\n");

20 
	}
}

22 
	$maö
()

24 
	`gí_øndom
(10);

25 
	`¥öt_øndom
();

27 
	}
}

	@reverse_str.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
i
;

6 
°r
[6] = "hello";

7 
ªvî£_°r
[6] = "";

9 
	`¥ötf
("%s\n", 
°r
);

10 
i
 = 0; i < 5; i++)

11 
ªvî£_°r
[5-
i
-1] = 
°r
[i];

12 
	`¥ötf
("%s\n", 
ªvî£_°r
);

14 
	}
}

	@shell.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

4 
	$maö
(
¨gc
,* 
¨gv
[])

6 
cmd
[10];

7 
	`•rötf
(
cmd
,"l†%s",
¨gv
[1]);

8 
	`sy°em
(
cmd
);

10 
	}
}

	@shuzu.c

1 
	~<°dio.h
>

3 
	$maö
(){

4 
a
[10]={11,22,33,44,55,66,77,88,99,100};

5 *
∑
 = &
a
[0];

7 
	`¥ötf
("&a[10]: %x\n",&
a
[10]);

8 
	`¥ötf
("&a[0]: %x\n",&
a
[0]);

9 
	`¥ötf
("&a[1]: %x\n",&
a
[1]);

10 
	`¥ötf
("a: %x\n",
a
);

11 
	`¥ötf
("&a[-1]: %x\n",&
a
[-1]);

13 
	`¥ötf
("a[0]:%d,a[-1]:%d\n",
a
[0],a[-1]);

16 
	}
}

	@statck.c

1 
	~<°dio.h
>

3 
	g°ack
[512];

4 
	gt›
 = 0;

6 
	$push
(
c
)

8 
°ack
[
t›
++] = 
c
;

9 
	}
}

11 
	$p›
()

13  
°ack
[--
t›
];

14 
	}
}

16 
	$is_em±y
()

18  
t›
 == 0;

19 
	}
}

21 
	$maö
()

23 
	`push
('a');

24 
	`push
('b');

25 
	`push
('c');

27 !
	`is_em±y
())

28 
	`putch¨
(
	`p›
());

29 
	`putch¨
('\n');

32 
	}
}

	@swap.c

1 
	~<°dio.h
>

3 *
	$sw≠
(*
px
, *
py
)

5 
ãmp
;

6 
ãmp
 = *
px
;

7 *
px
 = *
py
;

8 *
py
 = 
ãmp
;

9  
px
;

10 
	}
}

12 
	$maö
()

14 
i
 = 10, 
j
 = 20;

15 *
p
 = 
	`sw≠
(&
i
, &
j
);

16 
	`¥ötf
("now i=%d j=%d *p=%d\n", 
i
, 
j
, *
p
);

18 
	}
}

	@test.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gb
;

5 *
	gp
="1111:w";

7 
	$maö
(){

8 
i
;

9 *
q
 =
NULL
;

11 
q
 =&
i
;

12 *
q
 = 12;

13 
	`¥ötf
("%d,%x\n",
a
,&a);

14 
	`¥ötf
("∞addr:%x\n",
p
);

15 
	`¥ötf
("qáddr:%x\n",
q
);

16 
	`¥ötf
("*q vÆ:%d\n",*
q
);

17 
	`¥ötf
("òvÆ:%d\n",
i
);

18 
	`¥ötf
("&òaddr:%x\n",&
i
);

20 
	`¥ötf
("sizeo‡p:%d\n",(
p
));

21 
	`¥ötf
("sizeo‡*p:%d\n",(*
p
));

24 
	}
}

	@test2.c

1 
	~<°dio.h
>

3 
	$func
(*
pv
)

6 *
pch¨
 = 
pv
;

7 *
pch¨
 = 'A';

8 
	}
}

10 
	$maö
()

12 
c
;

13 
	`func
(&
c
);

14 
	`¥ötf
("%c\n", 
c
);

15 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_EACCESS
 0x200

	)

122 
f˙é
 (
__fd
, 
__cmd
, ...);

130 #i‚de‡
__USE_FILE_OFFSET64


131 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

133 #ifde‡
__REDIRECT


134 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

135 
	`__n⁄nuŒ
 ((1));

137 
	#›í
 
›í64


	)

140 #ifde‡
__USE_LARGEFILE64


141 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

144 #ifde‡
__USE_ATFILE


154 #i‚de‡
__USE_FILE_OFFSET64


155 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

156 
	`__n⁄nuŒ
 ((2));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

160 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

162 
	#›í©
 
›í©64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

167 
	`__n⁄nuŒ
 ((2));

176 #i‚de‡
__USE_FILE_OFFSET64


177 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

179 #ifde‡
__REDIRECT


180 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

181 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

183 
	#¸ót
 
¸ót64


	)

186 #ifde‡
__USE_LARGEFILE64


187 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

190 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

191 && !
deföed
 
__USE_POSIX
))

200 
	#F_ULOCK
 0

	)

201 
	#F_LOCK
 1

	)

202 
	#F_TLOCK
 2

	)

203 
	#F_TEST
 3

	)

205 #i‚de‡
__USE_FILE_OFFSET64


206 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

211 
	#lockf
 
lockf64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

219 #ifde‡
__USE_XOPEN2K


222 #i‚de‡
__USE_FILE_OFFSET64


223 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

224 
__advi£
Ë
__THROW
;

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

228 
__off64_t
 
__Àn
, 
__advi£
),

229 
posix_Ádvi£64
);

231 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

236 
__advi£
Ë
__THROW
;

244 #i‚de‡
__USE_FILE_OFFSET64


245 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

249 
__off64_t
 
__Àn
),

250 
posix_ÁŒoˇã64
);

252 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

262 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

263 && 
deföed
 
__va_¨g_∑ck_Àn


264 
	~<bôs/f˙é2.h
>

267 
__END_DECLS


	@/usr/include/gtk/gtk.h

27 #i‚de‡
__GTK_H__


28 
	#__GTK_H__


	)

30 
	#__GTK_H_INSIDE__


	)

32 
	~<gdk/gdk.h
>

33 
	~<gtk/gtkaboutdülog.h
>

34 
	~<gtk/gtkac˚lgroup.h
>

35 
	~<gtk/gtkac˚Œabñ.h
>

36 
	~<gtk/gtkac˚lm≠.h
>

37 
	~<gtk/gtkac˚ssibÀ.h
>

38 
	~<gtk/gtka˘i⁄.h
>

39 
	~<gtk/gtka˘i⁄group.h
>

40 
	~<gtk/gtka˘iv©abÀ.h
>

41 
	~<gtk/gtkadju°mít.h
>

42 
	~<gtk/gtkÆignmít.h
>

43 
	~<gtk/gtk¨row.h
>

44 
	~<gtk/gtka•e˘‰ame.h
>

45 
	~<gtk/gtkassi°™t.h
>

46 
	~<gtk/gtkbbox.h
>

47 
	~<gtk/gtkbö.h
>

48 
	~<gtk/gtkbödögs.h
>

49 
	~<gtk/gtkbox.h
>

50 
	~<gtk/gtkbuûdabÀ.h
>

51 
	~<gtk/gtkbuûdî.h
>

52 
	~<gtk/gtkbuâ⁄.h
>

53 
	~<gtk/gtkˇÀnd¨.h
>

54 
	~<gtk/gtk˚ŒedôabÀ.h
>

55 
	~<gtk/gtk˚Œœyout.h
>

56 
	~<gtk/gtk˚Œªndîî.h
>

57 
	~<gtk/gtk˚Œªndîîac˚l.h
>

58 
	~<gtk/gtk˚Œªndîîcombo.h
>

59 
	~<gtk/gtk˚Œªndîîpixbuf.h
>

60 
	~<gtk/gtk˚Œªndîî¥ogªss.h
>

61 
	~<gtk/gtk˚Œªndîî•ö.h
>

62 
	~<gtk/gtk˚Œªndîî•ö√r.h
>

63 
	~<gtk/gtk˚Œªndîîãxt.h
>

64 
	~<gtk/gtk˚ŒªndîîtoggÀ.h
>

65 
	~<gtk/gtk˚Œvõw.h
>

66 
	~<gtk/gtkcheckbuâ⁄.h
>

67 
	~<gtk/gtkcheckmíuôem.h
>

68 
	~<gtk/gtk˛ùbﬂrd.h
>

69 
	~<gtk/gtkcﬁ‹buâ⁄.h
>

70 
	~<gtk/gtkcﬁ‹£l.h
>

71 
	~<gtk/gtkcﬁ‹£ldülog.h
>

72 
	~<gtk/gtkcombobox.h
>

73 
	~<gtk/gtkcomboboxíåy.h
>

74 
	~<gtk/gtkc⁄èöî.h
>

75 
	~<gtk/gtkdebug.h
>

76 
	~<gtk/gtkdülog.h
>

77 
	~<gtk/gtkdnd.h
>

78 
	~<gtk/gtkdøwög¨ó.h
>

79 
	~<gtk/gtkedôabÀ.h
>

80 
	~<gtk/gtkíåy.h
>

81 
	~<gtk/gtkíåybuf„r.h
>

82 
	~<gtk/gtkíåycom∂ëi⁄.h
>

83 
	~<gtk/gtkíums.h
>

84 
	~<gtk/gtkevítbox.h
>

85 
	~<gtk/gtkex∑ndî.h
>

86 
	~<gtk/gtkfixed.h
>

87 
	~<gtk/gtkfûechoo£r.h
>

88 
	~<gtk/gtkfûechoo£rbuâ⁄.h
>

89 
	~<gtk/gtkfûechoo£rdülog.h
>

90 
	~<gtk/gtkfûechoo£rwidgë.h
>

91 
	~<gtk/gtkfûefûãr.h
>

92 
	~<gtk/gtkf⁄tbuâ⁄.h
>

93 
	~<gtk/gtkf⁄t£l.h
>

94 
	~<gtk/gtk‰ame.h
>

95 
	~<gtk/gtkgc.h
>

96 
	~<gtk/gtkh™dÀbox.h
>

97 
	~<gtk/gtkhbbox.h
>

98 
	~<gtk/gtkhbox.h
>

99 
	~<gtk/gtkh∑√d.h
>

100 
	~<gtk/gtkhruÀr.h
>

101 
	~<gtk/gtkhsˇÀ.h
>

102 
	~<gtk/gtkhs¸ﬁlb¨.h
>

103 
	~<gtk/gtkh£∑øt‹.h
>

104 
	~<gtk/gtkhsv.h
>

105 
	~<gtk/gtkic⁄Á˘‹y.h
>

106 
	~<gtk/gtkic⁄theme.h
>

107 
	~<gtk/gtkic⁄võw.h
>

108 
	~<gtk/gtkimage.h
>

109 
	~<gtk/gtkimagemíuôem.h
>

110 
	~<gtk/gtkimc⁄ãxt.h
>

111 
	~<gtk/gtkimc⁄ãxtsim∂e.h
>

112 
	~<gtk/gtkimmu…ic⁄ãxt.h
>

113 
	~<gtk/gtköfob¨.h
>

114 
	~<gtk/gtkövisibÀ.h
>

115 
	~<gtk/gtkôem.h
>

116 
	~<gtk/gtkœbñ.h
>

117 
	~<gtk/gtkœyout.h
>

118 
	~<gtk/gtklökbuâ⁄.h
>

119 
	~<gtk/gtkli°°‹e.h
>

120 
	~<gtk/gtkmaö.h
>

121 
	~<gtk/gtkmíu.h
>

122 
	~<gtk/gtkmíub¨.h
>

123 
	~<gtk/gtkmíuôem.h
>

124 
	~<gtk/gtkmíushñl.h
>

125 
	~<gtk/gtkmíutoﬁbuâ⁄.h
>

126 
	~<gtk/gtkmesßgedülog.h
>

127 
	~<gtk/gtkmisc.h
>

128 
	~<gtk/gtkmoduÀs.h
>

129 
	~<gtk/gtkmou¡›î©i⁄.h
>

130 
	~<gtk/gtknŸebook.h
>

131 
	~<gtk/gtkobje˘.h
>

132 
	~<gtk/gtkoffs¸ìnwödow.h
>

133 
	~<gtk/gtk‹õ¡abÀ.h
>

134 
	~<gtk/gtk∑ge£tup.h
>

135 
	~<gtk/gtk∑≥rsize.h
>

136 
	~<gtk/gtk∑√d.h
>

137 
	~<gtk/gtk∂ug.h
>

138 
	~<gtk/gtk¥ötc⁄ãxt.h
>

139 
	~<gtk/gtk¥öt›î©i⁄.h
>

140 
	~<gtk/gtk¥öt›î©i⁄¥evõw.h
>

141 
	~<gtk/gtk¥öt£âögs.h
>

142 
	~<gtk/gtk¥ogªssb¨.h
>

143 
	~<gtk/gtkødiﬂ˘i⁄.h
>

144 
	~<gtk/gtkødiobuâ⁄.h
>

145 
	~<gtk/gtkødiomíuôem.h
>

146 
	~<gtk/gtkødiŸoﬁbuâ⁄.h
>

147 
	~<gtk/gtkønge.h
>

148 
	~<gtk/gtkrc.h
>

149 
	~<gtk/gtkª˚¡a˘i⁄.h
>

150 
	~<gtk/gtkª˚¡choo£r.h
>

151 
	~<gtk/gtkª˚¡choo£rdülog.h
>

152 
	~<gtk/gtkª˚¡choo£rmíu.h
>

153 
	~<gtk/gtkª˚¡choo£rwidgë.h
>

154 
	~<gtk/gtkª˚¡fûãr.h
>

155 
	~<gtk/gtkª˚¡m™agî.h
>

156 
	~<gtk/gtkruÀr.h
>

157 
	~<gtk/gtksˇÀ.h
>

158 
	~<gtk/gtksˇÀbuâ⁄.h
>

159 
	~<gtk/gtks¸ﬁlb¨.h
>

160 
	~<gtk/gtks¸ﬁÀdwödow.h
>

161 
	~<gtk/gtk£À˘i⁄.h
>

162 
	~<gtk/gtk£∑øt‹.h
>

163 
	~<gtk/gtk£∑øt‹míuôem.h
>

164 
	~<gtk/gtk£∑øt‹toﬁôem.h
>

165 
	~<gtk/gtk£âögs.h
>

166 
	~<gtk/gtkshow.h
>

167 
	~<gtk/gtksizegroup.h
>

168 
	~<gtk/gtksockë.h
>

169 
	~<gtk/gtk•öbuâ⁄.h
>

170 
	~<gtk/gtk•ö√r.h
>

171 
	~<gtk/gtk°©usb¨.h
>

172 
	~<gtk/gtk°©usic⁄.h
>

173 
	~<gtk/gtk°ock.h
>

174 
	~<gtk/gtk°yÀ.h
>

175 
	~<gtk/gtkèbÀ.h
>

176 
	~<gtk/gtkã¨offmíuôem.h
>

177 
	~<gtk/gtkãxtbuf„r.h
>

178 
	~<gtk/gtkãxtbuf„ºichãxt.h
>

179 
	~<gtk/gtkãxtchûd.h
>

180 
	~<gtk/gtkãxtôî.h
>

181 
	~<gtk/gtkãxtm¨k.h
>

182 
	~<gtk/gtkãxâag.h
>

183 
	~<gtk/gtkãxâagèbÀ.h
>

184 
	~<gtk/gtkãxtvõw.h
>

185 
	~<gtk/gtktoggÀa˘i⁄.h
>

186 
	~<gtk/gtktoggÀbuâ⁄.h
>

187 
	~<gtk/gtktoggÀtoﬁbuâ⁄.h
>

188 
	~<gtk/gtktoﬁb¨.h
>

189 
	~<gtk/gtktoﬁbuâ⁄.h
>

190 
	~<gtk/gtktoﬁôem.h
>

191 
	~<gtk/gtktoﬁôemgroup.h
>

192 
	~<gtk/gtktoﬁ∑Àâe.h
>

193 
	~<gtk/gtktoﬁshñl.h
>

194 
	~<gtk/gtktoﬁtù.h
>

195 
	~<gtk/gtkã°utûs.h
>

196 
	~<gtk/gtkåìdnd.h
>

197 
	~<gtk/gtkåìmodñ.h
>

198 
	~<gtk/gtkåìmodñfûãr.h
>

199 
	~<gtk/gtkåìmodñs‹t.h
>

200 
	~<gtk/gtkåì£À˘i⁄.h
>

201 
	~<gtk/gtkåìs‹èbÀ.h
>

202 
	~<gtk/gtkåì°‹e.h
>

203 
	~<gtk/gtkåìvõw.h
>

204 
	~<gtk/gtkåìvõwcﬁumn.h
>

205 
	~<gtk/gtkty≥utûs.h
>

206 
	~<gtk/gtkuim™agî.h
>

207 
	~<gtk/gtkvbbox.h
>

208 
	~<gtk/gtkvbox.h
>

209 
	~<gtk/gtkvîsi⁄.h
>

210 
	~<gtk/gtkvõwp‹t.h
>

211 
	~<gtk/gtkvﬁumebuâ⁄.h
>

212 
	~<gtk/gtkv∑√d.h
>

213 
	~<gtk/gtkvruÀr.h
>

214 
	~<gtk/gtkvsˇÀ.h
>

215 
	~<gtk/gtkvs¸ﬁlb¨.h
>

216 
	~<gtk/gtkv£∑øt‹.h
>

217 
	~<gtk/gtkwidgë.h
>

218 
	~<gtk/gtkwödow.h
>

221 
	~<gtk/gtkãxt.h
>

222 
	~<gtk/gtkåì.h
>

223 
	~<gtk/gtkåìôem.h
>

226 
	~<gtk/gtk˛i°.h
>

227 
	~<gtk/gtkcombo.h
>

228 
	~<gtk/gtk˘ªe.h
>

229 
	~<gtk/gtkcurve.h
>

230 
	~<gtk/gtkfûe£l.h
>

231 
	~<gtk/gtkgamma.h
>

232 
	~<gtk/gtköputdülog.h
>

233 
	~<gtk/gtkôemÁ˘‹y.h
>

234 
	~<gtk/gtkli°.h
>

235 
	~<gtk/gtkli°ôem.h
>

236 
	~<gtk/gtkﬁdedôabÀ.h
>

237 
	~<gtk/gtk›ti⁄míu.h
>

238 
	~<gtk/gtkpixm≠.h
>

239 
	~<gtk/gtk¥evõw.h
>

240 
	~<gtk/gtk¥ogªss.h
>

241 
	~<gtk/gtksig«l.h
>

242 
	~<gtk/gtktùsquîy.h
>

243 
	~<gtk/gtktoﬁtùs.h
>

245 #unde‡
__GTK_H_INSIDE__


	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_ATMFATE
 0x8884

	)

78 
	#ETH_P_PAE
 0x888E

	)

79 
	#ETH_P_AOE
 0x88A2

	)

80 
	#ETH_P_TIPC
 0x88CA

	)

81 
	#ETH_P_1588
 0x88F7

	)

82 
	#ETH_P_FCOE
 0x8906

	)

83 
	#ETH_P_TDLS
 0x890D

	)

84 
	#ETH_P_FIP
 0x8914

	)

85 
	#ETH_P_EDSA
 0xDADA

	)

86 
	#ETH_P_AF_IUCV
 0xFBFB

	)

88 
	#ETH_P_802_3_MIN
 0x0600

	)

95 
	#ETH_P_802_3
 0x0001

	)

96 
	#ETH_P_AX25
 0x0002

	)

97 
	#ETH_P_ALL
 0x0003

	)

98 
	#ETH_P_802_2
 0x0004

	)

99 
	#ETH_P_SNAP
 0x0005

	)

100 
	#ETH_P_DDCMP
 0x0006

	)

101 
	#ETH_P_WAN_PPP
 0x0007

	)

102 
	#ETH_P_PPP_MP
 0x0008

	)

103 
	#ETH_P_LOCALTALK
 0x0009

	)

104 
	#ETH_P_CAN
 0x000C

	)

105 
	#ETH_P_PPPTALK
 0x0010

	)

106 
	#ETH_P_TR_802_2
 0x0011

	)

107 
	#ETH_P_MOBITEX
 0x0015

	)

108 
	#ETH_P_CONTROL
 0x0016

	)

109 
	#ETH_P_IRDA
 0x0017

	)

110 
	#ETH_P_ECONET
 0x0018

	)

111 
	#ETH_P_HDLC
 0x0019

	)

112 
	#ETH_P_ARCNET
 0x001A

	)

113 
	#ETH_P_DSA
 0x001B

	)

114 
	#ETH_P_TRAILER
 0x001C

	)

115 
	#ETH_P_PHONET
 0x00F5

	)

116 
	#ETH_P_IEEE802154
 0x00F6

	)

122 
	sëhhdr
 {

123 
	mh_de°
[
ETH_ALEN
];

124 
	mh_sour˚
[
ETH_ALEN
];

125 
__be16
 
	mh_¥Ÿo
;

126 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt


8 
	m•kt_Ámûy
;

9 
	m•kt_devi˚
[14];

10 
__be16
 
	m•kt_¥Ÿocﬁ
;

13 
	ssockaddr_Œ


15 
	m¶l_Ámûy
;

16 
__be16
 
	m¶l_¥Ÿocﬁ
;

17 
	m¶l_ifödex
;

18 
	m¶l_h©y≥
;

19 
	m¶l_pkây≥
;

20 
	m¶l_hÆí
;

21 
	m¶l_addr
[8];

26 
	#PACKET_HOST
 0

	)

27 
	#PACKET_BROADCAST
 1

	)

28 
	#PACKET_MULTICAST
 2

	)

29 
	#PACKET_OTHERHOST
 3

	)

30 
	#PACKET_OUTGOING
 4

	)

32 
	#PACKET_LOOPBACK
 5

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_TX_TIMESTAMP
 16

	)

52 
	#PACKET_TIMESTAMP
 17

	)

54 
	sçackë_°©s


56 
	mç_∑ckës
;

57 
	mç_dr›s
;

60 
	sçackë_auxd©a


62 
__u32
 
	mç_°©us
;

63 
__u32
 
	mç_Àn
;

64 
__u32
 
	mç_¢≠Àn
;

65 
__u16
 
	mç_mac
;

66 
__u16
 
	mç_√t
;

67 
__u16
 
	mç_vœn_tci
;

68 
__u16
 
	mç_∑ddög
;

72 
	#TP_STATUS_KERNEL
 0x0

	)

73 
	#TP_STATUS_USER
 0x1

	)

74 
	#TP_STATUS_COPY
 0x2

	)

75 
	#TP_STATUS_LOSING
 0x4

	)

76 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

79 
	#TP_STATUS_AVAILABLE
 0x0

	)

80 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

81 
	#TP_STATUS_SENDING
 0x2

	)

82 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

84 
	sçackë_hdr


86 
	mç_°©us
;

87 
	mç_Àn
;

88 
	mç_¢≠Àn
;

89 
	mç_mac
;

90 
	mç_√t
;

91 
	mç_£c
;

92 
	mç_u£c
;

95 
	#TPACKET_ALIGNMENT
 16

	)

96 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

97 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

99 
	sçackë2_hdr


101 
__u32
 
	mç_°©us
;

102 
__u32
 
	mç_Àn
;

103 
__u32
 
	mç_¢≠Àn
;

104 
__u16
 
	mç_mac
;

105 
__u16
 
	mç_√t
;

106 
__u32
 
	mç_£c
;

107 
__u32
 
	mç_n£c
;

108 
__u16
 
	mç_vœn_tci
;

109 
__u16
 
	mç_∑ddög
;

112 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

114 
	eçackë_vîsi⁄s


116 
	mTPACKET_V1
,

117 
	mTPACKET_V2
,

133 
	sçackë_ªq


135 
	mç_block_size
;

136 
	mç_block_ƒ
;

137 
	mç_‰ame_size
;

138 
	mç_‰ame_ƒ
;

141 
	s∑ckë_mªq


143 
	mmr_ifödex
;

144 
	mmr_ty≥
;

145 
	mmr_Æí
;

146 
	mmr_addªss
[8];

149 
	#PACKET_MR_MULTICAST
 0

	)

150 
	#PACKET_MR_PROMISC
 1

	)

151 
	#PACKET_MR_ALLMULTI
 2

	)

152 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/net/ethernet.h

22 #i‚de‡
__NET_ETHERNET_H


23 
	#__NET_ETHERNET_H
 1

	)

25 
	~<sys/cdefs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<löux/if_ëhî.h
>

29 
__BEGIN_DECLS


33 
	sëhî_addr


35 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

36 } 
__©åibuã__
 ((
__∑cked__
));

39 
	sëhî_hódî


41 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

42 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

43 
u_öt16_t
 
	mëhî_ty≥
;

44 } 
__©åibuã__
 ((
__∑cked__
));

47 
	#ETHERTYPE_PUP
 0x0200

	)

48 
	#ETHERTYPE_SPRITE
 0x0500

	)

49 
	#ETHERTYPE_IP
 0x0800

	)

50 
	#ETHERTYPE_ARP
 0x0806

	)

51 
	#ETHERTYPE_REVARP
 0x8035

	)

52 
	#ETHERTYPE_AT
 0x809B

	)

53 
	#ETHERTYPE_AARP
 0x80F3

	)

54 
	#ETHERTYPE_VLAN
 0x8100

	)

55 
	#ETHERTYPE_IPX
 0x8137

	)

56 
	#ETHERTYPE_IPV6
 0x86dd

	)

57 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

60 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

61 
	#ETHER_TYPE_LEN
 2

	)

62 
	#ETHER_CRC_LEN
 4

	)

63 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

64 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

65 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

68 
	#ETHER_IS_VALID_LEN
(
foo
) \

69 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

76 
	#ETHERTYPE_TRAIL
 0x1000

	)

77 
	#ETHERTYPE_NTRAILER
 16

	)

79 
	#ETHERMTU
 
ETH_DATA_LEN


	)

80 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

82 
	g__END_DECLS


	@/usr/include/net/if.h

20 #i‚de‡
_NET_IF_H


21 
	#_NET_IF_H
 1

	)

23 
	~<„©uªs.h
>

25 #ifde‡
__USE_MISC


26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

32 
	#IF_NAMESIZE
 16

	)

34 
	sif_«meödex


36 
	mif_ödex
;

37 *
	mif_«me
;

41 #ifde‡
__USE_MISC


45 
	mIFF_UP
 = 0x1,

46 
	#IFF_UP
 
IFF_UP


	)

47 
	mIFF_BROADCAST
 = 0x2,

48 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

49 
	mIFF_DEBUG
 = 0x4,

50 
	#IFF_DEBUG
 
IFF_DEBUG


	)

51 
	mIFF_LOOPBACK
 = 0x8,

52 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

53 
	mIFF_POINTOPOINT
 = 0x10,

54 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

55 
	mIFF_NOTRAILERS
 = 0x20,

56 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

57 
	mIFF_RUNNING
 = 0x40,

58 
	#IFF_RUNNING
 
IFF_RUNNING


	)

59 
	mIFF_NOARP
 = 0x80,

60 
	#IFF_NOARP
 
IFF_NOARP


	)

61 
	mIFF_PROMISC
 = 0x100,

62 
	#IFF_PROMISC
 
IFF_PROMISC


	)

65 
	mIFF_ALLMULTI
 = 0x200,

66 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

68 
	mIFF_MASTER
 = 0x400,

69 
	#IFF_MASTER
 
IFF_MASTER


	)

70 
	mIFF_SLAVE
 = 0x800,

71 
	#IFF_SLAVE
 
IFF_SLAVE


	)

73 
	mIFF_MULTICAST
 = 0x1000,

74 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

76 
	mIFF_PORTSEL
 = 0x2000,

77 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

78 
	mIFF_AUTOMEDIA
 = 0x4000,

79 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

80 
	mIFF_DYNAMIC
 = 0x8000

81 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

89 
	siÁddr


91 
sockaddr
 
	miÁ_addr
;

94 
sockaddr
 
	mifu_brﬂdaddr
;

95 
sockaddr
 
	mifu_d°addr
;

96 } 
	miÁ_ifu
;

97 
iÁ˚
 *
	miÁ_iÂ
;

98 
iÁddr
 *
	miÁ_√xt
;

101 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

102 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

112 
	sifm≠


114 
	mmem_°¨t
;

115 
	mmem_íd
;

116 
	mba£_addr
;

117 
	múq
;

118 
	mdma
;

119 
	mp‹t
;

127 
	si‰eq


129 
	#IFHWADDRLEN
 6

	)

130 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

133 
	mi‰n_«me
[
IFNAMSIZ
];

134 } 
	mi‰_i‰n
;

138 
sockaddr
 
	mi‰u_addr
;

139 
sockaddr
 
	mi‰u_d°addr
;

140 
sockaddr
 
	mi‰u_brﬂdaddr
;

141 
sockaddr
 
	mi‰u_√tmask
;

142 
sockaddr
 
	mi‰u_hwaddr
;

143 
	mi‰u_Êags
;

144 
	mi‰u_ivÆue
;

145 
	mi‰u_mtu
;

146 
ifm≠
 
	mi‰u_m≠
;

147 
	mi‰u_¶ave
[
IFNAMSIZ
];

148 
	mi‰u_√w«me
[
IFNAMSIZ
];

149 
__ˇddr_t
 
	mi‰u_d©a
;

150 } 
	mi‰_i‰u
;

152 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

153 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

154 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

155 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

156 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

157 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

158 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

159 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

161 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

162 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

163 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

164 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

167 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

168 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

169 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

170 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

177 
	sifc⁄f


179 
	mifc_Àn
;

182 
__ˇddr_t
 
	mifcu_buf
;

183 
i‰eq
 *
	mifcu_ªq
;

184 } 
	mifc_ifcu
;

186 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

187 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

188 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

191 
__BEGIN_DECLS


194 
	$if_«mëoödex
 (
__c⁄°
 *
__i‚ame
Ë
__THROW
;

195 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

198 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

201 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/netinet/ip.h

20 #i‚de‡
__NETINET_IP_H


21 
	#__NETINET_IP_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

28 
__BEGIN_DECLS


30 
	stime°amp


32 
u_öt8_t
 
	mÀn
;

33 
u_öt8_t
 
	m±r
;

34 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


35 
	mÊags
:4;

36 
	movîÊow
:4;

37 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


38 
	movîÊow
:4;

39 
	mÊags
:4;

43 
u_öt32_t
 
	md©a
[9];

46 
	sùhdr


48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	mihl
:4;

50 
	mvîsi⁄
:4;

51 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


52 
	mvîsi⁄
:4;

53 
	mihl
:4;

57 
u_öt8_t
 
	mtos
;

58 
u_öt16_t
 
	mtŸ_Àn
;

59 
u_öt16_t
 
	mid
;

60 
u_öt16_t
 
	m‰ag_off
;

61 
u_öt8_t
 
	mâl
;

62 
u_öt8_t
 
	m¥Ÿocﬁ
;

63 
u_öt16_t
 
	mcheck
;

64 
u_öt32_t
 
	mßddr
;

65 
u_öt32_t
 
	mdaddr
;

69 #ifde‡
__USE_BSD


109 
	sù


111 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


112 
	mù_hl
:4;

113 
	mù_v
:4;

115 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


116 
	mù_v
:4;

117 
	mù_hl
:4;

119 
u_öt8_t
 
	mù_tos
;

120 
u_sh‹t
 
	mù_Àn
;

121 
u_sh‹t
 
	mù_id
;

122 
u_sh‹t
 
	mù_off
;

123 
	#IP_RF
 0x8000

	)

124 
	#IP_DF
 0x4000

	)

125 
	#IP_MF
 0x2000

	)

126 
	#IP_OFFMASK
 0x1ff‡

	)

127 
u_öt8_t
 
	mù_âl
;

128 
u_öt8_t
 
	mù_p
;

129 
u_sh‹t
 
	mù_sum
;

130 
ö_addr
 
	mù_§c
, 
	mù_d°
;

136 
	sù_time°amp


138 
u_öt8_t
 
	mùt_code
;

139 
u_öt8_t
 
	mùt_Àn
;

140 
u_öt8_t
 
	mùt_±r
;

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	mùt_Êg
:4;

143 
	mùt_oÊw
:4;

145 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


146 
	mùt_oÊw
:4;

147 
	mùt_Êg
:4;

149 
u_öt32_t
 
	md©a
[9];

153 
	#IPVERSION
 4

	)

154 
	#IP_MAXPACKET
 65535

	)

162 
	#IPTOS_ECN_MASK
 0x03

	)

163 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

164 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

165 
	#IPTOS_ECN_ECT1
 0x01

	)

166 
	#IPTOS_ECN_ECT0
 0x02

	)

167 
	#IPTOS_ECN_CE
 0x03

	)

175 
	#IPTOS_DSCP_MASK
 0xfc

	)

176 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

177 
	#IPTOS_DSCP_AF11
 0x28

	)

178 
	#IPTOS_DSCP_AF12
 0x30

	)

179 
	#IPTOS_DSCP_AF13
 0x38

	)

180 
	#IPTOS_DSCP_AF21
 0x48

	)

181 
	#IPTOS_DSCP_AF22
 0x50

	)

182 
	#IPTOS_DSCP_AF23
 0x58

	)

183 
	#IPTOS_DSCP_AF31
 0x68

	)

184 
	#IPTOS_DSCP_AF32
 0x70

	)

185 
	#IPTOS_DSCP_AF33
 0x78

	)

186 
	#IPTOS_DSCP_AF41
 0x88

	)

187 
	#IPTOS_DSCP_AF42
 0x90

	)

188 
	#IPTOS_DSCP_AF43
 0x98

	)

189 
	#IPTOS_DSCP_EF
 0xb8

	)

196 
	#IPTOS_CLASS_MASK
 0xe0

	)

197 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

198 
	#IPTOS_CLASS_CS0
 0x00

	)

199 
	#IPTOS_CLASS_CS1
 0x20

	)

200 
	#IPTOS_CLASS_CS2
 0x40

	)

201 
	#IPTOS_CLASS_CS3
 0x60

	)

202 
	#IPTOS_CLASS_CS4
 0x80

	)

203 
	#IPTOS_CLASS_CS5
 0xa0

	)

204 
	#IPTOS_CLASS_CS6
 0xc0

	)

205 
	#IPTOS_CLASS_CS7
 0xe0

	)

207 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

213 
	#IPTOS_TOS_MASK
 0x1E

	)

214 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

215 
	#IPTOS_LOWDELAY
 0x10

	)

216 
	#IPTOS_THROUGHPUT
 0x08

	)

217 
	#IPTOS_RELIABILITY
 0x04

	)

218 
	#IPTOS_LOWCOST
 0x02

	)

219 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

224 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

225 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

226 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

227 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

228 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

229 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

230 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

231 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

232 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

233 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

238 
	#IPOPT_COPY
 0x80

	)

239 
	#IPOPT_CLASS_MASK
 0x60

	)

240 
	#IPOPT_NUMBER_MASK
 0x1f

	)

242 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

243 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

244 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

246 
	#IPOPT_CONTROL
 0x00

	)

247 
	#IPOPT_RESERVED1
 0x20

	)

248 
	#IPOPT_DEBMEAS
 0x40

	)

249 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

250 
	#IPOPT_RESERVED2
 0x60

	)

252 
	#IPOPT_EOL
 0

	)

253 
	#IPOPT_END
 
IPOPT_EOL


	)

254 
	#IPOPT_NOP
 1

	)

255 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

257 
	#IPOPT_RR
 7

	)

258 
	#IPOPT_TS
 68

	)

259 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

260 
	#IPOPT_SECURITY
 130

	)

261 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

262 
	#IPOPT_LSRR
 131

	)

263 
	#IPOPT_SATID
 136

	)

264 
	#IPOPT_SID
 
IPOPT_SATID


	)

265 
	#IPOPT_SSRR
 137

	)

266 
	#IPOPT_RA
 148

	)

271 
	#IPOPT_OPTVAL
 0

	)

272 
	#IPOPT_OLEN
 1

	)

273 
	#IPOPT_OFFSET
 2

	)

274 
	#IPOPT_MINOFF
 4

	)

276 
	#MAX_IPOPTLEN
 40

	)

279 
	#IPOPT_TS_TSONLY
 0

	)

280 
	#IPOPT_TS_TSANDADDR
 1

	)

281 
	#IPOPT_TS_PRESPEC
 3

	)

284 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

285 
	#IPOPT_SECUR_CONFID
 0xf135

	)

286 
	#IPOPT_SECUR_EFTO
 0x789a

	)

287 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

288 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

289 
	#IPOPT_SECUR_SECRET
 0xd788

	)

290 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

295 
	#MAXTTL
 255

	)

296 
	#IPDEFTTL
 64

	)

297 
	#IPFRAGTTL
 60

	)

298 
	#IPTTLDEC
 1

	)

300 
	#IP_MSS
 576

	)

302 
	g__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

250 
	g__BEGIN_DECLS


252 #ifde‡
__USE_GNU


255 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

256 
__THROW
;

260 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

261 
__Êags
);

265 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

266 
size_t
 
__cou¡
, 
__Êags
);

269 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

270 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

271 
__Êags
);

274 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

275 
__Êags
);

278 #i‚de‡
__USE_FILE_OFFSET64


279 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

281 #ifde‡
__REDIRECT


282 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

283 
__off64_t
 
__Àn
),

284 
ÁŒoˇã64
);

286 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

289 #ifde‡
__USE_LARGEFILE64


290 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
);

295 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

73 
	#IP_MULTICAST_ALL
 49

	)

76 
	#IP_ORIGDSTADDR
 20

	)

77 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

79 
	#IP_MINTTL
 21

	)

83 
	#IP_PMTUDISC_DONT
 0

	)

84 
	#IP_PMTUDISC_WANT
 1

	)

85 
	#IP_PMTUDISC_DO
 2

	)

86 
	#IP_PMTUDISC_PROBE
 3

	)

89 
	#SOL_IP
 0

	)

91 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

92 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

93 
	#IP_MAX_MEMBERSHIPS
 20

	)

95 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


99 
	sù_›ts


101 
ö_addr
 
	mù_d°
;

102 
	mù_›ts
[40];

106 
	sù_mªqn


108 
ö_addr
 
	mimr_mu…üddr
;

109 
ö_addr
 
	mimr_addªss
;

110 
	mimr_ifödex
;

114 
	sö_pktöfo


116 
	mùi_ifödex
;

117 
ö_addr
 
	mùi_•ec_d°
;

118 
ö_addr
 
	mùi_addr
;

125 
	#IPV6_ADDRFORM
 1

	)

126 
	#IPV6_2292PKTINFO
 2

	)

127 
	#IPV6_2292HOPOPTS
 3

	)

128 
	#IPV6_2292DSTOPTS
 4

	)

129 
	#IPV6_2292RTHDR
 5

	)

130 
	#IPV6_2292PKTOPTIONS
 6

	)

131 
	#IPV6_CHECKSUM
 7

	)

132 
	#IPV6_2292HOPLIMIT
 8

	)

134 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

136 
	#IPV6_NEXTHOP
 9

	)

137 
	#IPV6_AUTHHDR
 10

	)

138 
	#IPV6_UNICAST_HOPS
 16

	)

139 
	#IPV6_MULTICAST_IF
 17

	)

140 
	#IPV6_MULTICAST_HOPS
 18

	)

141 
	#IPV6_MULTICAST_LOOP
 19

	)

142 
	#IPV6_JOIN_GROUP
 20

	)

143 
	#IPV6_LEAVE_GROUP
 21

	)

144 
	#IPV6_ROUTER_ALERT
 22

	)

145 
	#IPV6_MTU_DISCOVER
 23

	)

146 
	#IPV6_MTU
 24

	)

147 
	#IPV6_RECVERR
 25

	)

148 
	#IPV6_V6ONLY
 26

	)

149 
	#IPV6_JOIN_ANYCAST
 27

	)

150 
	#IPV6_LEAVE_ANYCAST
 28

	)

151 
	#IPV6_IPSEC_POLICY
 34

	)

152 
	#IPV6_XFRM_POLICY
 35

	)

154 
	#IPV6_RECVPKTINFO
 49

	)

155 
	#IPV6_PKTINFO
 50

	)

156 
	#IPV6_RECVHOPLIMIT
 51

	)

157 
	#IPV6_HOPLIMIT
 52

	)

158 
	#IPV6_RECVHOPOPTS
 53

	)

159 
	#IPV6_HOPOPTS
 54

	)

160 
	#IPV6_RTHDRDSTOPTS
 55

	)

161 
	#IPV6_RECVRTHDR
 56

	)

162 
	#IPV6_RTHDR
 57

	)

163 
	#IPV6_RECVDSTOPTS
 58

	)

164 
	#IPV6_DSTOPTS
 59

	)

166 
	#IPV6_RECVTCLASS
 66

	)

167 
	#IPV6_TCLASS
 67

	)

170 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

171 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

172 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

173 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

176 
	#IPV6_PMTUDISC_DONT
 0

	)

177 
	#IPV6_PMTUDISC_WANT
 1

	)

178 
	#IPV6_PMTUDISC_DO
 2

	)

179 
	#IPV6_PMTUDISC_PROBE
 3

	)

182 
	#SOL_IPV6
 41

	)

183 
	#SOL_ICMPV6
 58

	)

186 
	#IPV6_RTHDR_LOOSE
 0

	)

187 
	#IPV6_RTHDR_STRICT
 1

	)

189 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

68 
	#MAP_HUGETLB
 0x40000

	)

72 
	#MS_ASYNC
 1

	)

73 
	#MS_SYNC
 4

	)

74 
	#MS_INVALIDATE
 2

	)

77 
	#MCL_CURRENT
 1

	)

78 
	#MCL_FUTURE
 2

	)

82 #ifde‡
__USE_GNU


83 
	#MREMAP_MAYMOVE
 1

	)

84 
	#MREMAP_FIXED
 2

	)

88 #ifde‡
__USE_BSD


89 
	#MADV_NORMAL
 0

	)

90 
	#MADV_RANDOM
 1

	)

91 
	#MADV_SEQUENTIAL
 2

	)

92 
	#MADV_WILLNEED
 3

	)

93 
	#MADV_DONTNEED
 4

	)

94 
	#MADV_REMOVE
 9

	)

95 
	#MADV_DONTFORK
 10

	)

96 
	#MADV_DOFORK
 11

	)

97 
	#MADV_MERGEABLE
 12

	)

98 
	#MADV_UNMERGEABLE
 13

	)

99 
	#MADV_DONTDUMP
 16

	)

101 
	#MADV_DODUMP
 17

	)

102 
	#MADV_HWPOISON
 100

	)

106 #ifde‡
__USE_XOPEN2K


107 
	#POSIX_MADV_NORMAL
 0

	)

108 
	#POSIX_MADV_RANDOM
 1

	)

109 
	#POSIX_MADV_SEQUENTIAL
 2

	)

110 
	#POSIX_MADV_WILLNEED
 3

	)

111 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

235 
	mMSG_WAITFORONE
 = 0x10000,

236 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

238 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

241 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

247 
	smsghdr


249 *
	mmsg_«me
;

250 
sockÀn_t
 
	mmsg_«mñí
;

252 
iovec
 *
	mmsg_iov
;

253 
size_t
 
	mmsg_iovÀn
;

255 *
	mmsg_c⁄åﬁ
;

256 
size_t
 
	mmsg_c⁄åﬁÀn
;

261 
	mmsg_Êags
;

264 #ifde‡
__USE_GNU


266 
	smmsghdr


268 
msghdr
 
	mmsg_hdr
;

269 
	mmsg_Àn
;

274 
	scmsghdr


276 
size_t
 
	mcmsg_Àn
;

281 
	mcmsg_Àvñ
;

282 
	mcmsg_ty≥
;

283 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

284 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

292 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

294 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

295 
	#CMSG_FIRSTHDR
(
mhdr
) \

296 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

297 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

298 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

299 & (
size_t
Ë~( (size_tË- 1))

	)

300 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

301 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

302 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

304 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

305 
cmsghdr
 *
__cmsg
Ë
__THROW
;

306 #ifde‡
__USE_EXTERN_INLINES


307 #i‚de‡
_EXTERN_INLINE


308 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

310 
_EXTERN_INLINE
 
cmsghdr
 *

311 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

313 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

317 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

318 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

319 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


320 + 
__mhdr
->
msg_c⁄åﬁÀn
)

321 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

322 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

325  
__cmsg
;

326 
	}
}

333 
	mSCM_RIGHTS
 = 0x01

334 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

335 #ifde‡
__USE_GNU


336 , 
	mSCM_CREDENTIALS
 = 0x02

337 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

341 #ifde‡
__USE_GNU


343 
	su¸ed


345 
pid_t
 
	mpid
;

346 
uid_t
 
	muid
;

347 
gid_t
 
	mgid
;

352 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


353 #i‚de‡
FIOGETOWN


354 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

356 #i‚de‡
FIOSETOWN


357 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

359 #i‚de‡
SIOCATMARK


360 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

362 #i‚de‡
SIOCGPGRP


363 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

365 #i‚de‡
SIOCGSTAMP


366 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

368 #i‚de‡
SIOCGSTAMPNS


369 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

371 #i‚de‡
SIOCSPGRP


372 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

377 
	~<asm/sockë.h
>

379 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


380 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


381 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


382 #unde‡
FIOGETOWN


384 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


385 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


386 #unde‡
FIOSETOWN


388 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


389 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


390 #unde‡
SIOCATMARK


392 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


393 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


394 #unde‡
SIOCGPGRP


396 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


397 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


398 #unde‡
SIOCGSTAMP


400 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


401 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


402 #unde‡
SIOCGSTAMPNS


404 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


405 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


406 #unde‡
SIOCSPGRP


411 
	slögî


413 
	ml_⁄off
;

414 
	ml_lögî
;

418 
__BEGIN_DECLS


425 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

426 
__vÀn
, 
__Êags
,

427 
__c⁄°
 
time•ec
 *
__tmo
);

429 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gtk/gtkaboutdialog.h

25 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

29 #i‚de‡
__GTK_ABOUT_DIALOG_H__


30 
	#__GTK_ABOUT_DIALOG_H__


	)

32 
	~<gtk/gtkdülog.h
>

34 
	gG_BEGIN_DECLS


36 
	#GTK_TYPE_ABOUT_DIALOG
 (
	`gtk_about_dülog_gë_ty≥
 ())

	)

37 
	#GTK_ABOUT_DIALOG
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_ABOUT_DIALOG
, 
GtkAboutDülog
))

	)

38 
	#GTK_ABOUT_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ABOUT_DIALOG
, 
GtkAboutDülogCœss
))

	)

39 
	#GTK_IS_ABOUT_DIALOG
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_ABOUT_DIALOG
))

	)

40 
	#GTK_IS_ABOUT_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ABOUT_DIALOG
))

	)

41 
	#GTK_ABOUT_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ABOUT_DIALOG
, 
GtkAboutDülogCœss
))

	)

43 
_GtkAboutDülog
 
	tGtkAboutDülog
;

44 
_GtkAboutDülogCœss
 
	tGtkAboutDülogCœss
;

52 
	s_GtkAboutDülog


54 
GtkDülog
 
	m∑ª¡_ö°™˚
;

57 
gpoöãr
 
GSEAL
 (
¥iv©e_d©a
);

60 
	s_GtkAboutDülogCœss


62 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

65 (*
	m_gtk_ª£rved1
) ();

66 (*
	m_gtk_ª£rved2
) ();

67 (*
	m_gtk_ª£rved3
) ();

68 (*
	m_gtk_ª£rved4
) ();

71 
GTy≥
 
	$gtk_about_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

72 
GtkWidgë
 *
	`gtk_about_dülog_√w
 ();

73 
	$gtk_show_about_dülog
 (
GtkWödow
 *
∑ª¡
,

74 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

75 ...Ë
G_GNUC_NULL_TERMINATED
;

77 #i‚de‡
GTK_DISABLE_DEPRECATED


78 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_«me
 (
GtkAboutDülog
 *
about
);

79 
	`gtk_about_dülog_£t_«me
 (
GtkAboutDülog
 *
about
,

80 c⁄° 
gch¨
 *
«me
);

82 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_¥ogøm_«me
 (
GtkAboutDülog
 *
about
);

83 
	`gtk_about_dülog_£t_¥ogøm_«me
 (
GtkAboutDülog
 *
about
,

84 c⁄° 
gch¨
 *
«me
);

85 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_vîsi⁄
 (
GtkAboutDülog
 *
about
);

86 
	`gtk_about_dülog_£t_vîsi⁄
 (
GtkAboutDülog
 *
about
,

87 c⁄° 
gch¨
 *
vîsi⁄
);

88 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_c›yright
 (
GtkAboutDülog
 *
about
);

89 
	`gtk_about_dülog_£t_c›yright
 (
GtkAboutDülog
 *
about
,

90 c⁄° 
gch¨
 *
c›yright
);

91 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_commíts
 (
GtkAboutDülog
 *
about
);

92 
	`gtk_about_dülog_£t_commíts
 (
GtkAboutDülog
 *
about
,

93 c⁄° 
gch¨
 *
commíts
);

94 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_li˚n£
 (
GtkAboutDülog
 *
about
);

95 
	`gtk_about_dülog_£t_li˚n£
 (
GtkAboutDülog
 *
about
,

96 c⁄° 
gch¨
 *
li˚n£
);

98 
gboﬁón
 
	`gtk_about_dülog_gë_wøp_li˚n£
 (
GtkAboutDülog
 *
about
);

99 
	`gtk_about_dülog_£t_wøp_li˚n£
 (
GtkAboutDülog
 *
about
,

100 
gboﬁón
 
wøp_li˚n£
);

102 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_websôe
 (
GtkAboutDülog
 *
about
);

103 
	`gtk_about_dülog_£t_websôe
 (
GtkAboutDülog
 *
about
,

104 c⁄° 
gch¨
 *
websôe
);

105 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_websôe_œbñ
 (
GtkAboutDülog
 *
about
);

106 
	`gtk_about_dülog_£t_websôe_œbñ
 (
GtkAboutDülog
 *
about
,

107 c⁄° 
gch¨
 *
websôe_œbñ
);

108 
G_CONST_RETURN
 
gch¨
* G_CONST_RETURN * 
	`gtk_about_dülog_gë_auth‹s
 (
GtkAboutDülog
 *
about
);

109 
	`gtk_about_dülog_£t_auth‹s
 (
GtkAboutDülog
 *
about
,

110 c⁄° 
gch¨
 **
auth‹s
);

111 
G_CONST_RETURN
 
gch¨
* G_CONST_RETURN * 
	`gtk_about_dülog_gë_documíãrs
 (
GtkAboutDülog
 *
about
);

112 
	`gtk_about_dülog_£t_documíãrs
 (
GtkAboutDülog
 *
about
,

113 c⁄° 
gch¨
 **
documíãrs
);

114 
G_CONST_RETURN
 
gch¨
* G_CONST_RETURN * 
	`gtk_about_dülog_gë_¨ti°s
 (
GtkAboutDülog
 *
about
);

115 
	`gtk_about_dülog_£t_¨ti°s
 (
GtkAboutDülog
 *
about
,

116 c⁄° 
gch¨
 **
¨ti°s
);

117 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_å™¶©‹_¸edôs
 (
GtkAboutDülog
 *
about
);

118 
	`gtk_about_dülog_£t_å™¶©‹_¸edôs
 (
GtkAboutDülog
 *
about
,

119 c⁄° 
gch¨
 *
å™¶©‹_¸edôs
);

120 
GdkPixbuf
 *
	`gtk_about_dülog_gë_logo
 (
GtkAboutDülog
 *
about
);

121 
	`gtk_about_dülog_£t_logo
 (
GtkAboutDülog
 *
about
,

122 
GdkPixbuf
 *
logo
);

123 
G_CONST_RETURN
 
gch¨
 *
	`gtk_about_dülog_gë_logo_ic⁄_«me
 (
GtkAboutDülog
 *
about
);

124 
	`gtk_about_dülog_£t_logo_ic⁄_«me
 (
GtkAboutDülog
 *
about
,

125 c⁄° 
gch¨
 *
ic⁄_«me
);

138 (* 
	tGtkAboutDülogA˘iv©eLökFunc
Ë(
	tGtkAboutDülog
 *
	tabout
,

139 c⁄° 
	tgch¨
 *
	tlök_
,

140 
	tgpoöãr
 
	td©a
);

142 
GtkAboutDülogA˘iv©eLökFunc
 
	`gtk_about_dülog_£t_emaû_hook
 (GtkAboutDülogA˘iv©eLökFun¯
func
,

143 
gpoöãr
 
d©a
,

144 
GDe°royNŸify
 
de°roy
);

145 
GtkAboutDülogA˘iv©eLökFunc
 
	`gtk_about_dülog_£t_uæ_hook
 (GtkAboutDülogA˘iv©eLökFun¯
func
,

146 
gpoöãr
 
d©a
,

147 
GDe°royNŸify
 
de°roy
);

149 
G_END_DECLS


	@/usr/include/gtk/gtkaccelgroup.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ACCEL_GROUP_H__


32 
	#__GTK_ACCEL_GROUP_H__


	)

35 
	~<gdk/gdk.h
>

36 
	~<gtk/gtkíums.h
>

38 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_ACCEL_GROUP
 (
	`gtk_ac˚l_group_gë_ty≥
 ())

	)

43 
	#GTK_ACCEL_GROUP
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_ACCEL_GROUP
, 
GtkAc˚lGroup
))

	)

44 
	#GTK_ACCEL_GROUP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ACCEL_GROUP
, 
GtkAc˚lGroupCœss
))

	)

45 
	#GTK_IS_ACCEL_GROUP
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_ACCEL_GROUP
))

	)

46 
	#GTK_IS_ACCEL_GROUP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ACCEL_GROUP
))

	)

47 
	#GTK_ACCEL_GROUP_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ACCEL_GROUP
, 
GtkAc˚lGroupCœss
))

	)

53 
	mGTK_ACCEL_VISIBLE
 = 1 << 0,

54 
	mGTK_ACCEL_LOCKED
 = 1 << 1,

55 
	mGTK_ACCEL_MASK
 = 0x07

56 } 
	tGtkAc˚lFœgs
;

60 
_GtkAc˚lGroup
 
	tGtkAc˚lGroup
;

61 
_GtkAc˚lGroupCœss
 
	tGtkAc˚lGroupCœss
;

62 
_GtkAc˚lKey
 
	tGtkAc˚lKey
;

63 
_GtkAc˚lGroupE¡ry
 
	tGtkAc˚lGroupE¡ry
;

64 
	$gboﬁón
 (*
	tGtkAc˚lGroupA˘iv©e
Ë(
	tGtkAc˚lGroup
 *
	tac˚l_group
,

65 
	tGObje˘
 *
	tac˚ÀøèbÀ
,

66 
	tguöt
 
	tkeyvÆ
,

67 
	tGdkModifõrTy≥
 
	tmodifõr
);

77 
	$gboﬁón
 (*
	tGtkAc˚lGroupFödFunc
Ë(
	tGtkAc˚lKey
 *
	tkey
,

78 
	tGClosuª
 *
	t˛osuª
,

79 
	tgpoöãr
 
	td©a
);

86 
	s_GtkAc˚lGroup


88 
GObje˘
 
∑ª¡
;

90 
guöt
 
	`GSEAL
 (
lock_cou¡
);

91 
GdkModifõrTy≥
 
	`GSEAL
 (
modifõr_mask
);

92 
GSLi°
 *
	`GSEAL
 (
ac˚ÀøèbÀs
);

93 
guöt
 
	`GSEAL
 (
n_ac˚ls
);

94 
GtkAc˚lGroupE¡ry
 *
	`GSEAL
 (
¥iv_ac˚ls
);

97 
	s_GtkAc˚lGroupCœss


99 
GObje˘Cœss
 
∑ª¡_˛ass
;

101 (*
ac˚l_ch™ged
Ë(
GtkAc˚lGroup
 *
ac˚l_group
,

102 
guöt
 
keyvÆ
,

103 
GdkModifõrTy≥
 
modifõr
,

104 
GClosuª
 *
ac˚l_˛osuª
);

107 (*
_gtk_ª£rved1
) ();

108 (*
_gtk_ª£rved2
) ();

109 (*
_gtk_ª£rved3
) ();

110 (*
_gtk_ª£rved4
) ();

113 
	s_GtkAc˚lKey


115 
guöt
 
ac˚l_key
;

116 
GdkModifõrTy≥
 
ac˚l_mods
;

117 
guöt
 
ac˚l_Êags
 : 16;

122 
GTy≥
 
	$gtk_ac˚l_group_gë_ty≥
 (Ë
G_GNUC_CONST
;

123 
GtkAc˚lGroup
* 
	`gtk_ac˚l_group_√w
 ();

124 
gboﬁón
 
	`gtk_ac˚l_group_gë_is_locked
 (
GtkAc˚lGroup
 *
ac˚l_group
);

125 
GdkModifõrTy≥


126 
	`gtk_ac˚l_group_gë_modifõr_mask
 (
GtkAc˚lGroup
 *
ac˚l_group
);

127 
	`gtk_ac˚l_group_lock
 (
GtkAc˚lGroup
 *
ac˚l_group
);

128 
	`gtk_ac˚l_group_u∆ock
 (
GtkAc˚lGroup
 *
ac˚l_group
);

129 
	`gtk_ac˚l_group_c⁄√˘
 (
GtkAc˚lGroup
 *
ac˚l_group
,

130 
guöt
 
ac˚l_key
,

131 
GdkModifõrTy≥
 
ac˚l_mods
,

132 
GtkAc˚lFœgs
 
ac˚l_Êags
,

133 
GClosuª
 *
˛osuª
);

134 
	`gtk_ac˚l_group_c⁄√˘_by_∑th
 (
GtkAc˚lGroup
 *
ac˚l_group
,

135 c⁄° 
gch¨
 *
ac˚l_∑th
,

136 
GClosuª
 *
˛osuª
);

137 
gboﬁón
 
	`gtk_ac˚l_group_disc⁄√˘
 (
GtkAc˚lGroup
 *
ac˚l_group
,

138 
GClosuª
 *
˛osuª
);

139 
gboﬁón
 
	`gtk_ac˚l_group_disc⁄√˘_key
 (
GtkAc˚lGroup
 *
ac˚l_group
,

140 
guöt
 
ac˚l_key
,

141 
GdkModifõrTy≥
 
ac˚l_mods
);

142 
gboﬁón
 
	`gtk_ac˚l_group_a˘iv©e
 (
GtkAc˚lGroup
 *
ac˚l_group
,

143 
GQu¨k
 
ac˚l_qu¨k
,

144 
GObje˘
 *
ac˚ÀøèbÀ
,

145 
guöt
 
ac˚l_key
,

146 
GdkModifõrTy≥
 
ac˚l_mods
);

150 
	`_gtk_ac˚l_group_©èch
 (
GtkAc˚lGroup
 *
ac˚l_group
,

151 
GObje˘
 *
obje˘
);

152 
	`_gtk_ac˚l_group_dëach
 (
GtkAc˚lGroup
 *
ac˚l_group
,

153 
GObje˘
 *
obje˘
);

154 
gboﬁón
 
	`gtk_ac˚l_groups_a˘iv©e
 (
GObje˘
 *
obje˘
,

155 
guöt
 
ac˚l_key
,

156 
GdkModifõrTy≥
 
ac˚l_mods
);

157 
GSLi°
* 
	`gtk_ac˚l_groups_‰om_obje˘
 (
GObje˘
 *
obje˘
);

158 
GtkAc˚lKey
* 
	`gtk_ac˚l_group_föd
 (
GtkAc˚lGroup
 *
ac˚l_group
,

159 
GtkAc˚lGroupFödFunc
 
föd_func
,

160 
gpoöãr
 
d©a
);

161 
GtkAc˚lGroup
* 
	`gtk_ac˚l_group_‰om_ac˚l_˛osuª
 (
GClosuª
 *
˛osuª
);

165 
gboﬁón
 
	$gtk_ac˚Àøt‹_vÆid
 (
guöt
 
keyvÆ
,

166 
GdkModifõrTy≥
 
modifõrs
Ë
G_GNUC_CONST
;

167 
	`gtk_ac˚Àøt‹_∑r£
 (c⁄° 
gch¨
 *
ac˚Àøt‹
,

168 
guöt
 *
ac˚Àøt‹_key
,

169 
GdkModifõrTy≥
 *
ac˚Àøt‹_mods
);

170 
gch¨
* 
	`gtk_ac˚Àøt‹_«me
 (
guöt
 
ac˚Àøt‹_key
,

171 
GdkModifõrTy≥
 
ac˚Àøt‹_mods
);

172 
gch¨
* 
	`gtk_ac˚Àøt‹_gë_œbñ
 (
guöt
 
ac˚Àøt‹_key
,

173 
GdkModifõrTy≥
 
ac˚Àøt‹_mods
);

174 
	`gtk_ac˚Àøt‹_£t_deÁu…_mod_mask
 (
GdkModifõrTy≥
 
deÁu…_mod_mask
);

175 
guöt
 
	`gtk_ac˚Àøt‹_gë_deÁu…_mod_mask
 ();

179 
GtkAc˚lGroupE¡ry
* 
	`gtk_ac˚l_group_quîy
 (
GtkAc˚lGroup
 *
ac˚l_group
,

180 
guöt
 
ac˚l_key
,

181 
GdkModifõrTy≥
 
ac˚l_mods
,

182 
guöt
 *
n_íåõs
);

184 
	`_gtk_ac˚l_group_ªc⁄√˘
 (
GtkAc˚lGroup
 *
ac˚l_group
,

185 
GQu¨k
 
ac˚l_∑th_qu¨k
);

187 
	s_GtkAc˚lGroupE¡ry


189 
GtkAc˚lKey
 
key
;

190 
GClosuª
 *
˛osuª
;

191 
GQu¨k
 
ac˚l_∑th_qu¨k
;

195 #i‚de‡
GTK_DISABLE_DEPRECATED


203 
	#gtk_ac˚l_group_ªf
 
g_obje˘_ªf


	)

210 
	#gtk_ac˚l_group_uƒef
 
g_obje˘_uƒef


	)

213 
G_END_DECLS


	@/usr/include/gtk/gtkaccellabel.h

30 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

34 #i‚de‡
__GTK_ACCEL_LABEL_H__


35 
	#__GTK_ACCEL_LABEL_H__


	)

38 
	~<gtk/gtkœbñ.h
>

41 
	gG_BEGIN_DECLS


43 
	#GTK_TYPE_ACCEL_LABEL
 (
	`gtk_ac˚l_œbñ_gë_ty≥
 ())

	)

44 
	#GTK_ACCEL_LABEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ACCEL_LABEL
, 
GtkAc˚lLabñ
))

	)

45 
	#GTK_ACCEL_LABEL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ACCEL_LABEL
, 
GtkAc˚lLabñCœss
))

	)

46 
	#GTK_IS_ACCEL_LABEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ACCEL_LABEL
))

	)

47 
	#GTK_IS_ACCEL_LABEL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ACCEL_LABEL
))

	)

48 
	#GTK_ACCEL_LABEL_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ACCEL_LABEL
, 
GtkAc˚lLabñCœss
))

	)

51 
_GtkAc˚lLabñ
 
	tGtkAc˚lLabñ
;

52 
_GtkAc˚lLabñCœss
 
	tGtkAc˚lLabñCœss
;

60 
	s_GtkAc˚lLabñ


62 
GtkLabñ
 
	mœbñ
;

64 
guöt
 
GSEAL
 (
gtk_ª£rved
);

65 
guöt
 
GSEAL
 (
ac˚l_∑ddög
);

66 
GtkWidgë
 *
GSEAL
 (
ac˚l_widgë
);

67 
GClosuª
 *
GSEAL
 (
ac˚l_˛osuª
);

68 
GtkAc˚lGroup
 *
GSEAL
 (
ac˚l_group
);

69 
gch¨
 *
GSEAL
 (
ac˚l_°rög
);

70 
guöt16
 
GSEAL
 (
ac˚l_°rög_width
);

73 
	s_GtkAc˚lLabñCœss


75 
GtkLabñCœss
 
	m∑ª¡_˛ass
;

77 
gch¨
 *
	msig«l_quŸe1
;

78 
gch¨
 *
	msig«l_quŸe2
;

79 
gch¨
 *
	mmod_«me_shi·
;

80 
gch¨
 *
	mmod_«me_c⁄åﬁ
;

81 
gch¨
 *
	mmod_«me_Æt
;

82 
gch¨
 *
	mmod_£∑øt‹
;

83 
gch¨
 *
	mac˚l_£≥øt‹
;

84 
guöt
 
	mœtö1_to_ch¨
 : 1;

87 (*
	m_gtk_ª£rved1
) ();

88 (*
	m_gtk_ª£rved2
) ();

89 (*
	m_gtk_ª£rved3
) ();

90 (*
	m_gtk_ª£rved4
) ();

93 #i‚de‡
GTK_DISABLE_DEPRECATED


94 
	#gtk_ac˚l_œbñ_ac˚Àøt‹_width
 
gtk_ac˚l_œbñ_gë_ac˚l_width


	)

97 
GTy≥
 
	$gtk_ac˚l_œbñ_gë_ty≥
 (Ë
G_GNUC_CONST
;

98 
GtkWidgë
* 
	`gtk_ac˚l_œbñ_√w
 (c⁄° 
gch¨
 *
°rög
);

99 
GtkWidgë
* 
	`gtk_ac˚l_œbñ_gë_ac˚l_widgë
 (
GtkAc˚lLabñ
 *
ac˚l_œbñ
);

100 
guöt
 
	`gtk_ac˚l_œbñ_gë_ac˚l_width
 (
GtkAc˚lLabñ
 *
ac˚l_œbñ
);

101 
	`gtk_ac˚l_œbñ_£t_ac˚l_widgë
 (
GtkAc˚lLabñ
 *
ac˚l_œbñ
,

102 
GtkWidgë
 *
ac˚l_widgë
);

103 
	`gtk_ac˚l_œbñ_£t_ac˚l_˛osuª
 (
GtkAc˚lLabñ
 *
ac˚l_œbñ
,

104 
GClosuª
 *
ac˚l_˛osuª
);

105 
gboﬁón
 
	`gtk_ac˚l_œbñ_ª„tch
 (
GtkAc˚lLabñ
 *
ac˚l_œbñ
);

108 
gch¨
 * 
	`_gtk_ac˚l_œbñ_˛ass_gë_ac˚Àøt‹_œbñ
 (
GtkAc˚lLabñCœss
 *
kœss
,

109 
guöt
 
ac˚Àøt‹_key
,

110 
GdkModifõrTy≥
 
ac˚Àøt‹_mods
);

112 
G_END_DECLS


	@/usr/include/gtk/gtkaccelmap.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_ACCEL_MAP_H__


25 
	#__GTK_ACCEL_MAP_H__


	)

28 
	~<gtk/gtkac˚lgroup.h
>

30 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_ACCEL_MAP
 (
	`gtk_ac˚l_m≠_gë_ty≥
 ())

	)

34 
	#GTK_ACCEL_MAP
(
ac˚l_m≠
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 (◊c˚l_m≠), 
GTK_TYPE_ACCEL_MAP
, 
GtkAc˚lM≠
))

	)

35 
	#GTK_ACCEL_MAP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ACCEL_MAP
, 
GtkAc˚lM≠Cœss
))

	)

36 
	#GTK_IS_ACCEL_MAP
(
ac˚l_m≠
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 (◊c˚l_m≠), 
GTK_TYPE_ACCEL_MAP
))

	)

37 
	#GTK_IS_ACCEL_MAP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ACCEL_MAP
))

	)

38 
	#GTK_ACCEL_MAP_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ACCEL_MAP
, 
GtkAc˚lM≠Cœss
))

	)

40 
_GtkAc˚lM≠
 
	tGtkAc˚lM≠
;

41 
_GtkAc˚lM≠Cœss
 
	tGtkAc˚lM≠Cœss
;

44 (*
	tGtkAc˚lM≠F‹óch
Ë(
	tgpoöãr
 
	td©a
,

45 c⁄° 
	tgch¨
 *
	tac˚l_∑th
,

46 
	tguöt
 
	tac˚l_key
,

47 
	tGdkModifõrTy≥
 
	tac˚l_mods
,

48 
	tgboﬁón
 
	tch™ged
);

53 #ifde‡
G_OS_WIN32


55 
	#gtk_ac˚l_m≠_lﬂd
 
gtk_ac˚l_m≠_lﬂd_utf8


	)

56 
	#gtk_ac˚l_m≠_ßve
 
gtk_ac˚l_m≠_ßve_utf8


	)

59 
	`gtk_ac˚l_m≠_add_íåy
 (c⁄° 
gch¨
 *
ac˚l_∑th
,

60 
guöt
 
ac˚l_key
,

61 
GdkModifõrTy≥
 
ac˚l_mods
);

62 
gboﬁón
 
	`gtk_ac˚l_m≠_lookup_íåy
 (c⁄° 
gch¨
 *
ac˚l_∑th
,

63 
GtkAc˚lKey
 *
key
);

64 
gboﬁón
 
	`gtk_ac˚l_m≠_ch™ge_íåy
 (c⁄° 
gch¨
 *
ac˚l_∑th
,

65 
guöt
 
ac˚l_key
,

66 
GdkModifõrTy≥
 
ac˚l_mods
,

67 
gboﬁón
 
ª∂a˚
);

68 
	`gtk_ac˚l_m≠_lﬂd
 (c⁄° 
gch¨
 *
fûe_«me
);

69 
	`gtk_ac˚l_m≠_ßve
 (c⁄° 
gch¨
 *
fûe_«me
);

70 
	`gtk_ac˚l_m≠_f‹óch
 (
gpoöãr
 
d©a
,

71 
GtkAc˚lM≠F‹óch
 
f‹óch_func
);

72 
	`gtk_ac˚l_m≠_lﬂd_fd
 (
göt
 
fd
);

73 
	`gtk_ac˚l_m≠_lﬂd_sˇ¬î
 (
GSˇ¬î
 *
sˇ¬î
);

74 
	`gtk_ac˚l_m≠_ßve_fd
 (
göt
 
fd
);

76 
	`gtk_ac˚l_m≠_lock_∑th
 (c⁄° 
gch¨
 *
ac˚l_∑th
);

77 
	`gtk_ac˚l_m≠_u∆ock_∑th
 (c⁄° 
gch¨
 *
ac˚l_∑th
);

80 
	`gtk_ac˚l_m≠_add_fûãr
 (c⁄° 
gch¨
 *
fûãr_∑âîn
);

81 
	`gtk_ac˚l_m≠_f‹óch_unfûãªd
 (
gpoöãr
 
d©a
,

82 
GtkAc˚lM≠F‹óch
 
f‹óch_func
);

85 
GTy≥
 
	$gtk_ac˚l_m≠_gë_ty≥
 (Ë
G_GNUC_CONST
;

86 
GtkAc˚lM≠
 *
	`gtk_ac˚l_m≠_gë
 ();

90 
	`_gtk_ac˚l_m≠_öô
 ();

92 
	`_gtk_ac˚l_m≠_add_group
 (c⁄° 
gch¨
 *
ac˚l_∑th
,

93 
GtkAc˚lGroup
 *
ac˚l_group
);

94 
	`_gtk_ac˚l_m≠_ªmove_group
 (c⁄° 
gch¨
 *
ac˚l_∑th
,

95 
GtkAc˚lGroup
 *
ac˚l_group
);

96 
gboﬁón
 
	`_gtk_ac˚l_∑th_is_vÆid
 (c⁄° 
gch¨
 *
ac˚l_∑th
);

99 
G_END_DECLS


	@/usr/include/gtk/gtkaccessible.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_ACCESSIBLE_H__


25 
	#__GTK_ACCESSIBLE_H__


	)

27 
	~<©k/©k.h
>

28 
	~<gtk/gtkwidgë.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_ACCESSIBLE
 (
	`gtk_ac˚ssibÀ_gë_ty≥
 ())

	)

33 
	#GTK_ACCESSIBLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ACCESSIBLE
, 
GtkAc˚ssibÀ
))

	)

34 
	#GTK_ACCESSIBLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ACCESSIBLE
, 
GtkAc˚ssibÀCœss
))

	)

35 
	#GTK_IS_ACCESSIBLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ACCESSIBLE
))

	)

36 
	#GTK_IS_ACCESSIBLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ACCESSIBLE
))

	)

37 
	#GTK_ACCESSIBLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ACCESSIBLE
, 
GtkAc˚ssibÀCœss
))

	)

39 
_GtkAc˚ssibÀ
 
	tGtkAc˚ssibÀ
;

40 
_GtkAc˚ssibÀCœss
 
	tGtkAc˚ssibÀCœss
;

45 
	s_GtkAc˚ssibÀ


47 
AtkObje˘
 
	m∑ª¡
;

53 
GtkWidgë
 *
GSEAL
 (
widgë
);

56 
	s_GtkAc˚ssibÀCœss


58 
AtkObje˘Cœss
 
	m∑ª¡_˛ass
;

60 (*
	mc⁄√˘_widgë_de°royed
Ë(
GtkAc˚ssibÀ
 *
	mac˚ssibÀ
);

63 (*
	m_gtk_ª£rved1
) ();

64 (*
	m_gtk_ª£rved2
) ();

65 (*
	m_gtk_ª£rved3
) ();

66 (*
	m_gtk_ª£rved4
) ();

69 
GTy≥
 
	$gtk_ac˚ssibÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

71 
	`gtk_ac˚ssibÀ_c⁄√˘_widgë_de°royed
 (
GtkAc˚ssibÀ
 *
ac˚ssibÀ
);

73 
G_END_DECLS


	@/usr/include/gtk/gtkaction.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_ACTION_H__


36 
	#__GTK_ACTION_H__


	)

38 
	~<gtk/gtkwidgë.h
>

40 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_ACTION
 (
	`gtk_a˘i⁄_gë_ty≥
 ())

	)

43 
	#GTK_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ACTION
, 
GtkA˘i⁄
))

	)

44 
	#GTK_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ACTION
, 
GtkA˘i⁄Cœss
))

	)

45 
	#GTK_IS_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ACTION
))

	)

46 
	#GTK_IS_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ACTION
))

	)

47 
	#GTK_ACTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_ACTION
, 
GtkA˘i⁄Cœss
))

	)

49 
_GtkA˘i⁄
 
	tGtkA˘i⁄
;

50 
_GtkA˘i⁄Cœss
 
	tGtkA˘i⁄Cœss
;

51 
_GtkA˘i⁄Priv©e
 
	tGtkA˘i⁄Priv©e
;

53 
	s_GtkA˘i⁄


55 
GObje˘
 
	mobje˘
;

59 
GtkA˘i⁄Priv©e
 *
GSEAL
 (
¥iv©e_d©a
);

62 
	s_GtkA˘i⁄Cœss


64 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

67 (* 
	ma˘iv©e
Ë(
GtkA˘i⁄
 *
	ma˘i⁄
);

69 
GTy≥
 
	mmíu_ôem_ty≥
;

70 
GTy≥
 
	mtoﬁb¨_ôem_ty≥
;

73 
	mGtkWidgë
 *(* 
	m¸óã_míu_ôem
Ë(
GtkA˘i⁄
 *
	ma˘i⁄
);

74 
	mGtkWidgë
 *(* 
	m¸óã_toﬁ_ôem
Ë(
GtkA˘i⁄
 *
	ma˘i⁄
);

75 (* 
	mc⁄√˘_¥oxy
Ë(
GtkA˘i⁄
 *
	ma˘i⁄
,

76 
GtkWidgë
 *
	m¥oxy
);

77 (* 
	mdisc⁄√˘_¥oxy
Ë(
GtkA˘i⁄
 *
	ma˘i⁄
,

78 
GtkWidgë
 *
	m¥oxy
);

80 
	mGtkWidgë
 *(* 
	m¸óã_míu
Ë(
GtkA˘i⁄
 *
	ma˘i⁄
);

83 (*
	m_gtk_ª£rved2
) ();

84 (*
	m_gtk_ª£rved3
) ();

85 (*
	m_gtk_ª£rved4
) ();

88 
GTy≥
 
	$gtk_a˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
GtkA˘i⁄
 *
	`gtk_a˘i⁄_√w
 (c⁄° 
gch¨
 *
«me
,

90 c⁄° 
gch¨
 *
œbñ
,

91 c⁄° 
gch¨
 *
toﬁtù
,

92 c⁄° 
gch¨
 *
°ock_id
);

93 
G_CONST_RETURN
 
gch¨
* 
	`gtk_a˘i⁄_gë_«me
 (
GtkA˘i⁄
 *
a˘i⁄
);

94 
gboﬁón
 
	`gtk_a˘i⁄_is_£nsôive
 (
GtkA˘i⁄
 *
a˘i⁄
);

95 
gboﬁón
 
	`gtk_a˘i⁄_gë_£nsôive
 (
GtkA˘i⁄
 *
a˘i⁄
);

96 
	`gtk_a˘i⁄_£t_£nsôive
 (
GtkA˘i⁄
 *
a˘i⁄
,

97 
gboﬁón
 
£nsôive
);

98 
gboﬁón
 
	`gtk_a˘i⁄_is_visibÀ
 (
GtkA˘i⁄
 *
a˘i⁄
);

99 
gboﬁón
 
	`gtk_a˘i⁄_gë_visibÀ
 (
GtkA˘i⁄
 *
a˘i⁄
);

100 
	`gtk_a˘i⁄_£t_visibÀ
 (
GtkA˘i⁄
 *
a˘i⁄
,

101 
gboﬁón
 
visibÀ
);

102 
	`gtk_a˘i⁄_a˘iv©e
 (
GtkA˘i⁄
 *
a˘i⁄
);

103 
GtkWidgë
 * 
	`gtk_a˘i⁄_¸óã_ic⁄
 (
GtkA˘i⁄
 *
a˘i⁄
,

104 
GtkIc⁄Size
 
ic⁄_size
);

105 
GtkWidgë
 * 
	`gtk_a˘i⁄_¸óã_míu_ôem
 (
GtkA˘i⁄
 *
a˘i⁄
);

106 
GtkWidgë
 * 
	`gtk_a˘i⁄_¸óã_toﬁ_ôem
 (
GtkA˘i⁄
 *
a˘i⁄
);

107 
GtkWidgë
 * 
	`gtk_a˘i⁄_¸óã_míu
 (
GtkA˘i⁄
 *
a˘i⁄
);

108 
GSLi°
 * 
	`gtk_a˘i⁄_gë_¥oxõs
 (
GtkA˘i⁄
 *
a˘i⁄
);

109 
	`gtk_a˘i⁄_c⁄√˘_ac˚Àøt‹
 (
GtkA˘i⁄
 *
a˘i⁄
);

110 
	`gtk_a˘i⁄_disc⁄√˘_ac˚Àøt‹
 (
GtkA˘i⁄
 *
a˘i⁄
);

111 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_gë_ac˚l_∑th
 (
GtkA˘i⁄
 *
a˘i⁄
);

112 
GClosuª
 *
	`gtk_a˘i⁄_gë_ac˚l_˛osuª
 (
GtkA˘i⁄
 *
a˘i⁄
);

114 #i‚de‡
GTK_DISABLE_DEPRECATED


115 
GtkA˘i⁄
 *
	`gtk_widgë_gë_a˘i⁄
 (
GtkWidgë
 *
widgë
);

116 
	`gtk_a˘i⁄_c⁄√˘_¥oxy
 (
GtkA˘i⁄
 *
a˘i⁄
,

117 
GtkWidgë
 *
¥oxy
);

118 
	`gtk_a˘i⁄_disc⁄√˘_¥oxy
 (
GtkA˘i⁄
 *
a˘i⁄
,

119 
GtkWidgë
 *
¥oxy
);

120 
	`gtk_a˘i⁄_block_a˘iv©e_‰om
 (
GtkA˘i⁄
 *
a˘i⁄
,

121 
GtkWidgë
 *
¥oxy
);

122 
	`gtk_a˘i⁄_unblock_a˘iv©e_‰om
 (
GtkA˘i⁄
 *
a˘i⁄
,

123 
GtkWidgë
 *
¥oxy
);

125 
	`gtk_a˘i⁄_block_a˘iv©e
 (
GtkA˘i⁄
 *
a˘i⁄
);

126 
	`gtk_a˘i⁄_unblock_a˘iv©e
 (
GtkA˘i⁄
 *
a˘i⁄
);

129 
	`_gtk_a˘i⁄_add_to_¥oxy_li°
 (
GtkA˘i⁄
 *
a˘i⁄
,

130 
GtkWidgë
 *
¥oxy
);

131 
	`_gtk_a˘i⁄_ªmove_‰om_¥oxy_li°
(
GtkA˘i⁄
 *
a˘i⁄
,

132 
GtkWidgë
 *
¥oxy
);

135 
	`_gtk_a˘i⁄_emô_a˘iv©e
 (
GtkA˘i⁄
 *
a˘i⁄
);

138 
	`gtk_a˘i⁄_£t_ac˚l_∑th
 (
GtkA˘i⁄
 *
a˘i⁄
,

139 c⁄° 
gch¨
 *
ac˚l_∑th
);

140 
	`gtk_a˘i⁄_£t_ac˚l_group
 (
GtkA˘i⁄
 *
a˘i⁄
,

141 
GtkAc˚lGroup
 *
ac˚l_group
);

142 
	`_gtk_a˘i⁄_sync_míu_visibÀ
 (
GtkA˘i⁄
 *
a˘i⁄
,

143 
GtkWidgë
 *
¥oxy
,

144 
gboﬁón
 
em±y
);

146 
	`gtk_a˘i⁄_£t_œbñ
 (
GtkA˘i⁄
 *
a˘i⁄
,

147 c⁄° 
gch¨
 *
œbñ
);

148 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_gë_œbñ
 (
GtkA˘i⁄
 *
a˘i⁄
);

149 
	`gtk_a˘i⁄_£t_sh‹t_œbñ
 (
GtkA˘i⁄
 *
a˘i⁄
,

150 c⁄° 
gch¨
 *
sh‹t_œbñ
);

151 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_gë_sh‹t_œbñ
 (
GtkA˘i⁄
 *
a˘i⁄
);

152 
	`gtk_a˘i⁄_£t_toﬁtù
 (
GtkA˘i⁄
 *
a˘i⁄
,

153 c⁄° 
gch¨
 *
toﬁtù
);

154 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_gë_toﬁtù
 (
GtkA˘i⁄
 *
a˘i⁄
);

155 
	`gtk_a˘i⁄_£t_°ock_id
 (
GtkA˘i⁄
 *
a˘i⁄
,

156 c⁄° 
gch¨
 *
°ock_id
);

157 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_gë_°ock_id
 (
GtkA˘i⁄
 *
a˘i⁄
);

158 
	`gtk_a˘i⁄_£t_gic⁄
 (
GtkA˘i⁄
 *
a˘i⁄
,

159 
GIc⁄
 *
ic⁄
);

160 
GIc⁄
 *
	`gtk_a˘i⁄_gë_gic⁄
 (
GtkA˘i⁄
 *
a˘i⁄
);

161 
	`gtk_a˘i⁄_£t_ic⁄_«me
 (
GtkA˘i⁄
 *
a˘i⁄
,

162 c⁄° 
gch¨
 *
ic⁄_«me
);

163 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_gë_ic⁄_«me
 (
GtkA˘i⁄
 *
a˘i⁄
);

164 
	`gtk_a˘i⁄_£t_visibÀ_h‹iz⁄èl
 (
GtkA˘i⁄
 *
a˘i⁄
,

165 
gboﬁón
 
visibÀ_h‹iz⁄èl
);

166 
gboﬁón
 
	`gtk_a˘i⁄_gë_visibÀ_h‹iz⁄èl
 (
GtkA˘i⁄
 *
a˘i⁄
);

167 
	`gtk_a˘i⁄_£t_visibÀ_vîtiˇl
 (
GtkA˘i⁄
 *
a˘i⁄
,

168 
gboﬁón
 
visibÀ_vîtiˇl
);

169 
gboﬁón
 
	`gtk_a˘i⁄_gë_visibÀ_vîtiˇl
 (
GtkA˘i⁄
 *
a˘i⁄
);

170 
	`gtk_a˘i⁄_£t_is_imp‹è¡
 (
GtkA˘i⁄
 *
a˘i⁄
,

171 
gboﬁón
 
is_imp‹è¡
);

172 
gboﬁón
 
	`gtk_a˘i⁄_gë_is_imp‹è¡
 (
GtkA˘i⁄
 *
a˘i⁄
);

173 
	`gtk_a˘i⁄_£t_Æways_show_image
 (
GtkA˘i⁄
 *
a˘i⁄
,

174 
gboﬁón
 
Æways_show
);

175 
gboﬁón
 
	`gtk_a˘i⁄_gë_Æways_show_image
 (
GtkA˘i⁄
 *
a˘i⁄
);

178 
G_END_DECLS


	@/usr/include/gtk/gtkactiongroup.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_ACTION_GROUP_H__


36 
	#__GTK_ACTION_GROUP_H__


	)

38 
	~<gtk/gtka˘i⁄.h
>

39 
	~<gtk/gtkty≥utûs.h
>

41 
	gG_BEGIN_DECLS


43 
	#GTK_TYPE_ACTION_GROUP
 (
	`gtk_a˘i⁄_group_gë_ty≥
 ())

	)

44 
	#GTK_ACTION_GROUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ACTION_GROUP
, 
GtkA˘i⁄Group
))

	)

45 
	#GTK_ACTION_GROUP_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((vèbÀ), 
GTK_TYPE_ACTION_GROUP
, 
GtkA˘i⁄GroupCœss
))

	)

46 
	#GTK_IS_ACTION_GROUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ACTION_GROUP
))

	)

47 
	#GTK_IS_ACTION_GROUP_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((vèbÀ), 
GTK_TYPE_ACTION_GROUP
))

	)

48 
	#GTK_ACTION_GROUP_GET_CLASS
(
ö°
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((ö°), 
GTK_TYPE_ACTION_GROUP
, 
GtkA˘i⁄GroupCœss
))

	)

50 
_GtkA˘i⁄Group
 
	tGtkA˘i⁄Group
;

51 
_GtkA˘i⁄GroupPriv©e
 
	tGtkA˘i⁄GroupPriv©e
;

52 
_GtkA˘i⁄GroupCœss
 
	tGtkA˘i⁄GroupCœss
;

53 
_GtkA˘i⁄E¡ry
 
	tGtkA˘i⁄E¡ry
;

54 
_GtkToggÀA˘i⁄E¡ry
 
	tGtkToggÀA˘i⁄E¡ry
;

55 
_GtkRadioA˘i⁄E¡ry
 
	tGtkRadioA˘i⁄E¡ry
;

57 
	s_GtkA˘i⁄Group


59 
GObje˘
 
	m∑ª¡
;

63 
GtkA˘i⁄GroupPriv©e
 *
GSEAL
 (
¥iv©e_d©a
);

66 
	s_GtkA˘i⁄GroupCœss


68 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

70 
	mGtkA˘i⁄
 *(* 
	mgë_a˘i⁄
Ë(
GtkA˘i⁄Group
 *
	ma˘i⁄_group
,

71 c⁄° 
gch¨
 *
	ma˘i⁄_«me
);

74 (*
	m_gtk_ª£rved1
) ();

75 (*
	m_gtk_ª£rved2
) ();

76 (*
	m_gtk_ª£rved3
) ();

77 (*
	m_gtk_ª£rved4
) ();

80 
	s_GtkA˘i⁄E¡ry


82 c⁄° 
gch¨
 *
	m«me
;

83 c⁄° 
gch¨
 *
	m°ock_id
;

84 c⁄° 
gch¨
 *
	mœbñ
;

85 c⁄° 
gch¨
 *
	mac˚Àøt‹
;

86 c⁄° 
gch¨
 *
	mtoﬁtù
;

87 
GCÆlback
 
	mˇŒback
;

90 
	s_GtkToggÀA˘i⁄E¡ry


92 c⁄° 
gch¨
 *
	m«me
;

93 c⁄° 
gch¨
 *
	m°ock_id
;

94 c⁄° 
gch¨
 *
	mœbñ
;

95 c⁄° 
gch¨
 *
	mac˚Àøt‹
;

96 c⁄° 
gch¨
 *
	mtoﬁtù
;

97 
GCÆlback
 
	mˇŒback
;

98 
gboﬁón
 
	mis_a˘ive
;

101 
	s_GtkRadioA˘i⁄E¡ry


103 c⁄° 
gch¨
 *
	m«me
;

104 c⁄° 
gch¨
 *
	m°ock_id
;

105 c⁄° 
gch¨
 *
	mœbñ
;

106 c⁄° 
gch¨
 *
	mac˚Àøt‹
;

107 c⁄° 
gch¨
 *
	mtoﬁtù
;

108 
göt
 
	mvÆue
;

111 
GTy≥
 
	$gtk_a˘i⁄_group_gë_ty≥
 (Ë
G_GNUC_CONST
;

112 
GtkA˘i⁄Group
 *
	`gtk_a˘i⁄_group_√w
 (c⁄° 
gch¨
 *
«me
);

113 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_group_gë_«me
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
);

114 
gboﬁón
 
	`gtk_a˘i⁄_group_gë_£nsôive
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
);

115 
	`gtk_a˘i⁄_group_£t_£nsôive
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

116 
gboﬁón
 
£nsôive
);

117 
gboﬁón
 
	`gtk_a˘i⁄_group_gë_visibÀ
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
);

118 
	`gtk_a˘i⁄_group_£t_visibÀ
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

119 
gboﬁón
 
visibÀ
);

120 
GtkA˘i⁄
 *
	`gtk_a˘i⁄_group_gë_a˘i⁄
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

121 c⁄° 
gch¨
 *
a˘i⁄_«me
);

122 
GLi°
 *
	`gtk_a˘i⁄_group_li°_a˘i⁄s
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
);

123 
	`gtk_a˘i⁄_group_add_a˘i⁄
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

124 
GtkA˘i⁄
 *
a˘i⁄
);

125 
	`gtk_a˘i⁄_group_add_a˘i⁄_wôh_ac˚l
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

126 
GtkA˘i⁄
 *
a˘i⁄
,

127 c⁄° 
gch¨
 *
ac˚Àøt‹
);

128 
	`gtk_a˘i⁄_group_ªmove_a˘i⁄
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

129 
GtkA˘i⁄
 *
a˘i⁄
);

130 
	`gtk_a˘i⁄_group_add_a˘i⁄s
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

131 c⁄° 
GtkA˘i⁄E¡ry
 *
íåõs
,

132 
guöt
 
n_íåõs
,

133 
gpoöãr
 
u£r_d©a
);

134 
	`gtk_a˘i⁄_group_add_toggÀ_a˘i⁄s
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

135 c⁄° 
GtkToggÀA˘i⁄E¡ry
 *
íåõs
,

136 
guöt
 
n_íåõs
,

137 
gpoöãr
 
u£r_d©a
);

138 
	`gtk_a˘i⁄_group_add_ødio_a˘i⁄s
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

139 c⁄° 
GtkRadioA˘i⁄E¡ry
 *
íåõs
,

140 
guöt
 
n_íåõs
,

141 
göt
 
vÆue
,

142 
GCÆlback
 
⁄_ch™ge
,

143 
gpoöãr
 
u£r_d©a
);

144 
	`gtk_a˘i⁄_group_add_a˘i⁄s_fuŒ
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

145 c⁄° 
GtkA˘i⁄E¡ry
 *
íåõs
,

146 
guöt
 
n_íåõs
,

147 
gpoöãr
 
u£r_d©a
,

148 
GDe°royNŸify
 
de°roy
);

149 
	`gtk_a˘i⁄_group_add_toggÀ_a˘i⁄s_fuŒ
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

150 c⁄° 
GtkToggÀA˘i⁄E¡ry
 *
íåõs
,

151 
guöt
 
n_íåõs
,

152 
gpoöãr
 
u£r_d©a
,

153 
GDe°royNŸify
 
de°roy
);

154 
	`gtk_a˘i⁄_group_add_ødio_a˘i⁄s_fuŒ
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

155 c⁄° 
GtkRadioA˘i⁄E¡ry
 *
íåõs
,

156 
guöt
 
n_íåõs
,

157 
göt
 
vÆue
,

158 
GCÆlback
 
⁄_ch™ge
,

159 
gpoöãr
 
u£r_d©a
,

160 
GDe°royNŸify
 
de°roy
);

161 
	`gtk_a˘i⁄_group_£t_å™¶©e_func
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

162 
GtkTøn¶©eFunc
 
func
,

163 
gpoöãr
 
d©a
,

164 
GDe°royNŸify
 
nŸify
);

165 
	`gtk_a˘i⁄_group_£t_å™¶©i⁄_domaö
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

166 c⁄° 
gch¨
 *
domaö
);

167 
G_CONST_RETURN
 
gch¨
 *
	`gtk_a˘i⁄_group_å™¶©e_°rög
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

168 c⁄° 
gch¨
 *
°rög
);

171 
	`_gtk_a˘i⁄_group_emô_c⁄√˘_¥oxy
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

172 
GtkA˘i⁄
 *
a˘i⁄
,

173 
GtkWidgë
 *
¥oxy
);

174 
	`_gtk_a˘i⁄_group_emô_disc⁄√˘_¥oxy
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

175 
GtkA˘i⁄
 *
a˘i⁄
,

176 
GtkWidgë
 *
¥oxy
);

177 
	`_gtk_a˘i⁄_group_emô_¥e_a˘iv©e
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

178 
GtkA˘i⁄
 *
a˘i⁄
);

179 
	`_gtk_a˘i⁄_group_emô_po°_a˘iv©e
 (
GtkA˘i⁄Group
 *
a˘i⁄_group
,

180 
GtkA˘i⁄
 *
a˘i⁄
);

182 
G_END_DECLS


	@/usr/include/gtk/gtkactivatable.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_ACTIVATABLE_H__


25 
	#__GTK_ACTIVATABLE_H__


	)

27 
	~<gtk/gtka˘i⁄.h
>

28 
	~<gtk/gtkty≥utûs.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_ACTIVATABLE
 (
	`gtk_a˘iv©abÀ_gë_ty≥
 ())

	)

33 
	#GTK_ACTIVATABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ACTIVATABLE
, 
GtkA˘iv©abÀ
))

	)

34 
	#GTK_ACTIVATABLE_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((obj), 
GTK_TYPE_ACTIVATABLE
, 
GtkA˘iv©abÀIÁ˚
))

	)

35 
	#GTK_IS_ACTIVATABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ACTIVATABLE
))

	)

36 
	#GTK_ACTIVATABLE_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_ACTIVATABLE
, 
GtkA˘iv©abÀIÁ˚
))

	)

39 
_GtkA˘iv©abÀ
 
	tGtkA˘iv©abÀ
;

40 
_GtkA˘iv©abÀIÁ˚
 
	tGtkA˘iv©abÀIÁ˚
;

56 
	s_GtkA˘iv©abÀIÁ˚


58 
GTy≥I¡îÁ˚
 
	mg_iÁ˚
;

61 (* 
	mupd©e
Ë(
GtkA˘iv©abÀ
 *
	ma˘iv©abÀ
,

62 
GtkA˘i⁄
 *
	ma˘i⁄
,

63 c⁄° 
gch¨
 *
	m¥›îty_«me
);

64 (* 
	msync_a˘i⁄_¥›îtõs
Ë(
GtkA˘iv©abÀ
 *
	ma˘iv©abÀ
,

65 
GtkA˘i⁄
 *
	ma˘i⁄
);

69 
GTy≥
 
	$gtk_a˘iv©abÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

71 
	`gtk_a˘iv©abÀ_sync_a˘i⁄_¥›îtõs
 (
GtkA˘iv©abÀ
 *
a˘iv©abÀ
,

72 
GtkA˘i⁄
 *
a˘i⁄
);

74 
	`gtk_a˘iv©abÀ_£t_ªœãd_a˘i⁄
 (
GtkA˘iv©abÀ
 *
a˘iv©abÀ
,

75 
GtkA˘i⁄
 *
a˘i⁄
);

76 
GtkA˘i⁄
 *
	`gtk_a˘iv©abÀ_gë_ªœãd_a˘i⁄
 (
GtkA˘iv©abÀ
 *
a˘iv©abÀ
);

78 
	`gtk_a˘iv©abÀ_£t_u£_a˘i⁄_≠≥¨™˚
 (
GtkA˘iv©abÀ
 *
a˘iv©abÀ
,

79 
gboﬁón
 
u£_≠≥¨™˚
);

80 
gboﬁón
 
	`gtk_a˘iv©abÀ_gë_u£_a˘i⁄_≠≥¨™˚
 (
GtkA˘iv©abÀ
 *
a˘iv©abÀ
);

83 
	`gtk_a˘iv©abÀ_do_£t_ªœãd_a˘i⁄
 (
GtkA˘iv©abÀ
 *
a˘iv©abÀ
,

84 
GtkA˘i⁄
 *
a˘i⁄
);

86 
G_END_DECLS


	@/usr/include/gtk/gtkadjustment.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ADJUSTMENT_H__


32 
	#__GTK_ADJUSTMENT_H__


	)

35 
	~<gdk/gdk.h
>

36 
	~<gtk/gtkobje˘.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_ADJUSTMENT
 (
	`gtk_adju°mít_gë_ty≥
 ())

	)

41 
	#GTK_ADJUSTMENT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ADJUSTMENT
, 
GtkAdju°mít
))

	)

42 
	#GTK_ADJUSTMENT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ADJUSTMENT
, 
GtkAdju°mítCœss
))

	)

43 
	#GTK_IS_ADJUSTMENT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ADJUSTMENT
))

	)

44 
	#GTK_IS_ADJUSTMENT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ADJUSTMENT
))

	)

45 
	#GTK_ADJUSTMENT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ADJUSTMENT
, 
GtkAdju°mítCœss
))

	)

48 
_GtkAdju°mít
 
	tGtkAdju°mít
;

49 
_GtkAdju°mítCœss
 
	tGtkAdju°mítCœss
;

51 
	s_GtkAdju°mít


53 
GtkObje˘
 
	m∑ª¡_ö°™˚
;

55 
gdoubÀ
 
GSEAL
 (
lowî
);

56 
gdoubÀ
 
GSEAL
 (
uµî
);

57 
gdoubÀ
 
GSEAL
 (
vÆue
);

58 
gdoubÀ
 
GSEAL
 (
°ï_ö¸emít
);

59 
gdoubÀ
 
GSEAL
 (
∑ge_ö¸emít
);

60 
gdoubÀ
 
GSEAL
 (
∑ge_size
);

63 
	s_GtkAdju°mítCœss


65 
GtkObje˘Cœss
 
	m∑ª¡_˛ass
;

67 (* 
	mch™ged
Ë(
GtkAdju°mít
 *
	madju°mít
);

68 (* 
	mvÆue_ch™ged
Ë(
GtkAdju°mít
 *
	madju°mít
);

71 (*
	m_gtk_ª£rved1
) ();

72 (*
	m_gtk_ª£rved2
) ();

73 (*
	m_gtk_ª£rved3
) ();

74 (*
	m_gtk_ª£rved4
) ();

78 
GTy≥
 
	$gtk_adju°mít_gë_ty≥
 (Ë
G_GNUC_CONST
;

79 
GtkObje˘
* 
	`gtk_adju°mít_√w
 (
gdoubÀ
 
vÆue
,

80 
gdoubÀ
 
lowî
,

81 
gdoubÀ
 
uµî
,

82 
gdoubÀ
 
°ï_ö¸emít
,

83 
gdoubÀ
 
∑ge_ö¸emít
,

84 
gdoubÀ
 
∑ge_size
);

86 
	`gtk_adju°mít_ch™ged
 (
GtkAdju°mít
 *
adju°mít
);

87 
	`gtk_adju°mít_vÆue_ch™ged
 (
GtkAdju°mít
 *
adju°mít
);

88 
	`gtk_adju°mít_˛amp_∑ge
 (
GtkAdju°mít
 *
adju°mít
,

89 
gdoubÀ
 
lowî
,

90 
gdoubÀ
 
uµî
);

92 
gdoubÀ
 
	`gtk_adju°mít_gë_vÆue
 (
GtkAdju°mít
 *
adju°mít
);

93 
	`gtk_adju°mít_£t_vÆue
 (
GtkAdju°mít
 *
adju°mít
,

94 
gdoubÀ
 
vÆue
);

95 
gdoubÀ
 
	`gtk_adju°mít_gë_lowî
 (
GtkAdju°mít
 *
adju°mít
);

96 
	`gtk_adju°mít_£t_lowî
 (
GtkAdju°mít
 *
adju°mít
,

97 
gdoubÀ
 
lowî
);

98 
gdoubÀ
 
	`gtk_adju°mít_gë_uµî
 (
GtkAdju°mít
 *
adju°mít
);

99 
	`gtk_adju°mít_£t_uµî
 (
GtkAdju°mít
 *
adju°mít
,

100 
gdoubÀ
 
uµî
);

101 
gdoubÀ
 
	`gtk_adju°mít_gë_°ï_ö¸emít
 (
GtkAdju°mít
 *
adju°mít
);

102 
	`gtk_adju°mít_£t_°ï_ö¸emít
 (
GtkAdju°mít
 *
adju°mít
,

103 
gdoubÀ
 
°ï_ö¸emít
);

104 
gdoubÀ
 
	`gtk_adju°mít_gë_∑ge_ö¸emít
 (
GtkAdju°mít
 *
adju°mít
);

105 
	`gtk_adju°mít_£t_∑ge_ö¸emít
 (
GtkAdju°mít
 *
adju°mít
,

106 
gdoubÀ
 
∑ge_ö¸emít
);

107 
gdoubÀ
 
	`gtk_adju°mít_gë_∑ge_size
 (
GtkAdju°mít
 *
adju°mít
);

108 
	`gtk_adju°mít_£t_∑ge_size
 (
GtkAdju°mít
 *
adju°mít
,

109 
gdoubÀ
 
∑ge_size
);

111 
	`gtk_adju°mít_c⁄figuª
 (
GtkAdju°mít
 *
adju°mít
,

112 
gdoubÀ
 
vÆue
,

113 
gdoubÀ
 
lowî
,

114 
gdoubÀ
 
uµî
,

115 
gdoubÀ
 
°ï_ö¸emít
,

116 
gdoubÀ
 
∑ge_ö¸emít
,

117 
gdoubÀ
 
∑ge_size
);

119 
G_END_DECLS


	@/usr/include/gtk/gtkalignment.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ALIGNMENT_H__


32 
	#__GTK_ALIGNMENT_H__


	)

35 
	~<gtk/gtkbö.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_ALIGNMENT
 (
	`gtk_Æignmít_gë_ty≥
 ())

	)

41 
	#GTK_ALIGNMENT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ALIGNMENT
, 
GtkAlignmít
))

	)

42 
	#GTK_ALIGNMENT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ALIGNMENT
, 
GtkAlignmítCœss
))

	)

43 
	#GTK_IS_ALIGNMENT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ALIGNMENT
))

	)

44 
	#GTK_IS_ALIGNMENT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ALIGNMENT
))

	)

45 
	#GTK_ALIGNMENT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ALIGNMENT
, 
GtkAlignmítCœss
))

	)

48 
_GtkAlignmít
 
	tGtkAlignmít
;

49 
_GtkAlignmítCœss
 
	tGtkAlignmítCœss
;

50 
_GtkAlignmítPriv©e
 
	tGtkAlignmítPriv©e
;

52 
	s_GtkAlignmít


54 
GtkBö
 
	mbö
;

56 
gÊﬂt
 
GSEAL
 (
xÆign
);

57 
gÊﬂt
 
GSEAL
 (
yÆign
);

58 
gÊﬂt
 
GSEAL
 (
xsˇÀ
);

59 
gÊﬂt
 
GSEAL
 (
ysˇÀ
);

62 
	s_GtkAlignmítCœss


64 
GtkBöCœss
 
	m∑ª¡_˛ass
;

68 
GTy≥
 
	$gtk_Æignmít_gë_ty≥
 (Ë
G_GNUC_CONST
;

69 
GtkWidgë
* 
	`gtk_Æignmít_√w
 (
gÊﬂt
 
xÆign
,

70 
gÊﬂt
 
yÆign
,

71 
gÊﬂt
 
xsˇÀ
,

72 
gÊﬂt
 
ysˇÀ
);

73 
	`gtk_Æignmít_£t
 (
GtkAlignmít
 *
Æignmít
,

74 
gÊﬂt
 
xÆign
,

75 
gÊﬂt
 
yÆign
,

76 
gÊﬂt
 
xsˇÀ
,

77 
gÊﬂt
 
ysˇÀ
);

79 
	`gtk_Æignmít_£t_∑ddög
 (
GtkAlignmít
 *
Æignmít
,

80 
guöt
 
∑ddög_t›
,

81 
guöt
 
∑ddög_bŸtom
,

82 
guöt
 
∑ddög_À·
,

83 
guöt
 
∑ddög_right
);

85 
	`gtk_Æignmít_gë_∑ddög
 (
GtkAlignmít
 *
Æignmít
,

86 
guöt
 *
∑ddög_t›
,

87 
guöt
 *
∑ddög_bŸtom
,

88 
guöt
 *
∑ddög_À·
,

89 
guöt
 *
∑ddög_right
);

91 
G_END_DECLS


	@/usr/include/gtk/gtkarrow.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ARROW_H__


32 
	#__GTK_ARROW_H__


	)

35 
	~<gtk/gtkmisc.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_ARROW
 (
	`gtk_¨row_gë_ty≥
 ())

	)

42 
	#GTK_ARROW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ARROW
, 
GtkAºow
))

	)

43 
	#GTK_ARROW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ARROW
, 
GtkAºowCœss
))

	)

44 
	#GTK_IS_ARROW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ARROW
))

	)

45 
	#GTK_IS_ARROW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ARROW
))

	)

46 
	#GTK_ARROW_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ARROW
, 
GtkAºowCœss
))

	)

49 
_GtkAºow
 
	tGtkAºow
;

50 
_GtkAºowCœss
 
	tGtkAºowCœss
;

52 
	s_GtkAºow


54 
GtkMisc
 
	mmisc
;

56 
göt16
 
GSEAL
 (
¨row_ty≥
);

57 
göt16
 
GSEAL
 (
shadow_ty≥
);

60 
	s_GtkAºowCœss


62 
GtkMiscCœss
 
	m∑ª¡_˛ass
;

66 
GTy≥
 
	$gtk_¨row_gë_ty≥
 (Ë
G_GNUC_CONST
;

67 
GtkWidgë
* 
	`gtk_¨row_√w
 (
GtkAºowTy≥
 
¨row_ty≥
,

68 
GtkShadowTy≥
 
shadow_ty≥
);

69 
	`gtk_¨row_£t
 (
GtkAºow
 *
¨row
,

70 
GtkAºowTy≥
 
¨row_ty≥
,

71 
GtkShadowTy≥
 
shadow_ty≥
);

74 
G_END_DECLS


	@/usr/include/gtk/gtkaspectframe.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ASPECT_FRAME_H__


32 
	#__GTK_ASPECT_FRAME_H__


	)

35 
	~<gtk/gtk‰ame.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_ASPECT_FRAME
 (
	`gtk_a•e˘_‰ame_gë_ty≥
 ())

	)

41 
	#GTK_ASPECT_FRAME
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ASPECT_FRAME
, 
GtkA•e˘Føme
))

	)

42 
	#GTK_ASPECT_FRAME_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ASPECT_FRAME
, 
GtkA•e˘FømeCœss
))

	)

43 
	#GTK_IS_ASPECT_FRAME
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ASPECT_FRAME
))

	)

44 
	#GTK_IS_ASPECT_FRAME_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ASPECT_FRAME
))

	)

45 
	#GTK_ASPECT_FRAME_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ASPECT_FRAME
, 
GtkA•e˘FømeCœss
))

	)

48 
_GtkA•e˘Føme
 
	tGtkA•e˘Føme
;

49 
_GtkA•e˘FømeCœss
 
	tGtkA•e˘FømeCœss
;

51 
	s_GtkA•e˘Føme


53 
GtkFøme
 
	m‰ame
;

55 
gÊﬂt
 
GSEAL
 (
xÆign
);

56 
gÊﬂt
 
GSEAL
 (
yÆign
);

57 
gÊﬂt
 
GSEAL
 (
øtio
);

58 
gboﬁón
 
GSEAL
 (
obey_chûd
);

60 
GtkAŒoˇti⁄
 
GSEAL
 (
˚¡î_Æloˇti⁄
);

63 
	s_GtkA•e˘FømeCœss


65 
GtkFømeCœss
 
	m∑ª¡_˛ass
;

69 
GTy≥
 
	$gtk_a•e˘_‰ame_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkWidgë
* 
	`gtk_a•e˘_‰ame_√w
 (c⁄° 
gch¨
 *
œbñ
,

71 
gÊﬂt
 
xÆign
,

72 
gÊﬂt
 
yÆign
,

73 
gÊﬂt
 
øtio
,

74 
gboﬁón
 
obey_chûd
);

75 
	`gtk_a•e˘_‰ame_£t
 (
GtkA•e˘Føme
 *
a•e˘_‰ame
,

76 
gÊﬂt
 
xÆign
,

77 
gÊﬂt
 
yÆign
,

78 
gÊﬂt
 
øtio
,

79 
gboﬁón
 
obey_chûd
);

82 
G_END_DECLS


	@/usr/include/gtk/gtkassistant.h

26 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

30 #i‚de‡
__GTK_ASSISTANT_H__


31 
	#__GTK_ASSISTANT_H__


	)

33 
	~<gtk/gtkwödow.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_ASSISTANT
 (
	`gtk_assi°™t_gë_ty≥
 ())

	)

38 
	#GTK_ASSISTANT
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((o), 
GTK_TYPE_ASSISTANT
, 
GtkAssi°™t
))

	)

39 
	#GTK_ASSISTANT_CLASS
(
c
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((c), 
GTK_TYPE_ASSISTANT
, 
GtkAssi°™tCœss
))

	)

40 
	#GTK_IS_ASSISTANT
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((o), 
GTK_TYPE_ASSISTANT
))

	)

41 
	#GTK_IS_ASSISTANT_CLASS
(
c
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((c), 
GTK_TYPE_ASSISTANT
))

	)

42 
	#GTK_ASSISTANT_GET_CLASS
(
o
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((o), 
GTK_TYPE_ASSISTANT
, 
GtkAssi°™tCœss
))

	)

46 
	mGTK_ASSISTANT_PAGE_CONTENT
,

47 
	mGTK_ASSISTANT_PAGE_INTRO
,

48 
	mGTK_ASSISTANT_PAGE_CONFIRM
,

49 
	mGTK_ASSISTANT_PAGE_SUMMARY
,

50 
	mGTK_ASSISTANT_PAGE_PROGRESS


51 } 
	tGtkAssi°™tPageTy≥
;

53 
_GtkAssi°™t
 
	tGtkAssi°™t
;

54 
_GtkAssi°™tPriv©e
 
	tGtkAssi°™tPriv©e
;

55 
_GtkAssi°™tCœss
 
	tGtkAssi°™tCœss
;

57 
	s_GtkAssi°™t


59 
GtkWödow
 
	m∑ª¡
;

61 
GtkWidgë
 *
GSEAL
 (
ˇn˚l
);

62 
GtkWidgë
 *
GSEAL
 (
f‹w¨d
);

63 
GtkWidgë
 *
GSEAL
 (
back
);

64 
GtkWidgë
 *
GSEAL
 (
≠∂y
);

65 
GtkWidgë
 *
GSEAL
 (
˛o£
);

66 
GtkWidgë
 *
GSEAL
 (
œ°
);

69 
GtkAssi°™tPriv©e
 *
GSEAL
 (
¥iv
);

72 
	s_GtkAssi°™tCœss


74 
GtkWödowCœss
 
	m∑ª¡_˛ass
;

76 (* 
	m¥ï¨e
Ë(
GtkAssi°™t
 *
	massi°™t
, 
GtkWidgë
 *
	m∑ge
);

77 (* 
	m≠∂y
Ë(
GtkAssi°™t
 *
	massi°™t
);

78 (* 
	m˛o£
Ë(
GtkAssi°™t
 *
	massi°™t
);

79 (* 
	mˇn˚l
Ë(
GtkAssi°™t
 *
	massi°™t
);

82 (*
	m_gtk_ª£rved1
) ();

83 (*
	m_gtk_ª£rved2
) ();

84 (*
	m_gtk_ª£rved3
) ();

85 (*
	m_gtk_ª£rved4
) ();

86 (*
	m_gtk_ª£rved5
) ();

89 
	$göt
 (*
	tGtkAssi°™tPageFunc
Ë(
	tgöt
 
	tcuºít_∑ge
, 
	tgpoöãr
 
	td©a
);

91 
GTy≥
 
	$gtk_assi°™t_gë_ty≥
 (Ë
G_GNUC_CONST
;

92 
GtkWidgë
 *
	`gtk_assi°™t_√w
 ();

93 
göt
 
	`gtk_assi°™t_gë_cuºít_∑ge
 (
GtkAssi°™t
 *
assi°™t
);

94 
	`gtk_assi°™t_£t_cuºít_∑ge
 (
GtkAssi°™t
 *
assi°™t
,

95 
göt
 
∑ge_num
);

96 
göt
 
	`gtk_assi°™t_gë_n_∑ges
 (
GtkAssi°™t
 *
assi°™t
);

97 
GtkWidgë
 *
	`gtk_assi°™t_gë_¡h_∑ge
 (
GtkAssi°™t
 *
assi°™t
,

98 
göt
 
∑ge_num
);

99 
göt
 
	`gtk_assi°™t_¥ïíd_∑ge
 (
GtkAssi°™t
 *
assi°™t
,

100 
GtkWidgë
 *
∑ge
);

101 
göt
 
	`gtk_assi°™t_≠≥nd_∑ge
 (
GtkAssi°™t
 *
assi°™t
,

102 
GtkWidgë
 *
∑ge
);

103 
göt
 
	`gtk_assi°™t_ö£π_∑ge
 (
GtkAssi°™t
 *
assi°™t
,

104 
GtkWidgë
 *
∑ge
,

105 
göt
 
posôi⁄
);

106 
	`gtk_assi°™t_£t_f‹w¨d_∑ge_func
 (
GtkAssi°™t
 *
assi°™t
,

107 
GtkAssi°™tPageFunc
 
∑ge_func
,

108 
gpoöãr
 
d©a
,

109 
GDe°royNŸify
 
de°roy
);

110 
	`gtk_assi°™t_£t_∑ge_ty≥
 (
GtkAssi°™t
 *
assi°™t
,

111 
GtkWidgë
 *
∑ge
,

112 
GtkAssi°™tPageTy≥
 
ty≥
);

113 
GtkAssi°™tPageTy≥
 
	`gtk_assi°™t_gë_∑ge_ty≥
 (
GtkAssi°™t
 *
assi°™t
,

114 
GtkWidgë
 *
∑ge
);

115 
	`gtk_assi°™t_£t_∑ge_tôÀ
 (
GtkAssi°™t
 *
assi°™t
,

116 
GtkWidgë
 *
∑ge
,

117 c⁄° 
gch¨
 *
tôÀ
);

118 
G_CONST_RETURN
 
gch¨
 *
	`gtk_assi°™t_gë_∑ge_tôÀ
 (
GtkAssi°™t
 *
assi°™t
,

119 
GtkWidgë
 *
∑ge
);

120 
	`gtk_assi°™t_£t_∑ge_hódî_image
 (
GtkAssi°™t
 *
assi°™t
,

121 
GtkWidgë
 *
∑ge
,

122 
GdkPixbuf
 *
pixbuf
);

123 
GdkPixbuf
 *
	`gtk_assi°™t_gë_∑ge_hódî_image
 (
GtkAssi°™t
 *
assi°™t
,

124 
GtkWidgë
 *
∑ge
);

125 
	`gtk_assi°™t_£t_∑ge_side_image
 (
GtkAssi°™t
 *
assi°™t
,

126 
GtkWidgë
 *
∑ge
,

127 
GdkPixbuf
 *
pixbuf
);

128 
GdkPixbuf
 *
	`gtk_assi°™t_gë_∑ge_side_image
 (
GtkAssi°™t
 *
assi°™t
,

129 
GtkWidgë
 *
∑ge
);

130 
	`gtk_assi°™t_£t_∑ge_com∂ëe
 (
GtkAssi°™t
 *
assi°™t
,

131 
GtkWidgë
 *
∑ge
,

132 
gboﬁón
 
com∂ëe
);

133 
gboﬁón
 
	`gtk_assi°™t_gë_∑ge_com∂ëe
 (
GtkAssi°™t
 *
assi°™t
,

134 
GtkWidgë
 *
∑ge
);

135 
	`gtk_assi°™t_add_a˘i⁄_widgë
 (
GtkAssi°™t
 *
assi°™t
,

136 
GtkWidgë
 *
chûd
);

137 
	`gtk_assi°™t_ªmove_a˘i⁄_widgë
 (
GtkAssi°™t
 *
assi°™t
,

138 
GtkWidgë
 *
chûd
);

140 
	`gtk_assi°™t_upd©e_buâ⁄s_°©e
 (
GtkAssi°™t
 *
assi°™t
);

142 
G_END_DECLS


	@/usr/include/gtk/gtkbbox.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_BUTTON_BOX_H__


32 
	#__GTK_BUTTON_BOX_H__


	)

34 
	~<gtk/gtkbox.h
>

37 
	gG_BEGIN_DECLS


39 
	#GTK_TYPE_BUTTON_BOX
 (
	`gtk_buâ⁄_box_gë_ty≥
 ())

	)

40 
	#GTK_BUTTON_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_BUTTON_BOX
, 
GtkBuâ⁄Box
))

	)

41 
	#GTK_BUTTON_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_BUTTON_BOX
, 
GtkBuâ⁄BoxCœss
))

	)

42 
	#GTK_IS_BUTTON_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_BUTTON_BOX
))

	)

43 
	#GTK_IS_BUTTON_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_BUTTON_BOX
))

	)

44 
	#GTK_BUTTON_BOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_BUTTON_BOX
, 
GtkBuâ⁄BoxCœss
))

	)

47 
	#GTK_BUTTONBOX_DEFAULT
 -1

	)

49 
_GtkBuâ⁄Box
 
	tGtkBuâ⁄Box
;

50 
_GtkBuâ⁄BoxCœss
 
	tGtkBuâ⁄BoxCœss
;

52 
	s_GtkBuâ⁄Box


54 
GtkBox
 
	mbox
;

55 
göt
 
GSEAL
 (
chûd_mö_width
);

56 
göt
 
GSEAL
 (
chûd_mö_height
);

57 
göt
 
GSEAL
 (
chûd_ùad_x
);

58 
göt
 
GSEAL
 (
chûd_ùad_y
);

59 
GtkBuâ⁄BoxStyÀ
 
GSEAL
 (
œyout_°yÀ
);

62 
	s_GtkBuâ⁄BoxCœss


64 
GtkBoxCœss
 
	m∑ª¡_˛ass
;

68 
GTy≥
 
	$gtk_buâ⁄_box_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkBuâ⁄BoxStyÀ
 
	`gtk_buâ⁄_box_gë_œyout
 (
GtkBuâ⁄Box
 *
widgë
);

71 
	`gtk_buâ⁄_box_£t_œyout
 (
GtkBuâ⁄Box
 *
widgë
,

72 
GtkBuâ⁄BoxStyÀ
 
œyout_°yÀ
);

73 
gboﬁón
 
	`gtk_buâ⁄_box_gë_chûd_£c⁄d¨y
 (
GtkBuâ⁄Box
 *
widgë
,

74 
GtkWidgë
 *
chûd
);

75 
	`gtk_buâ⁄_box_£t_chûd_£c⁄d¨y
 (
GtkBuâ⁄Box
 *
widgë
,

76 
GtkWidgë
 *
chûd
,

77 
gboﬁón
 
is_£c⁄d¨y
);

79 #i‚de‡
GTK_DISABLE_DEPRECATED


80 
	#gtk_buâ⁄_box_£t_•acög
(
b
,
s
Ë
	`gtk_box_£t_•acög
 (
	`GTK_BOX
 (b), s)

	)

81 
	#gtk_buâ⁄_box_gë_•acög
(
b
Ë
	`gtk_box_gë_•acög
 (
	`GTK_BOX
 (b))

	)

83 
	`gtk_buâ⁄_box_£t_chûd_size
 (
GtkBuâ⁄Box
 *
widgë
,

84 
göt
 
mö_width
,

85 
göt
 
mö_height
);

86 
	`gtk_buâ⁄_box_£t_chûd_ùaddög
 (
GtkBuâ⁄Box
 *
widgë
,

87 
göt
 
ùad_x
,

88 
göt
 
ùad_y
);

89 
	`gtk_buâ⁄_box_gë_chûd_size
 (
GtkBuâ⁄Box
 *
widgë
,

90 
göt
 *
mö_width
,

91 
göt
 *
mö_height
);

92 
	`gtk_buâ⁄_box_gë_chûd_ùaddög
 (
GtkBuâ⁄Box
 *
widgë
,

93 
göt
 *
ùad_x
,

94 
göt
 *
ùad_y
);

98 
	`_gtk_buâ⁄_box_chûd_ªquisôi⁄
 (
GtkWidgë
 *
widgë
,

99 *
nvis_chûdªn
,

100 *
nvis_£c⁄d¨õs
,

101 *
width
,

102 *
height
);

103 
G_END_DECLS


	@/usr/include/gtk/gtkbin.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_BIN_H__


32 
	#__GTK_BIN_H__


	)

35 
	~<gtk/gtkc⁄èöî.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_BIN
 (
	`gtk_bö_gë_ty≥
 ())

	)

41 
	#GTK_BIN
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_BIN
, 
GtkBö
))

	)

42 
	#GTK_BIN_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_BIN
, 
GtkBöCœss
))

	)

43 
	#GTK_IS_BIN
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_BIN
))

	)

44 
	#GTK_IS_BIN_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_BIN
))

	)

45 
	#GTK_BIN_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_BIN
, 
GtkBöCœss
))

	)

48 
_GtkBö
 
	tGtkBö
;

49 
_GtkBöCœss
 
	tGtkBöCœss
;

51 
	s_GtkBö


53 
GtkC⁄èöî
 
	mc⁄èöî
;

55 
GtkWidgë
 *
GSEAL
 (
chûd
);

58 
	s_GtkBöCœss


60 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

64 
GTy≥
 
	$gtk_bö_gë_ty≥
 (Ë
G_GNUC_CONST
;

66 
GtkWidgë
 *
	`gtk_bö_gë_chûd
 (
GtkBö
 *
bö
);

68 
G_END_DECLS


	@/usr/include/gtk/gtkbindings.h

30 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

34 #i‚de‡
__GTK_BINDINGS_H__


35 
	#__GTK_BINDINGS_H__


	)

38 
	~<gdk/gdk.h
>

39 
	~<gtk/gtkobje˘.h
>

42 
G_BEGIN_DECLS


48 
_GtkBödögSë
 
	tGtkBödögSë
;

49 
_GtkBödögE¡ry
 
	tGtkBödögE¡ry
;

50 
_GtkBödögSig«l
 
	tGtkBödögSig«l
;

51 
_GtkBödögArg
 
	tGtkBödögArg
;

53 
	s_GtkBödögSë


55 
gch¨
 *
	m£t_«me
;

56 
göt
 
	m¥i‹ôy
;

57 
GSLi°
 *
	mwidgë_∑th_p•ecs
;

58 
GSLi°
 *
	mwidgë_˛ass_p•ecs
;

59 
GSLi°
 *
	m˛ass_bønch_p•ecs
;

60 
GtkBödögE¡ry
 *
	míåõs
;

61 
GtkBödögE¡ry
 *
	mcuºít
;

62 
guöt
 
	m∑r£d
 : 1;

65 
	s_GtkBödögE¡ry


69 
guöt
 
	mkeyvÆ
;

70 
GdkModifõrTy≥
 
	mmodifõrs
;

72 
GtkBödögSë
 *
	mbödög_£t
;

73 
guöt
 
	mde°royed
 : 1;

74 
guöt
 
	mö_emissi⁄
 : 1;

75 
guöt
 
	mm¨ks_unbound
 : 1;

76 
GtkBödögE¡ry
 *
	m£t_√xt
;

77 
GtkBödögE¡ry
 *
	mhash_√xt
;

78 
GtkBödögSig«l
 *
	msig«ls
;

81 
	s_GtkBödögArg


83 
GTy≥
 
	m¨g_ty≥
;

85 
gl⁄g
 
	ml⁄g_d©a
;

86 
gdoubÀ
 
	mdoubÀ_d©a
;

87 
gch¨
 *
	m°rög_d©a
;

88 } 
	md
;

91 
	s_GtkBödögSig«l


93 
GtkBödögSig«l
 *
	m√xt
;

94 
gch¨
 *
	msig«l_«me
;

95 
guöt
 
	mn_¨gs
;

96 
GtkBödögArg
 *
	m¨gs
;

101 
GtkBödögSë
* 
gtk_bödög_£t_√w
 (c⁄° 
gch¨
 *
£t_«me
);

102 
GtkBödögSë
* 
gtk_bödög_£t_by_˛ass
(
gpoöãr
 
obje˘_˛ass
);

103 
GtkBödögSë
* 
gtk_bödög_£t_föd
 (c⁄° 
gch¨
 *
£t_«me
);

104 
gboﬁón
 
gtk_bödögs_a˘iv©e
 (
GtkObje˘
 *
obje˘
,

105 
guöt
 
keyvÆ
,

106 
GdkModifõrTy≥
 
modifõrs
);

107 
gboﬁón
 
gtk_bödögs_a˘iv©e_evít
 (
GtkObje˘
 *
obje˘
,

108 
GdkEvítKey
 *
evít
);

109 
gboﬁón
 
gtk_bödög_£t_a˘iv©e
 (
GtkBödögSë
 *
bödög_£t
,

110 
guöt
 
keyvÆ
,

111 
GdkModifõrTy≥
 
modifõrs
,

112 
GtkObje˘
 *
obje˘
);

114 #i‚de‡
GTK_DISABLE_DEPRECATED


115 
	#gtk_bödög_íåy_add
 
gtk_bödög_íåy_˛ór


	)

116 
gtk_bödög_íåy_˛ór
 (
GtkBödögSë
 *
bödög_£t
,

117 
guöt
 
keyvÆ
,

118 
GdkModifõrTy≥
 
modifõrs
);

119 
guöt
 
gtk_bödög_∑r£_bödög
 (
GSˇ¬î
 *
sˇ¬î
);

122 
gtk_bödög_íåy_skù
 (
GtkBödögSë
 *
bödög_£t
,

123 
guöt
 
keyvÆ
,

124 
GdkModifõrTy≥
 
modifõrs
);

125 
gtk_bödög_íåy_add_sig«l
 (
GtkBödögSë
 *
bödög_£t
,

126 
guöt
 
keyvÆ
,

127 
GdkModifõrTy≥
 
modifõrs
,

128 c⁄° 
gch¨
 *
sig«l_«me
,

129 
guöt
 
n_¨gs
,

131 
gtk_bödög_íåy_add_sig«Œ
 (
GtkBödögSë
 *
bödög_£t
,

132 
guöt
 
keyvÆ
,

133 
GdkModifõrTy≥
 
modifõrs
,

134 c⁄° 
gch¨
 *
sig«l_«me
,

135 
GSLi°
 *
bödög_¨gs
);

136 
gtk_bödög_íåy_ªmove
 (
GtkBödögSë
 *
bödög_£t
,

137 
guöt
 
keyvÆ
,

138 
GdkModifõrTy≥
 
modifõrs
);

140 
gtk_bödög_£t_add_∑th
 (
GtkBödögSë
 *
bödög_£t
,

141 
GtkP©hTy≥
 
∑th_ty≥
,

142 c⁄° 
gch¨
 *
∑th_∑âîn
,

143 
GtkP©hPri‹ôyTy≥
 
¥i‹ôy
);

148 
guöt
 
_gtk_bödög_∑r£_bödög
 (
GSˇ¬î
 *
sˇ¬î
);

149 
_gtk_bödög_ª£t_∑r£d
 ();

150 
_gtk_bödög_íåy_add_sig«Œ
 (
GtkBödögSë
 *
bödög_£t
,

151 
guöt
 
keyvÆ
,

152 
GdkModifõrTy≥
 
modifõrs
,

153 c⁄° 
gch¨
 *
sig«l_«me
,

154 
GSLi°
 *
bödög_¨gs
);

156 
	gG_END_DECLS


	@/usr/include/gtk/gtkbox.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_BOX_H__


32 
	#__GTK_BOX_H__


	)

35 
	~<gtk/gtkc⁄èöî.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_BOX
 (
	`gtk_box_gë_ty≥
 ())

	)

42 
	#GTK_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_BOX
, 
GtkBox
))

	)

43 
	#GTK_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_BOX
, 
GtkBoxCœss
))

	)

44 
	#GTK_IS_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_BOX
))

	)

45 
	#GTK_IS_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_BOX
))

	)

46 
	#GTK_BOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_BOX
, 
GtkBoxCœss
))

	)

49 
_GtkBox
 
	tGtkBox
;

50 
_GtkBoxCœss
 
	tGtkBoxCœss
;

51 
_GtkBoxChûd
 
	tGtkBoxChûd
;

53 
	s_GtkBox


55 
GtkC⁄èöî
 
	mc⁄èöî
;

58 
GLi°
 *
GSEAL
 (
chûdªn
);

59 
göt16
 
GSEAL
 (
•acög
);

60 
guöt
 
GSEAL
 (
homogíeous
) : 1;

63 
	s_GtkBoxCœss


65 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

68 
	s_GtkBoxChûd


70 
GtkWidgë
 *
	mwidgë
;

71 
guöt16
 
	m∑ddög
;

72 
guöt
 
	mex∑nd
 : 1;

73 
guöt
 
	mfûl
 : 1;

74 
guöt
 
	m∑ck
 : 1;

75 
guöt
 
	mis_£c⁄d¨y
 : 1;

79 
GTy≥
 
	$gtk_box_gë_ty≥
 (Ë
G_GNUC_CONST
;

80 
GtkWidgë
* 
	`_gtk_box_√w
 (
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
,

81 
gboﬁón
 
homogíeous
,

82 
göt
 
•acög
);

84 
	`gtk_box_∑ck_°¨t
 (
GtkBox
 *
box
,

85 
GtkWidgë
 *
chûd
,

86 
gboﬁón
 
ex∑nd
,

87 
gboﬁón
 
fûl
,

88 
guöt
 
∑ddög
);

89 
	`gtk_box_∑ck_íd
 (
GtkBox
 *
box
,

90 
GtkWidgë
 *
chûd
,

91 
gboﬁón
 
ex∑nd
,

92 
gboﬁón
 
fûl
,

93 
guöt
 
∑ddög
);

95 #i‚de‡
GTK_DISABLE_DEPRECATED


96 
	`gtk_box_∑ck_°¨t_deÁu…s
 (
GtkBox
 *
box
,

97 
GtkWidgë
 *
widgë
);

98 
	`gtk_box_∑ck_íd_deÁu…s
 (
GtkBox
 *
box
,

99 
GtkWidgë
 *
widgë
);

102 
	`gtk_box_£t_homogíeous
 (
GtkBox
 *
box
,

103 
gboﬁón
 
homogíeous
);

104 
gboﬁón
 
	`gtk_box_gë_homogíeous
 (
GtkBox
 *
box
);

105 
	`gtk_box_£t_•acög
 (
GtkBox
 *
box
,

106 
göt
 
•acög
);

107 
göt
 
	`gtk_box_gë_•acög
 (
GtkBox
 *
box
);

109 
	`gtk_box_ª‹dî_chûd
 (
GtkBox
 *
box
,

110 
GtkWidgë
 *
chûd
,

111 
göt
 
posôi⁄
);

113 
	`gtk_box_quîy_chûd_∑ckög
 (
GtkBox
 *
box
,

114 
GtkWidgë
 *
chûd
,

115 
gboﬁón
 *
ex∑nd
,

116 
gboﬁón
 *
fûl
,

117 
guöt
 *
∑ddög
,

118 
GtkPackTy≥
 *
∑ck_ty≥
);

119 
	`gtk_box_£t_chûd_∑ckög
 (
GtkBox
 *
box
,

120 
GtkWidgë
 *
chûd
,

121 
gboﬁón
 
ex∑nd
,

122 
gboﬁón
 
fûl
,

123 
guöt
 
∑ddög
,

124 
GtkPackTy≥
 
∑ck_ty≥
);

127 
	`_gtk_box_£t_ﬁd_deÁu…s
 (
GtkBox
 *
box
);

128 
gboﬁón
 
	`_gtk_box_gë_•acög_£t
 (
GtkBox
 *
box
);

129 
	`_gtk_box_£t_•acög_£t
 (
GtkBox
 *
box
,

130 
gboﬁón
 
•acög_£t
);

132 
G_END_DECLS


	@/usr/include/gtk/gtkbuildable.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_BUILDABLE_H__


26 
	#__GTK_BUILDABLE_H__


	)

28 
	~<gtk/gtkbuûdî.h
>

29 
	~<gtk/gtkty≥utûs.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_BUILDABLE
 (
	`gtk_buûdabÀ_gë_ty≥
 ())

	)

34 
	#GTK_BUILDABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_BUILDABLE
, 
GtkBuûdabÀ
))

	)

35 
	#GTK_BUILDABLE_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((obj), 
GTK_TYPE_BUILDABLE
, 
GtkBuûdabÀIÁ˚
))

	)

36 
	#GTK_IS_BUILDABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_BUILDABLE
))

	)

37 
	#GTK_BUILDABLE_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_BUILDABLE
, 
GtkBuûdabÀIÁ˚
))

	)

40 
_GtkBuûdabÀ
 
	tGtkBuûdabÀ
;

41 
_GtkBuûdabÀIÁ˚
 
	tGtkBuûdabÀIÁ˚
;

43 
	s_GtkBuûdabÀIÁ˚


45 
GTy≥I¡îÁ˚
 
	mg_iÁ˚
;

48 (* 
	m£t_«me
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

49 c⁄° 
gch¨
 *
	m«me
);

50 c⁄° 
	mgch¨
 * (* 
	mgë_«me
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
);

51 (* 
	madd_chûd
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

52 
GtkBuûdî
 *
	mbuûdî
,

53 
GObje˘
 *
	mchûd
,

54 c⁄° 
gch¨
 *
	mty≥
);

55 (* 
	m£t_buûdabÀ_¥›îty
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

56 
GtkBuûdî
 *
	mbuûdî
,

57 c⁄° 
gch¨
 *
	m«me
,

58 c⁄° 
GVÆue
 *
	mvÆue
);

59 
	mGObje˘
 * (* 
	mc⁄°ru˘_chûd
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

60 
GtkBuûdî
 *
	mbuûdî
,

61 c⁄° 
gch¨
 *
	m«me
);

62 
gboﬁón
 (* 
cu°om_èg_°¨t
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

63 
GtkBuûdî
 *
	mbuûdî
,

64 
GObje˘
 *
	mchûd
,

65 c⁄° 
gch¨
 *
	mèg«me
,

66 
GM¨kupP¨£r
 *
	m∑r£r
,

67 
gpoöãr
 *
	md©a
);

68 (* 
	mcu°om_èg_íd
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

69 
GtkBuûdî
 *
	mbuûdî
,

70 
GObje˘
 *
	mchûd
,

71 c⁄° 
gch¨
 *
	mèg«me
,

72 
gpoöãr
 *
	md©a
);

73 (* 
	mcu°om_föished
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

74 
GtkBuûdî
 *
	mbuûdî
,

75 
GObje˘
 *
	mchûd
,

76 c⁄° 
gch¨
 *
	mèg«me
,

77 
gpoöãr
 
	md©a
);

78 (* 
	m∑r£r_föished
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

79 
GtkBuûdî
 *
	mbuûdî
);

81 
	mGObje˘
 * (* 
	mgë_öã∫Æ_chûd
Ë(
GtkBuûdabÀ
 *
	mbuûdabÀ
,

82 
GtkBuûdî
 *
	mbuûdî
,

83 c⁄° 
gch¨
 *
	mchûd«me
);

87 
GTy≥
 
	$gtk_buûdabÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
	`gtk_buûdabÀ_£t_«me
 (
GtkBuûdabÀ
 *
buûdabÀ
,

90 c⁄° 
gch¨
 *
«me
);

91 c⁄° 
gch¨
 * 
	`gtk_buûdabÀ_gë_«me
 (
GtkBuûdabÀ
 *
buûdabÀ
);

92 
	`gtk_buûdabÀ_add_chûd
 (
GtkBuûdabÀ
 *
buûdabÀ
,

93 
GtkBuûdî
 *
buûdî
,

94 
GObje˘
 *
chûd
,

95 c⁄° 
gch¨
 *
ty≥
);

96 
	`gtk_buûdabÀ_£t_buûdabÀ_¥›îty
 (
GtkBuûdabÀ
 *
buûdabÀ
,

97 
GtkBuûdî
 *
buûdî
,

98 c⁄° 
gch¨
 *
«me
,

99 c⁄° 
GVÆue
 *
vÆue
);

100 
GObje˘
 * 
	`gtk_buûdabÀ_c⁄°ru˘_chûd
 (
GtkBuûdabÀ
 *
buûdabÀ
,

101 
GtkBuûdî
 *
buûdî
,

102 c⁄° 
gch¨
 *
«me
);

103 
gboﬁón
 
	`gtk_buûdabÀ_cu°om_èg_°¨t
 (
GtkBuûdabÀ
 *
buûdabÀ
,

104 
GtkBuûdî
 *
buûdî
,

105 
GObje˘
 *
chûd
,

106 c⁄° 
gch¨
 *
èg«me
,

107 
GM¨kupP¨£r
 *
∑r£r
,

108 
gpoöãr
 *
d©a
);

109 
	`gtk_buûdabÀ_cu°om_èg_íd
 (
GtkBuûdabÀ
 *
buûdabÀ
,

110 
GtkBuûdî
 *
buûdî
,

111 
GObje˘
 *
chûd
,

112 c⁄° 
gch¨
 *
èg«me
,

113 
gpoöãr
 *
d©a
);

114 
	`gtk_buûdabÀ_cu°om_föished
 (
GtkBuûdabÀ
 *
buûdabÀ
,

115 
GtkBuûdî
 *
buûdî
,

116 
GObje˘
 *
chûd
,

117 c⁄° 
gch¨
 *
èg«me
,

118 
gpoöãr
 
d©a
);

119 
	`gtk_buûdabÀ_∑r£r_föished
 (
GtkBuûdabÀ
 *
buûdabÀ
,

120 
GtkBuûdî
 *
buûdî
);

121 
GObje˘
 * 
	`gtk_buûdabÀ_gë_öã∫Æ_chûd
 (
GtkBuûdabÀ
 *
buûdabÀ
,

122 
GtkBuûdî
 *
buûdî
,

123 c⁄° 
gch¨
 *
chûd«me
);

125 
G_END_DECLS


	@/usr/include/gtk/gtkbuilder.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_BUILDER_H__


26 
	#__GTK_BUILDER_H__


	)

28 
	~<gdkc⁄fig.h
>

29 
	~<glib-obje˘.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_BUILDER
 (
	`gtk_buûdî_gë_ty≥
 ())

	)

34 
	#GTK_BUILDER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_BUILDER
, 
GtkBuûdî
))

	)

35 
	#GTK_BUILDER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_BUILDER
, 
GtkBuûdîCœss
))

	)

36 
	#GTK_IS_BUILDER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_BUILDER
))

	)

37 
	#GTK_IS_BUILDER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_BUILDER
))

	)

38 
	#GTK_BUILDER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_BUILDER
, 
GtkBuûdîCœss
))

	)

40 
	#GTK_BUILDER_ERROR
 (
	`gtk_buûdî_îr‹_qu¨k
 ())

	)

42 
_GtkBuûdî
 
	tGtkBuûdî
;

43 
_GtkBuûdîCœss
 
	tGtkBuûdîCœss
;

44 
_GtkBuûdîPriv©e
 
	tGtkBuûdîPriv©e
;

48 
	mGTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION
,

49 
	mGTK_BUILDER_ERROR_UNHANDLED_TAG
,

50 
	mGTK_BUILDER_ERROR_MISSING_ATTRIBUTE
,

51 
	mGTK_BUILDER_ERROR_INVALID_ATTRIBUTE
,

52 
	mGTK_BUILDER_ERROR_INVALID_TAG
,

53 
	mGTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE
,

54 
	mGTK_BUILDER_ERROR_INVALID_VALUE
,

55 
	mGTK_BUILDER_ERROR_VERSION_MISMATCH
,

56 
	mGTK_BUILDER_ERROR_DUPLICATE_ID


57 } 
	tGtkBuûdîEº‹
;

59 
GQu¨k
 
gtk_buûdî_îr‹_qu¨k
 ();

61 
	s_GtkBuûdî


63 
GObje˘
 
	m∑ª¡_ö°™˚
;

65 
GtkBuûdîPriv©e
 *
GSEAL
 (
¥iv
);

68 
	s_GtkBuûdîCœss


70 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

72 
GTy≥
 (* 
gë_ty≥_‰om_«me
Ë(
GtkBuûdî
 *
	mbuûdî
,

73 c⁄° *
	mty≥_«me
);

76 (*
	m_gtk_ª£rved1
) ();

77 (*
	m_gtk_ª£rved2
) ();

78 (*
	m_gtk_ª£rved3
) ();

79 (*
	m_gtk_ª£rved4
) ();

80 (*
	m_gtk_ª£rved5
) ();

81 (*
	m_gtk_ª£rved6
) ();

82 (*
	m_gtk_ª£rved7
) ();

83 (*
	m_gtk_ª£rved8
) ();

86 (*
	tGtkBuûdîC⁄√˘Func
Ë(
	tGtkBuûdî
 *
	tbuûdî
,

87 
	tGObje˘
 *
	tobje˘
,

88 c⁄° 
	tgch¨
 *
	tsig«l_«me
,

89 c⁄° 
	tgch¨
 *
	th™dÀr_«me
,

90 
	tGObje˘
 *
	tc⁄√˘_obje˘
,

91 
	tGC⁄√˘Fœgs
 
	tÊags
,

92 
	tgpoöãr
 
	tu£r_d©a
);

94 
GTy≥
 
	$gtk_buûdî_gë_ty≥
 (Ë
G_GNUC_CONST
;

95 
GtkBuûdî
* 
	`gtk_buûdî_√w
 ();

97 
guöt
 
	`gtk_buûdî_add_‰om_fûe
 (
GtkBuûdî
 *
buûdî
,

98 c⁄° 
gch¨
 *
fûíame
,

99 
GEº‹
 **
îr‹
);

100 
guöt
 
	`gtk_buûdî_add_‰om_°rög
 (
GtkBuûdî
 *
buûdî
,

101 c⁄° 
gch¨
 *
buf„r
,

102 
gsize
 
Àngth
,

103 
GEº‹
 **
îr‹
);

104 
guöt
 
	`gtk_buûdî_add_obje˘s_‰om_fûe
 (
GtkBuûdî
 *
buûdî
,

105 c⁄° 
gch¨
 *
fûíame
,

106 
gch¨
 **
obje˘_ids
,

107 
GEº‹
 **
îr‹
);

108 
guöt
 
	`gtk_buûdî_add_obje˘s_‰om_°rög
 (
GtkBuûdî
 *
buûdî
,

109 c⁄° 
gch¨
 *
buf„r
,

110 
gsize
 
Àngth
,

111 
gch¨
 **
obje˘_ids
,

112 
GEº‹
 **
îr‹
);

113 
GObje˘
* 
	`gtk_buûdî_gë_obje˘
 (
GtkBuûdî
 *
buûdî
,

114 c⁄° 
gch¨
 *
«me
);

115 
GSLi°
* 
	`gtk_buûdî_gë_obje˘s
 (
GtkBuûdî
 *
buûdî
);

116 
	`gtk_buûdî_c⁄√˘_sig«ls
 (
GtkBuûdî
 *
buûdî
,

117 
gpoöãr
 
u£r_d©a
);

118 
	`gtk_buûdî_c⁄√˘_sig«ls_fuŒ
 (
GtkBuûdî
 *
buûdî
,

119 
GtkBuûdîC⁄√˘Func
 
func
,

120 
gpoöãr
 
u£r_d©a
);

121 
	`gtk_buûdî_£t_å™¶©i⁄_domaö
 (
GtkBuûdî
 *
buûdî
,

122 c⁄° 
gch¨
 *
domaö
);

123 c⁄° 
gch¨
* 
	`gtk_buûdî_gë_å™¶©i⁄_domaö
 (
GtkBuûdî
 *
buûdî
);

124 
GTy≥
 
	`gtk_buûdî_gë_ty≥_‰om_«me
 (
GtkBuûdî
 *
buûdî
,

125 c⁄° *
ty≥_«me
);

127 
gboﬁón
 
	`gtk_buûdî_vÆue_‰om_°rög
 (
GtkBuûdî
 *
buûdî
,

128 
GP¨amS≥c
 *
p•ec
,

129 c⁄° 
gch¨
 *
°rög
,

130 
GVÆue
 *
vÆue
,

131 
GEº‹
 **
îr‹
);

132 
gboﬁón
 
	`gtk_buûdî_vÆue_‰om_°rög_ty≥
 (
GtkBuûdî
 *
buûdî
,

133 
GTy≥
 
ty≥
,

134 c⁄° 
gch¨
 *
°rög
,

135 
GVÆue
 *
vÆue
,

136 
GEº‹
 **
îr‹
);

138 
	#GTK_BUILDER_WARN_INVALID_CHILD_TYPE
(
obje˘
, 
ty≥
) \

139 
	`g_w¨nög
 ("'%s' i†nŸá vÆid chûdÅy≥ o‡'%s'", 
ty≥
, 
	`g_ty≥_«me
 (
	`G_OBJECT_TYPE
 (
obje˘
)))

	)

141 
G_END_DECLS


	@/usr/include/gtk/gtkbutton.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_BUTTON_H__


32 
	#__GTK_BUTTON_H__


	)

35 
	~<gtk/gtkbö.h
>

36 
	~<gtk/gtkimage.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_BUTTON
 (
	`gtk_buâ⁄_gë_ty≥
 ())

	)

42 
	#GTK_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_BUTTON
, 
GtkBuâ⁄
))

	)

43 
	#GTK_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_BUTTON
, 
GtkBuâ⁄Cœss
))

	)

44 
	#GTK_IS_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_BUTTON
))

	)

45 
	#GTK_IS_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_BUTTON
))

	)

46 
	#GTK_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_BUTTON
, 
GtkBuâ⁄Cœss
))

	)

48 
_GtkBuâ⁄
 
	tGtkBuâ⁄
;

49 
_GtkBuâ⁄Cœss
 
	tGtkBuâ⁄Cœss
;

51 
	s_GtkBuâ⁄


53 
GtkBö
 
	mbö
;

55 
GdkWödow
 *
GSEAL
 (
evít_wödow
);

57 
gch¨
 *
GSEAL
 (
œbñ_ãxt
);

59 
guöt
 
GSEAL
 (
a˘iv©e_timeout
);

61 
guöt
 
GSEAL
 (
c⁄°ru˘ed
) : 1;

62 
guöt
 
GSEAL
 (
ö_buâ⁄
) : 1;

63 
guöt
 
GSEAL
 (
buâ⁄_down
) : 1;

64 
guöt
 
GSEAL
 (
ªlõf
) : 2;

65 
guöt
 
GSEAL
 (
u£_undîlöe
) : 1;

66 
guöt
 
GSEAL
 (
u£_°ock
) : 1;

67 
guöt
 
GSEAL
 (
dïªs£d
) : 1;

68 
guöt
 
GSEAL
 (
dïªss_⁄_a˘iv©e
) : 1;

69 
guöt
 
GSEAL
 (
focus_⁄_˛ick
) : 1;

72 
	s_GtkBuâ⁄Cœss


74 
GtkBöCœss
 
	m∑ª¡_˛ass
;

76 (* 
	m¥es£d
Ë(
GtkBuâ⁄
 *
	mbuâ⁄
);

77 (* 
	mªÀa£d
Ë(
GtkBuâ⁄
 *
	mbuâ⁄
);

78 (* 
	m˛icked
Ë(
GtkBuâ⁄
 *
	mbuâ⁄
);

79 (* 
	míãr
Ë(
GtkBuâ⁄
 *
	mbuâ⁄
);

80 (* 
	mÀave
Ë(
GtkBuâ⁄
 *
	mbuâ⁄
);

81 (* 
	ma˘iv©e
Ë(
GtkBuâ⁄
 *
	mbuâ⁄
);

84 (*
	m_gtk_ª£rved1
) ();

85 (*
	m_gtk_ª£rved2
) ();

86 (*
	m_gtk_ª£rved3
) ();

87 (*
	m_gtk_ª£rved4
) ();

91 
GTy≥
 
	$gtk_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

92 
GtkWidgë
* 
	`gtk_buâ⁄_√w
 ();

93 
GtkWidgë
* 
	`gtk_buâ⁄_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

94 
GtkWidgë
* 
	`gtk_buâ⁄_√w_‰om_°ock
 (c⁄° 
gch¨
 *
°ock_id
);

95 
GtkWidgë
* 
	`gtk_buâ⁄_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
œbñ
);

96 #i‚de‡
GTK_DISABLE_DEPRECATED


97 
	`gtk_buâ⁄_¥es£d
 (
GtkBuâ⁄
 *
buâ⁄
);

98 
	`gtk_buâ⁄_ªÀa£d
 (
GtkBuâ⁄
 *
buâ⁄
);

100 
	`gtk_buâ⁄_˛icked
 (
GtkBuâ⁄
 *
buâ⁄
);

101 #i‚de‡
GTK_DISABLE_DEPRECATED


102 
	`gtk_buâ⁄_íãr
 (
GtkBuâ⁄
 *
buâ⁄
);

103 
	`gtk_buâ⁄_Àave
 (
GtkBuâ⁄
 *
buâ⁄
);

106 
	`gtk_buâ⁄_£t_ªlõf
 (
GtkBuâ⁄
 *
buâ⁄
,

107 
GtkRñõfStyÀ
 
√w°yÀ
);

108 
GtkRñõfStyÀ
 
	`gtk_buâ⁄_gë_ªlõf
 (
GtkBuâ⁄
 *
buâ⁄
);

109 
	`gtk_buâ⁄_£t_œbñ
 (
GtkBuâ⁄
 *
buâ⁄
,

110 c⁄° 
gch¨
 *
œbñ
);

111 
G_CONST_RETURN
 
gch¨
 *
	`gtk_buâ⁄_gë_œbñ
 (
GtkBuâ⁄
 *
buâ⁄
);

112 
	`gtk_buâ⁄_£t_u£_undîlöe
 (
GtkBuâ⁄
 *
buâ⁄
,

113 
gboﬁón
 
u£_undîlöe
);

114 
gboﬁón
 
	`gtk_buâ⁄_gë_u£_undîlöe
 (
GtkBuâ⁄
 *
buâ⁄
);

115 
	`gtk_buâ⁄_£t_u£_°ock
 (
GtkBuâ⁄
 *
buâ⁄
,

116 
gboﬁón
 
u£_°ock
);

117 
gboﬁón
 
	`gtk_buâ⁄_gë_u£_°ock
 (
GtkBuâ⁄
 *
buâ⁄
);

118 
	`gtk_buâ⁄_£t_focus_⁄_˛ick
 (
GtkBuâ⁄
 *
buâ⁄
,

119 
gboﬁón
 
focus_⁄_˛ick
);

120 
gboﬁón
 
	`gtk_buâ⁄_gë_focus_⁄_˛ick
 (
GtkBuâ⁄
 *
buâ⁄
);

121 
	`gtk_buâ⁄_£t_Æignmít
 (
GtkBuâ⁄
 *
buâ⁄
,

122 
gÊﬂt
 
xÆign
,

123 
gÊﬂt
 
yÆign
);

124 
	`gtk_buâ⁄_gë_Æignmít
 (
GtkBuâ⁄
 *
buâ⁄
,

125 
gÊﬂt
 *
xÆign
,

126 
gÊﬂt
 *
yÆign
);

127 
	`gtk_buâ⁄_£t_image
 (
GtkBuâ⁄
 *
buâ⁄
,

128 
GtkWidgë
 *
image
);

129 
GtkWidgë
* 
	`gtk_buâ⁄_gë_image
 (
GtkBuâ⁄
 *
buâ⁄
);

130 
	`gtk_buâ⁄_£t_image_posôi⁄
 (
GtkBuâ⁄
 *
buâ⁄
,

131 
GtkPosôi⁄Ty≥
 
posôi⁄
);

132 
GtkPosôi⁄Ty≥
 
	`gtk_buâ⁄_gë_image_posôi⁄
 (
GtkBuâ⁄
 *
buâ⁄
);

134 
	`_gtk_buâ⁄_£t_dïªs£d
 (
GtkBuâ⁄
 *
buâ⁄
,

135 
gboﬁón
 
dïªs£d
);

136 
	`_gtk_buâ⁄_∑öt
 (
GtkBuâ⁄
 *
buâ⁄
,

137 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

138 
GtkSèãTy≥
 
°©e_ty≥
,

139 
GtkShadowTy≥
 
shadow_ty≥
,

140 c⁄° 
gch¨
 *
maö_dëaû
,

141 c⁄° 
gch¨
 *
deÁu…_dëaû
);

143 
G_END_DECLS


	@/usr/include/gtk/gtkcalendar.h

29 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

33 #i‚de‡
__GTK_CALENDAR_H__


34 
	#__GTK_CALENDAR_H__


	)

37 
	~<gtk/gtkwidgë.h
>

40 
	~<gtk/gtksig«l.h
>

43 
	gG_BEGIN_DECLS


45 
	#GTK_TYPE_CALENDAR
 (
	`gtk_ˇÀnd¨_gë_ty≥
 ())

	)

46 
	#GTK_CALENDAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CALENDAR
, 
GtkCÆíd¨
))

	)

47 
	#GTK_CALENDAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CALENDAR
, 
GtkCÆíd¨Cœss
))

	)

48 
	#GTK_IS_CALENDAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CALENDAR
))

	)

49 
	#GTK_IS_CALENDAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CALENDAR
))

	)

50 
	#GTK_CALENDAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CALENDAR
, 
GtkCÆíd¨Cœss
))

	)

53 
_GtkCÆíd¨
 
	tGtkCÆíd¨
;

54 
_GtkCÆíd¨Cœss
 
	tGtkCÆíd¨Cœss
;

56 
_GtkCÆíd¨Priv©e
 
	tGtkCÆíd¨Priv©e
;

74 
	mGTK_CALENDAR_SHOW_HEADING
 = 1 << 0,

75 
	mGTK_CALENDAR_SHOW_DAY_NAMES
 = 1 << 1,

76 
	mGTK_CALENDAR_NO_MONTH_CHANGE
 = 1 << 2,

77 
	mGTK_CALENDAR_SHOW_WEEK_NUMBERS
 = 1 << 3,

78 
	mGTK_CALENDAR_WEEK_START_MONDAY
 = 1 << 4,

79 
	mGTK_CALENDAR_SHOW_DETAILS
 = 1 << 5

80 } 
	tGtkCÆíd¨Di•œyO±i⁄s
;

99 
	ggch¨
* (*
	tGtkCÆíd¨DëaûFunc
Ë(
	tGtkCÆíd¨
 *
	tˇÀnd¨
,

100 
	tguöt
 
	tyór
,

101 
	tguöt
 
	tm⁄th
,

102 
	tguöt
 
	tday
,

103 
	tgpoöãr
 
	tu£r_d©a
);

105 
	s_GtkCÆíd¨


107 
GtkWidgë
 
	mwidgë
;

109 
GtkStyÀ
 *
GSEAL
 (
hódî_°yÀ
);

110 
GtkStyÀ
 *
GSEAL
 (
œbñ_°yÀ
);

112 
göt
 
GSEAL
 (
m⁄th
);

113 
göt
 
GSEAL
 (
yór
);

114 
göt
 
GSEAL
 (
£À˘ed_day
);

116 
göt
 
GSEAL
 (
day_m⁄th
[6][7]);

117 
göt
 
GSEAL
 (
day
[6][7]);

119 
göt
 
GSEAL
 (
num_m¨ked_d©es
);

120 
göt
 
GSEAL
 (
m¨ked_d©e
[31]);

121 
GtkCÆíd¨Di•œyO±i⁄s
 
GSEAL
 (
di•œy_Êags
);

122 
GdkCﬁ‹
 
GSEAL
 (
m¨ked_d©e_cﬁ‹
[31]);

124 
GdkGC
 *
GSEAL
 (
gc
);

125 
GdkGC
 *
GSEAL
 (
x‹_gc
);

127 
göt
 
GSEAL
 (
focus_row
);

128 
göt
 
GSEAL
 (
focus_cﬁ
);

130 
göt
 
GSEAL
 (
highlight_row
);

131 
göt
 
GSEAL
 (
highlight_cﬁ
);

133 
GtkCÆíd¨Priv©e
 *
GSEAL
 (
¥iv
);

134 
gch¨
 
GSEAL
 (
grow_•a˚
 [32]);

137 (*
	m_gtk_ª£rved1
) ();

138 (*
	m_gtk_ª£rved2
) ();

139 (*
	m_gtk_ª£rved3
) ();

140 (*
	m_gtk_ª£rved4
) ();

143 
	s_GtkCÆíd¨Cœss


145 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

148 (* 
	mm⁄th_ch™ged
Ë(
GtkCÆíd¨
 *
	mˇÀnd¨
);

149 (* 
	mday_£À˘ed
Ë(
GtkCÆíd¨
 *
	mˇÀnd¨
);

150 (* 
	mday_£À˘ed_doubÀ_˛ick
Ë(
GtkCÆíd¨
 *
	mˇÀnd¨
);

151 (* 
	m¥ev_m⁄th
Ë(
GtkCÆíd¨
 *
	mˇÀnd¨
);

152 (* 
	m√xt_m⁄th
Ë(
GtkCÆíd¨
 *
	mˇÀnd¨
);

153 (* 
	m¥ev_yór
Ë(
GtkCÆíd¨
 *
	mˇÀnd¨
);

154 (* 
	m√xt_yór
Ë(
GtkCÆíd¨
 *
	mˇÀnd¨
);

159 
GTy≥
 
	$gtk_ˇÀnd¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

160 
GtkWidgë
* 
	`gtk_ˇÀnd¨_√w
 ();

162 
gboﬁón
 
	`gtk_ˇÀnd¨_£À˘_m⁄th
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

163 
guöt
 
m⁄th
,

164 
guöt
 
yór
);

165 
	`gtk_ˇÀnd¨_£À˘_day
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

166 
guöt
 
day
);

168 
gboﬁón
 
	`gtk_ˇÀnd¨_m¨k_day
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

169 
guöt
 
day
);

170 
gboﬁón
 
	`gtk_ˇÀnd¨_unm¨k_day
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

171 
guöt
 
day
);

172 
	`gtk_ˇÀnd¨_˛ór_m¨ks
 (
GtkCÆíd¨
 *
ˇÀnd¨
);

175 
	`gtk_ˇÀnd¨_£t_di•œy_›ti⁄s
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

176 
GtkCÆíd¨Di•œyO±i⁄s
 
Êags
);

177 
GtkCÆíd¨Di•œyO±i⁄s


178 
	`gtk_ˇÀnd¨_gë_di•œy_›ti⁄s
 (
GtkCÆíd¨
 *
ˇÀnd¨
);

179 #i‚de‡
GTK_DISABLE_DEPRECATED


180 
	`gtk_ˇÀnd¨_di•œy_›ti⁄s
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

181 
GtkCÆíd¨Di•œyO±i⁄s
 
Êags
);

184 
	`gtk_ˇÀnd¨_gë_d©e
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

185 
guöt
 *
yór
,

186 
guöt
 *
m⁄th
,

187 
guöt
 *
day
);

189 
	`gtk_ˇÀnd¨_£t_dëaû_func
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

190 
GtkCÆíd¨DëaûFunc
 
func
,

191 
gpoöãr
 
d©a
,

192 
GDe°royNŸify
 
de°roy
);

194 
	`gtk_ˇÀnd¨_£t_dëaû_width_ch¨s
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

195 
göt
 
ch¨s
);

196 
	`gtk_ˇÀnd¨_£t_dëaû_height_rows
 (
GtkCÆíd¨
 *
ˇÀnd¨
,

197 
göt
 
rows
);

199 
göt
 
	`gtk_ˇÀnd¨_gë_dëaû_width_ch¨s
 (
GtkCÆíd¨
 *
ˇÀnd¨
);

200 
göt
 
	`gtk_ˇÀnd¨_gë_dëaû_height_rows
 (
GtkCÆíd¨
 *
ˇÀnd¨
);

202 #i‚de‡
GTK_DISABLE_DEPRECATED


203 
	`gtk_ˇÀnd¨_‰ìze
 (
GtkCÆíd¨
 *
ˇÀnd¨
);

204 
	`gtk_ˇÀnd¨_thaw
 (
GtkCÆíd¨
 *
ˇÀnd¨
);

207 
G_END_DECLS


	@/usr/include/gtk/gtkcelleditable.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_EDITABLE_H__


25 
	#__GTK_CELL_EDITABLE_H__


	)

27 
	~<gtk/gtkwidgë.h
>

29 
	gG_BEGIN_DECLS


31 
	#GTK_TYPE_CELL_EDITABLE
 (
	`gtk_˚Œ_edôabÀ_gë_ty≥
 ())

	)

32 
	#GTK_CELL_EDITABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_EDITABLE
, 
GtkCñlEdôabÀ
))

	)

33 
	#GTK_CELL_EDITABLE_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((obj), 
GTK_TYPE_CELL_EDITABLE
, 
GtkCñlEdôabÀIÁ˚
))

	)

34 
	#GTK_IS_CELL_EDITABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_EDITABLE
))

	)

35 
	#GTK_CELL_EDITABLE_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_CELL_EDITABLE
, 
GtkCñlEdôabÀIÁ˚
))

	)

37 
_GtkCñlEdôabÀ
 
	tGtkCñlEdôabÀ
;

38 
_GtkCñlEdôabÀIÁ˚
 
	tGtkCñlEdôabÀIÁ˚
;

40 
	s_GtkCñlEdôabÀIÁ˚


42 
GTy≥I¡îÁ˚
 
	mg_iÁ˚
;

45 (* 
	medôög_d⁄e
Ë(
GtkCñlEdôabÀ
 *
	m˚Œ_edôabÀ
);

46 (* 
	mªmove_widgë
Ë(
GtkCñlEdôabÀ
 *
	m˚Œ_edôabÀ
);

49 (* 
	m°¨t_edôög
Ë(
GtkCñlEdôabÀ
 *
	m˚Œ_edôabÀ
,

50 
GdkEvít
 *
	mevít
);

54 
GTy≥
 
	$gtk_˚Œ_edôabÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

56 
	`gtk_˚Œ_edôabÀ_°¨t_edôög
 (
GtkCñlEdôabÀ
 *
˚Œ_edôabÀ
,

57 
GdkEvít
 *
evít
);

58 
	`gtk_˚Œ_edôabÀ_edôög_d⁄e
 (
GtkCñlEdôabÀ
 *
˚Œ_edôabÀ
);

59 
	`gtk_˚Œ_edôabÀ_ªmove_widgë
 (
GtkCñlEdôabÀ
 *
˚Œ_edôabÀ
);

62 
G_END_DECLS


	@/usr/include/gtk/gtkcelllayout.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_LAYOUT_H__


25 
	#__GTK_CELL_LAYOUT_H__


	)

27 
	~<gtk/gtk˚Œªndîî.h
>

28 
	~<gtk/gtkåìvõwcﬁumn.h
>

29 
	~<gtk/gtkbuûdabÀ.h
>

30 
	~<gtk/gtkbuûdî.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_CELL_LAYOUT
 (
	`gtk_˚Œ_œyout_gë_ty≥
 ())

	)

35 
	#GTK_CELL_LAYOUT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_LAYOUT
, 
GtkCñlLayout
))

	)

36 
	#GTK_IS_CELL_LAYOUT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_LAYOUT
))

	)

37 
	#GTK_CELL_LAYOUT_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_CELL_LAYOUT
, 
GtkCñlLayoutIÁ˚
))

	)

39 
_GtkCñlLayout
 
	tGtkCñlLayout
;

40 
_GtkCñlLayoutIÁ˚
 
	tGtkCñlLayoutIÁ˚
;

43 (* 
	tGtkCñlLayoutD©aFunc
Ë(
	tGtkCñlLayout
 *
	t˚Œ_œyout
,

44 
	tGtkCñlRídîî
 *
	t˚Œ
,

45 
	tGtkTªeModñ
 *
	tåì_modñ
,

46 
	tGtkTªeIãr
 *
	tôî
,

47 
	tgpoöãr
 
	td©a
);

49 
	s_GtkCñlLayoutIÁ˚


51 
GTy≥I¡îÁ˚
 
g_iÁ˚
;

54 (* 
∑ck_°¨t
Ë(
GtkCñlLayout
 *
˚Œ_œyout
,

55 
GtkCñlRídîî
 *
˚Œ
,

56 
gboﬁón
 
ex∑nd
);

57 (* 
∑ck_íd
Ë(
GtkCñlLayout
 *
˚Œ_œyout
,

58 
GtkCñlRídîî
 *
˚Œ
,

59 
gboﬁón
 
ex∑nd
);

60 (* 
˛ór
Ë(
GtkCñlLayout
 *
˚Œ_œyout
);

61 (* 
add_©åibuã
Ë(
GtkCñlLayout
 *
˚Œ_œyout
,

62 
GtkCñlRídîî
 *
˚Œ
,

63 c⁄° 
gch¨
 *
©åibuã
,

64 
göt
 
cﬁumn
);

65 (* 
£t_˚Œ_d©a_func
Ë(
GtkCñlLayout
 *
˚Œ_œyout
,

66 
GtkCñlRídîî
 *
˚Œ
,

67 
GtkCñlLayoutD©aFunc
 
func
,

68 
gpoöãr
 
func_d©a
,

69 
GDe°royNŸify
 
de°roy
);

70 (* 
˛ór_©åibuãs
Ë(
GtkCñlLayout
 *
˚Œ_œyout
,

71 
GtkCñlRídîî
 *
˚Œ
);

72 (* 
ª‹dî
Ë(
GtkCñlLayout
 *
˚Œ_œyout
,

73 
GtkCñlRídîî
 *
˚Œ
,

74 
göt
 
posôi⁄
);

75 
GLi°
* (* 
gë_˚Œs
Ë(
GtkCñlLayout
 *
˚Œ_œyout
);

78 
GTy≥
 
	$gtk_˚Œ_œyout_gë_ty≥
 (Ë
G_GNUC_CONST
;

79 
	`gtk_˚Œ_œyout_∑ck_°¨t
 (
GtkCñlLayout
 *
˚Œ_œyout
,

80 
GtkCñlRídîî
 *
˚Œ
,

81 
gboﬁón
 
ex∑nd
);

82 
	`gtk_˚Œ_œyout_∑ck_íd
 (
GtkCñlLayout
 *
˚Œ_œyout
,

83 
GtkCñlRídîî
 *
˚Œ
,

84 
gboﬁón
 
ex∑nd
);

85 
GLi°
 *
	`gtk_˚Œ_œyout_gë_˚Œs
 (
GtkCñlLayout
 *
˚Œ_œyout
);

86 
	`gtk_˚Œ_œyout_˛ór
 (
GtkCñlLayout
 *
˚Œ_œyout
);

87 
	$gtk_˚Œ_œyout_£t_©åibuãs
 (
GtkCñlLayout
 *
˚Œ_œyout
,

88 
GtkCñlRídîî
 *
˚Œ
,

89 ...Ë
G_GNUC_NULL_TERMINATED
;

90 
	`gtk_˚Œ_œyout_add_©åibuã
 (
GtkCñlLayout
 *
˚Œ_œyout
,

91 
GtkCñlRídîî
 *
˚Œ
,

92 c⁄° 
gch¨
 *
©åibuã
,

93 
göt
 
cﬁumn
);

94 
	`gtk_˚Œ_œyout_£t_˚Œ_d©a_func
 (
GtkCñlLayout
 *
˚Œ_œyout
,

95 
GtkCñlRídîî
 *
˚Œ
,

96 
GtkCñlLayoutD©aFunc
 
func
,

97 
gpoöãr
 
func_d©a
,

98 
GDe°royNŸify
 
de°roy
);

99 
	`gtk_˚Œ_œyout_˛ór_©åibuãs
 (
GtkCñlLayout
 *
˚Œ_œyout
,

100 
GtkCñlRídîî
 *
˚Œ
);

101 
	`gtk_˚Œ_œyout_ª‹dî
 (
GtkCñlLayout
 *
˚Œ_œyout
,

102 
GtkCñlRídîî
 *
˚Œ
,

103 
göt
 
posôi⁄
);

104 
gboﬁón
 
	`_gtk_˚Œ_œyout_buûdabÀ_cu°om_èg_°¨t
 (
GtkBuûdabÀ
 *
buûdabÀ
,

105 
GtkBuûdî
 *
buûdî
,

106 
GObje˘
 *
chûd
,

107 c⁄° 
gch¨
 *
èg«me
,

108 
GM¨kupP¨£r
 *
∑r£r
,

109 
gpoöãr
 *
d©a
);

110 
	`_gtk_˚Œ_œyout_buûdabÀ_cu°om_èg_íd
 (
GtkBuûdabÀ
 *
buûdabÀ
,

111 
GtkBuûdî
 *
buûdî
,

112 
GObje˘
 *
chûd
,

113 c⁄° 
gch¨
 *
èg«me
,

114 
gpoöãr
 *
d©a
);

115 
	`_gtk_˚Œ_œyout_buûdabÀ_add_chûd
 (
GtkBuûdabÀ
 *
buûdabÀ
,

116 
GtkBuûdî
 *
buûdî
,

117 
GObje˘
 *
chûd
,

118 c⁄° 
gch¨
 *
ty≥
);

120 
G_END_DECLS


	@/usr/include/gtk/gtkcellrenderer.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_RENDERER_H__


25 
	#__GTK_CELL_RENDERER_H__


	)

27 
	~<gtk/gtk˚ŒedôabÀ.h
>

29 
G_BEGIN_DECLS


33 
	mGTK_CELL_RENDERER_SELECTED
 = 1 << 0,

34 
	mGTK_CELL_RENDERER_PRELIT
 = 1 << 1,

35 
	mGTK_CELL_RENDERER_INSENSITIVE
 = 1 << 2,

37 
	mGTK_CELL_RENDERER_SORTED
 = 1 << 3,

38 
	mGTK_CELL_RENDERER_FOCUSED
 = 1 << 4

39 } 
	tGtkCñlRídîîSèã
;

43 
	mGTK_CELL_RENDERER_MODE_INERT
,

44 
	mGTK_CELL_RENDERER_MODE_ACTIVATABLE
,

45 
	mGTK_CELL_RENDERER_MODE_EDITABLE


46 } 
	tGtkCñlRídîîMode
;

48 
	#GTK_TYPE_CELL_RENDERER
 (
	`gtk_˚Œ_ªndîî_gë_ty≥
 ())

	)

49 
	#GTK_CELL_RENDERER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER
, 
GtkCñlRídîî
))

	)

50 
	#GTK_CELL_RENDERER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER
, 
GtkCñlRídîîCœss
))

	)

51 
	#GTK_IS_CELL_RENDERER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER
))

	)

52 
	#GTK_IS_CELL_RENDERER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER
))

	)

53 
	#GTK_CELL_RENDERER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER
, 
GtkCñlRídîîCœss
))

	)

55 
_GtkCñlRídîî
 
	tGtkCñlRídîî
;

56 
_GtkCñlRídîîCœss
 
	tGtkCñlRídîîCœss
;

58 
	s_GtkCñlRídîî


60 
GtkObje˘
 
	m∑ª¡
;

62 
gÊﬂt
 
GSEAL
 (
xÆign
);

63 
gÊﬂt
 
GSEAL
 (
yÆign
);

65 
göt
 
GSEAL
 (
width
);

66 
göt
 
GSEAL
 (
height
);

68 
guöt16
 
GSEAL
 (
x∑d
);

69 
guöt16
 
GSEAL
 (
y∑d
);

71 
guöt
 
GSEAL
 (
mode
) : 2;

72 
guöt
 
GSEAL
 (
visibÀ
) : 1;

73 
guöt
 
GSEAL
 (
is_ex∑ndî
) : 1;

74 
guöt
 
GSEAL
 (
is_ex∑nded
) : 1;

75 
guöt
 
GSEAL
 (
˚Œ_background_£t
) : 1;

76 
guöt
 
GSEAL
 (
£nsôive
) : 1;

77 
guöt
 
GSEAL
 (
edôög
) : 1;

80 
	s_GtkCñlRídîîCœss


82 
GtkObje˘Cœss
 
	m∑ª¡_˛ass
;

85 (* 
	mgë_size
Ë(
GtkCñlRídîî
 *
	m˚Œ
,

86 
GtkWidgë
 *
	mwidgë
,

87 
GdkRe˘™gÀ
 *
	m˚Œ_¨ó
,

88 
göt
 *
	mx_off£t
,

89 
göt
 *
	my_off£t
,

90 
göt
 *
	mwidth
,

91 
göt
 *
	mheight
);

92 (* 
	mªndî
Ë(
GtkCñlRídîî
 *
	m˚Œ
,

93 
GdkDøwabÀ
 *
	mwödow
,

94 
GtkWidgë
 *
	mwidgë
,

95 
GdkRe˘™gÀ
 *
	mbackground_¨ó
,

96 
GdkRe˘™gÀ
 *
	m˚Œ_¨ó
,

97 
GdkRe˘™gÀ
 *
	mexpo£_¨ó
,

98 
GtkCñlRídîîSèã
 
	mÊags
);

99 
gboﬁón
 (* 
a˘iv©e
Ë(
GtkCñlRídîî
 *
	m˚Œ
,

100 
GdkEvít
 *
	mevít
,

101 
GtkWidgë
 *
	mwidgë
,

102 c⁄° 
gch¨
 *
	m∑th
,

103 
GdkRe˘™gÀ
 *
	mbackground_¨ó
,

104 
GdkRe˘™gÀ
 *
	m˚Œ_¨ó
,

105 
GtkCñlRídîîSèã
 
	mÊags
);

106 
	mGtkCñlEdôabÀ
 *(* 
	m°¨t_edôög
Ë(
GtkCñlRídîî
 *
	m˚Œ
,

107 
GdkEvít
 *
	mevít
,

108 
GtkWidgë
 *
	mwidgë
,

109 c⁄° 
gch¨
 *
	m∑th
,

110 
GdkRe˘™gÀ
 *
	mbackground_¨ó
,

111 
GdkRe˘™gÀ
 *
	m˚Œ_¨ó
,

112 
GtkCñlRídîîSèã
 
	mÊags
);

115 (* 
	medôög_ˇn˚Àd
Ë(
GtkCñlRídîî
 *
	m˚Œ
);

116 (* 
	medôög_°¨ãd
Ë(
GtkCñlRídîî
 *
	m˚Œ
,

117 
GtkCñlEdôabÀ
 *
	medôabÀ
,

118 c⁄° 
gch¨
 *
	m∑th
);

121 (*
	m_gtk_ª£rved1
) ();

122 (*
	m_gtk_ª£rved2
) ();

125 
GTy≥
 
	$gtk_˚Œ_ªndîî_gë_ty≥
 (Ë
G_GNUC_CONST
;

127 
	`gtk_˚Œ_ªndîî_gë_size
 (
GtkCñlRídîî
 *
˚Œ
,

128 
GtkWidgë
 *
widgë
,

129 c⁄° 
GdkRe˘™gÀ
 *
˚Œ_¨ó
,

130 
göt
 *
x_off£t
,

131 
göt
 *
y_off£t
,

132 
göt
 *
width
,

133 
göt
 *
height
);

134 
	`gtk_˚Œ_ªndîî_ªndî
 (
GtkCñlRídîî
 *
˚Œ
,

135 
GdkWödow
 *
wödow
,

136 
GtkWidgë
 *
widgë
,

137 c⁄° 
GdkRe˘™gÀ
 *
background_¨ó
,

138 c⁄° 
GdkRe˘™gÀ
 *
˚Œ_¨ó
,

139 c⁄° 
GdkRe˘™gÀ
 *
expo£_¨ó
,

140 
GtkCñlRídîîSèã
 
Êags
);

141 
gboﬁón
 
	`gtk_˚Œ_ªndîî_a˘iv©e
 (
GtkCñlRídîî
 *
˚Œ
,

142 
GdkEvít
 *
evít
,

143 
GtkWidgë
 *
widgë
,

144 c⁄° 
gch¨
 *
∑th
,

145 c⁄° 
GdkRe˘™gÀ
 *
background_¨ó
,

146 c⁄° 
GdkRe˘™gÀ
 *
˚Œ_¨ó
,

147 
GtkCñlRídîîSèã
 
Êags
);

148 
GtkCñlEdôabÀ
 *
	`gtk_˚Œ_ªndîî_°¨t_edôög
 (
GtkCñlRídîî
 *
˚Œ
,

149 
GdkEvít
 *
evít
,

150 
GtkWidgë
 *
widgë
,

151 c⁄° 
gch¨
 *
∑th
,

152 c⁄° 
GdkRe˘™gÀ
 *
background_¨ó
,

153 c⁄° 
GdkRe˘™gÀ
 *
˚Œ_¨ó
,

154 
GtkCñlRídîîSèã
 
Êags
);

156 
	`gtk_˚Œ_ªndîî_£t_fixed_size
 (
GtkCñlRídîî
 *
˚Œ
,

157 
göt
 
width
,

158 
göt
 
height
);

159 
	`gtk_˚Œ_ªndîî_gë_fixed_size
 (
GtkCñlRídîî
 *
˚Œ
,

160 
göt
 *
width
,

161 
göt
 *
height
);

163 
	`gtk_˚Œ_ªndîî_£t_Æignmít
 (
GtkCñlRídîî
 *
˚Œ
,

164 
gÊﬂt
 
xÆign
,

165 
gÊﬂt
 
yÆign
);

166 
	`gtk_˚Œ_ªndîî_gë_Æignmít
 (
GtkCñlRídîî
 *
˚Œ
,

167 
gÊﬂt
 *
xÆign
,

168 
gÊﬂt
 *
yÆign
);

170 
	`gtk_˚Œ_ªndîî_£t_∑ddög
 (
GtkCñlRídîî
 *
˚Œ
,

171 
göt
 
x∑d
,

172 
göt
 
y∑d
);

173 
	`gtk_˚Œ_ªndîî_gë_∑ddög
 (
GtkCñlRídîî
 *
˚Œ
,

174 
göt
 *
x∑d
,

175 
göt
 *
y∑d
);

177 
	`gtk_˚Œ_ªndîî_£t_visibÀ
 (
GtkCñlRídîî
 *
˚Œ
,

178 
gboﬁón
 
visibÀ
);

179 
gboﬁón
 
	`gtk_˚Œ_ªndîî_gë_visibÀ
 (
GtkCñlRídîî
 *
˚Œ
);

181 
	`gtk_˚Œ_ªndîî_£t_£nsôive
 (
GtkCñlRídîî
 *
˚Œ
,

182 
gboﬁón
 
£nsôive
);

183 
gboﬁón
 
	`gtk_˚Œ_ªndîî_gë_£nsôive
 (
GtkCñlRídîî
 *
˚Œ
);

186 #i‚de‡
GTK_DISABLE_DEPRECATED


187 
	`gtk_˚Œ_ªndîî_edôög_ˇn˚Àd
 (
GtkCñlRídîî
 *
˚Œ
);

189 
	`gtk_˚Œ_ªndîî_°›_edôög
 (
GtkCñlRídîî
 *
˚Œ
,

190 
gboﬁón
 
ˇn˚Àd
);

193 
G_END_DECLS


	@/usr/include/gtk/gtkcellrendereraccel.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_RENDERER_ACCEL_H__


25 
	#__GTK_CELL_RENDERER_ACCEL_H__


	)

27 
	~<gtk/gtk˚Œªndîîãxt.h
>

29 
	gG_BEGIN_DECLS


31 
	#GTK_TYPE_CELL_RENDERER_ACCEL
 (
	`gtk_˚Œ_ªndîî_ac˚l_gë_ty≥
 ())

	)

32 
	#GTK_CELL_RENDERER_ACCEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_ACCEL
, 
GtkCñlRídîîAc˚l
))

	)

33 
	#GTK_CELL_RENDERER_ACCEL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_ACCEL
, 
GtkCñlRídîîAc˚lCœss
))

	)

34 
	#GTK_IS_CELL_RENDERER_ACCEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_ACCEL
))

	)

35 
	#GTK_IS_CELL_RENDERER_ACCEL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_ACCEL
))

	)

36 
	#GTK_CELL_RENDERER_ACCEL_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_ACCEL
, 
GtkCñlRídîîAc˚lCœss
))

	)

38 
_GtkCñlRídîîAc˚l
 
	tGtkCñlRídîîAc˚l
;

39 
_GtkCñlRídîîAc˚lCœss
 
	tGtkCñlRídîîAc˚lCœss
;

44 
	mGTK_CELL_RENDERER_ACCEL_MODE_GTK
,

45 
	mGTK_CELL_RENDERER_ACCEL_MODE_OTHER


46 } 
	tGtkCñlRídîîAc˚lMode
;

49 
	s_GtkCñlRídîîAc˚l


51 
GtkCñlRídîîText
 
	m∑ª¡
;

54 
guöt
 
GSEAL
 (
ac˚l_key
);

55 
GdkModifõrTy≥
 
GSEAL
 (
ac˚l_mods
);

56 
guöt
 
GSEAL
 (
keycode
);

57 
GtkCñlRídîîAc˚lMode
 
GSEAL
 (
ac˚l_mode
);

59 
GtkWidgë
 *
GSEAL
 (
edô_widgë
);

60 
GtkWidgë
 *
GSEAL
 (
gøb_widgë
);

61 
GtkWidgë
 *
GSEAL
 (
sizög_œbñ
);

64 
	s_GtkCñlRídîîAc˚lCœss


66 
GtkCñlRídîîTextCœss
 
	m∑ª¡_˛ass
;

68 (* 
	mac˚l_edôed
Ë(
GtkCñlRídîîAc˚l
 *
	mac˚l
,

69 c⁄° 
gch¨
 *
	m∑th_°rög
,

70 
guöt
 
	mac˚l_key
,

71 
GdkModifõrTy≥
 
	mac˚l_mods
,

72 
guöt
 
	mh¨dw¨e_keycode
);

74 (* 
	mac˚l_˛óªd
Ë(
GtkCñlRídîîAc˚l
 *
	mac˚l
,

75 c⁄° 
gch¨
 *
	m∑th_°rög
);

78 (*
	m_gtk_ª£rved0
) ();

79 (*
	m_gtk_ª£rved1
) ();

80 (*
	m_gtk_ª£rved2
) ();

81 (*
	m_gtk_ª£rved3
) ();

82 (*
	m_gtk_ª£rved4
) ();

85 
GTy≥
 
	$gtk_˚Œ_ªndîî_ac˚l_gë_ty≥
 (Ë
G_GNUC_CONST
;

86 
GtkCñlRídîî
 *
	`gtk_˚Œ_ªndîî_ac˚l_√w
 ();

89 
G_END_DECLS


	@/usr/include/gtk/gtkcellrenderercombo.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_RENDERER_COMBO_H__


25 
	#__GTK_CELL_RENDERER_COMBO_H__


	)

27 
	~<gtk/gtkåìmodñ.h
>

28 
	~<gtk/gtk˚Œªndîîãxt.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_CELL_RENDERER_COMBO
 (
	`gtk_˚Œ_ªndîî_combo_gë_ty≥
 ())

	)

33 
	#GTK_CELL_RENDERER_COMBO
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_COMBO
, 
GtkCñlRídîîCombo
))

	)

34 
	#GTK_CELL_RENDERER_COMBO_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_COMBO
, 
GtkCñlRídîîComboCœss
))

	)

35 
	#GTK_IS_CELL_RENDERER_COMBO
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_COMBO
))

	)

36 
	#GTK_IS_CELL_RENDERER_COMBO_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_COMBO
))

	)

37 
	#GTK_CELL_RENDERER_COMBO_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_COMBO
, 
GtkCñlRídîîTextCœss
))

	)

39 
_GtkCñlRídîîCombo
 
	tGtkCñlRídîîCombo
;

40 
_GtkCñlRídîîComboCœss
 
	tGtkCñlRídîîComboCœss
;

42 
	s_GtkCñlRídîîCombo


44 
GtkCñlRídîîText
 
	m∑ª¡
;

46 
GtkTªeModñ
 *
GSEAL
 (
modñ
);

47 
göt
 
GSEAL
 (
ãxt_cﬁumn
);

48 
gboﬁón
 
GSEAL
 (
has_íåy
);

51 
guöt
 
GSEAL
 (
focus_out_id
);

54 
	s_GtkCñlRídîîComboCœss


56 
GtkCñlRídîîTextCœss
 
	m∑ª¡
;

59 
GTy≥
 
	$gtk_˚Œ_ªndîî_combo_gë_ty≥
 (Ë
G_GNUC_CONST
;

60 
GtkCñlRídîî
 *
	`gtk_˚Œ_ªndîî_combo_√w
 ();

62 
G_END_DECLS


	@/usr/include/gtk/gtkcellrendererpixbuf.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_RENDERER_PIXBUF_H__


25 
	#__GTK_CELL_RENDERER_PIXBUF_H__


	)

27 
	~<gtk/gtk˚Œªndîî.h
>

30 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_CELL_RENDERER_PIXBUF
 (
	`gtk_˚Œ_ªndîî_pixbuf_gë_ty≥
 ())

	)

34 
	#GTK_CELL_RENDERER_PIXBUF
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_PIXBUF
, 
GtkCñlRídîîPixbuf
))

	)

35 
	#GTK_CELL_RENDERER_PIXBUF_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_PIXBUF
, 
GtkCñlRídîîPixbufCœss
))

	)

36 
	#GTK_IS_CELL_RENDERER_PIXBUF
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_PIXBUF
))

	)

37 
	#GTK_IS_CELL_RENDERER_PIXBUF_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_PIXBUF
))

	)

38 
	#GTK_CELL_RENDERER_PIXBUF_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_PIXBUF
, 
GtkCñlRídîîPixbufCœss
))

	)

40 
_GtkCñlRídîîPixbuf
 
	tGtkCñlRídîîPixbuf
;

41 
_GtkCñlRídîîPixbufCœss
 
	tGtkCñlRídîîPixbufCœss
;

43 
	s_GtkCñlRídîîPixbuf


45 
GtkCñlRídîî
 
	m∑ª¡
;

48 
GdkPixbuf
 *
GSEAL
 (
pixbuf
);

49 
GdkPixbuf
 *
GSEAL
 (
pixbuf_ex∑ndî_›í
);

50 
GdkPixbuf
 *
GSEAL
 (
pixbuf_ex∑ndî_˛o£d
);

53 
	s_GtkCñlRídîîPixbufCœss


55 
GtkCñlRídîîCœss
 
	m∑ª¡_˛ass
;

58 (*
	m_gtk_ª£rved1
) ();

59 (*
	m_gtk_ª£rved2
) ();

60 (*
	m_gtk_ª£rved3
) ();

61 (*
	m_gtk_ª£rved4
) ();

64 
GTy≥
 
	$gtk_˚Œ_ªndîî_pixbuf_gë_ty≥
 (Ë
G_GNUC_CONST
;

65 
GtkCñlRídîî
 *
	`gtk_˚Œ_ªndîî_pixbuf_√w
 ();

68 
G_END_DECLS


	@/usr/include/gtk/gtkcellrendererprogress.h

28 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

32 #i‚de‡
__GTK_CELL_RENDERER_PROGRESS_H__


33 
	#__GTK_CELL_RENDERER_PROGRESS_H__


	)

35 
	~<gtk/gtk˚Œªndîî.h
>

37 
	gG_BEGIN_DECLS


39 
	#GTK_TYPE_CELL_RENDERER_PROGRESS
 (
	`gtk_˚Œ_ªndîî_¥ogªss_gë_ty≥
 ())

	)

40 
	#GTK_CELL_RENDERER_PROGRESS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_PROGRESS
, 
GtkCñlRídîîProgªss
))

	)

41 
	#GTK_CELL_RENDERER_PROGRESS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_PROGRESS
, 
GtkCñlRídîîProgªssCœss
))

	)

42 
	#GTK_IS_CELL_RENDERER_PROGRESS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_PROGRESS
))

	)

43 
	#GTK_IS_CELL_RENDERER_PROGRESS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_PROGRESS
))

	)

44 
	#GTK_CELL_RENDERER_PROGRESS_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_PROGRESS
, 
GtkCñlRídîîProgªssCœss
))

	)

46 
_GtkCñlRídîîProgªss
 
	tGtkCñlRídîîProgªss
;

47 
_GtkCñlRídîîProgªssCœss
 
	tGtkCñlRídîîProgªssCœss
;

48 
_GtkCñlRídîîProgªssPriv©e
 
	tGtkCñlRídîîProgªssPriv©e
;

50 
	s_GtkCñlRídîîProgªss


52 
GtkCñlRídîî
 
	m∑ª¡_ö°™˚
;

55 
GtkCñlRídîîProgªssPriv©e
 *
GSEAL
 (
¥iv
);

58 
	s_GtkCñlRídîîProgªssCœss


60 
GtkCñlRídîîCœss
 
	m∑ª¡_˛ass
;

63 (*
	m_gtk_ª£rved1
) ();

64 (*
	m_gtk_ª£rved2
) ();

65 (*
	m_gtk_ª£rved3
) ();

66 (*
	m_gtk_ª£rved4
) ();

69 
GTy≥
 
	$gtk_˚Œ_ªndîî_¥ogªss_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkCñlRídîî
* 
	`gtk_˚Œ_ªndîî_¥ogªss_√w
 ();

72 
G_END_DECLS


	@/usr/include/gtk/gtkcellrendererspin.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_RENDERER_SPIN_H__


25 
	#__GTK_CELL_RENDERER_SPIN_H__


	)

27 
	~<gtk/gtk˚Œªndîîãxt.h
>

29 
	gG_BEGIN_DECLS


31 
	#GTK_TYPE_CELL_RENDERER_SPIN
 (
	`gtk_˚Œ_ªndîî_•ö_gë_ty≥
 ())

	)

32 
	#GTK_CELL_RENDERER_SPIN
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_SPIN
, 
GtkCñlRídîîSpö
))

	)

33 
	#GTK_CELL_RENDERER_SPIN_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_SPIN
, 
GtkCñlRídîîSpöCœss
))

	)

34 
	#GTK_IS_CELL_RENDERER_SPIN
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_SPIN
))

	)

35 
	#GTK_IS_CELL_RENDERER_SPIN_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_SPIN
))

	)

36 
	#GTK_CELL_RENDERER_SPIN_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_SPIN
, 
GtkCñlRídîîTextCœss
))

	)

38 
_GtkCñlRídîîSpö
 
	tGtkCñlRídîîSpö
;

39 
_GtkCñlRídîîSpöCœss
 
	tGtkCñlRídîîSpöCœss
;

40 
_GtkCñlRídîîSpöPriv©e
 
	tGtkCñlRídîîSpöPriv©e
;

42 
	s_GtkCñlRídîîSpö


44 
GtkCñlRídîîText
 
	m∑ª¡
;

47 
	s_GtkCñlRídîîSpöCœss


49 
GtkCñlRídîîTextCœss
 
	m∑ª¡
;

52 
GTy≥
 
gtk_˚Œ_ªndîî_•ö_gë_ty≥
 ();

53 
GtkCñlRídîî
 *
gtk_˚Œ_ªndîî_•ö_√w
 ();

55 
	gG_END_DECLS


	@/usr/include/gtk/gtkcellrendererspinner.h

23 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

27 #i‚de‡
__GTK_CELL_RENDERER_SPINNER_H__


28 
	#__GTK_CELL_RENDERER_SPINNER_H__


	)

30 
	~<gtk/gtk˚Œªndîî.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_CELL_RENDERER_SPINNER
 (
	`gtk_˚Œ_ªndîî_•ö√r_gë_ty≥
 ())

	)

35 
	#GTK_CELL_RENDERER_SPINNER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_SPINNER
, 
GtkCñlRídîîSpö√r
))

	)

36 
	#GTK_CELL_RENDERER_SPINNER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_SPINNER
, 
GtkCñlRídîîSpö√rCœss
))

	)

37 
	#GTK_IS_CELL_RENDERER_SPINNER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_SPINNER
))

	)

38 
	#GTK_IS_CELL_RENDERER_SPINNER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_SPINNER
))

	)

39 
	#GTK_CELL_RENDERER_SPINNER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_SPINNER
, 
GtkCñlRídîîSpö√rCœss
))

	)

41 
_GtkCñlRídîîSpö√r
 
	tGtkCñlRídîîSpö√r
;

42 
_GtkCñlRídîîSpö√rCœss
 
	tGtkCñlRídîîSpö√rCœss
;

43 
_GtkCñlRídîîSpö√rPriv©e
 
	tGtkCñlRídîîSpö√rPriv©e
;

45 
	s_GtkCñlRídîîSpö√r


47 
GtkCñlRídîî
 
	m∑ª¡
;

48 
GtkCñlRídîîSpö√rPriv©e
 *
	m¥iv
;

51 
	s_GtkCñlRídîîSpö√rCœss


53 
GtkCñlRídîîCœss
 
	m∑ª¡_˛ass
;

56 (*
	m_gtk_ª£rved1
) ();

57 (*
	m_gtk_ª£rved2
) ();

58 (*
	m_gtk_ª£rved3
) ();

59 (*
	m_gtk_ª£rved4
) ();

62 
GTy≥
 
	$gtk_˚Œ_ªndîî_•ö√r_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
GtkCñlRídîî
 *
	`gtk_˚Œ_ªndîî_•ö√r_√w
 ();

65 
G_END_DECLS


	@/usr/include/gtk/gtkcellrenderertext.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_RENDERER_TEXT_H__


25 
	#__GTK_CELL_RENDERER_TEXT_H__


	)

28 
	~<gtk/gtk˚Œªndîî.h
>

31 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_CELL_RENDERER_TEXT
 (
	`gtk_˚Œ_ªndîî_ãxt_gë_ty≥
 ())

	)

35 
	#GTK_CELL_RENDERER_TEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_TEXT
, 
GtkCñlRídîîText
))

	)

36 
	#GTK_CELL_RENDERER_TEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_TEXT
, 
GtkCñlRídîîTextCœss
))

	)

37 
	#GTK_IS_CELL_RENDERER_TEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_TEXT
))

	)

38 
	#GTK_IS_CELL_RENDERER_TEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_TEXT
))

	)

39 
	#GTK_CELL_RENDERER_TEXT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_TEXT
, 
GtkCñlRídîîTextCœss
))

	)

41 
_GtkCñlRídîîText
 
	tGtkCñlRídîîText
;

42 
_GtkCñlRídîîTextCœss
 
	tGtkCñlRídîîTextCœss
;

44 
	s_GtkCñlRídîîText


46 
GtkCñlRídîî
 
	m∑ª¡
;

49 
gch¨
 *
GSEAL
 (
ãxt
);

50 
P™goF⁄tDes¸ùti⁄
 *
GSEAL
 (
f⁄t
);

51 
gdoubÀ
 
GSEAL
 (
f⁄t_sˇÀ
);

52 
P™goCﬁ‹
 
GSEAL
 (
f‹eground
);

53 
P™goCﬁ‹
 
GSEAL
 (
background
);

55 
P™goAârLi°
 *
GSEAL
 (
exåa_©ås
);

57 
P™goUndîlöe
 
GSEAL
 (
undîlöe_°yÀ
);

59 
göt
 
GSEAL
 (
ri£
);

60 
göt
 
GSEAL
 (
fixed_height_rows
);

62 
guöt
 
GSEAL
 (
°rikëhrough
) : 1;

64 
guöt
 
GSEAL
 (
edôabÀ
) : 1;

66 
guöt
 
GSEAL
 (
sˇÀ_£t
) : 1;

68 
guöt
 
GSEAL
 (
f‹eground_£t
) : 1;

69 
guöt
 
GSEAL
 (
background_£t
) : 1;

71 
guöt
 
GSEAL
 (
undîlöe_£t
) : 1;

73 
guöt
 
GSEAL
 (
ri£_£t
) : 1;

75 
guöt
 
GSEAL
 (
°rikëhrough_£t
) : 1;

77 
guöt
 
GSEAL
 (
edôabÀ_£t
) : 1;

78 
guöt
 
GSEAL
 (
ˇlc_fixed_height
) : 1;

81 
	s_GtkCñlRídîîTextCœss


83 
GtkCñlRídîîCœss
 
	m∑ª¡_˛ass
;

85 (* 
	medôed
Ë(
GtkCñlRídîîText
 *
	m˚Œ_ªndîî_ãxt
,

86 c⁄° 
gch¨
 *
	m∑th
,

87 c⁄° 
gch¨
 *
	m√w_ãxt
);

90 (*
	m_gtk_ª£rved1
) ();

91 (*
	m_gtk_ª£rved2
) ();

92 (*
	m_gtk_ª£rved3
) ();

93 (*
	m_gtk_ª£rved4
) ();

96 
GTy≥
 
	$gtk_˚Œ_ªndîî_ãxt_gë_ty≥
 (Ë
G_GNUC_CONST
;

97 
GtkCñlRídîî
 *
	`gtk_˚Œ_ªndîî_ãxt_√w
 ();

99 
	`gtk_˚Œ_ªndîî_ãxt_£t_fixed_height_‰om_f⁄t
 (
GtkCñlRídîîText
 *
ªndîî
,

100 
göt
 
numbî_of_rows
);

103 
G_END_DECLS


	@/usr/include/gtk/gtkcellrenderertoggle.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_RENDERER_TOGGLE_H__


25 
	#__GTK_CELL_RENDERER_TOGGLE_H__


	)

27 
	~<gtk/gtk˚Œªndîî.h
>

30 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_CELL_RENDERER_TOGGLE
 (
	`gtk_˚Œ_ªndîî_toggÀ_gë_ty≥
 ())

	)

34 
	#GTK_CELL_RENDERER_TOGGLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_RENDERER_TOGGLE
, 
GtkCñlRídîîToggÀ
))

	)

35 
	#GTK_CELL_RENDERER_TOGGLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CELL_RENDERER_TOGGLE
, 
GtkCñlRídîîToggÀCœss
))

	)

36 
	#GTK_IS_CELL_RENDERER_TOGGLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_RENDERER_TOGGLE
))

	)

37 
	#GTK_IS_CELL_RENDERER_TOGGLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CELL_RENDERER_TOGGLE
))

	)

38 
	#GTK_CELL_RENDERER_TOGGLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CELL_RENDERER_TOGGLE
, 
GtkCñlRídîîToggÀCœss
))

	)

40 
_GtkCñlRídîîToggÀ
 
	tGtkCñlRídîîToggÀ
;

41 
_GtkCñlRídîîToggÀCœss
 
	tGtkCñlRídîîToggÀCœss
;

43 
	s_GtkCñlRídîîToggÀ


45 
GtkCñlRídîî
 
	m∑ª¡
;

48 
guöt
 
GSEAL
 (
a˘ive
) : 1;

49 
guöt
 
GSEAL
 (
a˘iv©abÀ
) : 1;

50 
guöt
 
GSEAL
 (
ødio
) : 1;

53 
	s_GtkCñlRídîîToggÀCœss


55 
GtkCñlRídîîCœss
 
	m∑ª¡_˛ass
;

57 (* 
	mtoggÀd
Ë(
GtkCñlRídîîToggÀ
 *
	m˚Œ_ªndîî_toggÀ
,

58 c⁄° 
gch¨
 *
	m∑th
);

61 (*
	m_gtk_ª£rved1
) ();

62 (*
	m_gtk_ª£rved2
) ();

63 (*
	m_gtk_ª£rved3
) ();

64 (*
	m_gtk_ª£rved4
) ();

67 
GTy≥
 
	$gtk_˚Œ_ªndîî_toggÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

68 
GtkCñlRídîî
 *
	`gtk_˚Œ_ªndîî_toggÀ_√w
 ();

70 
gboﬁón
 
	`gtk_˚Œ_ªndîî_toggÀ_gë_ødio
 (
GtkCñlRídîîToggÀ
 *
toggÀ
);

71 
	`gtk_˚Œ_ªndîî_toggÀ_£t_ødio
 (
GtkCñlRídîîToggÀ
 *
toggÀ
,

72 
gboﬁón
 
ødio
);

74 
gboﬁón
 
	`gtk_˚Œ_ªndîî_toggÀ_gë_a˘ive
 (
GtkCñlRídîîToggÀ
 *
toggÀ
);

75 
	`gtk_˚Œ_ªndîî_toggÀ_£t_a˘ive
 (
GtkCñlRídîîToggÀ
 *
toggÀ
,

76 
gboﬁón
 
£âög
);

78 
gboﬁón
 
	`gtk_˚Œ_ªndîî_toggÀ_gë_a˘iv©abÀ
 (
GtkCñlRídîîToggÀ
 *
toggÀ
);

79 
	`gtk_˚Œ_ªndîî_toggÀ_£t_a˘iv©abÀ
 (
GtkCñlRídîîToggÀ
 *
toggÀ
,

80 
gboﬁón
 
£âög
);

83 
G_END_DECLS


	@/usr/include/gtk/gtkcellview.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_CELL_VIEW_H__


25 
	#__GTK_CELL_VIEW_H__


	)

27 
	~<gtk/gtkwidgë.h
>

28 
	~<gtk/gtk˚Œªndîî.h
>

29 
	~<gtk/gtkåìmodñ.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_CELL_VIEW
 (
	`gtk_˚Œ_võw_gë_ty≥
 ())

	)

34 
	#GTK_CELL_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CELL_VIEW
, 
GtkCñlVõw
))

	)

35 
	#GTK_CELL_VIEW_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((vèbÀ), 
GTK_TYPE_CELL_VIEW
, 
GtkCñlVõwCœss
))

	)

36 
	#GTK_IS_CELL_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CELL_VIEW
))

	)

37 
	#GTK_IS_CELL_VIEW_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((vèbÀ), 
GTK_TYPE_CELL_VIEW
))

	)

38 
	#GTK_CELL_VIEW_GET_CLASS
(
ö°
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((ö°), 
GTK_TYPE_CELL_VIEW
, 
GtkCñlVõwCœss
))

	)

40 
_GtkCñlVõw
 
	tGtkCñlVõw
;

41 
_GtkCñlVõwCœss
 
	tGtkCñlVõwCœss
;

42 
_GtkCñlVõwPriv©e
 
	tGtkCñlVõwPriv©e
;

44 
	s_GtkCñlVõw


46 
GtkWidgë
 
	m∑ª¡_ö°™˚
;

49 
GtkCñlVõwPriv©e
 *
GSEAL
 (
¥iv
);

52 
	s_GtkCñlVõwCœss


54 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

57 
GTy≥
 
	$gtk_˚Œ_võw_gë_ty≥
 (Ë
G_GNUC_CONST
;

58 
GtkWidgë
 *
	`gtk_˚Œ_võw_√w
 ();

59 
GtkWidgë
 *
	`gtk_˚Œ_võw_√w_wôh_ãxt
 (c⁄° 
gch¨
 *
ãxt
);

60 
GtkWidgë
 *
	`gtk_˚Œ_võw_√w_wôh_m¨kup
 (c⁄° 
gch¨
 *
m¨kup
);

61 
GtkWidgë
 *
	`gtk_˚Œ_võw_√w_wôh_pixbuf
 (
GdkPixbuf
 *
pixbuf
);

63 
	`gtk_˚Œ_võw_£t_modñ
 (
GtkCñlVõw
 *
˚Œ_võw
,

64 
GtkTªeModñ
 *
modñ
);

65 
GtkTªeModñ
 *
	`gtk_˚Œ_võw_gë_modñ
 (
GtkCñlVõw
 *
˚Œ_võw
);

66 
	`gtk_˚Œ_võw_£t_di•œyed_row
 (
GtkCñlVõw
 *
˚Œ_võw
,

67 
GtkTªeP©h
 *
∑th
);

68 
GtkTªeP©h
 *
	`gtk_˚Œ_võw_gë_di•œyed_row
 (
GtkCñlVõw
 *
˚Œ_võw
);

69 
gboﬁón
 
	`gtk_˚Œ_võw_gë_size_of_row
 (
GtkCñlVõw
 *
˚Œ_võw
,

70 
GtkTªeP©h
 *
∑th
,

71 
GtkRequisôi⁄
 *
ªquisôi⁄
);

73 
	`gtk_˚Œ_võw_£t_background_cﬁ‹
 (
GtkCñlVõw
 *
˚Œ_võw
,

74 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

75 #i‚de‡
GTK_DISABLE_DEPRECATED


76 
GLi°
 *
	`gtk_˚Œ_võw_gë_˚Œ_ªndîîs
 (
GtkCñlVõw
 *
˚Œ_võw
);

79 
G_END_DECLS


	@/usr/include/gtk/gtkcheckbutton.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_CHECK_BUTTON_H__


32 
	#__GTK_CHECK_BUTTON_H__


	)

35 
	~<gtk/gtktoggÀbuâ⁄.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_CHECK_BUTTON
 (
	`gtk_check_buâ⁄_gë_ty≥
 ())

	)

41 
	#GTK_CHECK_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CHECK_BUTTON
, 
GtkCheckBuâ⁄
))

	)

42 
	#GTK_CHECK_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CHECK_BUTTON
, 
GtkCheckBuâ⁄Cœss
))

	)

43 
	#GTK_IS_CHECK_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CHECK_BUTTON
))

	)

44 
	#GTK_IS_CHECK_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CHECK_BUTTON
))

	)

45 
	#GTK_CHECK_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CHECK_BUTTON
, 
GtkCheckBuâ⁄Cœss
))

	)

48 
_GtkCheckBuâ⁄
 
	tGtkCheckBuâ⁄
;

49 
_GtkCheckBuâ⁄Cœss
 
	tGtkCheckBuâ⁄Cœss
;

51 
	s_GtkCheckBuâ⁄


53 
GtkToggÀBuâ⁄
 
	mtoggÀ_buâ⁄
;

56 
	s_GtkCheckBuâ⁄Cœss


58 
GtkToggÀBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

60 (* 
	mdøw_ödiˇt‹
Ë(
GtkCheckBuâ⁄
 *
	mcheck_buâ⁄
,

61 
GdkRe˘™gÀ
 *
	m¨ó
);

64 (*
	m_gtk_ª£rved1
) ();

65 (*
	m_gtk_ª£rved2
) ();

66 (*
	m_gtk_ª£rved3
) ();

67 (*
	m_gtk_ª£rved4
) ();

71 
GTy≥
 
	$gtk_check_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

72 
GtkWidgë
* 
	`gtk_check_buâ⁄_√w
 ();

73 
GtkWidgë
* 
	`gtk_check_buâ⁄_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

74 
GtkWidgë
* 
	`gtk_check_buâ⁄_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
œbñ
);

76 
	`_gtk_check_buâ⁄_gë_¥›s
 (
GtkCheckBuâ⁄
 *
check_buâ⁄
,

77 
göt
 *
ödiˇt‹_size
,

78 
göt
 *
ödiˇt‹_•acög
);

80 
G_END_DECLS


	@/usr/include/gtk/gtkcheckmenuitem.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_CHECK_MENU_ITEM_H__


32 
	#__GTK_CHECK_MENU_ITEM_H__


	)

35 
	~<gtk/gtkmíuôem.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_CHECK_MENU_ITEM
 (
	`gtk_check_míu_ôem_gë_ty≥
 ())

	)

41 
	#GTK_CHECK_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CHECK_MENU_ITEM
, 
GtkCheckMíuIãm
))

	)

42 
	#GTK_CHECK_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CHECK_MENU_ITEM
, 
GtkCheckMíuIãmCœss
))

	)

43 
	#GTK_IS_CHECK_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CHECK_MENU_ITEM
))

	)

44 
	#GTK_IS_CHECK_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CHECK_MENU_ITEM
))

	)

45 
	#GTK_CHECK_MENU_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CHECK_MENU_ITEM
, 
GtkCheckMíuIãmCœss
))

	)

48 
_GtkCheckMíuIãm
 
	tGtkCheckMíuIãm
;

49 
_GtkCheckMíuIãmCœss
 
	tGtkCheckMíuIãmCœss
;

51 
	s_GtkCheckMíuIãm


53 
GtkMíuIãm
 
	mmíu_ôem
;

55 
guöt
 
GSEAL
 (
a˘ive
) : 1;

56 
guöt
 
GSEAL
 (
Æways_show_toggÀ
) : 1;

57 
guöt
 
GSEAL
 (
öc⁄si°ít
) : 1;

58 
guöt
 
GSEAL
 (
døw_as_ødio
) : 1;

61 
	s_GtkCheckMíuIãmCœss


63 
GtkMíuIãmCœss
 
	m∑ª¡_˛ass
;

65 (* 
	mtoggÀd
Ë(
GtkCheckMíuIãm
 *
	mcheck_míu_ôem
);

66 (* 
	mdøw_ödiˇt‹
Ë(
GtkCheckMíuIãm
 *
	mcheck_míu_ôem
,

67 
GdkRe˘™gÀ
 *
	m¨ó
);

70 (*
	m_gtk_ª£rved1
) ();

71 (*
	m_gtk_ª£rved2
) ();

72 (*
	m_gtk_ª£rved3
) ();

73 (*
	m_gtk_ª£rved4
) ();

77 
GTy≥
 
	$gtk_check_míu_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

79 
GtkWidgë
* 
	`gtk_check_míu_ôem_√w
 ();

80 
GtkWidgë
* 
	`gtk_check_míu_ôem_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

81 
GtkWidgë
* 
	`gtk_check_míu_ôem_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
œbñ
);

82 
	`gtk_check_míu_ôem_£t_a˘ive
 (
GtkCheckMíuIãm
 *
check_míu_ôem
,

83 
gboﬁón
 
is_a˘ive
);

84 
gboﬁón
 
	`gtk_check_míu_ôem_gë_a˘ive
 (
GtkCheckMíuIãm
 *
check_míu_ôem
);

85 
	`gtk_check_míu_ôem_toggÀd
 (
GtkCheckMíuIãm
 *
check_míu_ôem
);

86 
	`gtk_check_míu_ôem_£t_öc⁄si°ít
 (
GtkCheckMíuIãm
 *
check_míu_ôem
,

87 
gboﬁón
 
£âög
);

88 
gboﬁón
 
	`gtk_check_míu_ôem_gë_öc⁄si°ít
 (
GtkCheckMíuIãm
 *
check_míu_ôem
);

89 
	`gtk_check_míu_ôem_£t_døw_as_ødio
 (
GtkCheckMíuIãm
 *
check_míu_ôem
,

90 
gboﬁón
 
døw_as_ødio
);

91 
gboﬁón
 
	`gtk_check_míu_ôem_gë_døw_as_ødio
 (
GtkCheckMíuIãm
 *
check_míu_ôem
);

94 #i‚de‡
GTK_DISABLE_DEPRECATED


95 
	`gtk_check_míu_ôem_£t_show_toggÀ
 (
GtkCheckMíuIãm
 *
míu_ôem
,

96 
gboﬁón
 
Æways
);

97 
	#gtk_check_míu_ôem_£t_°©e
 
gtk_check_míu_ôem_£t_a˘ive


	)

100 
G_END_DECLS


	@/usr/include/gtk/gtkclipboard.h

22 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_CLIPBOARD_H__


27 
	#__GTK_CLIPBOARD_H__


	)

29 
	~<gtk/gtk£À˘i⁄.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_CLIPBOARD
 (
	`gtk_˛ùbﬂrd_gë_ty≥
 ())

	)

34 
	#GTK_CLIPBOARD
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CLIPBOARD
, 
GtkClùbﬂrd
))

	)

35 
	#GTK_IS_CLIPBOARD
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CLIPBOARD
))

	)

37 (* 
	tGtkClùbﬂrdRe˚ivedFunc
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

38 
	tGtkSñe˘i⁄D©a
 *
	t£À˘i⁄_d©a
,

39 
	tgpoöãr
 
	td©a
);

40 (* 
	tGtkClùbﬂrdTextRe˚ivedFunc
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

41 c⁄° 
	tgch¨
 *
	tãxt
,

42 
	tgpoöãr
 
	td©a
);

43 (* 
	tGtkClùbﬂrdRichTextRe˚ivedFunc
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

44 
	tGdkAtom
 
	tf‹m©
,

45 c⁄° 
	tguöt8
 *
	tãxt
,

46 
	tgsize
 
	tÀngth
,

47 
	tgpoöãr
 
	td©a
);

48 (* 
	tGtkClùbﬂrdImageRe˚ivedFunc
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

49 
	tGdkPixbuf
 *
	tpixbuf
,

50 
	tgpoöãr
 
	td©a
);

51 (* 
	tGtkClùbﬂrdURIRe˚ivedFunc
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

52 
	tgch¨
 **
	turis
,

53 
	tgpoöãr
 
	td©a
);

54 (* 
	tGtkClùbﬂrdT¨gësRe˚ivedFunc
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

55 
	tGdkAtom
 *
	t©oms
,

56 
	tgöt
 
	tn_©oms
,

57 
	tgpoöãr
 
	td©a
);

63 (* 
	tGtkClùbﬂrdGëFunc
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

64 
	tGtkSñe˘i⁄D©a
 *
	t£À˘i⁄_d©a
,

65 
	tguöt
 
	töfo
,

66 
	tgpoöãr
 
	tu£r_d©a_‹_ow√r
);

67 (* 
	tGtkClùbﬂrdCÀ¨Func
Ë(
	tGtkClùbﬂrd
 *
	t˛ùbﬂrd
,

68 
	tgpoöãr
 
	tu£r_d©a_‹_ow√r
);

70 
GTy≥
 
	$gtk_˛ùbﬂrd_gë_ty≥
 (Ë
G_GNUC_CONST
;

72 
GtkClùbﬂrd
 *
	`gtk_˛ùbﬂrd_gë_f‹_di•œy
 (
GdkDi•œy
 *
di•œy
,

73 
GdkAtom
 
£À˘i⁄
);

74 #i‚de‡
GDK_MULTIHEAD_SAFE


75 
GtkClùbﬂrd
 *
	`gtk_˛ùbﬂrd_gë
 (
GdkAtom
 
£À˘i⁄
);

78 
GdkDi•œy
 *
	`gtk_˛ùbﬂrd_gë_di•œy
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

81 
gboﬁón
 
	`gtk_˛ùbﬂrd_£t_wôh_d©a
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

82 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

83 
guöt
 
n_èrgës
,

84 
GtkClùbﬂrdGëFunc
 
gë_func
,

85 
GtkClùbﬂrdCÀ¨Func
 
˛ór_func
,

86 
gpoöãr
 
u£r_d©a
);

87 
gboﬁón
 
	`gtk_˛ùbﬂrd_£t_wôh_ow√r
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

88 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

89 
guöt
 
n_èrgës
,

90 
GtkClùbﬂrdGëFunc
 
gë_func
,

91 
GtkClùbﬂrdCÀ¨Func
 
˛ór_func
,

92 
GObje˘
 *
ow√r
);

93 
GObje˘
 *
	`gtk_˛ùbﬂrd_gë_ow√r
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

94 
	`gtk_˛ùbﬂrd_˛ór
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

95 
	`gtk_˛ùbﬂrd_£t_ãxt
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

96 c⁄° 
gch¨
 *
ãxt
,

97 
göt
 
Àn
);

98 
	`gtk_˛ùbﬂrd_£t_image
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

99 
GdkPixbuf
 *
pixbuf
);

101 
	`gtk_˛ùbﬂrd_ªque°_c⁄ã¡s
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

102 
GdkAtom
 
èrgë
,

103 
GtkClùbﬂrdRe˚ivedFunc
 
ˇŒback
,

104 
gpoöãr
 
u£r_d©a
);

105 
	`gtk_˛ùbﬂrd_ªque°_ãxt
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

106 
GtkClùbﬂrdTextRe˚ivedFunc
 
ˇŒback
,

107 
gpoöãr
 
u£r_d©a
);

108 
	`gtk_˛ùbﬂrd_ªque°_rich_ãxt
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

109 
GtkTextBuf„r
 *
buf„r
,

110 
GtkClùbﬂrdRichTextRe˚ivedFunc
 
ˇŒback
,

111 
gpoöãr
 
u£r_d©a
);

112 
	`gtk_˛ùbﬂrd_ªque°_image
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

113 
GtkClùbﬂrdImageRe˚ivedFunc
 
ˇŒback
,

114 
gpoöãr
 
u£r_d©a
);

115 
	`gtk_˛ùbﬂrd_ªque°_uris
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

116 
GtkClùbﬂrdURIRe˚ivedFunc
 
ˇŒback
,

117 
gpoöãr
 
u£r_d©a
);

118 
	`gtk_˛ùbﬂrd_ªque°_èrgës
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

119 
GtkClùbﬂrdT¨gësRe˚ivedFunc
 
ˇŒback
,

120 
gpoöãr
 
u£r_d©a
);

122 
GtkSñe˘i⁄D©a
 *
	`gtk_˛ùbﬂrd_waô_f‹_c⁄ã¡s
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

123 
GdkAtom
 
èrgë
);

124 
gch¨
 * 
	`gtk_˛ùbﬂrd_waô_f‹_ãxt
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

125 
guöt8
 * 
	`gtk_˛ùbﬂrd_waô_f‹_rich_ãxt
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

126 
GtkTextBuf„r
 *
buf„r
,

127 
GdkAtom
 *
f‹m©
,

128 
gsize
 *
Àngth
);

129 
GdkPixbuf
 * 
	`gtk_˛ùbﬂrd_waô_f‹_image
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

130 
gch¨
 ** 
	`gtk_˛ùbﬂrd_waô_f‹_uris
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

131 
gboﬁón
 
	`gtk_˛ùbﬂrd_waô_f‹_èrgës
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

132 
GdkAtom
 **
èrgës
,

133 
göt
 *
n_èrgës
);

135 
gboﬁón
 
	`gtk_˛ùbﬂrd_waô_is_ãxt_avaûabÀ
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

136 
gboﬁón
 
	`gtk_˛ùbﬂrd_waô_is_rich_ãxt_avaûabÀ
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

137 
GtkTextBuf„r
 *
buf„r
);

138 
gboﬁón
 
	`gtk_˛ùbﬂrd_waô_is_image_avaûabÀ
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

139 
gboﬁón
 
	`gtk_˛ùbﬂrd_waô_is_uris_avaûabÀ
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

140 
gboﬁón
 
	`gtk_˛ùbﬂrd_waô_is_èrgë_avaûabÀ
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

141 
GdkAtom
 
èrgë
);

144 
	`gtk_˛ùbﬂrd_£t_ˇn_°‹e
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
,

145 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

146 
göt
 
n_èrgës
);

148 
	`gtk_˛ùbﬂrd_°‹e
 (
GtkClùbﬂrd
 *
˛ùbﬂrd
);

151 
	`_gtk_˛ùbﬂrd_h™dÀ_evít
 (
GdkEvítOw√rCh™ge
 *
evít
);

153 
	`_gtk_˛ùbﬂrd_°‹e_Æl
 ();

155 
G_END_DECLS


	@/usr/include/gtk/gtkclist.h

28 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
__GTK_CLIST_C__
Ë|| deföed (
__GTK_CTREE_C__
)

30 #i‚de‡
__GTK_CLIST_H__


31 
	#__GTK_CLIST_H__


	)

34 
	~<gtk/gtksig«l.h
>

35 
	~<gtk/gtkÆignmít.h
>

36 
	~<gtk/gtkœbñ.h
>

37 
	~<gtk/gtkbuâ⁄.h
>

38 
	~<gtk/gtkhs¸ﬁlb¨.h
>

39 
	~<gtk/gtkvs¸ﬁlb¨.h
>

42 
G_BEGIN_DECLS


47 
	mGTK_CLIST_IN_DRAG
 = 1 << 0,

48 
	mGTK_CLIST_ROW_HEIGHT_SET
 = 1 << 1,

49 
	mGTK_CLIST_SHOW_TITLES
 = 1 << 2,

51 
	mGTK_CLIST_ADD_MODE
 = 1 << 4,

52 
	mGTK_CLIST_AUTO_SORT
 = 1 << 5,

53 
	mGTK_CLIST_AUTO_RESIZE_BLOCKED
 = 1 << 6,

54 
	mGTK_CLIST_REORDERABLE
 = 1 << 7,

55 
	mGTK_CLIST_USE_DRAG_ICONS
 = 1 << 8,

56 
	mGTK_CLIST_DRAW_DRAG_LINE
 = 1 << 9,

57 
	mGTK_CLIST_DRAW_DRAG_RECT
 = 1 << 10

63 
	mGTK_CELL_EMPTY
,

64 
	mGTK_CELL_TEXT
,

65 
	mGTK_CELL_PIXMAP
,

66 
	mGTK_CELL_PIXTEXT
,

67 
	mGTK_CELL_WIDGET


68 } 
	tGtkCñlTy≥
;

72 
	mGTK_CLIST_DRAG_NONE
,

73 
	mGTK_CLIST_DRAG_BEFORE
,

74 
	mGTK_CLIST_DRAG_INTO
,

75 
	mGTK_CLIST_DRAG_AFTER


76 } 
	tGtkCLi°DøgPos
;

80 
	mGTK_BUTTON_IGNORED
 = 0,

81 
	mGTK_BUTTON_SELECTS
 = 1 << 0,

82 
	mGTK_BUTTON_DRAGS
 = 1 << 1,

83 
	mGTK_BUTTON_EXPANDS
 = 1 << 2

84 } 
	tGtkBuâ⁄A˘i⁄
;

86 
	#GTK_TYPE_CLIST
 (
	`gtk_˛i°_gë_ty≥
 ())

	)

87 
	#GTK_CLIST
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CLIST
, 
GtkCLi°
))

	)

88 
	#GTK_CLIST_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CLIST
, 
GtkCLi°Cœss
))

	)

89 
	#GTK_IS_CLIST
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CLIST
))

	)

90 
	#GTK_IS_CLIST_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CLIST
))

	)

91 
	#GTK_CLIST_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CLIST
, 
GtkCLi°Cœss
))

	)

94 
	#GTK_CLIST_FLAGS
(
˛i°
Ë(
	`GTK_CLIST
 (˛i°)->
Êags
)

	)

95 
	#GTK_CLIST_SET_FLAG
(
˛i°
,
Êag
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë|(
GTK_
 ## fœg))

	)

96 
	#GTK_CLIST_UNSET_FLAG
(
˛i°
,
Êag
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë&~(
GTK_
 ## fœg))

	)

98 
	#GTK_CLIST_IN_DRAG
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_IN_DRAG
)

	)

99 
	#GTK_CLIST_ROW_HEIGHT_SET
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_ROW_HEIGHT_SET
)

	)

100 
	#GTK_CLIST_SHOW_TITLES
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_SHOW_TITLES
)

	)

101 
	#GTK_CLIST_ADD_MODE
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_ADD_MODE
)

	)

102 
	#GTK_CLIST_AUTO_SORT
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_AUTO_SORT
)

	)

103 
	#GTK_CLIST_AUTO_RESIZE_BLOCKED
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_AUTO_RESIZE_BLOCKED
)

	)

104 
	#GTK_CLIST_REORDERABLE
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_REORDERABLE
)

	)

105 
	#GTK_CLIST_USE_DRAG_ICONS
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_USE_DRAG_ICONS
)

	)

106 
	#GTK_CLIST_DRAW_DRAG_LINE
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_DRAW_DRAG_LINE
)

	)

107 
	#GTK_CLIST_DRAW_DRAG_RECT
(
˛i°
Ë(
	`GTK_CLIST_FLAGS
 (˛i°Ë& 
GTK_CLIST_DRAW_DRAG_RECT
)

	)

109 
	#GTK_CLIST_ROW
(
_gli°_
Ë((
GtkCLi°Row
 *)((_gli°_)->
d©a
))

	)

112 
	#GTK_CELL_TEXT
(
˚Œ
Ë(((
GtkCñlText
 *Ë&(˚Œ)))

	)

113 
	#GTK_CELL_PIXMAP
(
˚Œ
Ë(((
GtkCñlPixm≠
 *Ë&(˚Œ)))

	)

114 
	#GTK_CELL_PIXTEXT
(
˚Œ
Ë(((
GtkCñlPixText
 *Ë&(˚Œ)))

	)

115 
	#GTK_CELL_WIDGET
(
˚Œ
Ë(((
GtkCñlWidgë
 *Ë&(˚Œ)))

	)

117 
_GtkCLi°
 
	tGtkCLi°
;

118 
_GtkCLi°Cœss
 
	tGtkCLi°Cœss
;

119 
_GtkCLi°Cﬁumn
 
	tGtkCLi°Cﬁumn
;

120 
_GtkCLi°Row
 
	tGtkCLi°Row
;

122 
_GtkCñl
 
	tGtkCñl
;

123 
_GtkCñlText
 
	tGtkCñlText
;

124 
_GtkCñlPixm≠
 
	tGtkCñlPixm≠
;

125 
_GtkCñlPixText
 
	tGtkCñlPixText
;

126 
_GtkCñlWidgë
 
	tGtkCñlWidgë
;

128 
	$göt
 (*
	tGtkCLi°Com∑ªFunc
Ë(
	tGtkCLi°
 *
	t˛i°
,

129 
	tgc⁄°poöãr
 
	t±r1
,

130 
	tgc⁄°poöãr
 
	t±r2
);

132 
_GtkCLi°CñlInfo
 
	tGtkCLi°CñlInfo
;

133 
_GtkCLi°De°Info
 
	tGtkCLi°De°Info
;

135 
	s_GtkCLi°CñlInfo


137 
göt
 
row
;

138 
göt
 
cﬁumn
;

141 
	s_GtkCLi°De°Info


143 
GtkCLi°CñlInfo
 
˚Œ
;

144 
GtkCLi°DøgPos
 
ö£π_pos
;

147 
	s_GtkCLi°


149 
GtkC⁄èöî
 
c⁄èöî
;

151 
guöt16
 
Êags
;

153 
gpoöãr
 
ª£rved1
;

154 
gpoöãr
 
ª£rved2
;

156 
guöt
 
‰ìze_cou¡
;

160 
GdkRe˘™gÀ
 
öã∫Æ_Æloˇti⁄
;

163 
göt
 
rows
;

164 
göt
 
row_height
;

165 
GLi°
 *
row_li°
;

166 
GLi°
 *
row_li°_íd
;

169 
göt
 
cﬁumns
;

170 
GdkRe˘™gÀ
 
cﬁumn_tôÀ_¨ó
;

171 
GdkWödow
 *
tôÀ_wödow
;

174 
GtkCLi°Cﬁumn
 *
cﬁumn
;

178 
GdkWödow
 *
˛i°_wödow
;

179 
göt
 
˛i°_wödow_width
;

180 
göt
 
˛i°_wödow_height
;

183 
göt
 
hoff£t
;

184 
göt
 
voff£t
;

187 
GtkShadowTy≥
 
shadow_ty≥
;

190 
GtkSñe˘i⁄Mode
 
£À˘i⁄_mode
;

193 
GLi°
 *
£À˘i⁄
;

194 
GLi°
 *
£À˘i⁄_íd
;

196 
GLi°
 *
undo_£À˘i⁄
;

197 
GLi°
 *
undo_un£À˘i⁄
;

198 
göt
 
undo_™ch‹
;

201 
guöt8
 
buâ⁄_a˘i⁄s
[5];

203 
guöt8
 
døg_buâ⁄
;

206 
GtkCLi°CñlInfo
 
˛ick_˚Œ
;

209 
GtkAdju°mít
 *
hadju°mít
;

210 
GtkAdju°mít
 *
vadju°mít
;

213 
GdkGC
 *
x‹_gc
;

216 
GdkGC
 *
fg_gc
;

217 
GdkGC
 *
bg_gc
;

220 
GdkCurs‹
 *
curs‹_døg
;

223 
göt
 
x_døg
;

226 
göt
 
focus_row
;

228 
göt
 
focus_hódî_cﬁumn
;

231 
göt
 
™ch‹
;

232 
GtkSèãTy≥
 
™ch‹_°©e
;

233 
göt
 
døg_pos
;

234 
göt
 
htimî
;

235 
göt
 
vtimî
;

237 
GtkS‹tTy≥
 
s‹t_ty≥
;

238 
GtkCLi°Com∑ªFunc
 
com∑ª
;

239 
göt
 
s‹t_cﬁumn
;

241 
göt
 
døg_highlight_row
;

242 
GtkCLi°DøgPos
 
døg_highlight_pos
;

245 
	s_GtkCLi°Cœss


247 
GtkC⁄èöîCœss
 
∑ª¡_˛ass
;

249 (*
£t_s¸ﬁl_adju°míts
Ë(
GtkCLi°
 *
˛i°
,

250 
GtkAdju°mít
 *
hadju°mít
,

251 
GtkAdju°mít
 *
vadju°mít
);

252 (*
ª‰esh
Ë(
GtkCLi°
 *
˛i°
);

253 (*
£À˘_row
Ë(
GtkCLi°
 *
˛i°
,

254 
göt
 
row
,

255 
göt
 
cﬁumn
,

256 
GdkEvít
 *
evít
);

257 (*
un£À˘_row
Ë(
GtkCLi°
 *
˛i°
,

258 
göt
 
row
,

259 
göt
 
cﬁumn
,

260 
GdkEvít
 *
evít
);

261 (*
row_move
Ë(
GtkCLi°
 *
˛i°
,

262 
göt
 
sour˚_row
,

263 
göt
 
de°_row
);

264 (*
˛ick_cﬁumn
Ë(
GtkCLi°
 *
˛i°
,

265 
göt
 
cﬁumn
);

266 (*
ªsize_cﬁumn
Ë(
GtkCLi°
 *
˛i°
,

267 
göt
 
cﬁumn
,

268 
göt
 
width
);

269 (*
toggÀ_focus_row
Ë(
GtkCLi°
 *
˛i°
);

270 (*
£À˘_Æl
Ë(
GtkCLi°
 *
˛i°
);

271 (*
un£À˘_Æl
Ë(
GtkCLi°
 *
˛i°
);

272 (*
undo_£À˘i⁄
Ë(
GtkCLi°
 *
˛i°
);

273 (*
°¨t_£À˘i⁄
Ë(
GtkCLi°
 *
˛i°
);

274 (*
íd_£À˘i⁄
Ë(
GtkCLi°
 *
˛i°
);

275 (*
exãnd_£À˘i⁄
Ë(
GtkCLi°
 *
˛i°
,

276 
GtkS¸ﬁlTy≥
 
s¸ﬁl_ty≥
,

277 
gÊﬂt
 
posôi⁄
,

278 
gboﬁón
 
auto_°¨t_£À˘i⁄
);

279 (*
s¸ﬁl_h‹iz⁄èl
Ë(
GtkCLi°
 *
˛i°
,

280 
GtkS¸ﬁlTy≥
 
s¸ﬁl_ty≥
,

281 
gÊﬂt
 
posôi⁄
);

282 (*
s¸ﬁl_vîtiˇl
Ë(
GtkCLi°
 *
˛i°
,

283 
GtkS¸ﬁlTy≥
 
s¸ﬁl_ty≥
,

284 
gÊﬂt
 
posôi⁄
);

285 (*
toggÀ_add_mode
Ë(
GtkCLi°
 *
˛i°
);

286 (*
ab‹t_cﬁumn_ªsize
Ë(
GtkCLi°
 *
˛i°
);

287 (*
ªsync_£À˘i⁄
Ë(
GtkCLi°
 *
˛i°
,

288 
GdkEvít
 *
evít
);

289 
GLi°
* (*
£À˘i⁄_föd
Ë(
GtkCLi°
 *
˛i°
,

290 
göt
 
row_numbî
,

291 
GLi°
 *
row_li°_ñemít
);

292 (*
døw_row
Ë(
GtkCLi°
 *
˛i°
,

293 
GdkRe˘™gÀ
 *
¨ó
,

294 
göt
 
row
,

295 
GtkCLi°Row
 *
˛i°_row
);

296 (*
døw_døg_highlight
Ë(
GtkCLi°
 *
˛i°
,

297 
GtkCLi°Row
 *
èrgë_row
,

298 
göt
 
èrgë_row_numbî
,

299 
GtkCLi°DøgPos
 
døg_pos
);

300 (*
˛ór
Ë(
GtkCLi°
 *
˛i°
);

301 (*
Áke_un£À˘_Æl
Ë(
GtkCLi°
 *
˛i°
,

302 
göt
 
row
);

303 (*
s‹t_li°
Ë(
GtkCLi°
 *
˛i°
);

304 
	`göt
 (*
ö£π_row
Ë(
GtkCLi°
 *
˛i°
,

305 
göt
 
row
,

306 
gch¨
 *
ãxt
[]);

307 (*
ªmove_row
Ë(
GtkCLi°
 *
˛i°
,

308 
göt
 
row
);

309 (*
£t_˚Œ_c⁄ã¡s
Ë(
GtkCLi°
 *
˛i°
,

310 
GtkCLi°Row
 *
˛i°_row
,

311 
göt
 
cﬁumn
,

312 
GtkCñlTy≥
 
ty≥
,

313 c⁄° 
gch¨
 *
ãxt
,

314 
guöt8
 
•acög
,

315 
GdkPixm≠
 *
pixm≠
,

316 
GdkBôm≠
 *
mask
);

317 (*
˚Œ_size_ªque°
Ë(
GtkCLi°
 *
˛i°
,

318 
GtkCLi°Row
 *
˛i°_row
,

319 
göt
 
cﬁumn
,

320 
GtkRequisôi⁄
 *
ªquisôi⁄
);

324 
	s_GtkCLi°Cﬁumn


326 
gch¨
 *
tôÀ
;

327 
GdkRe˘™gÀ
 
¨ó
;

329 
GtkWidgë
 *
buâ⁄
;

330 
GdkWödow
 *
wödow
;

332 
göt
 
width
;

333 
göt
 
mö_width
;

334 
göt
 
max_width
;

335 
GtkJu°ifiˇti⁄
 
ju°ifiˇti⁄
;

337 
guöt
 
visibÀ
 : 1;

338 
guöt
 
width_£t
 : 1;

339 
guöt
 
ªsizóbÀ
 : 1;

340 
guöt
 
auto_ªsize
 : 1;

341 
guöt
 
buâ⁄_∑ssive
 : 1;

344 
	s_GtkCLi°Row


346 
GtkCñl
 *
˚Œ
;

347 
GtkSèãTy≥
 
°©e
;

349 
GdkCﬁ‹
 
f‹eground
;

350 
GdkCﬁ‹
 
background
;

352 
GtkStyÀ
 *
°yÀ
;

354 
gpoöãr
 
d©a
;

355 
GDe°royNŸify
 
de°roy
;

357 
guöt
 
fg_£t
 : 1;

358 
guöt
 
bg_£t
 : 1;

359 
guöt
 
£À˘abÀ
 : 1;

363 
	s_GtkCñlText


365 
GtkCñlTy≥
 
ty≥
;

367 
göt16
 
vîtiˇl
;

368 
göt16
 
h‹iz⁄èl
;

370 
GtkStyÀ
 *
°yÀ
;

372 
gch¨
 *
ãxt
;

375 
	s_GtkCñlPixm≠


377 
GtkCñlTy≥
 
ty≥
;

379 
göt16
 
vîtiˇl
;

380 
göt16
 
h‹iz⁄èl
;

382 
GtkStyÀ
 *
°yÀ
;

384 
GdkPixm≠
 *
pixm≠
;

385 
GdkBôm≠
 *
mask
;

388 
	s_GtkCñlPixText


390 
GtkCñlTy≥
 
ty≥
;

392 
göt16
 
vîtiˇl
;

393 
göt16
 
h‹iz⁄èl
;

395 
GtkStyÀ
 *
°yÀ
;

397 
gch¨
 *
ãxt
;

398 
guöt8
 
•acög
;

399 
GdkPixm≠
 *
pixm≠
;

400 
GdkBôm≠
 *
mask
;

403 
	s_GtkCñlWidgë


405 
GtkCñlTy≥
 
ty≥
;

407 
göt16
 
vîtiˇl
;

408 
göt16
 
h‹iz⁄èl
;

410 
GtkStyÀ
 *
°yÀ
;

412 
GtkWidgë
 *
widgë
;

415 
	s_GtkCñl


417 
GtkCñlTy≥
 
ty≥
;

419 
göt16
 
vîtiˇl
;

420 
göt16
 
h‹iz⁄èl
;

422 
GtkStyÀ
 *
°yÀ
;

425 
gch¨
 *
ãxt
;

428 
GdkPixm≠
 *
pixm≠
;

429 
GdkBôm≠
 *
mask
;

430 } 
pm
;

433 
gch¨
 *
ãxt
;

434 
guöt8
 
•acög
;

435 
GdkPixm≠
 *
pixm≠
;

436 
GdkBôm≠
 *
mask
;

437 } 
±
;

439 
GtkWidgë
 *
widgë
;

440 } 
u
;

443 
GTy≥
 
	$gtk_˛i°_gë_ty≥
 (Ë
G_GNUC_CONST
;

446 
GtkWidgë
* 
	`gtk_˛i°_√w
 (
göt
 
cﬁumns
);

447 
GtkWidgë
* 
	`gtk_˛i°_√w_wôh_tôÀs
 (
göt
 
cﬁumns
,

448 
gch¨
 *
tôÀs
[]);

451 
	`gtk_˛i°_£t_hadju°mít
 (
GtkCLi°
 *
˛i°
,

452 
GtkAdju°mít
 *
adju°mít
);

453 
	`gtk_˛i°_£t_vadju°mít
 (
GtkCLi°
 *
˛i°
,

454 
GtkAdju°mít
 *
adju°mít
);

457 
GtkAdju°mít
* 
	`gtk_˛i°_gë_hadju°mít
 (
GtkCLi°
 *
˛i°
);

458 
GtkAdju°mít
* 
	`gtk_˛i°_gë_vadju°mít
 (
GtkCLi°
 *
˛i°
);

461 
	`gtk_˛i°_£t_shadow_ty≥
 (
GtkCLi°
 *
˛i°
,

462 
GtkShadowTy≥
 
ty≥
);

465 
	`gtk_˛i°_£t_£À˘i⁄_mode
 (
GtkCLi°
 *
˛i°
,

466 
GtkSñe˘i⁄Mode
 
mode
);

469 
	`gtk_˛i°_£t_ª‹dîabÀ
 (
GtkCLi°
 *
˛i°
,

470 
gboﬁón
 
ª‹dîabÀ
);

471 
	`gtk_˛i°_£t_u£_døg_ic⁄s
 (
GtkCLi°
 *
˛i°
,

472 
gboﬁón
 
u£_ic⁄s
);

473 
	`gtk_˛i°_£t_buâ⁄_a˘i⁄s
 (
GtkCLi°
 *
˛i°
,

474 
guöt
 
buâ⁄
,

475 
guöt8
 
buâ⁄_a˘i⁄s
);

481 
	`gtk_˛i°_‰ìze
 (
GtkCLi°
 *
˛i°
);

482 
	`gtk_˛i°_thaw
 (
GtkCLi°
 *
˛i°
);

485 
	`gtk_˛i°_cﬁumn_tôÀs_show
 (
GtkCLi°
 *
˛i°
);

486 
	`gtk_˛i°_cﬁumn_tôÀs_hide
 (
GtkCLi°
 *
˛i°
);

492 
	`gtk_˛i°_cﬁumn_tôÀ_a˘ive
 (
GtkCLi°
 *
˛i°
,

493 
göt
 
cﬁumn
);

494 
	`gtk_˛i°_cﬁumn_tôÀ_∑ssive
 (
GtkCLi°
 *
˛i°
,

495 
göt
 
cﬁumn
);

496 
	`gtk_˛i°_cﬁumn_tôÀs_a˘ive
 (
GtkCLi°
 *
˛i°
);

497 
	`gtk_˛i°_cﬁumn_tôÀs_∑ssive
 (
GtkCLi°
 *
˛i°
);

500 
	`gtk_˛i°_£t_cﬁumn_tôÀ
 (
GtkCLi°
 *
˛i°
,

501 
göt
 
cﬁumn
,

502 c⁄° 
gch¨
 *
tôÀ
);

505 
gch¨
 * 
	`gtk_˛i°_gë_cﬁumn_tôÀ
 (
GtkCLi°
 *
˛i°
,

506 
göt
 
cﬁumn
);

509 
	`gtk_˛i°_£t_cﬁumn_widgë
 (
GtkCLi°
 *
˛i°
,

510 
göt
 
cﬁumn
,

511 
GtkWidgë
 *
widgë
);

514 
GtkWidgë
 * 
	`gtk_˛i°_gë_cﬁumn_widgë
 (
GtkCLi°
 *
˛i°
,

515 
göt
 
cﬁumn
);

518 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
 (
GtkCLi°
 *
˛i°
,

519 
göt
 
cﬁumn
,

520 
GtkJu°ifiˇti⁄
 
ju°ifiˇti⁄
);

523 
	`gtk_˛i°_£t_cﬁumn_visibûôy
 (
GtkCLi°
 *
˛i°
,

524 
göt
 
cﬁumn
,

525 
gboﬁón
 
visibÀ
);

528 
	`gtk_˛i°_£t_cﬁumn_ªsizóbÀ
 (
GtkCLi°
 *
˛i°
,

529 
göt
 
cﬁumn
,

530 
gboﬁón
 
ªsizóbÀ
);

533 
	`gtk_˛i°_£t_cﬁumn_auto_ªsize
 (
GtkCLi°
 *
˛i°
,

534 
göt
 
cﬁumn
,

535 
gboﬁón
 
auto_ªsize
);

537 
göt
 
	`gtk_˛i°_cﬁumns_autosize
 (
GtkCLi°
 *
˛i°
);

540 
göt
 
	`gtk_˛i°_›timÆ_cﬁumn_width
 (
GtkCLi°
 *
˛i°
,

541 
göt
 
cﬁumn
);

547 
	`gtk_˛i°_£t_cﬁumn_width
 (
GtkCLi°
 *
˛i°
,

548 
göt
 
cﬁumn
,

549 
göt
 
width
);

552 
	`gtk_˛i°_£t_cﬁumn_mö_width
 (
GtkCLi°
 *
˛i°
,

553 
göt
 
cﬁumn
,

554 
göt
 
mö_width
);

555 
	`gtk_˛i°_£t_cﬁumn_max_width
 (
GtkCLi°
 *
˛i°
,

556 
göt
 
cﬁumn
,

557 
göt
 
max_width
);

562 
	`gtk_˛i°_£t_row_height
 (
GtkCLi°
 *
˛i°
,

563 
guöt
 
height
);

570 
	`gtk_˛i°_movëo
 (
GtkCLi°
 *
˛i°
,

571 
göt
 
row
,

572 
göt
 
cﬁumn
,

573 
gÊﬂt
 
row_Æign
,

574 
gÊﬂt
 
cﬁ_Æign
);

577 
GtkVisibûôy
 
	`gtk_˛i°_row_is_visibÀ
 (
GtkCLi°
 *
˛i°
,

578 
göt
 
row
);

581 
GtkCñlTy≥
 
	`gtk_˛i°_gë_˚Œ_ty≥
 (
GtkCLi°
 *
˛i°
,

582 
göt
 
row
,

583 
göt
 
cﬁumn
);

586 
	`gtk_˛i°_£t_ãxt
 (
GtkCLi°
 *
˛i°
,

587 
göt
 
row
,

588 
göt
 
cﬁumn
,

589 c⁄° 
gch¨
 *
ãxt
);

594 
göt
 
	`gtk_˛i°_gë_ãxt
 (
GtkCLi°
 *
˛i°
,

595 
göt
 
row
,

596 
göt
 
cﬁumn
,

597 
gch¨
 **
ãxt
);

600 
	`gtk_˛i°_£t_pixm≠
 (
GtkCLi°
 *
˛i°
,

601 
göt
 
row
,

602 
göt
 
cﬁumn
,

603 
GdkPixm≠
 *
pixm≠
,

604 
GdkBôm≠
 *
mask
);

606 
göt
 
	`gtk_˛i°_gë_pixm≠
 (
GtkCLi°
 *
˛i°
,

607 
göt
 
row
,

608 
göt
 
cﬁumn
,

609 
GdkPixm≠
 **
pixm≠
,

610 
GdkBôm≠
 **
mask
);

613 
	`gtk_˛i°_£t_pixãxt
 (
GtkCLi°
 *
˛i°
,

614 
göt
 
row
,

615 
göt
 
cﬁumn
,

616 c⁄° 
gch¨
 *
ãxt
,

617 
guöt8
 
•acög
,

618 
GdkPixm≠
 *
pixm≠
,

619 
GdkBôm≠
 *
mask
);

621 
göt
 
	`gtk_˛i°_gë_pixãxt
 (
GtkCLi°
 *
˛i°
,

622 
göt
 
row
,

623 
göt
 
cﬁumn
,

624 
gch¨
 **
ãxt
,

625 
guöt8
 *
•acög
,

626 
GdkPixm≠
 **
pixm≠
,

627 
GdkBôm≠
 **
mask
);

632 
	`gtk_˛i°_£t_f‹eground
 (
GtkCLi°
 *
˛i°
,

633 
göt
 
row
,

634 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

639 
	`gtk_˛i°_£t_background
 (
GtkCLi°
 *
˛i°
,

640 
göt
 
row
,

641 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

644 
	`gtk_˛i°_£t_˚Œ_°yÀ
 (
GtkCLi°
 *
˛i°
,

645 
göt
 
row
,

646 
göt
 
cﬁumn
,

647 
GtkStyÀ
 *
°yÀ
);

649 
GtkStyÀ
 *
	`gtk_˛i°_gë_˚Œ_°yÀ
 (
GtkCLi°
 *
˛i°
,

650 
göt
 
row
,

651 
göt
 
cﬁumn
);

653 
	`gtk_˛i°_£t_row_°yÀ
 (
GtkCLi°
 *
˛i°
,

654 
göt
 
row
,

655 
GtkStyÀ
 *
°yÀ
);

657 
GtkStyÀ
 *
	`gtk_˛i°_gë_row_°yÀ
 (
GtkCLi°
 *
˛i°
,

658 
göt
 
row
);

664 
	`gtk_˛i°_£t_shi·
 (
GtkCLi°
 *
˛i°
,

665 
göt
 
row
,

666 
göt
 
cﬁumn
,

667 
göt
 
vîtiˇl
,

668 
göt
 
h‹iz⁄èl
);

671 
	`gtk_˛i°_£t_£À˘abÀ
 (
GtkCLi°
 *
˛i°
,

672 
göt
 
row
,

673 
gboﬁón
 
£À˘abÀ
);

674 
gboﬁón
 
	`gtk_˛i°_gë_£À˘abÀ
 (
GtkCLi°
 *
˛i°
,

675 
göt
 
row
);

680 
göt
 
	`gtk_˛i°_¥ïíd
 (
GtkCLi°
 *
˛i°
,

681 
gch¨
 *
ãxt
[]);

682 
göt
 
	`gtk_˛i°_≠≥nd
 (
GtkCLi°
 *
˛i°
,

683 
gch¨
 *
ãxt
[]);

688 
göt
 
	`gtk_˛i°_ö£π
 (
GtkCLi°
 *
˛i°
,

689 
göt
 
row
,

690 
gch¨
 *
ãxt
[]);

693 
	`gtk_˛i°_ªmove
 (
GtkCLi°
 *
˛i°
,

694 
göt
 
row
);

697 
	`gtk_˛i°_£t_row_d©a
 (
GtkCLi°
 *
˛i°
,

698 
göt
 
row
,

699 
gpoöãr
 
d©a
);

702 
	`gtk_˛i°_£t_row_d©a_fuŒ
 (
GtkCLi°
 *
˛i°
,

703 
göt
 
row
,

704 
gpoöãr
 
d©a
,

705 
GDe°royNŸify
 
de°roy
);

708 
gpoöãr
 
	`gtk_˛i°_gë_row_d©a
 (
GtkCLi°
 *
˛i°
,

709 
göt
 
row
);

714 
göt
 
	`gtk_˛i°_föd_row_‰om_d©a
 (
GtkCLi°
 *
˛i°
,

715 
gpoöãr
 
d©a
);

718 
	`gtk_˛i°_£À˘_row
 (
GtkCLi°
 *
˛i°
,

719 
göt
 
row
,

720 
göt
 
cﬁumn
);

723 
	`gtk_˛i°_un£À˘_row
 (
GtkCLi°
 *
˛i°
,

724 
göt
 
row
,

725 
göt
 
cﬁumn
);

728 
	`gtk_˛i°_undo_£À˘i⁄
 (
GtkCLi°
 *
˛i°
);

733 
	`gtk_˛i°_˛ór
 (
GtkCLi°
 *
˛i°
);

739 
göt
 
	`gtk_˛i°_gë_£À˘i⁄_öfo
 (
GtkCLi°
 *
˛i°
,

740 
göt
 
x
,

741 
göt
 
y
,

742 
göt
 *
row
,

743 
göt
 *
cﬁumn
);

746 
	`gtk_˛i°_£À˘_Æl
 (
GtkCLi°
 *
˛i°
);

749 
	`gtk_˛i°_un£À˘_Æl
 (
GtkCLi°
 *
˛i°
);

752 
	`gtk_˛i°_sw≠_rows
 (
GtkCLi°
 *
˛i°
,

753 
göt
 
row1
,

754 
göt
 
row2
);

757 
	`gtk_˛i°_row_move
 (
GtkCLi°
 *
˛i°
,

758 
göt
 
sour˚_row
,

759 
göt
 
de°_row
);

762 
	`gtk_˛i°_£t_com∑ª_func
 (
GtkCLi°
 *
˛i°
,

763 
GtkCLi°Com∑ªFunc
 
cmp_func
);

766 
	`gtk_˛i°_£t_s‹t_cﬁumn
 (
GtkCLi°
 *
˛i°
,

767 
göt
 
cﬁumn
);

770 
	`gtk_˛i°_£t_s‹t_ty≥
 (
GtkCLi°
 *
˛i°
,

771 
GtkS‹tTy≥
 
s‹t_ty≥
);

774 
	`gtk_˛i°_s‹t
 (
GtkCLi°
 *
˛i°
);

777 
	`gtk_˛i°_£t_auto_s‹t
 (
GtkCLi°
 *
˛i°
,

778 
gboﬁón
 
auto_s‹t
);

782 
P™goLayout
 *
	`_gtk_˛i°_¸óã_˚Œ_œyout
 (
GtkCLi°
 *
˛i°
,

783 
GtkCLi°Row
 *
˛i°_row
,

784 
göt
 
cﬁumn
);

787 
G_END_DECLS


	@/usr/include/gtk/gtkcolorbutton.h

32 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

36 #i‚de‡
__GTK_COLOR_BUTTON_H__


37 
	#__GTK_COLOR_BUTTON_H__


	)

40 
	~<gtk/gtkbuâ⁄.h
>

42 
	gG_BEGIN_DECLS


51 
	#GTK_TYPE_COLOR_BUTTON
 (
	`gtk_cﬁ‹_buâ⁄_gë_ty≥
 ())

	)

52 
	#GTK_COLOR_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_COLOR_BUTTON
, 
GtkCﬁ‹Buâ⁄
))

	)

53 
	#GTK_COLOR_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_COLOR_BUTTON
, 
GtkCﬁ‹Buâ⁄Cœss
))

	)

54 
	#GTK_IS_COLOR_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_COLOR_BUTTON
))

	)

55 
	#GTK_IS_COLOR_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_COLOR_BUTTON
))

	)

56 
	#GTK_COLOR_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_COLOR_BUTTON
, 
GtkCﬁ‹Buâ⁄Cœss
))

	)

58 
_GtkCﬁ‹Buâ⁄
 
	tGtkCﬁ‹Buâ⁄
;

59 
_GtkCﬁ‹Buâ⁄Cœss
 
	tGtkCﬁ‹Buâ⁄Cœss
;

60 
_GtkCﬁ‹Buâ⁄Priv©e
 
	tGtkCﬁ‹Buâ⁄Priv©e
;

62 
	s_GtkCﬁ‹Buâ⁄
 {

63 
GtkBuâ⁄
 
	mbuâ⁄
;

67 
GtkCﬁ‹Buâ⁄Priv©e
 *
GSEAL
 (
¥iv
);

70 
	s_GtkCﬁ‹Buâ⁄Cœss
 {

71 
GtkBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

73 (* 
	mcﬁ‹_£t
Ë(
GtkCﬁ‹Buâ⁄
 *
	m˝
);

76 (*
	m_gtk_ª£rved1
) ();

77 (*
	m_gtk_ª£rved2
) ();

78 (*
	m_gtk_ª£rved3
) ();

79 (*
	m_gtk_ª£rved4
) ();

83 
GTy≥
 
	$gtk_cﬁ‹_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

84 
GtkWidgë
 *
	`gtk_cﬁ‹_buâ⁄_√w
 ();

85 
GtkWidgë
 *
	`gtk_cﬁ‹_buâ⁄_√w_wôh_cﬁ‹
 (c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

86 
	`gtk_cﬁ‹_buâ⁄_£t_cﬁ‹
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
,

87 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

88 
	`gtk_cﬁ‹_buâ⁄_£t_Æpha
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
,

89 
guöt16
 
Æpha
);

90 
	`gtk_cﬁ‹_buâ⁄_gë_cﬁ‹
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
,

91 
GdkCﬁ‹
 *
cﬁ‹
);

92 
guöt16
 
	`gtk_cﬁ‹_buâ⁄_gë_Æpha
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
);

93 
	`gtk_cﬁ‹_buâ⁄_£t_u£_Æpha
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
,

94 
gboﬁón
 
u£_Æpha
);

95 
gboﬁón
 
	`gtk_cﬁ‹_buâ⁄_gë_u£_Æpha
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
);

96 
	`gtk_cﬁ‹_buâ⁄_£t_tôÀ
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
,

97 c⁄° 
gch¨
 *
tôÀ
);

98 
G_CONST_RETURN
 
gch¨
 *
	`gtk_cﬁ‹_buâ⁄_gë_tôÀ
 (
GtkCﬁ‹Buâ⁄
 *
cﬁ‹_buâ⁄
);

101 
G_END_DECLS


	@/usr/include/gtk/gtkcolorsel.h

28 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

32 #i‚de‡
__GTK_COLOR_SELECTION_H__


33 
	#__GTK_COLOR_SELECTION_H__


	)

35 
	~<gtk/gtkdülog.h
>

36 
	~<gtk/gtkvbox.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_COLOR_SELECTION
 (
	`gtk_cﬁ‹_£À˘i⁄_gë_ty≥
 ())

	)

41 
	#GTK_COLOR_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_COLOR_SELECTION
, 
GtkCﬁ‹Sñe˘i⁄
))

	)

42 
	#GTK_COLOR_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_COLOR_SELECTION
, 
GtkCﬁ‹Sñe˘i⁄Cœss
))

	)

43 
	#GTK_IS_COLOR_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_COLOR_SELECTION
))

	)

44 
	#GTK_IS_COLOR_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_COLOR_SELECTION
))

	)

45 
	#GTK_COLOR_SELECTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_COLOR_SELECTION
, 
GtkCﬁ‹Sñe˘i⁄Cœss
))

	)

48 
_GtkCﬁ‹Sñe˘i⁄
 
	tGtkCﬁ‹Sñe˘i⁄
;

49 
_GtkCﬁ‹Sñe˘i⁄Cœss
 
	tGtkCﬁ‹Sñe˘i⁄Cœss
;

52 (* 
	tGtkCﬁ‹Sñe˘i⁄Ch™gePÆëãFunc
Ë(c⁄° 
	tGdkCﬁ‹
 *
	tcﬁ‹s
,

53 
	tgöt
 
	tn_cﬁ‹s
);

54 (* 
	tGtkCﬁ‹Sñe˘i⁄Ch™gePÆëãWôhS¸ìnFunc
Ë(
	tGdkS¸ìn
 *
	ts¸ìn
,

55 c⁄° 
	tGdkCﬁ‹
 *
	tcﬁ‹s
,

56 
	tgöt
 
	tn_cﬁ‹s
);

58 
	s_GtkCﬁ‹Sñe˘i⁄


60 
GtkVBox
 
∑ª¡_ö°™˚
;

63 
gpoöãr
 
	`GSEAL
 (
¥iv©e_d©a
);

66 
	s_GtkCﬁ‹Sñe˘i⁄Cœss


68 
GtkVBoxCœss
 
∑ª¡_˛ass
;

70 (*
cﬁ‹_ch™ged
Ë(
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹_£À˘i⁄
);

73 (*
_gtk_ª£rved1
) ();

74 (*
_gtk_ª£rved2
) ();

75 (*
_gtk_ª£rved3
) ();

76 (*
_gtk_ª£rved4
) ();

82 
GTy≥
 
	$gtk_cﬁ‹_£À˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

83 
GtkWidgë
 *
	`gtk_cﬁ‹_£À˘i⁄_√w
 ();

84 
gboﬁón
 
	`gtk_cﬁ‹_£À˘i⁄_gë_has_›acôy_c⁄åﬁ
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
);

85 
	`gtk_cﬁ‹_£À˘i⁄_£t_has_›acôy_c⁄åﬁ
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

86 
gboﬁón
 
has_›acôy
);

87 
gboﬁón
 
	`gtk_cﬁ‹_£À˘i⁄_gë_has_∑Àâe
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
);

88 
	`gtk_cﬁ‹_£À˘i⁄_£t_has_∑Àâe
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

89 
gboﬁón
 
has_∑Àâe
);

92 
	`gtk_cﬁ‹_£À˘i⁄_£t_cuºít_cﬁ‹
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

93 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

94 
	`gtk_cﬁ‹_£À˘i⁄_£t_cuºít_Æpha
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

95 
guöt16
 
Æpha
);

96 
	`gtk_cﬁ‹_£À˘i⁄_gë_cuºít_cﬁ‹
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

97 
GdkCﬁ‹
 *
cﬁ‹
);

98 
guöt16
 
	`gtk_cﬁ‹_£À˘i⁄_gë_cuºít_Æpha
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
);

99 
	`gtk_cﬁ‹_£À˘i⁄_£t_¥evious_cﬁ‹
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

100 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

101 
	`gtk_cﬁ‹_£À˘i⁄_£t_¥evious_Æpha
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

102 
guöt16
 
Æpha
);

103 
	`gtk_cﬁ‹_£À˘i⁄_gë_¥evious_cﬁ‹
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

104 
GdkCﬁ‹
 *
cﬁ‹
);

105 
guöt16
 
	`gtk_cﬁ‹_£À˘i⁄_gë_¥evious_Æpha
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
);

107 
gboﬁón
 
	`gtk_cﬁ‹_£À˘i⁄_is_adju°ög
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
);

109 
gboﬁón
 
	`gtk_cﬁ‹_£À˘i⁄_∑Àâe_‰om_°rög
 (c⁄° 
gch¨
 *
°r
,

110 
GdkCﬁ‹
 **
cﬁ‹s
,

111 
göt
 *
n_cﬁ‹s
);

112 
gch¨
* 
	`gtk_cﬁ‹_£À˘i⁄_∑Àâe_to_°rög
 (c⁄° 
GdkCﬁ‹
 *
cﬁ‹s
,

113 
göt
 
n_cﬁ‹s
);

115 #i‚de‡
GTK_DISABLE_DEPRECATED


116 #i‚de‡
GDK_MULTIHEAD_SAFE


117 
GtkCﬁ‹Sñe˘i⁄Ch™gePÆëãFunc
 
	`gtk_cﬁ‹_£À˘i⁄_£t_ch™ge_∑Àâe_hook
 (GtkCﬁ‹Sñe˘i⁄Ch™gePÆëãFun¯
func
);

121 
GtkCﬁ‹Sñe˘i⁄Ch™gePÆëãWôhS¸ìnFunc
 
	`gtk_cﬁ‹_£À˘i⁄_£t_ch™ge_∑Àâe_wôh_s¸ìn_hook
 (GtkCﬁ‹Sñe˘i⁄Ch™gePÆëãWôhS¸ìnFun¯
func
);

123 #i‚de‡
GTK_DISABLE_DEPRECATED


125 
	`gtk_cﬁ‹_£À˘i⁄_£t_cﬁ‹
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

126 
gdoubÀ
 *
cﬁ‹
);

127 
	`gtk_cﬁ‹_£À˘i⁄_gë_cﬁ‹
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

128 
gdoubÀ
 *
cﬁ‹
);

129 
	`gtk_cﬁ‹_£À˘i⁄_£t_upd©e_pﬁicy
 (
GtkCﬁ‹Sñe˘i⁄
 *
cﬁ‹£l
,

130 
GtkUpd©eTy≥
 
pﬁicy
);

133 
G_END_DECLS


	@/usr/include/gtk/gtkcolorseldialog.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_COLOR_SELECTION_DIALOG_H__


32 
	#__GTK_COLOR_SELECTION_DIALOG_H__


	)

34 
	~<gtk/gtkdülog.h
>

35 
	~<gtk/gtkcﬁ‹£l.h
>

36 
	~<gtk/gtkvbox.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_COLOR_SELECTION_DIALOG
 (
	`gtk_cﬁ‹_£À˘i⁄_dülog_gë_ty≥
 ())

	)

41 
	#GTK_COLOR_SELECTION_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_COLOR_SELECTION_DIALOG
, 
GtkCﬁ‹Sñe˘i⁄Dülog
))

	)

42 
	#GTK_COLOR_SELECTION_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_COLOR_SELECTION_DIALOG
, 
GtkCﬁ‹Sñe˘i⁄DülogCœss
))

	)

43 
	#GTK_IS_COLOR_SELECTION_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_COLOR_SELECTION_DIALOG
))

	)

44 
	#GTK_IS_COLOR_SELECTION_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_COLOR_SELECTION_DIALOG
))

	)

45 
	#GTK_COLOR_SELECTION_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_COLOR_SELECTION_DIALOG
, 
GtkCﬁ‹Sñe˘i⁄DülogCœss
))

	)

48 
_GtkCﬁ‹Sñe˘i⁄Dülog
 
	tGtkCﬁ‹Sñe˘i⁄Dülog
;

49 
_GtkCﬁ‹Sñe˘i⁄DülogCœss
 
	tGtkCﬁ‹Sñe˘i⁄DülogCœss
;

52 
	s_GtkCﬁ‹Sñe˘i⁄Dülog


54 
GtkDülog
 
	m∑ª¡_ö°™˚
;

56 
GtkWidgë
 *
GSEAL
 (
cﬁ‹£l
);

57 
GtkWidgë
 *
GSEAL
 (
ok_buâ⁄
);

58 
GtkWidgë
 *
GSEAL
 (
ˇn˚l_buâ⁄
);

59 
GtkWidgë
 *
GSEAL
 (
hñp_buâ⁄
);

62 
	s_GtkCﬁ‹Sñe˘i⁄DülogCœss


64 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

67 (*
	m_gtk_ª£rved1
) ();

68 (*
	m_gtk_ª£rved2
) ();

69 (*
	m_gtk_ª£rved3
) ();

70 (*
	m_gtk_ª£rved4
) ();

75 
GTy≥
 
	$gtk_cﬁ‹_£À˘i⁄_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

76 
GtkWidgë
* 
	`gtk_cﬁ‹_£À˘i⁄_dülog_√w
 (c⁄° 
gch¨
 *
tôÀ
);

77 
GtkWidgë
* 
	`gtk_cﬁ‹_£À˘i⁄_dülog_gë_cﬁ‹_£À˘i⁄
 (
GtkCﬁ‹Sñe˘i⁄Dülog
 *
cﬁ‹£l
);

80 
G_END_DECLS


	@/usr/include/gtk/gtkcombo.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_SMART_COMBO_H__


30 
	#__GTK_SMART_COMBO_H__


	)

32 
	~<gtk/gtk.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_COMBO
 (
	`gtk_combo_gë_ty≥
 ())

	)

38 
	#GTK_COMBO
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_COMBO
, 
GtkCombo
))

	)

39 
	#GTK_COMBO_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_COMBO
, 
GtkComboCœss
))

	)

40 
	#GTK_IS_COMBO
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_COMBO
))

	)

41 
	#GTK_IS_COMBO_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_COMBO
))

	)

42 
	#GTK_COMBO_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_COMBO
, 
GtkComboCœss
))

	)

45 
_GtkCombo
 
	tGtkCombo
;

46 
_GtkComboCœss
 
	tGtkComboCœss
;

49 
	s_GtkCombo
 {

50 
GtkHBox
 
	mhbox
;

53 
GtkWidgë
 *
	míåy
;

56 
GtkWidgë
 *
	mbuâ⁄
;

57 
GtkWidgë
 *
	mp›up
;

58 
GtkWidgë
 *
	mp›wö
;

61 
GtkWidgë
 *
	mli°
;

64 
guöt
 
	míåy_ch™ge_id
;

65 
guöt
 
	mli°_ch™ge_id
;

67 
guöt
 
	mvÆue_ö_li°
:1;

68 
guöt
 
	mok_if_em±y
:1;

69 
guöt
 
	mˇ£_£nsôive
:1;

70 
guöt
 
	mu£_¨rows
:1;

71 
guöt
 
	mu£_¨rows_Æways
:1;

73 
guöt16
 
	mcuºít_buâ⁄
;

74 
guöt
 
	ma˘iv©e_id
;

77 
	s_GtkComboCœss
 {

78 
GtkHBoxCœss
 
	m∑ª¡_˛ass
;

81 (*
	m_gtk_ª£rved1
) ();

82 (*
	m_gtk_ª£rved2
) ();

83 (*
	m_gtk_ª£rved3
) ();

84 (*
	m_gtk_ª£rved4
) ();

87 
GTy≥
 
	$gtk_combo_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
GtkWidgë
* 
	`gtk_combo_√w
 ();

91 
	`gtk_combo_£t_vÆue_ö_li°
 (
GtkCombo
* 
combo
,

92 
gboﬁón
 
vÆ
,

93 
gboﬁón
 
ok_if_em±y
);

95 
	`gtk_combo_£t_u£_¨rows
 (
GtkCombo
* 
combo
,

96 
gboﬁón
 
vÆ
);

98 
	`gtk_combo_£t_u£_¨rows_Æways
 (
GtkCombo
* 
combo
,

99 
gboﬁón
 
vÆ
);

101 
	`gtk_combo_£t_ˇ£_£nsôive
 (
GtkCombo
* 
combo
,

102 
gboﬁón
 
vÆ
);

105 
	`gtk_combo_£t_ôem_°rög
 (
GtkCombo
* 
combo
,

106 
GtkIãm
* 
ôem
,

107 c⁄° 
gch¨
* 
ôem_vÆue
);

109 
	`gtk_combo_£t_p›down_°rögs
 (
GtkCombo
* 
combo
,

110 
GLi°
 *
°rögs
);

112 
	`gtk_combo_dißbÀ_a˘iv©e
 (
GtkCombo
* 
combo
);

114 
G_END_DECLS


	@/usr/include/gtk/gtkcombobox.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_COMBO_BOX_H__


25 
	#__GTK_COMBO_BOX_H__


	)

27 
	~<gtk/gtkbö.h
>

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtkåìvõw.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_COMBO_BOX
 (
	`gtk_combo_box_gë_ty≥
 ())

	)

34 
	#GTK_COMBO_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_COMBO_BOX
, 
GtkComboBox
))

	)

35 
	#GTK_COMBO_BOX_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((vèbÀ), 
GTK_TYPE_COMBO_BOX
, 
GtkComboBoxCœss
))

	)

36 
	#GTK_IS_COMBO_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_COMBO_BOX
))

	)

37 
	#GTK_IS_COMBO_BOX_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((vèbÀ), 
GTK_TYPE_COMBO_BOX
))

	)

38 
	#GTK_COMBO_BOX_GET_CLASS
(
ö°
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((ö°), 
GTK_TYPE_COMBO_BOX
, 
GtkComboBoxCœss
))

	)

40 
_GtkComboBox
 
	tGtkComboBox
;

41 
_GtkComboBoxCœss
 
	tGtkComboBoxCœss
;

42 
_GtkComboBoxPriv©e
 
	tGtkComboBoxPriv©e
;

44 
	s_GtkComboBox


46 
GtkBö
 
	m∑ª¡_ö°™˚
;

49 
GtkComboBoxPriv©e
 *
GSEAL
 (
¥iv
);

52 
	s_GtkComboBoxCœss


54 
GtkBöCœss
 
	m∑ª¡_˛ass
;

57 (* 
	mch™ged
Ë(
GtkComboBox
 *
	mcombo_box
);

60 
	mgch¨
 * (* 
	mgë_a˘ive_ãxt
Ë(
GtkComboBox
 *
	mcombo_box
);

63 (*
	m_gtk_ª£rved0
) ();

64 (*
	m_gtk_ª£rved1
) ();

65 (*
	m_gtk_ª£rved2
) ();

70 
GTy≥
 
	$gtk_combo_box_gë_ty≥
 (Ë
G_GNUC_CONST
;

71 
GtkWidgë
 *
	`gtk_combo_box_√w
 ();

72 
GtkWidgë
 *
	`gtk_combo_box_√w_wôh_modñ
 (
GtkTªeModñ
 *
modñ
);

75 
göt
 
	`gtk_combo_box_gë_wøp_width
 (
GtkComboBox
 *
combo_box
);

76 
	`gtk_combo_box_£t_wøp_width
 (
GtkComboBox
 *
combo_box
,

77 
göt
 
width
);

78 
göt
 
	`gtk_combo_box_gë_row_•™_cﬁumn
 (
GtkComboBox
 *
combo_box
);

79 
	`gtk_combo_box_£t_row_•™_cﬁumn
 (
GtkComboBox
 *
combo_box
,

80 
göt
 
row_•™
);

81 
göt
 
	`gtk_combo_box_gë_cﬁumn_•™_cﬁumn
 (
GtkComboBox
 *
combo_box
);

82 
	`gtk_combo_box_£t_cﬁumn_•™_cﬁumn
 (
GtkComboBox
 *
combo_box
,

83 
göt
 
cﬁumn_•™
);

85 
gboﬁón
 
	`gtk_combo_box_gë_add_ã¨offs
 (
GtkComboBox
 *
combo_box
);

86 
	`gtk_combo_box_£t_add_ã¨offs
 (
GtkComboBox
 *
combo_box
,

87 
gboﬁón
 
add_ã¨offs
);

89 
G_CONST_RETURN
 
gch¨
 *
	`gtk_combo_box_gë_tôÀ
 (
GtkComboBox
 *
combo_box
);

90 
	`gtk_combo_box_£t_tôÀ
 (
GtkComboBox
 *
combo_box
,

91 c⁄° 
gch¨
 *
tôÀ
);

93 
gboﬁón
 
	`gtk_combo_box_gë_focus_⁄_˛ick
 (
GtkComboBox
 *
combo
);

94 
	`gtk_combo_box_£t_focus_⁄_˛ick
 (
GtkComboBox
 *
combo
,

95 
gboﬁón
 
focus_⁄_˛ick
);

98 
göt
 
	`gtk_combo_box_gë_a˘ive
 (
GtkComboBox
 *
combo_box
);

99 
	`gtk_combo_box_£t_a˘ive
 (
GtkComboBox
 *
combo_box
,

100 
göt
 
ödex_
);

101 
gboﬁón
 
	`gtk_combo_box_gë_a˘ive_ôî
 (
GtkComboBox
 *
combo_box
,

102 
GtkTªeIãr
 *
ôî
);

103 
	`gtk_combo_box_£t_a˘ive_ôî
 (
GtkComboBox
 *
combo_box
,

104 
GtkTªeIãr
 *
ôî
);

107 
	`gtk_combo_box_£t_modñ
 (
GtkComboBox
 *
combo_box
,

108 
GtkTªeModñ
 *
modñ
);

109 
GtkTªeModñ
 *
	`gtk_combo_box_gë_modñ
 (
GtkComboBox
 *
combo_box
);

111 
GtkTªeVõwRowSï¨©‹Func
 
	`gtk_combo_box_gë_row_£∑øt‹_func
 (
GtkComboBox
 *
combo_box
);

112 
	`gtk_combo_box_£t_row_£∑øt‹_func
 (
GtkComboBox
 *
combo_box
,

113 
GtkTªeVõwRowSï¨©‹Func
 
func
,

114 
gpoöãr
 
d©a
,

115 
GDe°royNŸify
 
de°roy
);

117 
	`gtk_combo_box_£t_buâ⁄_£nsôivôy
 (
GtkComboBox
 *
combo_box
,

118 
GtkSísôivôyTy≥
 
£nsôivôy
);

119 
GtkSísôivôyTy≥
 
	`gtk_combo_box_gë_buâ⁄_£nsôivôy
 (
GtkComboBox
 *
combo_box
);

122 
GtkWidgë
 *
	`gtk_combo_box_√w_ãxt
 ();

123 
	`gtk_combo_box_≠≥nd_ãxt
 (
GtkComboBox
 *
combo_box
,

124 c⁄° 
gch¨
 *
ãxt
);

125 
	`gtk_combo_box_ö£π_ãxt
 (
GtkComboBox
 *
combo_box
,

126 
göt
 
posôi⁄
,

127 c⁄° 
gch¨
 *
ãxt
);

128 
	`gtk_combo_box_¥ïíd_ãxt
 (
GtkComboBox
 *
combo_box
,

129 c⁄° 
gch¨
 *
ãxt
);

130 
	`gtk_combo_box_ªmove_ãxt
 (
GtkComboBox
 *
combo_box
,

131 
göt
 
posôi⁄
);

132 
gch¨
 *
	`gtk_combo_box_gë_a˘ive_ãxt
 (
GtkComboBox
 *
combo_box
);

135 
	`gtk_combo_box_p›up
 (
GtkComboBox
 *
combo_box
);

136 
	`gtk_combo_box_p›down
 (
GtkComboBox
 *
combo_box
);

137 
AtkObje˘
* 
	`gtk_combo_box_gë_p›up_ac˚ssibÀ
 (
GtkComboBox
 *
combo_box
);

140 
G_END_DECLS


	@/usr/include/gtk/gtkcomboboxentry.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_COMBO_BOX_ENTRY_H__


25 
	#__GTK_COMBO_BOX_ENTRY_H__


	)

27 
	~<gtk/gtkcombobox.h
>

28 
	~<gtk/gtkåìmodñ.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_COMBO_BOX_ENTRY
 (
	`gtk_combo_box_íåy_gë_ty≥
 ())

	)

33 
	#GTK_COMBO_BOX_ENTRY
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_COMBO_BOX_ENTRY
, 
GtkComboBoxE¡ry
))

	)

34 
	#GTK_COMBO_BOX_ENTRY_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((vèbÀ), 
GTK_TYPE_COMBO_BOX_ENTRY
, 
GtkComboBoxE¡ryCœss
))

	)

35 
	#GTK_IS_COMBO_BOX_ENTRY
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_COMBO_BOX_ENTRY
))

	)

36 
	#GTK_IS_COMBO_BOX_ENTRY_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((vèbÀ), 
GTK_TYPE_COMBO_BOX_ENTRY
))

	)

37 
	#GTK_COMBO_BOX_ENTRY_GET_CLASS
(
ö°
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((ö°), 
GTK_TYPE_COMBO_BOX_ENTRY
, 
GtkComboBoxE¡ryCœss
))

	)

39 
_GtkComboBoxE¡ry
 
	tGtkComboBoxE¡ry
;

40 
_GtkComboBoxE¡ryCœss
 
	tGtkComboBoxE¡ryCœss
;

41 
_GtkComboBoxE¡ryPriv©e
 
	tGtkComboBoxE¡ryPriv©e
;

43 
	s_GtkComboBoxE¡ry


45 
GtkComboBox
 
	m∑ª¡_ö°™˚
;

48 
GtkComboBoxE¡ryPriv©e
 *
GSEAL
 (
¥iv
);

51 
	s_GtkComboBoxE¡ryCœss


53 
GtkComboBoxCœss
 
	m∑ª¡_˛ass
;

56 (*
	m_gtk_ª£rved0
) ();

57 (*
	m_gtk_ª£rved1
) ();

58 (*
	m_gtk_ª£rved2
) ();

59 (*
	m_gtk_ª£rved3
) ();

63 
GTy≥
 
	$gtk_combo_box_íåy_gë_ty≥
 (Ë
G_GNUC_CONST
;

64 
GtkWidgë
 *
	`gtk_combo_box_íåy_√w
 ();

65 
GtkWidgë
 *
	`gtk_combo_box_íåy_√w_wôh_modñ
 (
GtkTªeModñ
 *
modñ
,

66 
göt
 
ãxt_cﬁumn
);

68 
	`gtk_combo_box_íåy_£t_ãxt_cﬁumn
 (
GtkComboBoxE¡ry
 *
íåy_box
,

69 
göt
 
ãxt_cﬁumn
);

70 
göt
 
	`gtk_combo_box_íåy_gë_ãxt_cﬁumn
 (
GtkComboBoxE¡ry
 *
íåy_box
);

73 
GtkWidgë
 *
	`gtk_combo_box_íåy_√w_ãxt
 ();

76 
G_END_DECLS


	@/usr/include/gtk/gtkcontainer.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_CONTAINER_H__


32 
	#__GTK_CONTAINER_H__


	)

35 
	~<gtk/gtkwidgë.h
>

36 
	~<gtk/gtkadju°mít.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_CONTAINER
 (
	`gtk_c⁄èöî_gë_ty≥
 ())

	)

42 
	#GTK_CONTAINER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CONTAINER
, 
GtkC⁄èöî
))

	)

43 
	#GTK_CONTAINER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CONTAINER
, 
GtkC⁄èöîCœss
))

	)

44 
	#GTK_IS_CONTAINER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CONTAINER
))

	)

45 
	#GTK_IS_CONTAINER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CONTAINER
))

	)

46 
	#GTK_CONTAINER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CONTAINER
, 
GtkC⁄èöîCœss
))

	)

48 
	#GTK_IS_RESIZE_CONTAINER
(
widgë
Ë(
	`GTK_IS_CONTAINER
 (widgëË&& ((
GtkC⁄èöî
*Ë(widgë))->
ªsize_mode
 !
GTK_RESIZE_PARENT
)

	)

51 
_GtkC⁄èöî
 
	tGtkC⁄èöî
;

52 
_GtkC⁄èöîCœss
 
	tGtkC⁄èöîCœss
;

54 
	s_GtkC⁄èöî


56 
GtkWidgë
 
	mwidgë
;

58 
GtkWidgë
 *
GSEAL
 (
focus_chûd
);

60 
guöt
 
GSEAL
 (
b‹dî_width
) : 16;

63 
guöt
 
GSEAL
 (
√ed_ªsize
) : 1;

64 
guöt
 
GSEAL
 (
ªsize_mode
) : 2;

65 
guöt
 
GSEAL
 (
ªÆloˇã_ªdøws
) : 1;

66 
guöt
 
GSEAL
 (
has_focus_chaö
) : 1;

69 
	s_GtkC⁄èöîCœss


71 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

73 (*
	madd
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
,

74 
GtkWidgë
 *
	mwidgë
);

75 (*
	mªmove
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
,

76 
GtkWidgë
 *
	mwidgë
);

77 (*
	mcheck_ªsize
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
);

78 (*
	mf‹Æl
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
,

79 
gboﬁón
 
	mö˛ude_öã∫Æs
,

80 
GtkCÆlback
 
	mˇŒback
,

81 
gpoöãr
 
	mˇŒback_d©a
);

82 (*
	m£t_focus_chûd
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
,

83 
GtkWidgë
 *
	mwidgë
);

84 
GTy≥
 (*
chûd_ty≥
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
);

85 
	mgch¨
* (*
	mcomposôe_«me
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
,

86 
GtkWidgë
 *
	mchûd
);

87 (*
	m£t_chûd_¥›îty
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
,

88 
GtkWidgë
 *
	mchûd
,

89 
guöt
 
	m¥›îty_id
,

90 c⁄° 
GVÆue
 *
	mvÆue
,

91 
GP¨amS≥c
 *
	mp•ec
);

92 (*
	mgë_chûd_¥›îty
Ë(
GtkC⁄èöî
 *
	mc⁄èöî
,

93 
GtkWidgë
 *
	mchûd
,

94 
guöt
 
	m¥›îty_id
,

95 
GVÆue
 *
	mvÆue
,

96 
GP¨amS≥c
 *
	mp•ec
);

99 (*
	m_gtk_ª£rved1
) ();

100 (*
	m_gtk_ª£rved2
) ();

101 (*
	m_gtk_ª£rved3
) ();

102 (*
	m_gtk_ª£rved4
) ();

107 
GTy≥
 
	$gtk_c⁄èöî_gë_ty≥
 (Ë
G_GNUC_CONST
;

108 
	`gtk_c⁄èöî_£t_b‹dî_width
 (
GtkC⁄èöî
 *
c⁄èöî
,

109 
guöt
 
b‹dî_width
);

110 
guöt
 
	`gtk_c⁄èöî_gë_b‹dî_width
 (
GtkC⁄èöî
 *
c⁄èöî
);

111 
	`gtk_c⁄èöî_add
 (
GtkC⁄èöî
 *
c⁄èöî
,

112 
GtkWidgë
 *
widgë
);

113 
	`gtk_c⁄èöî_ªmove
 (
GtkC⁄èöî
 *
c⁄èöî
,

114 
GtkWidgë
 *
widgë
);

116 
	`gtk_c⁄èöî_£t_ªsize_mode
 (
GtkC⁄èöî
 *
c⁄èöî
,

117 
GtkResizeMode
 
ªsize_mode
);

118 
GtkResizeMode
 
	`gtk_c⁄èöî_gë_ªsize_mode
 (
GtkC⁄èöî
 *
c⁄èöî
);

120 
	`gtk_c⁄èöî_check_ªsize
 (
GtkC⁄èöî
 *
c⁄èöî
);

122 
	`gtk_c⁄èöî_f‹óch
 (
GtkC⁄èöî
 *
c⁄èöî
,

123 
GtkCÆlback
 
ˇŒback
,

124 
gpoöãr
 
ˇŒback_d©a
);

125 #i‚de‡
GTK_DISABLE_DEPRECATED


126 
	`gtk_c⁄èöî_f‹óch_fuŒ
 (
GtkC⁄èöî
 *
c⁄èöî
,

127 
GtkCÆlback
 
ˇŒback
,

128 
GtkCÆlbackM¨shÆ
 
m¨shÆ
,

129 
gpoöãr
 
ˇŒback_d©a
,

130 
GDe°royNŸify
 
nŸify
);

132 
GLi°
* 
	`gtk_c⁄èöî_gë_chûdªn
 (
GtkC⁄èöî
 *
c⁄èöî
);

134 #i‚de‡
GTK_DISABLE_DEPRECATED


135 
	#gtk_c⁄èöî_chûdªn
 
gtk_c⁄èöî_gë_chûdªn


	)

138 
	`gtk_c⁄èöî_¥›ag©e_expo£
 (
GtkC⁄èöî
 *
c⁄èöî
,

139 
GtkWidgë
 *
chûd
,

140 
GdkEvítExpo£
 *
evít
);

142 
	`gtk_c⁄èöî_£t_focus_chaö
 (
GtkC⁄èöî
 *
c⁄èöî
,

143 
GLi°
 *
focußbÀ_widgës
);

144 
gboﬁón
 
	`gtk_c⁄èöî_gë_focus_chaö
 (
GtkC⁄èöî
 *
c⁄èöî
,

145 
GLi°
 **
focußbÀ_widgës
);

146 
	`gtk_c⁄èöî_un£t_focus_chaö
 (
GtkC⁄èöî
 *
c⁄èöî
);

150 
	`gtk_c⁄èöî_£t_ªÆloˇã_ªdøws
 (
GtkC⁄èöî
 *
c⁄èöî
,

151 
gboﬁón
 
√eds_ªdøws
);

152 
	`gtk_c⁄èöî_£t_focus_chûd
 (
GtkC⁄èöî
 *
c⁄èöî
,

153 
GtkWidgë
 *
chûd
);

154 
GtkWidgë
 *

155 
	`gtk_c⁄èöî_gë_focus_chûd
 (
GtkC⁄èöî
 *
c⁄èöî
);

156 
	`gtk_c⁄èöî_£t_focus_vadju°mít
 (
GtkC⁄èöî
 *
c⁄èöî
,

157 
GtkAdju°mít
 *
adju°mít
);

158 
GtkAdju°mít
 *
	`gtk_c⁄èöî_gë_focus_vadju°mít
 (
GtkC⁄èöî
 *
c⁄èöî
);

159 
	`gtk_c⁄èöî_£t_focus_hadju°mít
 (
GtkC⁄èöî
 *
c⁄èöî
,

160 
GtkAdju°mít
 *
adju°mít
);

161 
GtkAdju°mít
 *
	`gtk_c⁄èöî_gë_focus_hadju°mít
 (
GtkC⁄èöî
 *
c⁄èöî
);

163 
	`gtk_c⁄èöî_ªsize_chûdªn
 (
GtkC⁄èöî
 *
c⁄èöî
);

165 
GTy≥
 
	`gtk_c⁄èöî_chûd_ty≥
 (
GtkC⁄èöî
 *
c⁄èöî
);

168 
	`gtk_c⁄èöî_˛ass_ö°Æl_chûd_¥›îty
 (
GtkC⁄èöîCœss
 *
c˛ass
,

169 
guöt
 
¥›îty_id
,

170 
GP¨amS≥c
 *
p•ec
);

171 
GP¨amS≥c
* 
	`gtk_c⁄èöî_˛ass_föd_chûd_¥›îty
 (
GObje˘Cœss
 *
c˛ass
,

172 c⁄° 
gch¨
 *
¥›îty_«me
);

173 
GP¨amS≥c
** 
	`gtk_c⁄èöî_˛ass_li°_chûd_¥›îtõs
 (
GObje˘Cœss
 *
c˛ass
,

174 
guöt
 *
n_¥›îtõs
);

175 
	$gtk_c⁄èöî_add_wôh_¥›îtõs
 (
GtkC⁄èöî
 *
c⁄èöî
,

176 
GtkWidgë
 *
widgë
,

177 c⁄° 
gch¨
 *
fú°_¥›_«me
,

178 ...Ë
G_GNUC_NULL_TERMINATED
;

179 
	$gtk_c⁄èöî_chûd_£t
 (
GtkC⁄èöî
 *
c⁄èöî
,

180 
GtkWidgë
 *
chûd
,

181 c⁄° 
gch¨
 *
fú°_¥›_«me
,

182 ...Ë
G_GNUC_NULL_TERMINATED
;

183 
	$gtk_c⁄èöî_chûd_gë
 (
GtkC⁄èöî
 *
c⁄èöî
,

184 
GtkWidgë
 *
chûd
,

185 c⁄° 
gch¨
 *
fú°_¥›_«me
,

186 ...Ë
G_GNUC_NULL_TERMINATED
;

187 
	`gtk_c⁄èöî_chûd_£t_vÆi°
 (
GtkC⁄èöî
 *
c⁄èöî
,

188 
GtkWidgë
 *
chûd
,

189 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

190 
va_li°
 
v¨_¨gs
);

191 
	`gtk_c⁄èöî_chûd_gë_vÆi°
 (
GtkC⁄èöî
 *
c⁄èöî
,

192 
GtkWidgë
 *
chûd
,

193 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

194 
va_li°
 
v¨_¨gs
);

195 
	`gtk_c⁄èöî_chûd_£t_¥›îty
 (
GtkC⁄èöî
 *
c⁄èöî
,

196 
GtkWidgë
 *
chûd
,

197 c⁄° 
gch¨
 *
¥›îty_«me
,

198 c⁄° 
GVÆue
 *
vÆue
);

199 
	`gtk_c⁄èöî_chûd_gë_¥›îty
 (
GtkC⁄èöî
 *
c⁄èöî
,

200 
GtkWidgë
 *
chûd
,

201 c⁄° 
gch¨
 *
¥›îty_«me
,

202 
GVÆue
 *
vÆue
);

204 
	#GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID
(
obje˘
, 
¥›îty_id
, 
p•ec
) \

205 
	`G_OBJECT_WARN_INVALID_PSPEC
 ((
obje˘
), "chûdÖr›îty id", (
¥›îty_id
), (
p•ec
))

	)

208 
	`gtk_c⁄èöî_f‹Æl
 (
GtkC⁄èöî
 *
c⁄èöî
,

209 
GtkCÆlback
 
ˇŒback
,

210 
gpoöãr
 
ˇŒback_d©a
);

213 
	`_gtk_c⁄èöî_queue_ªsize
 (
GtkC⁄èöî
 *
c⁄èöî
);

214 
	`_gtk_c⁄èöî_˛ór_ªsize_widgës
 (
GtkC⁄èöî
 *
c⁄èöî
);

215 
gch¨
* 
	`_gtk_c⁄èöî_chûd_composôe_«me
 (
GtkC⁄èöî
 *
c⁄èöî
,

216 
GtkWidgë
 *
chûd
);

217 
	`_gtk_c⁄èöî_dequeue_ªsize_h™dÀr
 (
GtkC⁄èöî
 *
c⁄èöî
);

218 
GLi°
 *
	`_gtk_c⁄èöî_focus_s‹t
 (
GtkC⁄èöî
 *
c⁄èöî
,

219 
GLi°
 *
chûdªn
,

220 
GtkDúe˘i⁄Ty≥
 
dúe˘i⁄
,

221 
GtkWidgë
 *
ﬁd_focus
);

223 #i‚de‡
GTK_DISABLE_DEPRECATED


224 
	#gtk_c⁄èöî_b‹dî_width
 
gtk_c⁄èöî_£t_b‹dî_width


	)

227 
G_END_DECLS


	@/usr/include/gtk/gtkctree.h

31 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
__GTK_CLIST_C__
Ë|| deföed (
__GTK_CTREE_C__
)

33 #i‚de‡
__GTK_CTREE_H__


34 
	#__GTK_CTREE_H__


	)

36 
	~<gtk/gtk˛i°.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_CTREE
 (
	`gtk_˘ªe_gë_ty≥
 ())

	)

41 
	#GTK_CTREE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CTREE
, 
GtkCTªe
))

	)

42 
	#GTK_CTREE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CTREE
, 
GtkCTªeCœss
))

	)

43 
	#GTK_IS_CTREE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CTREE
))

	)

44 
	#GTK_IS_CTREE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CTREE
))

	)

45 
	#GTK_CTREE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CTREE
, 
GtkCTªeCœss
))

	)

47 
	#GTK_CTREE_ROW
(
_node_
Ë((
GtkCTªeRow
 *)(((
GLi°
 *)(_node_))->
d©a
))

	)

48 
	#GTK_CTREE_NODE
(
_node_
Ë((
GtkCTªeNode
 *)((_node_)))

	)

49 
	#GTK_CTREE_NODE_NEXT
(
_¬ode_
Ë((
GtkCTªeNode
 *)(((
GLi°
 *)(_¬ode_))->
√xt
))

	)

50 
	#GTK_CTREE_NODE_PREV
(
_≤ode_
Ë((
GtkCTªeNode
 *)(((
GLi°
 *)(_≤ode_))->
¥ev
))

	)

51 
	#GTK_CTREE_FUNC
(
_func_
Ë((
GtkCTªeFunc
)(_func_))

	)

53 
	#GTK_TYPE_CTREE_NODE
 (
	`gtk_˘ªe_node_gë_ty≥
 ())

	)

57 
	mGTK_CTREE_POS_BEFORE
,

58 
	mGTK_CTREE_POS_AS_CHILD
,

59 
	mGTK_CTREE_POS_AFTER


60 } 
	tGtkCTªePos
;

64 
	mGTK_CTREE_LINES_NONE
,

65 
	mGTK_CTREE_LINES_SOLID
,

66 
	mGTK_CTREE_LINES_DOTTED
,

67 
	mGTK_CTREE_LINES_TABBED


68 } 
	tGtkCTªeLöeStyÀ
;

72 
	mGTK_CTREE_EXPANDER_NONE
,

73 
	mGTK_CTREE_EXPANDER_SQUARE
,

74 
	mGTK_CTREE_EXPANDER_TRIANGLE
,

75 
	mGTK_CTREE_EXPANDER_CIRCULAR


76 } 
	tGtkCTªeEx∑ndîStyÀ
;

80 
	mGTK_CTREE_EXPANSION_EXPAND
,

81 
	mGTK_CTREE_EXPANSION_EXPAND_RECURSIVE
,

82 
	mGTK_CTREE_EXPANSION_COLLAPSE
,

83 
	mGTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE
,

84 
	mGTK_CTREE_EXPANSION_TOGGLE
,

85 
	mGTK_CTREE_EXPANSION_TOGGLE_RECURSIVE


86 } 
	tGtkCTªeEx∑nsi⁄Ty≥
;

88 
_GtkCTªe
 
	tGtkCTªe
;

89 
_GtkCTªeCœss
 
	tGtkCTªeCœss
;

90 
_GtkCTªeRow
 
	tGtkCTªeRow
;

91 
_GtkCTªeNode
 
	tGtkCTªeNode
;

93 (*
	tGtkCTªeFunc
Ë(
	tGtkCTªe
 *
	t˘ªe
,

94 
	tGtkCTªeNode
 *
	tnode
,

95 
	tgpoöãr
 
	td©a
);

97 
	$gboﬁón
 (*
	tGtkCTªeGNodeFunc
Ë(
	tGtkCTªe
 *
	t˘ªe
,

98 
	tguöt
 
	tdïth
,

99 
	tGNode
 *
	tgnode
,

100 
	tGtkCTªeNode
 *
	t˙ode
,

101 
	tgpoöãr
 
	td©a
);

103 
	$gboﬁón
 (*
	tGtkCTªeCom∑ªDøgFunc
Ë(
	tGtkCTªe
 *
	t˘ªe
,

104 
	tGtkCTªeNode
 *
	tsour˚_node
,

105 
	tGtkCTªeNode
 *
	t√w_∑ª¡
,

106 
	tGtkCTªeNode
 *
	t√w_siblög
);

108 
	s_GtkCTªe


110 
GtkCLi°
 
˛i°
;

112 
GdkGC
 *
löes_gc
;

114 
göt
 
åì_ödít
;

115 
göt
 
åì_•acög
;

116 
göt
 
åì_cﬁumn
;

118 
guöt
 
löe_°yÀ
 : 2;

119 
guöt
 
ex∑ndî_°yÀ
 : 2;

120 
guöt
 
show_°ub
 : 1;

122 
GtkCTªeCom∑ªDøgFunc
 
døg_com∑ª
;

125 
	s_GtkCTªeCœss


127 
GtkCLi°Cœss
 
∑ª¡_˛ass
;

129 (*
åì_£À˘_row
Ë(
GtkCTªe
 *
˘ªe
,

130 
GtkCTªeNode
 *
row
,

131 
göt
 
cﬁumn
);

132 (*
åì_un£À˘_row
Ë(
GtkCTªe
 *
˘ªe
,

133 
GtkCTªeNode
 *
row
,

134 
göt
 
cﬁumn
);

135 (*
åì_ex∑nd
Ë(
GtkCTªe
 *
˘ªe
,

136 
GtkCTªeNode
 *
node
);

137 (*
åì_cﬁœp£
Ë(
GtkCTªe
 *
˘ªe
,

138 
GtkCTªeNode
 *
node
);

139 (*
åì_move
Ë(
GtkCTªe
 *
˘ªe
,

140 
GtkCTªeNode
 *
node
,

141 
GtkCTªeNode
 *
√w_∑ª¡
,

142 
GtkCTªeNode
 *
√w_siblög
);

143 (*
ch™ge_focus_row_ex∑nsi⁄
Ë(
GtkCTªe
 *
˘ªe
,

144 
GtkCTªeEx∑nsi⁄Ty≥
 
a˘i⁄
);

147 
	s_GtkCTªeRow


149 
GtkCLi°Row
 
row
;

151 
GtkCTªeNode
 *
∑ª¡
;

152 
GtkCTªeNode
 *
siblög
;

153 
GtkCTªeNode
 *
chûdªn
;

155 
GdkPixm≠
 *
pixm≠_˛o£d
;

156 
GdkBôm≠
 *
mask_˛o£d
;

157 
GdkPixm≠
 *
pixm≠_›íed
;

158 
GdkBôm≠
 *
mask_›íed
;

160 
guöt16
 
Àvñ
;

162 
guöt
 
is_Àaf
 : 1;

163 
guöt
 
ex∑nded
 : 1;

166 
	s_GtkCTªeNode
 {

167 
GLi°
 
li°
;

175 
GTy≥
 
	$gtk_˘ªe_gë_ty≥
 (Ë
G_GNUC_CONST
;

176 
GtkWidgë
 * 
	`gtk_˘ªe_√w_wôh_tôÀs
 (
göt
 
cﬁumns
,

177 
göt
 
åì_cﬁumn
,

178 
gch¨
 *
tôÀs
[]);

179 
GtkWidgë
 * 
	`gtk_˘ªe_√w
 (
göt
 
cﬁumns
,

180 
göt
 
åì_cﬁumn
);

181 
GtkCTªeNode
 * 
	`gtk_˘ªe_ö£π_node
 (
GtkCTªe
 *
˘ªe
,

182 
GtkCTªeNode
 *
∑ª¡
,

183 
GtkCTªeNode
 *
siblög
,

184 
gch¨
 *
ãxt
[],

185 
guöt8
 
•acög
,

186 
GdkPixm≠
 *
pixm≠_˛o£d
,

187 
GdkBôm≠
 *
mask_˛o£d
,

188 
GdkPixm≠
 *
pixm≠_›íed
,

189 
GdkBôm≠
 *
mask_›íed
,

190 
gboﬁón
 
is_Àaf
,

191 
gboﬁón
 
ex∑nded
);

192 
	`gtk_˘ªe_ªmove_node
 (
GtkCTªe
 *
˘ªe
,

193 
GtkCTªeNode
 *
node
);

194 
GtkCTªeNode
 * 
	`gtk_˘ªe_ö£π_gnode
 (
GtkCTªe
 *
˘ªe
,

195 
GtkCTªeNode
 *
∑ª¡
,

196 
GtkCTªeNode
 *
siblög
,

197 
GNode
 *
gnode
,

198 
GtkCTªeGNodeFunc
 
func
,

199 
gpoöãr
 
d©a
);

200 
GNode
 * 
	`gtk_˘ªe_exp‹t_to_gnode
 (
GtkCTªe
 *
˘ªe
,

201 
GNode
 *
∑ª¡
,

202 
GNode
 *
siblög
,

203 
GtkCTªeNode
 *
node
,

204 
GtkCTªeGNodeFunc
 
func
,

205 
gpoöãr
 
d©a
);

212 
	`gtk_˘ªe_po°_ªcursive
 (
GtkCTªe
 *
˘ªe
,

213 
GtkCTªeNode
 *
node
,

214 
GtkCTªeFunc
 
func
,

215 
gpoöãr
 
d©a
);

216 
	`gtk_˘ªe_po°_ªcursive_to_dïth
 (
GtkCTªe
 *
˘ªe
,

217 
GtkCTªeNode
 *
node
,

218 
göt
 
dïth
,

219 
GtkCTªeFunc
 
func
,

220 
gpoöãr
 
d©a
);

221 
	`gtk_˘ªe_¥e_ªcursive
 (
GtkCTªe
 *
˘ªe
,

222 
GtkCTªeNode
 *
node
,

223 
GtkCTªeFunc
 
func
,

224 
gpoöãr
 
d©a
);

225 
	`gtk_˘ªe_¥e_ªcursive_to_dïth
 (
GtkCTªe
 *
˘ªe
,

226 
GtkCTªeNode
 *
node
,

227 
göt
 
dïth
,

228 
GtkCTªeFunc
 
func
,

229 
gpoöãr
 
d©a
);

230 
gboﬁón
 
	`gtk_˘ªe_is_võwabÀ
 (
GtkCTªe
 *
˘ªe
,

231 
GtkCTªeNode
 *
node
);

232 
GtkCTªeNode
 * 
	`gtk_˘ªe_œ°
 (
GtkCTªe
 *
˘ªe
,

233 
GtkCTªeNode
 *
node
);

234 
GtkCTªeNode
 * 
	`gtk_˘ªe_föd_node_±r
 (
GtkCTªe
 *
˘ªe
,

235 
GtkCTªeRow
 *
˘ªe_row
);

236 
GtkCTªeNode
 * 
	`gtk_˘ªe_node_¡h
 (
GtkCTªe
 *
˘ªe
,

237 
guöt
 
row
);

238 
gboﬁón
 
	`gtk_˘ªe_föd
 (
GtkCTªe
 *
˘ªe
,

239 
GtkCTªeNode
 *
node
,

240 
GtkCTªeNode
 *
chûd
);

241 
gboﬁón
 
	`gtk_˘ªe_is_™˚°‹
 (
GtkCTªe
 *
˘ªe
,

242 
GtkCTªeNode
 *
node
,

243 
GtkCTªeNode
 *
chûd
);

244 
GtkCTªeNode
 * 
	`gtk_˘ªe_föd_by_row_d©a
 (
GtkCTªe
 *
˘ªe
,

245 
GtkCTªeNode
 *
node
,

246 
gpoöãr
 
d©a
);

248 
GLi°
 * 
	`gtk_˘ªe_föd_Æl_by_row_d©a
 (
GtkCTªe
 *
˘ªe
,

249 
GtkCTªeNode
 *
node
,

250 
gpoöãr
 
d©a
);

251 
GtkCTªeNode
 * 
	`gtk_˘ªe_föd_by_row_d©a_cu°om
 (
GtkCTªe
 *
˘ªe
,

252 
GtkCTªeNode
 *
node
,

253 
gpoöãr
 
d©a
,

254 
GCom∑ªFunc
 
func
);

256 
GLi°
 * 
	`gtk_˘ªe_föd_Æl_by_row_d©a_cu°om
 (
GtkCTªe
 *
˘ªe
,

257 
GtkCTªeNode
 *
node
,

258 
gpoöãr
 
d©a
,

259 
GCom∑ªFunc
 
func
);

260 
gboﬁón
 
	`gtk_˘ªe_is_hŸ_•Ÿ
 (
GtkCTªe
 *
˘ªe
,

261 
göt
 
x
,

262 
göt
 
y
);

268 
	`gtk_˘ªe_move
 (
GtkCTªe
 *
˘ªe
,

269 
GtkCTªeNode
 *
node
,

270 
GtkCTªeNode
 *
√w_∑ª¡
,

271 
GtkCTªeNode
 *
√w_siblög
);

272 
	`gtk_˘ªe_ex∑nd
 (
GtkCTªe
 *
˘ªe
,

273 
GtkCTªeNode
 *
node
);

274 
	`gtk_˘ªe_ex∑nd_ªcursive
 (
GtkCTªe
 *
˘ªe
,

275 
GtkCTªeNode
 *
node
);

276 
	`gtk_˘ªe_ex∑nd_to_dïth
 (
GtkCTªe
 *
˘ªe
,

277 
GtkCTªeNode
 *
node
,

278 
göt
 
dïth
);

279 
	`gtk_˘ªe_cﬁœp£
 (
GtkCTªe
 *
˘ªe
,

280 
GtkCTªeNode
 *
node
);

281 
	`gtk_˘ªe_cﬁœp£_ªcursive
 (
GtkCTªe
 *
˘ªe
,

282 
GtkCTªeNode
 *
node
);

283 
	`gtk_˘ªe_cﬁœp£_to_dïth
 (
GtkCTªe
 *
˘ªe
,

284 
GtkCTªeNode
 *
node
,

285 
göt
 
dïth
);

286 
	`gtk_˘ªe_toggÀ_ex∑nsi⁄
 (
GtkCTªe
 *
˘ªe
,

287 
GtkCTªeNode
 *
node
);

288 
	`gtk_˘ªe_toggÀ_ex∑nsi⁄_ªcursive
 (
GtkCTªe
 *
˘ªe
,

289 
GtkCTªeNode
 *
node
);

290 
	`gtk_˘ªe_£À˘
 (
GtkCTªe
 *
˘ªe
,

291 
GtkCTªeNode
 *
node
);

292 
	`gtk_˘ªe_£À˘_ªcursive
 (
GtkCTªe
 *
˘ªe
,

293 
GtkCTªeNode
 *
node
);

294 
	`gtk_˘ªe_un£À˘
 (
GtkCTªe
 *
˘ªe
,

295 
GtkCTªeNode
 *
node
);

296 
	`gtk_˘ªe_un£À˘_ªcursive
 (
GtkCTªe
 *
˘ªe
,

297 
GtkCTªeNode
 *
node
);

298 
	`gtk_˘ªe_ªÆ_£À˘_ªcursive
 (
GtkCTªe
 *
˘ªe
,

299 
GtkCTªeNode
 *
node
,

300 
göt
 
°©e
);

306 
	`gtk_˘ªe_node_£t_ãxt
 (
GtkCTªe
 *
˘ªe
,

307 
GtkCTªeNode
 *
node
,

308 
göt
 
cﬁumn
,

309 c⁄° 
gch¨
 *
ãxt
);

310 
	`gtk_˘ªe_node_£t_pixm≠
 (
GtkCTªe
 *
˘ªe
,

311 
GtkCTªeNode
 *
node
,

312 
göt
 
cﬁumn
,

313 
GdkPixm≠
 *
pixm≠
,

314 
GdkBôm≠
 *
mask
);

315 
	`gtk_˘ªe_node_£t_pixãxt
 (
GtkCTªe
 *
˘ªe
,

316 
GtkCTªeNode
 *
node
,

317 
göt
 
cﬁumn
,

318 c⁄° 
gch¨
 *
ãxt
,

319 
guöt8
 
•acög
,

320 
GdkPixm≠
 *
pixm≠
,

321 
GdkBôm≠
 *
mask
);

322 
	`gtk_˘ªe_£t_node_öfo
 (
GtkCTªe
 *
˘ªe
,

323 
GtkCTªeNode
 *
node
,

324 c⁄° 
gch¨
 *
ãxt
,

325 
guöt8
 
•acög
,

326 
GdkPixm≠
 *
pixm≠_˛o£d
,

327 
GdkBôm≠
 *
mask_˛o£d
,

328 
GdkPixm≠
 *
pixm≠_›íed
,

329 
GdkBôm≠
 *
mask_›íed
,

330 
gboﬁón
 
is_Àaf
,

331 
gboﬁón
 
ex∑nded
);

332 
	`gtk_˘ªe_node_£t_shi·
 (
GtkCTªe
 *
˘ªe
,

333 
GtkCTªeNode
 *
node
,

334 
göt
 
cﬁumn
,

335 
göt
 
vîtiˇl
,

336 
göt
 
h‹iz⁄èl
);

337 
	`gtk_˘ªe_node_£t_£À˘abÀ
 (
GtkCTªe
 *
˘ªe
,

338 
GtkCTªeNode
 *
node
,

339 
gboﬁón
 
£À˘abÀ
);

340 
gboﬁón
 
	`gtk_˘ªe_node_gë_£À˘abÀ
 (
GtkCTªe
 *
˘ªe
,

341 
GtkCTªeNode
 *
node
);

342 
GtkCñlTy≥
 
	`gtk_˘ªe_node_gë_˚Œ_ty≥
 (
GtkCTªe
 *
˘ªe
,

343 
GtkCTªeNode
 *
node
,

344 
göt
 
cﬁumn
);

345 
gboﬁón
 
	`gtk_˘ªe_node_gë_ãxt
 (
GtkCTªe
 *
˘ªe
,

346 
GtkCTªeNode
 *
node
,

347 
göt
 
cﬁumn
,

348 
gch¨
 **
ãxt
);

349 
gboﬁón
 
	`gtk_˘ªe_node_gë_pixm≠
 (
GtkCTªe
 *
˘ªe
,

350 
GtkCTªeNode
 *
node
,

351 
göt
 
cﬁumn
,

352 
GdkPixm≠
 **
pixm≠
,

353 
GdkBôm≠
 **
mask
);

354 
gboﬁón
 
	`gtk_˘ªe_node_gë_pixãxt
 (
GtkCTªe
 *
˘ªe
,

355 
GtkCTªeNode
 *
node
,

356 
göt
 
cﬁumn
,

357 
gch¨
 **
ãxt
,

358 
guöt8
 *
•acög
,

359 
GdkPixm≠
 **
pixm≠
,

360 
GdkBôm≠
 **
mask
);

361 
gboﬁón
 
	`gtk_˘ªe_gë_node_öfo
 (
GtkCTªe
 *
˘ªe
,

362 
GtkCTªeNode
 *
node
,

363 
gch¨
 **
ãxt
,

364 
guöt8
 *
•acög
,

365 
GdkPixm≠
 **
pixm≠_˛o£d
,

366 
GdkBôm≠
 **
mask_˛o£d
,

367 
GdkPixm≠
 **
pixm≠_›íed
,

368 
GdkBôm≠
 **
mask_›íed
,

369 
gboﬁón
 *
is_Àaf
,

370 
gboﬁón
 *
ex∑nded
);

371 
	`gtk_˘ªe_node_£t_row_°yÀ
 (
GtkCTªe
 *
˘ªe
,

372 
GtkCTªeNode
 *
node
,

373 
GtkStyÀ
 *
°yÀ
);

374 
GtkStyÀ
 * 
	`gtk_˘ªe_node_gë_row_°yÀ
 (
GtkCTªe
 *
˘ªe
,

375 
GtkCTªeNode
 *
node
);

376 
	`gtk_˘ªe_node_£t_˚Œ_°yÀ
 (
GtkCTªe
 *
˘ªe
,

377 
GtkCTªeNode
 *
node
,

378 
göt
 
cﬁumn
,

379 
GtkStyÀ
 *
°yÀ
);

380 
GtkStyÀ
 * 
	`gtk_˘ªe_node_gë_˚Œ_°yÀ
 (
GtkCTªe
 *
˘ªe
,

381 
GtkCTªeNode
 *
node
,

382 
göt
 
cﬁumn
);

383 
	`gtk_˘ªe_node_£t_f‹eground
 (
GtkCTªe
 *
˘ªe
,

384 
GtkCTªeNode
 *
node
,

385 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

386 
	`gtk_˘ªe_node_£t_background
 (
GtkCTªe
 *
˘ªe
,

387 
GtkCTªeNode
 *
node
,

388 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

389 
	`gtk_˘ªe_node_£t_row_d©a
 (
GtkCTªe
 *
˘ªe
,

390 
GtkCTªeNode
 *
node
,

391 
gpoöãr
 
d©a
);

392 
	`gtk_˘ªe_node_£t_row_d©a_fuŒ
 (
GtkCTªe
 *
˘ªe
,

393 
GtkCTªeNode
 *
node
,

394 
gpoöãr
 
d©a
,

395 
GDe°royNŸify
 
de°roy
);

396 
gpoöãr
 
	`gtk_˘ªe_node_gë_row_d©a
 (
GtkCTªe
 *
˘ªe
,

397 
GtkCTªeNode
 *
node
);

398 
	`gtk_˘ªe_node_movëo
 (
GtkCTªe
 *
˘ªe
,

399 
GtkCTªeNode
 *
node
,

400 
göt
 
cﬁumn
,

401 
gÊﬂt
 
row_Æign
,

402 
gÊﬂt
 
cﬁ_Æign
);

403 
GtkVisibûôy
 
	`gtk_˘ªe_node_is_visibÀ
 (
GtkCTªe
 *
˘ªe
,

404 
GtkCTªeNode
 *
node
);

410 
	`gtk_˘ªe_£t_ödít
 (
GtkCTªe
 *
˘ªe
,

411 
göt
 
ödít
);

412 
	`gtk_˘ªe_£t_•acög
 (
GtkCTªe
 *
˘ªe
,

413 
göt
 
•acög
);

414 
	`gtk_˘ªe_£t_show_°ub
 (
GtkCTªe
 *
˘ªe
,

415 
gboﬁón
 
show_°ub
);

416 
	`gtk_˘ªe_£t_löe_°yÀ
 (
GtkCTªe
 *
˘ªe
,

417 
GtkCTªeLöeStyÀ
 
löe_°yÀ
);

418 
	`gtk_˘ªe_£t_ex∑ndî_°yÀ
 (
GtkCTªe
 *
˘ªe
,

419 
GtkCTªeEx∑ndîStyÀ
 
ex∑ndî_°yÀ
);

420 
	`gtk_˘ªe_£t_døg_com∑ª_func
 (
GtkCTªe
 *
˘ªe
,

421 
GtkCTªeCom∑ªDøgFunc
 
cmp_func
);

427 
	`gtk_˘ªe_s‹t_node
 (
GtkCTªe
 *
˘ªe
,

428 
GtkCTªeNode
 *
node
);

429 
	`gtk_˘ªe_s‹t_ªcursive
 (
GtkCTªe
 *
˘ªe
,

430 
GtkCTªeNode
 *
node
);

433 
	#gtk_˘ªe_£t_ª‹dîabÀ
(
t
,
r
Ë
	`gtk_˛i°_£t_ª‹dîabÀ
((
GtkCLi°
*Ë—),‘))

	)

439 
GTy≥
 
	$gtk_˘ªe_node_gë_ty≥
 (Ë
G_GNUC_CONST
;

441 
G_END_DECLS


	@/usr/include/gtk/gtkcurve.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_CURVE_H__


30 
	#__GTK_CURVE_H__


	)

33 
	~<gtk/gtkdøwög¨ó.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_CURVE
 (
	`gtk_curve_gë_ty≥
 ())

	)

39 
	#GTK_CURVE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_CURVE
, 
GtkCurve
))

	)

40 
	#GTK_CURVE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_CURVE
, 
GtkCurveCœss
))

	)

41 
	#GTK_IS_CURVE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_CURVE
))

	)

42 
	#GTK_IS_CURVE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_CURVE
))

	)

43 
	#GTK_CURVE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_CURVE
, 
GtkCurveCœss
))

	)

46 
_GtkCurve
 
	tGtkCurve
;

47 
_GtkCurveCœss
 
	tGtkCurveCœss
;

50 
	s_GtkCurve


52 
GtkDøwögAªa
 
	mgøph
;

54 
göt
 
	mcurs‹_ty≥
;

55 
gÊﬂt
 
	mmö_x
;

56 
gÊﬂt
 
	mmax_x
;

57 
gÊﬂt
 
	mmö_y
;

58 
gÊﬂt
 
	mmax_y
;

59 
GdkPixm≠
 *
	mpixm≠
;

60 
GtkCurveTy≥
 
	mcurve_ty≥
;

61 
göt
 
	mheight
;

62 
göt
 
	mgøb_poöt
;

63 
göt
 
	mœ°
;

66 
göt
 
	mnum_poöts
;

67 
GdkPoöt
 *
	mpoöt
;

70 
göt
 
	mnum_˘Õoöts
;

71 
gÊﬂt
 (*
˘Õoöt
)[2];

74 
	s_GtkCurveCœss


76 
GtkDøwögAªaCœss
 
	m∑ª¡_˛ass
;

78 (* 
	mcurve_ty≥_ch™ged
Ë(
GtkCurve
 *
	mcurve
);

81 (*
	m_gtk_ª£rved1
) ();

82 (*
	m_gtk_ª£rved2
) ();

83 (*
	m_gtk_ª£rved3
) ();

84 (*
	m_gtk_ª£rved4
) ();

88 
GTy≥
 
	$gtk_curve_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
GtkWidgë
* 
	`gtk_curve_√w
 ();

90 
	`gtk_curve_ª£t
 (
GtkCurve
 *
curve
);

91 
	`gtk_curve_£t_gamma
 (
GtkCurve
 *
curve
, 
gÊﬂt
 
gamma_
);

92 
	`gtk_curve_£t_ønge
 (
GtkCurve
 *
curve
,

93 
gÊﬂt
 
mö_x
, gÊﬂà
max_x
,

94 
gÊﬂt
 
mö_y
, gÊﬂà
max_y
);

95 
	`gtk_curve_gë_ve˘‹
 (
GtkCurve
 *
curve
,

96 
ve˛í
, 
gÊﬂt
 
ve˘‹
[]);

97 
	`gtk_curve_£t_ve˘‹
 (
GtkCurve
 *
curve
,

98 
ve˛í
, 
gÊﬂt
 
ve˘‹
[]);

99 
	`gtk_curve_£t_curve_ty≥
 (
GtkCurve
 *
curve
, 
GtkCurveTy≥
 
ty≥
);

102 
G_END_DECLS


	@/usr/include/gtk/gtkdebug.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_DEBUG_H__


32 
	#__GTK_DEBUG_H__


	)

34 
	~<glib.h
>

36 
G_BEGIN_DECLS


39 
	mGTK_DEBUG_MISC
 = 1 << 0,

40 
	mGTK_DEBUG_PLUGSOCKET
 = 1 << 1,

41 
	mGTK_DEBUG_TEXT
 = 1 << 2,

42 
	mGTK_DEBUG_TREE
 = 1 << 3,

43 
	mGTK_DEBUG_UPDATES
 = 1 << 4,

44 
	mGTK_DEBUG_KEYBINDINGS
 = 1 << 5,

45 
	mGTK_DEBUG_MULTIHEAD
 = 1 << 6,

46 
	mGTK_DEBUG_MODULES
 = 1 << 7,

47 
	mGTK_DEBUG_GEOMETRY
 = 1 << 8,

48 
	mGTK_DEBUG_ICONTHEME
 = 1 << 9,

49 
	mGTK_DEBUG_PRINTING
 = 1 << 10,

50 
	mGTK_DEBUG_BUILDER
 = 1 << 11

51 } 
	tGtkDebugFœg
;

53 #ifde‡
G_ENABLE_DEBUG


55 
	#GTK_NOTE
(
ty≥
,
a˘i⁄
Ë
G_STMT_START
 { \

56 i‡(
gtk_debug_Êags
 & 
GTK_DEBUG_
##
ty≥
) \

57 { 
a˘i⁄
; }; } 
G_STMT_END


	)

61 
	#GTK_NOTE
(
ty≥
, 
a˘i⁄
)

	)

65 #ifde‡
G_OS_WIN32


66 #ifde‡
GTK_COMPILATION


67 
	#GTKVAR
 
	`__de˛•ec
(
dŒexp‹t
)

	)

69 
	#GTKVAR
 
	`__de˛•ec
(
dŒimp‹t
)

	)

72 
	#GTKVAR
 

	)

75 
GTKVAR
 
guöt
 
gtk_debug_Êags
;

77 
	gG_END_DECLS


	@/usr/include/gtk/gtkdialog.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_DIALOG_H__


32 
	#__GTK_DIALOG_H__


	)

35 
	~<gtk/gtkwödow.h
>

38 
G_BEGIN_DECLS


43 
	mGTK_DIALOG_MODAL
 = 1 << 0,

44 
	mGTK_DIALOG_DESTROY_WITH_PARENT
 = 1 << 1,

45 
	mGTK_DIALOG_NO_SEPARATOR
 = 1 << 2

46 } 
	tGtkDülogFœgs
;

61 
	mGTK_RESPONSE_NONE
 = -1,

67 
	mGTK_RESPONSE_REJECT
 = -2,

68 
	mGTK_RESPONSE_ACCEPT
 = -3,

71 
	mGTK_RESPONSE_DELETE_EVENT
 = -4,

76 
	mGTK_RESPONSE_OK
 = -5,

77 
	mGTK_RESPONSE_CANCEL
 = -6,

78 
	mGTK_RESPONSE_CLOSE
 = -7,

79 
	mGTK_RESPONSE_YES
 = -8,

80 
	mGTK_RESPONSE_NO
 = -9,

81 
	mGTK_RESPONSE_APPLY
 = -10,

82 
	mGTK_RESPONSE_HELP
 = -11

83 } 
	tGtkRe•⁄£Ty≥
;

86 
	#GTK_TYPE_DIALOG
 (
	`gtk_dülog_gë_ty≥
 ())

	)

87 
	#GTK_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_DIALOG
, 
GtkDülog
))

	)

88 
	#GTK_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_DIALOG
, 
GtkDülogCœss
))

	)

89 
	#GTK_IS_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_DIALOG
))

	)

90 
	#GTK_IS_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_DIALOG
))

	)

91 
	#GTK_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_DIALOG
, 
GtkDülogCœss
))

	)

94 
_GtkDülog
 
	tGtkDülog
;

95 
_GtkDülogCœss
 
	tGtkDülogCœss
;

97 
	s_GtkDülog


99 
GtkWödow
 
	mwödow
;

102 
GtkWidgë
 *
GSEAL
 (
vbox
);

103 
GtkWidgë
 *
GSEAL
 (
a˘i⁄_¨ó
);

106 
GtkWidgë
 *
GSEAL
 (
£∑øt‹
);

109 
	s_GtkDülogCœss


111 
GtkWödowCœss
 
	m∑ª¡_˛ass
;

113 (* 
	mª•⁄£
Ë(
GtkDülog
 *
	mdülog
, 
göt
 
	mª•⁄£_id
);

117 (* 
	m˛o£
Ë(
GtkDülog
 *
	mdülog
);

120 (*
	m_gtk_ª£rved1
) ();

121 (*
	m_gtk_ª£rved2
) ();

122 (*
	m_gtk_ª£rved3
) ();

123 (*
	m_gtk_ª£rved4
) ();

127 
GTy≥
 
	$gtk_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

128 
GtkWidgë
* 
	`gtk_dülog_√w
 ();

130 
GtkWidgë
* 
	`gtk_dülog_√w_wôh_buâ⁄s
 (c⁄° 
gch¨
 *
tôÀ
,

131 
GtkWödow
 *
∑ª¡
,

132 
GtkDülogFœgs
 
Êags
,

133 c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

136 
	`gtk_dülog_add_a˘i⁄_widgë
 (
GtkDülog
 *
dülog
,

137 
GtkWidgë
 *
chûd
,

138 
göt
 
ª•⁄£_id
);

139 
GtkWidgë
* 
	`gtk_dülog_add_buâ⁄
 (
GtkDülog
 *
dülog
,

140 c⁄° 
gch¨
 *
buâ⁄_ãxt
,

141 
göt
 
ª•⁄£_id
);

142 
	$gtk_dülog_add_buâ⁄s
 (
GtkDülog
 *
dülog
,

143 c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

144 ...Ë
G_GNUC_NULL_TERMINATED
;

146 
	`gtk_dülog_£t_ª•⁄£_£nsôive
 (
GtkDülog
 *
dülog
,

147 
göt
 
ª•⁄£_id
,

148 
gboﬁón
 
£âög
);

149 
	`gtk_dülog_£t_deÁu…_ª•⁄£
 (
GtkDülog
 *
dülog
,

150 
göt
 
ª•⁄£_id
);

151 
GtkWidgë
* 
	`gtk_dülog_gë_widgë_f‹_ª•⁄£
 (
GtkDülog
 *
dülog
,

152 
göt
 
ª•⁄£_id
);

153 
göt
 
	`gtk_dülog_gë_ª•⁄£_f‹_widgë
 (
GtkDülog
 *
dülog
,

154 
GtkWidgë
 *
widgë
);

156 
	`gtk_dülog_£t_has_£∑øt‹
 (
GtkDülog
 *
dülog
,

157 
gboﬁón
 
£âög
);

158 
gboﬁón
 
	`gtk_dülog_gë_has_£∑øt‹
 (
GtkDülog
 *
dülog
);

160 
gboﬁón
 
	`gtk_Æã∫©ive_dülog_buâ⁄_‹dî
 (
GdkS¸ìn
 *
s¸ìn
);

161 
	`gtk_dülog_£t_Æã∫©ive_buâ⁄_‹dî
 (
GtkDülog
 *
dülog
,

162 
göt
 
fú°_ª•⁄£_id
,

164 
	`gtk_dülog_£t_Æã∫©ive_buâ⁄_‹dî_‰om_¨øy
 (
GtkDülog
 *
dülog
,

165 
göt
 
n_∑øms
,

166 
göt
 *
√w_‹dî
);

169 
	`gtk_dülog_ª•⁄£
 (
GtkDülog
 *
dülog
,

170 
göt
 
ª•⁄£_id
);

173 
göt
 
	`gtk_dülog_run
 (
GtkDülog
 *
dülog
);

175 
GtkWidgë
 * 
	`gtk_dülog_gë_a˘i⁄_¨ó
 (
GtkDülog
 *
dülog
);

176 
GtkWidgë
 * 
	`gtk_dülog_gë_c⁄ã¡_¨ó
 (
GtkDülog
 *
dülog
);

179 
	`_gtk_dülog_£t_ign‹e_£∑øt‹
 (
GtkDülog
 *
dülog
,

180 
gboﬁón
 
ign‹e_£∑øt‹
);

182 
G_END_DECLS


	@/usr/include/gtk/gtkdnd.h

28 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

32 #i‚de‡
__GTK_DND_H__


33 
	#__GTK_DND_H__


	)

36 
	~<gtk/gtkwidgë.h
>

37 
	~<gtk/gtk£À˘i⁄.h
>

40 
G_BEGIN_DECLS


43 
	mGTK_DEST_DEFAULT_MOTION
 = 1 << 0,

44 
	mGTK_DEST_DEFAULT_HIGHLIGHT
 = 1 << 1,

45 
	mGTK_DEST_DEFAULT_DROP
 = 1 << 2,

46 
	mGTK_DEST_DEFAULT_ALL
 = 0x07

47 } 
	tGtkDe°DeÁu…s
;

52 
	mGTK_TARGET_SAME_APP
 = 1 << 0,

53 
	mGTK_TARGET_SAME_WIDGET
 = 1 << 1,

54 
	mGTK_TARGET_OTHER_APP
 = 1 << 2,

55 
	mGTK_TARGET_OTHER_WIDGET
 = 1 << 3

56 } 
	tGtkT¨gëFœgs
;

60 
gtk_døg_gë_d©a
 (
GtkWidgë
 *
widgë
,

61 
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

62 
GdkAtom
 
èrgë
,

63 
guöt32
 
time_
);

64 
gtk_døg_föish
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

65 
gboﬁón
 
suc˚ss
,

66 
gboﬁón
 
dñ
,

67 
guöt32
 
time_
);

69 
GtkWidgë
 *
gtk_døg_gë_sour˚_widgë
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
);

71 
gtk_døg_highlight
 (
GtkWidgë
 *
widgë
);

72 
gtk_døg_unhighlight
 (
GtkWidgë
 *
widgë
);

74 
gtk_døg_de°_£t
 (
GtkWidgë
 *
widgë
,

75 
GtkDe°DeÁu…s
 
Êags
,

76 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

77 
göt
 
n_èrgës
,

78 
GdkDøgA˘i⁄
 
a˘i⁄s
);

80 
gtk_døg_de°_£t_¥oxy
 (
GtkWidgë
 *
widgë
,

81 
GdkWödow
 *
¥oxy_wödow
,

82 
GdkDøgPrŸocﬁ
 
¥Ÿocﬁ
,

83 
gboﬁón
 
u£_co‹dö©es
);

85 
gtk_døg_de°_un£t
 (
GtkWidgë
 *
widgë
);

87 
GdkAtom
 
gtk_døg_de°_föd_èrgë
 (
GtkWidgë
 *
widgë
,

88 
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

89 
GtkT¨gëLi°
 *
èrgë_li°
);

90 
GtkT¨gëLi°
* 
gtk_døg_de°_gë_èrgë_li°
 (
GtkWidgë
 *
widgë
);

91 
gtk_døg_de°_£t_èrgë_li°
 (
GtkWidgë
 *
widgë
,

92 
GtkT¨gëLi°
 *
èrgë_li°
);

93 
gtk_døg_de°_add_ãxt_èrgës
 (
GtkWidgë
 *
widgë
);

94 
gtk_døg_de°_add_image_èrgës
 (
GtkWidgë
 *
widgë
);

95 
gtk_døg_de°_add_uri_èrgës
 (
GtkWidgë
 *
widgë
);

97 
gtk_døg_de°_£t_åack_mŸi⁄
 (
GtkWidgë
 *
widgë
,

98 
gboﬁón
 
åack_mŸi⁄
);

99 
gboﬁón
 
gtk_døg_de°_gë_åack_mŸi⁄
 (
GtkWidgë
 *
widgë
);

103 
gtk_døg_sour˚_£t
 (
GtkWidgë
 *
widgë
,

104 
GdkModifõrTy≥
 
°¨t_buâ⁄_mask
,

105 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

106 
göt
 
n_èrgës
,

107 
GdkDøgA˘i⁄
 
a˘i⁄s
);

109 
gtk_døg_sour˚_un£t
 (
GtkWidgë
 *
widgë
);

111 
GtkT¨gëLi°
* 
gtk_døg_sour˚_gë_èrgë_li°
 (
GtkWidgë
 *
widgë
);

112 
gtk_døg_sour˚_£t_èrgë_li°
 (
GtkWidgë
 *
widgë
,

113 
GtkT¨gëLi°
 *
èrgë_li°
);

114 
gtk_døg_sour˚_add_ãxt_èrgës
 (
GtkWidgë
 *
widgë
);

115 
gtk_døg_sour˚_add_image_èrgës
 (
GtkWidgë
 *
widgë
);

116 
gtk_døg_sour˚_add_uri_èrgës
 (
GtkWidgë
 *
widgë
);

118 
gtk_døg_sour˚_£t_ic⁄
 (
GtkWidgë
 *
widgë
,

119 
GdkCﬁ‹m≠
 *
cﬁ‹m≠
,

120 
GdkPixm≠
 *
pixm≠
,

121 
GdkBôm≠
 *
mask
);

122 
gtk_døg_sour˚_£t_ic⁄_pixbuf
 (
GtkWidgë
 *
widgë
,

123 
GdkPixbuf
 *
pixbuf
);

124 
gtk_døg_sour˚_£t_ic⁄_°ock
 (
GtkWidgë
 *
widgë
,

125 c⁄° 
gch¨
 *
°ock_id
);

126 
gtk_døg_sour˚_£t_ic⁄_«me
 (
GtkWidgë
 *
widgë
,

127 c⁄° 
gch¨
 *
ic⁄_«me
);

133 
GdkDøgC⁄ãxt
 *
gtk_døg_begö
 (
GtkWidgë
 *
widgë
,

134 
GtkT¨gëLi°
 *
èrgës
,

135 
GdkDøgA˘i⁄
 
a˘i⁄s
,

136 
göt
 
buâ⁄
,

137 
GdkEvít
 *
evít
);

141 
gtk_døg_£t_ic⁄_widgë
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

142 
GtkWidgë
 *
widgë
,

143 
göt
 
hŸ_x
,

144 
göt
 
hŸ_y
);

145 
gtk_døg_£t_ic⁄_pixm≠
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

146 
GdkCﬁ‹m≠
 *
cﬁ‹m≠
,

147 
GdkPixm≠
 *
pixm≠
,

148 
GdkBôm≠
 *
mask
,

149 
göt
 
hŸ_x
,

150 
göt
 
hŸ_y
);

151 
gtk_døg_£t_ic⁄_pixbuf
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

152 
GdkPixbuf
 *
pixbuf
,

153 
göt
 
hŸ_x
,

154 
göt
 
hŸ_y
);

155 
gtk_døg_£t_ic⁄_°ock
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

156 c⁄° 
gch¨
 *
°ock_id
,

157 
göt
 
hŸ_x
,

158 
göt
 
hŸ_y
);

159 
gtk_døg_£t_ic⁄_«me
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

160 c⁄° 
gch¨
 *
ic⁄_«me
,

161 
göt
 
hŸ_x
,

162 
göt
 
hŸ_y
);

164 
gtk_døg_£t_ic⁄_deÁu…
 (
GdkDøgC⁄ãxt
 *
c⁄ãxt
);

166 
gboﬁón
 
gtk_døg_check_thªshﬁd
 (
GtkWidgë
 *
widgë
,

167 
göt
 
°¨t_x
,

168 
göt
 
°¨t_y
,

169 
göt
 
cuºít_x
,

170 
göt
 
cuºít_y
);

173 
_gtk_døg_sour˚_h™dÀ_evít
 (
GtkWidgë
 *
widgë
,

174 
GdkEvít
 *
evít
);

175 
_gtk_døg_de°_h™dÀ_evít
 (
GtkWidgë
 *
t›Àvñ
,

176 
GdkEvít
 *
evít
);

178 #i‚de‡
GTK_DISABLE_DEPRECATED


179 
gtk_døg_£t_deÁu…_ic⁄
 (
GdkCﬁ‹m≠
 *
cﬁ‹m≠
,

180 
GdkPixm≠
 *
pixm≠
,

181 
GdkBôm≠
 *
mask
,

182 
göt
 
hŸ_x
,

183 
göt
 
hŸ_y
);

186 
	gG_END_DECLS


	@/usr/include/gtk/gtkdrawingarea.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_DRAWING_AREA_H__


32 
	#__GTK_DRAWING_AREA_H__


	)

35 
	~<gtk/gtkwidgë.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_DRAWING_AREA
 (
	`gtk_døwög_¨ó_gë_ty≥
 ())

	)

41 
	#GTK_DRAWING_AREA
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_DRAWING_AREA
, 
GtkDøwögAªa
))

	)

42 
	#GTK_DRAWING_AREA_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_DRAWING_AREA
, 
GtkDøwögAªaCœss
))

	)

43 
	#GTK_IS_DRAWING_AREA
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_DRAWING_AREA
))

	)

44 
	#GTK_IS_DRAWING_AREA_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_DRAWING_AREA
))

	)

45 
	#GTK_DRAWING_AREA_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_DRAWING_AREA
, 
GtkDøwögAªaCœss
))

	)

48 
_GtkDøwögAªa
 
	tGtkDøwögAªa
;

49 
_GtkDøwögAªaCœss
 
	tGtkDøwögAªaCœss
;

51 
	s_GtkDøwögAªa


53 
GtkWidgë
 
	mwidgë
;

55 
gpoöãr
 
GSEAL
 (
døw_d©a
);

58 
	s_GtkDøwögAªaCœss


60 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

63 (*
	m_gtk_ª£rved1
) ();

64 (*
	m_gtk_ª£rved2
) ();

65 (*
	m_gtk_ª£rved3
) ();

66 (*
	m_gtk_ª£rved4
) ();

70 
GTy≥
 
	$gtk_døwög_¨ó_gë_ty≥
 (Ë
G_GNUC_CONST
;

71 
GtkWidgë
* 
	`gtk_døwög_¨ó_√w
 ();

73 #i‚de‡
GTK_DISABLE_DEPRECATED


74 
	`gtk_døwög_¨ó_size
 (
GtkDøwögAªa
 *
d¨ó
,

75 
göt
 
width
,

76 
göt
 
height
);

80 
G_END_DECLS


	@/usr/include/gtk/gtkeditable.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_EDITABLE_H__


32 
	#__GTK_EDITABLE_H__


	)

35 
	~<gtk/gtkwidgë.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_EDITABLE
 (
	`gtk_edôabÀ_gë_ty≥
 ())

	)

41 
	#GTK_EDITABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_EDITABLE
, 
GtkEdôabÀ
))

	)

42 
	#GTK_EDITABLE_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((vèbÀ), 
GTK_TYPE_EDITABLE
, 
GtkEdôabÀCœss
))

	)

43 
	#GTK_IS_EDITABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_EDITABLE
))

	)

44 
	#GTK_IS_EDITABLE_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((vèbÀ), 
GTK_TYPE_EDITABLE
))

	)

45 
	#GTK_EDITABLE_GET_CLASS
(
ö°
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((ö°), 
GTK_TYPE_EDITABLE
, 
GtkEdôabÀCœss
))

	)

47 
_GtkEdôabÀ
 
	tGtkEdôabÀ
;

48 
_GtkEdôabÀCœss
 
	tGtkEdôabÀCœss
;

50 
	s_GtkEdôabÀCœss


52 
GTy≥I¡îÁ˚
 
	mba£_iÁ˚
;

55 (* 
	mö£π_ãxt
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

56 c⁄° 
gch¨
 *
	mãxt
,

57 
göt
 
	mÀngth
,

58 
göt
 *
	mposôi⁄
);

59 (* 
	mdñëe_ãxt
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

60 
göt
 
	m°¨t_pos
,

61 
göt
 
	míd_pos
);

62 (* 
	mch™ged
Ë(
GtkEdôabÀ
 *
	medôabÀ
);

65 (* 
	mdo_ö£π_ãxt
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

66 c⁄° 
gch¨
 *
	mãxt
,

67 
göt
 
	mÀngth
,

68 
göt
 *
	mposôi⁄
);

69 (* 
	mdo_dñëe_ãxt
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

70 
göt
 
	m°¨t_pos
,

71 
göt
 
	míd_pos
);

73 
	mgch¨
* (* 
	mgë_ch¨s
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

74 
göt
 
	m°¨t_pos
,

75 
göt
 
	míd_pos
);

76 (* 
	m£t_£À˘i⁄_bounds
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

77 
göt
 
	m°¨t_pos
,

78 
göt
 
	míd_pos
);

79 
gboﬁón
 (* 
gë_£À˘i⁄_bounds
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

80 
göt
 *
	m°¨t_pos
,

81 
göt
 *
	míd_pos
);

82 (* 
	m£t_posôi⁄
Ë(
GtkEdôabÀ
 *
	medôabÀ
,

83 
göt
 
	mposôi⁄
);

84 
göt
 (* 
gë_posôi⁄
Ë(
GtkEdôabÀ
 *
	medôabÀ
);

87 
GTy≥
 
	$gtk_edôabÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

88 
	`gtk_edôabÀ_£À˘_ªgi⁄
 (
GtkEdôabÀ
 *
edôabÀ
,

89 
göt
 
°¨t_pos
,

90 
göt
 
íd_pos
);

91 
gboﬁón
 
	`gtk_edôabÀ_gë_£À˘i⁄_bounds
 (
GtkEdôabÀ
 *
edôabÀ
,

92 
göt
 *
°¨t_pos
,

93 
göt
 *
íd_pos
);

94 
	`gtk_edôabÀ_ö£π_ãxt
 (
GtkEdôabÀ
 *
edôabÀ
,

95 c⁄° 
gch¨
 *
√w_ãxt
,

96 
göt
 
√w_ãxt_Àngth
,

97 
göt
 *
posôi⁄
);

98 
	`gtk_edôabÀ_dñëe_ãxt
 (
GtkEdôabÀ
 *
edôabÀ
,

99 
göt
 
°¨t_pos
,

100 
göt
 
íd_pos
);

101 
gch¨
* 
	`gtk_edôabÀ_gë_ch¨s
 (
GtkEdôabÀ
 *
edôabÀ
,

102 
göt
 
°¨t_pos
,

103 
göt
 
íd_pos
);

104 
	`gtk_edôabÀ_cut_˛ùbﬂrd
 (
GtkEdôabÀ
 *
edôabÀ
);

105 
	`gtk_edôabÀ_c›y_˛ùbﬂrd
 (
GtkEdôabÀ
 *
edôabÀ
);

106 
	`gtk_edôabÀ_∑°e_˛ùbﬂrd
 (
GtkEdôabÀ
 *
edôabÀ
);

107 
	`gtk_edôabÀ_dñëe_£À˘i⁄
 (
GtkEdôabÀ
 *
edôabÀ
);

108 
	`gtk_edôabÀ_£t_posôi⁄
 (
GtkEdôabÀ
 *
edôabÀ
,

109 
göt
 
posôi⁄
);

110 
göt
 
	`gtk_edôabÀ_gë_posôi⁄
 (
GtkEdôabÀ
 *
edôabÀ
);

111 
	`gtk_edôabÀ_£t_edôabÀ
 (
GtkEdôabÀ
 *
edôabÀ
,

112 
gboﬁón
 
is_edôabÀ
);

113 
gboﬁón
 
	`gtk_edôabÀ_gë_edôabÀ
 (
GtkEdôabÀ
 *
edôabÀ
);

115 
G_END_DECLS


	@/usr/include/gtk/gtkentry.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_ENTRY_H__


36 
	#__GTK_ENTRY_H__


	)

39 
	~<gtk/gtkedôabÀ.h
>

40 
	~<gtk/gtkimc⁄ãxt.h
>

41 
	~<gtk/gtkmíu.h
>

42 
	~<gtk/gtkíåybuf„r.h
>

43 
	~<gtk/gtkíåycom∂ëi⁄.h
>

44 
	~<gtk/gtkimage.h
>

45 
	~<gtk/gtk£À˘i⁄.h
>

48 
	gG_BEGIN_DECLS


50 
	#GTK_TYPE_ENTRY
 (
	`gtk_íåy_gë_ty≥
 ())

	)

51 
	#GTK_ENTRY
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ENTRY
, 
GtkE¡ry
))

	)

52 
	#GTK_ENTRY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ENTRY
, 
GtkE¡ryCœss
))

	)

53 
	#GTK_IS_ENTRY
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ENTRY
))

	)

54 
	#GTK_IS_ENTRY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ENTRY
))

	)

55 
	#GTK_ENTRY_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ENTRY
, 
GtkE¡ryCœss
))

	)

59 
	mGTK_ENTRY_ICON_PRIMARY
,

60 
	mGTK_ENTRY_ICON_SECONDARY


61 } 
	tGtkE¡ryIc⁄Posôi⁄
;

63 
_GtkE¡ry
 
	tGtkE¡ry
;

64 
_GtkE¡ryCœss
 
	tGtkE¡ryCœss
;

66 
	s_GtkE¡ry


68 
GtkWidgë
 
	mwidgë
;

70 
gch¨
 *
GSEAL
 (
ãxt
);

72 
guöt
 
GSEAL
 (
edôabÀ
) : 1;

73 
guöt
 
GSEAL
 (
visibÀ
) : 1;

74 
guöt
 
GSEAL
 (
ovîwrôe_mode
) : 1;

75 
guöt
 
GSEAL
 (
ö_døg
) : 1;

78 
guöt16
 
GSEAL
 (
ãxt_Àngth
);

79 
guöt16
 
GSEAL
 (
ãxt_max_Àngth
);

82 
GdkWödow
 *
GSEAL
 (
ãxt_¨ó
);

83 
GtkIMC⁄ãxt
 *
GSEAL
 (
im_c⁄ãxt
);

84 
GtkWidgë
 *
GSEAL
 (
p›up_míu
);

86 
göt
 
GSEAL
 (
cuºít_pos
);

87 
göt
 
GSEAL
 (
£À˘i⁄_bound
);

89 
P™goLayout
 *
GSEAL
 (
ˇched_œyout
);

91 
guöt
 
GSEAL
 (
ˇche_ö˛udes_¥ìdô
) : 1;

92 
guöt
 
GSEAL
 (
√ed_im_ª£t
) : 1;

93 
guöt
 
GSEAL
 (
has_‰ame
) : 1;

94 
guöt
 
GSEAL
 (
a˘iv©es_deÁu…
) : 1;

95 
guöt
 
GSEAL
 (
curs‹_visibÀ
) : 1;

96 
guöt
 
GSEAL
 (
ö_˛ick
) : 1;

97 
guöt
 
GSEAL
 (
is_˚Œ_ªndîî
) : 1;

98 
guöt
 
GSEAL
 (
edôög_ˇn˚Àd
) : 1;

99 
guöt
 
GSEAL
 (
mou£_curs‹_obscuªd
) : 1;

100 
guöt
 
GSEAL
 (
£À˘_w‹ds
) : 1;

101 
guöt
 
GSEAL
 (
£À˘_löes
) : 1;

102 
guöt
 
GSEAL
 (
ªsﬁved_dú
) : 4;

103 
guöt
 
GSEAL
 (
åunˇã_mu…ûöe
) : 1;

105 
guöt
 
GSEAL
 (
buâ⁄
);

106 
guöt
 
GSEAL
 (
blök_timeout
);

107 
guöt
 
GSEAL
 (
ªcompuã_idÀ
);

108 
göt
 
GSEAL
 (
s¸ﬁl_off£t
);

109 
göt
 
GSEAL
 (
as˚¡
);

110 
göt
 
GSEAL
 (
des˚¡
);

112 
guöt16
 
GSEAL
 (
x_ãxt_size
);

113 
guöt16
 
GSEAL
 (
x_n_byãs
);

115 
guöt16
 
GSEAL
 (
¥ìdô_Àngth
);

116 
guöt16
 
GSEAL
 (
¥ìdô_curs‹
);

118 
göt
 
GSEAL
 (
dnd_posôi⁄
);

120 
göt
 
GSEAL
 (
døg_°¨t_x
);

121 
göt
 
GSEAL
 (
døg_°¨t_y
);

123 
gunich¨
 
GSEAL
 (
övisibÀ_ch¨
);

125 
göt
 
GSEAL
 (
width_ch¨s
);

128 
	s_GtkE¡ryCœss


130 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

133 (* 
	mp›uœã_p›up
Ë(
GtkE¡ry
 *
	míåy
,

134 
GtkMíu
 *
	mmíu
);

138 (* 
	ma˘iv©e
Ë(
GtkE¡ry
 *
	míåy
);

139 (* 
	mmove_curs‹
Ë(
GtkE¡ry
 *
	míåy
,

140 
GtkMovemítSãp
 
	m°ï
,

141 
göt
 
	mcou¡
,

142 
gboﬁón
 
	mexãnd_£À˘i⁄
);

143 (* 
	mö£π_©_curs‹
Ë(
GtkE¡ry
 *
	míåy
,

144 c⁄° 
gch¨
 *
	m°r
);

145 (* 
	mdñëe_‰om_curs‹
Ë(
GtkE¡ry
 *
	míåy
,

146 
GtkDñëeTy≥
 
	mty≥
,

147 
göt
 
	mcou¡
);

148 (* 
	mback•a˚
Ë(
GtkE¡ry
 *
	míåy
);

149 (* 
	mcut_˛ùbﬂrd
Ë(
GtkE¡ry
 *
	míåy
);

150 (* 
	mc›y_˛ùbﬂrd
Ë(
GtkE¡ry
 *
	míåy
);

151 (* 
	m∑°e_˛ùbﬂrd
Ë(
GtkE¡ry
 *
	míåy
);

152 (* 
	mtoggÀ_ovîwrôe
Ë(
GtkE¡ry
 *
	míåy
);

155 (* 
	mgë_ãxt_¨ó_size
Ë(
GtkE¡ry
 *
	míåy
,

156 
göt
 *
	mx
,

157 
göt
 *
	my
,

158 
göt
 *
	mwidth
,

159 
göt
 *
	mheight
);

162 (*
	m_gtk_ª£rved1
) ();

163 (*
	m_gtk_ª£rved2
) ();

166 
GTy≥
 
	$gtk_íåy_gë_ty≥
 (Ë
G_GNUC_CONST
;

167 
GtkWidgë
* 
	`gtk_íåy_√w
 ();

168 
GtkWidgë
* 
	`gtk_íåy_√w_wôh_buf„r
 (
GtkE¡ryBuf„r
 *
buf„r
);

170 
GtkE¡ryBuf„r
* 
	`gtk_íåy_gë_buf„r
 (
GtkE¡ry
 *
íåy
);

171 
	`gtk_íåy_£t_buf„r
 (
GtkE¡ry
 *
íåy
,

172 
GtkE¡ryBuf„r
 *
buf„r
);

174 
GdkWödow
 *
	`gtk_íåy_gë_ãxt_wödow
 (
GtkE¡ry
 *
íåy
);

176 
	`gtk_íåy_£t_visibûôy
 (
GtkE¡ry
 *
íåy
,

177 
gboﬁón
 
visibÀ
);

178 
gboﬁón
 
	`gtk_íåy_gë_visibûôy
 (
GtkE¡ry
 *
íåy
);

180 
	`gtk_íåy_£t_övisibÀ_ch¨
 (
GtkE¡ry
 *
íåy
,

181 
gunich¨
 
ch
);

182 
gunich¨
 
	`gtk_íåy_gë_övisibÀ_ch¨
 (
GtkE¡ry
 *
íåy
);

183 
	`gtk_íåy_un£t_övisibÀ_ch¨
 (
GtkE¡ry
 *
íåy
);

185 
	`gtk_íåy_£t_has_‰ame
 (
GtkE¡ry
 *
íåy
,

186 
gboﬁón
 
£âög
);

187 
gboﬁón
 
	`gtk_íåy_gë_has_‰ame
 (
GtkE¡ry
 *
íåy
);

189 
	`gtk_íåy_£t_ö√r_b‹dî
 (
GtkE¡ry
 *
íåy
,

190 c⁄° 
GtkB‹dî
 *
b‹dî
);

191 
G_CONST_RETURN
 
GtkB‹dî
* 
	`gtk_íåy_gë_ö√r_b‹dî
 (
GtkE¡ry
 *
íåy
);

193 
	`gtk_íåy_£t_ovîwrôe_mode
 (
GtkE¡ry
 *
íåy
,

194 
gboﬁón
 
ovîwrôe
);

195 
gboﬁón
 
	`gtk_íåy_gë_ovîwrôe_mode
 (
GtkE¡ry
 *
íåy
);

198 
	`gtk_íåy_£t_max_Àngth
 (
GtkE¡ry
 *
íåy
,

199 
göt
 
max
);

200 
göt
 
	`gtk_íåy_gë_max_Àngth
 (
GtkE¡ry
 *
íåy
);

201 
guöt16
 
	`gtk_íåy_gë_ãxt_Àngth
 (
GtkE¡ry
 *
íåy
);

203 
	`gtk_íåy_£t_a˘iv©es_deÁu…
 (
GtkE¡ry
 *
íåy
,

204 
gboﬁón
 
£âög
);

205 
gboﬁón
 
	`gtk_íåy_gë_a˘iv©es_deÁu…
 (
GtkE¡ry
 *
íåy
);

207 
	`gtk_íåy_£t_width_ch¨s
 (
GtkE¡ry
 *
íåy
,

208 
göt
 
n_ch¨s
);

209 
göt
 
	`gtk_íåy_gë_width_ch¨s
 (
GtkE¡ry
 *
íåy
);

213 
	`gtk_íåy_£t_ãxt
 (
GtkE¡ry
 *
íåy
,

214 c⁄° 
gch¨
 *
ãxt
);

216 
G_CONST_RETURN
 
gch¨
* 
	`gtk_íåy_gë_ãxt
 (
GtkE¡ry
 *
íåy
);

218 
P™goLayout
* 
	`gtk_íåy_gë_œyout
 (
GtkE¡ry
 *
íåy
);

219 
	`gtk_íåy_gë_œyout_off£ts
 (
GtkE¡ry
 *
íåy
,

220 
göt
 *
x
,

221 
göt
 *
y
);

222 
	`gtk_íåy_£t_Æignmít
 (
GtkE¡ry
 *
íåy
,

223 
gÊﬂt
 
xÆign
);

224 
gÊﬂt
 
	`gtk_íåy_gë_Æignmít
 (
GtkE¡ry
 *
íåy
);

226 
	`gtk_íåy_£t_com∂ëi⁄
 (
GtkE¡ry
 *
íåy
,

227 
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

228 
GtkE¡ryCom∂ëi⁄
 *
	`gtk_íåy_gë_com∂ëi⁄
 (
GtkE¡ry
 *
íåy
);

230 
göt
 
	`gtk_íåy_œyout_ödex_to_ãxt_ödex
 (
GtkE¡ry
 *
íåy
,

231 
göt
 
œyout_ödex
);

232 
göt
 
	`gtk_íåy_ãxt_ödex_to_œyout_ödex
 (
GtkE¡ry
 *
íåy
,

233 
göt
 
ãxt_ödex
);

237 
	`gtk_íåy_£t_curs‹_hadju°mít
 (
GtkE¡ry
 *
íåy
,

238 
GtkAdju°mít
 *
adju°mít
);

239 
GtkAdju°mít
* 
	`gtk_íåy_gë_curs‹_hadju°mít
 (
GtkE¡ry
 *
íåy
);

243 
	`gtk_íåy_£t_¥ogªss_‰a˘i⁄
 (
GtkE¡ry
 *
íåy
,

244 
gdoubÀ
 
‰a˘i⁄
);

245 
gdoubÀ
 
	`gtk_íåy_gë_¥ogªss_‰a˘i⁄
 (
GtkE¡ry
 *
íåy
);

247 
	`gtk_íåy_£t_¥ogªss_pul£_°ï
 (
GtkE¡ry
 *
íåy
,

248 
gdoubÀ
 
‰a˘i⁄
);

249 
gdoubÀ
 
	`gtk_íåy_gë_¥ogªss_pul£_°ï
 (
GtkE¡ry
 *
íåy
);

251 
	`gtk_íåy_¥ogªss_pul£
 (
GtkE¡ry
 *
íåy
);

255 
	`gtk_íåy_£t_ic⁄_‰om_pixbuf
 (
GtkE¡ry
 *
íåy
,

256 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

257 
GdkPixbuf
 *
pixbuf
);

258 
	`gtk_íåy_£t_ic⁄_‰om_°ock
 (
GtkE¡ry
 *
íåy
,

259 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

260 c⁄° 
gch¨
 *
°ock_id
);

261 
	`gtk_íåy_£t_ic⁄_‰om_ic⁄_«me
 (
GtkE¡ry
 *
íåy
,

262 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

263 c⁄° 
gch¨
 *
ic⁄_«me
);

264 
	`gtk_íåy_£t_ic⁄_‰om_gic⁄
 (
GtkE¡ry
 *
íåy
,

265 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

266 
GIc⁄
 *
ic⁄
);

267 
GtkImageTy≥
 
	`gtk_íåy_gë_ic⁄_°‹age_ty≥
 (
GtkE¡ry
 *
íåy
,

268 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

269 
GdkPixbuf
* 
	`gtk_íåy_gë_ic⁄_pixbuf
 (
GtkE¡ry
 *
íåy
,

270 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

271 c⁄° 
gch¨
* 
	`gtk_íåy_gë_ic⁄_°ock
 (
GtkE¡ry
 *
íåy
,

272 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

273 c⁄° 
gch¨
* 
	`gtk_íåy_gë_ic⁄_«me
 (
GtkE¡ry
 *
íåy
,

274 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

275 
GIc⁄
* 
	`gtk_íåy_gë_ic⁄_gic⁄
 (
GtkE¡ry
 *
íåy
,

276 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

277 
	`gtk_íåy_£t_ic⁄_a˘iv©abÀ
 (
GtkE¡ry
 *
íåy
,

278 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

279 
gboﬁón
 
a˘iv©abÀ
);

280 
gboﬁón
 
	`gtk_íåy_gë_ic⁄_a˘iv©abÀ
 (
GtkE¡ry
 *
íåy
,

281 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

282 
	`gtk_íåy_£t_ic⁄_£nsôive
 (
GtkE¡ry
 *
íåy
,

283 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

284 
gboﬁón
 
£nsôive
);

285 
gboﬁón
 
	`gtk_íåy_gë_ic⁄_£nsôive
 (
GtkE¡ry
 *
íåy
,

286 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

287 
göt
 
	`gtk_íåy_gë_ic⁄_©_pos
 (
GtkE¡ry
 *
íåy
,

288 
göt
 
x
,

289 
göt
 
y
);

290 
	`gtk_íåy_£t_ic⁄_toﬁtù_ãxt
 (
GtkE¡ry
 *
íåy
,

291 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

292 c⁄° 
gch¨
 *
toﬁtù
);

293 
gch¨
 * 
	`gtk_íåy_gë_ic⁄_toﬁtù_ãxt
 (
GtkE¡ry
 *
íåy
,

294 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

295 
	`gtk_íåy_£t_ic⁄_toﬁtù_m¨kup
 (
GtkE¡ry
 *
íåy
,

296 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

297 c⁄° 
gch¨
 *
toﬁtù
);

298 
gch¨
 * 
	`gtk_íåy_gë_ic⁄_toﬁtù_m¨kup
 (
GtkE¡ry
 *
íåy
,

299 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

300 
	`gtk_íåy_£t_ic⁄_døg_sour˚
 (
GtkE¡ry
 *
íåy
,

301 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
,

302 
GtkT¨gëLi°
 *
èrgë_li°
,

303 
GdkDøgA˘i⁄
 
a˘i⁄s
);

304 
göt
 
	`gtk_íåy_gë_cuºít_ic⁄_døg_sour˚
 (
GtkE¡ry
 *
íåy
);

306 
GdkWödow
 * 
	`gtk_íåy_gë_ic⁄_wödow
 (
GtkE¡ry
 *
íåy
,

307 
GtkE¡ryIc⁄Posôi⁄
 
ic⁄_pos
);

313 #i‚de‡
GTK_DISABLE_DEPRECATED


314 
GtkWidgë
* 
	`gtk_íåy_√w_wôh_max_Àngth
 (
göt
 
max
);

315 
	`gtk_íåy_≠≥nd_ãxt
 (
GtkE¡ry
 *
íåy
,

316 c⁄° 
gch¨
 *
ãxt
);

317 
	`gtk_íåy_¥ïíd_ãxt
 (
GtkE¡ry
 *
íåy
,

318 c⁄° 
gch¨
 *
ãxt
);

319 
	`gtk_íåy_£t_posôi⁄
 (
GtkE¡ry
 *
íåy
,

320 
göt
 
posôi⁄
);

321 
	`gtk_íåy_£À˘_ªgi⁄
 (
GtkE¡ry
 *
íåy
,

322 
göt
 
°¨t
,

323 
göt
 
íd
);

324 
	`gtk_íåy_£t_edôabÀ
 (
GtkE¡ry
 *
íåy
,

325 
gboﬁón
 
edôabÀ
);

328 
G_END_DECLS


	@/usr/include/gtk/gtkentrybuffer.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_ENTRY_BUFFER_H__


25 
	#__GTK_ENTRY_BUFFER_H__


	)

27 
	~<glib-obje˘.h
>

29 
	gG_BEGIN_DECLS


32 
	#GTK_ENTRY_BUFFER_MAX_SIZE
 
G_MAXUSHORT


	)

34 
	#GTK_TYPE_ENTRY_BUFFER
 (
	`gtk_íåy_buf„r_gë_ty≥
 ())

	)

35 
	#GTK_ENTRY_BUFFER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ENTRY_BUFFER
, 
GtkE¡ryBuf„r
))

	)

36 
	#GTK_ENTRY_BUFFER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ENTRY_BUFFER
, 
GtkE¡ryBuf„rCœss
))

	)

37 
	#GTK_IS_ENTRY_BUFFER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ENTRY_BUFFER
))

	)

38 
	#GTK_IS_ENTRY_BUFFER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ENTRY_BUFFER
))

	)

39 
	#GTK_ENTRY_BUFFER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ENTRY_BUFFER
, 
GtkE¡ryBuf„rCœss
))

	)

41 
_GtkE¡ryBuf„r
 
	tGtkE¡ryBuf„r
;

42 
_GtkE¡ryBuf„rCœss
 
	tGtkE¡ryBuf„rCœss
;

43 
_GtkE¡ryBuf„rPriv©e
 
	tGtkE¡ryBuf„rPriv©e
;

45 
	s_GtkE¡ryBuf„r


47 
GObje˘
 
	m∑ª¡_ö°™˚
;

50 
GtkE¡ryBuf„rPriv©e
 *
	m¥iv
;

53 
	s_GtkE¡ryBuf„rCœss


55 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

59 (*
	mö£πed_ãxt
Ë(
GtkE¡ryBuf„r
 *
	mbuf„r
,

60 
guöt
 
	mposôi⁄
,

61 c⁄° 
gch¨
 *
	mch¨s
,

62 
guöt
 
	mn_ch¨s
);

64 (*
	mdñëed_ãxt
Ë(
GtkE¡ryBuf„r
 *
	mbuf„r
,

65 
guöt
 
	mposôi⁄
,

66 
guöt
 
	mn_ch¨s
);

70 c⁄° 
	mgch¨
* (*
	mgë_ãxt
Ë(
GtkE¡ryBuf„r
 *
	mbuf„r
,

71 
gsize
 *
	mn_byãs
);

73 
guöt
 (*
gë_Àngth
Ë(
GtkE¡ryBuf„r
 *
	mbuf„r
);

75 
guöt
 (*
ö£π_ãxt
Ë(
GtkE¡ryBuf„r
 *
	mbuf„r
,

76 
guöt
 
	mposôi⁄
,

77 c⁄° 
gch¨
 *
	mch¨s
,

78 
guöt
 
	mn_ch¨s
);

80 
guöt
 (*
dñëe_ãxt
Ë(
GtkE¡ryBuf„r
 *
	mbuf„r
,

81 
guöt
 
	mposôi⁄
,

82 
guöt
 
	mn_ch¨s
);

85 (*
	m_gtk_ª£rved0
) ();

86 (*
	m_gtk_ª£rved1
) ();

87 (*
	m_gtk_ª£rved2
) ();

88 (*
	m_gtk_ª£rved3
) ();

89 (*
	m_gtk_ª£rved4
) ();

90 (*
	m_gtk_ª£rved5
) ();

93 
GTy≥
 
	$gtk_íåy_buf„r_gë_ty≥
 (Ë
G_GNUC_CONST
;

95 
GtkE¡ryBuf„r
* 
	`gtk_íåy_buf„r_√w
 (c⁄° 
gch¨
 *
öôül_ch¨s
,

96 
göt
 
n_öôül_ch¨s
);

98 
gsize
 
	`gtk_íåy_buf„r_gë_byãs
 (
GtkE¡ryBuf„r
 *
buf„r
);

100 
guöt
 
	`gtk_íåy_buf„r_gë_Àngth
 (
GtkE¡ryBuf„r
 *
buf„r
);

102 
G_CONST_RETURN
 
gch¨
* 
	`gtk_íåy_buf„r_gë_ãxt
 (
GtkE¡ryBuf„r
 *
buf„r
);

104 
	`gtk_íåy_buf„r_£t_ãxt
 (
GtkE¡ryBuf„r
 *
buf„r
,

105 c⁄° 
gch¨
 *
ch¨s
,

106 
göt
 
n_ch¨s
);

108 
	`gtk_íåy_buf„r_£t_max_Àngth
 (
GtkE¡ryBuf„r
 *
buf„r
,

109 
göt
 
max_Àngth
);

111 
göt
 
	`gtk_íåy_buf„r_gë_max_Àngth
 (
GtkE¡ryBuf„r
 *
buf„r
);

113 
guöt
 
	`gtk_íåy_buf„r_ö£π_ãxt
 (
GtkE¡ryBuf„r
 *
buf„r
,

114 
guöt
 
posôi⁄
,

115 c⁄° 
gch¨
 *
ch¨s
,

116 
göt
 
n_ch¨s
);

118 
guöt
 
	`gtk_íåy_buf„r_dñëe_ãxt
 (
GtkE¡ryBuf„r
 *
buf„r
,

119 
guöt
 
posôi⁄
,

120 
göt
 
n_ch¨s
);

122 
	`gtk_íåy_buf„r_emô_ö£πed_ãxt
 (
GtkE¡ryBuf„r
 *
buf„r
,

123 
guöt
 
posôi⁄
,

124 c⁄° 
gch¨
 *
ch¨s
,

125 
guöt
 
n_ch¨s
);

127 
	`gtk_íåy_buf„r_emô_dñëed_ãxt
 (
GtkE¡ryBuf„r
 *
buf„r
,

128 
guöt
 
posôi⁄
,

129 
guöt
 
n_ch¨s
);

131 
G_END_DECLS


	@/usr/include/gtk/gtkentrycompletion.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_ENTRY_COMPLETION_H__


25 
	#__GTK_ENTRY_COMPLETION_H__


	)

27 
	~<gtk/gtkåìmodñ.h
>

28 
	~<gtk/gtkli°°‹e.h
>

29 
	~<gtk/gtkåìvõwcﬁumn.h
>

30 
	~<gtk/gtkåìmodñfûãr.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_ENTRY_COMPLETION
 (
	`gtk_íåy_com∂ëi⁄_gë_ty≥
 ())

	)

35 
	#GTK_ENTRY_COMPLETION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ENTRY_COMPLETION
, 
GtkE¡ryCom∂ëi⁄
))

	)

36 
	#GTK_ENTRY_COMPLETION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ENTRY_COMPLETION
, 
GtkE¡ryCom∂ëi⁄Cœss
))

	)

37 
	#GTK_IS_ENTRY_COMPLETION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ENTRY_COMPLETION
))

	)

38 
	#GTK_IS_ENTRY_COMPLETION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ENTRY_COMPLETION
))

	)

39 
	#GTK_ENTRY_COMPLETION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ENTRY_COMPLETION
, 
GtkE¡ryCom∂ëi⁄Cœss
))

	)

41 
_GtkE¡ryCom∂ëi⁄
 
	tGtkE¡ryCom∂ëi⁄
;

42 
_GtkE¡ryCom∂ëi⁄Cœss
 
	tGtkE¡ryCom∂ëi⁄Cœss
;

43 
_GtkE¡ryCom∂ëi⁄Priv©e
 
	tGtkE¡ryCom∂ëi⁄Priv©e
;

45 
	$gboﬁón
 (* 
	tGtkE¡ryCom∂ëi⁄M©chFunc
Ë(
	tGtkE¡ryCom∂ëi⁄
 *
	tcom∂ëi⁄
,

46 c⁄° 
	tgch¨
 *
	tkey
,

47 
	tGtkTªeIãr
 *
	tôî
,

48 
	tgpoöãr
 
	tu£r_d©a
);

51 
	s_GtkE¡ryCom∂ëi⁄


53 
GObje˘
 
∑ª¡_ö°™˚
;

56 
GtkE¡ryCom∂ëi⁄Priv©e
 *
	`GSEAL
 (
¥iv
);

59 
	s_GtkE¡ryCom∂ëi⁄Cœss


61 
GObje˘Cœss
 
∑ª¡_˛ass
;

63 
	`gboﬁón
 (* 
m©ch_£À˘ed
Ë(
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

64 
GtkTªeModñ
 *
modñ
,

65 
GtkTªeIãr
 *
ôî
);

66 (* 
a˘i⁄_a˘iv©ed
Ë(
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

67 
göt
 
ödex_
);

68 
	`gboﬁón
 (* 
ö£π_¥efix
Ë(
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

69 c⁄° 
gch¨
 *
¥efix
);

70 
	`gboﬁón
 (* 
curs‹_⁄_m©ch
Ë(
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

71 
GtkTªeModñ
 *
modñ
,

72 
GtkTªeIãr
 *
ôî
);

75 (*
_gtk_ª£rved0
) ();

76 (*
_gtk_ª£rved1
) ();

80 
GTy≥
 
	$gtk_íåy_com∂ëi⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

81 
GtkE¡ryCom∂ëi⁄
 *
	`gtk_íåy_com∂ëi⁄_√w
 ();

83 
GtkWidgë
 *
	`gtk_íåy_com∂ëi⁄_gë_íåy
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

85 
	`gtk_íåy_com∂ëi⁄_£t_modñ
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

86 
GtkTªeModñ
 *
modñ
);

87 
GtkTªeModñ
 *
	`gtk_íåy_com∂ëi⁄_gë_modñ
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

89 
	`gtk_íåy_com∂ëi⁄_£t_m©ch_func
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

90 
GtkE¡ryCom∂ëi⁄M©chFunc
 
func
,

91 
gpoöãr
 
func_d©a
,

92 
GDe°royNŸify
 
func_nŸify
);

93 
	`gtk_íåy_com∂ëi⁄_£t_möimum_key_Àngth
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

94 
göt
 
Àngth
);

95 
göt
 
	`gtk_íåy_com∂ëi⁄_gë_möimum_key_Àngth
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

96 
	`gtk_íåy_com∂ëi⁄_com∂ëe
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

97 
	`gtk_íåy_com∂ëi⁄_ö£π_¥efix
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

99 
	`gtk_íåy_com∂ëi⁄_ö£π_a˘i⁄_ãxt
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

100 
göt
 
ödex_
,

101 c⁄° 
gch¨
 *
ãxt
);

102 
	`gtk_íåy_com∂ëi⁄_ö£π_a˘i⁄_m¨kup
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

103 
göt
 
ödex_
,

104 c⁄° 
gch¨
 *
m¨kup
);

105 
	`gtk_íåy_com∂ëi⁄_dñëe_a˘i⁄
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

106 
göt
 
ödex_
);

108 
	`gtk_íåy_com∂ëi⁄_£t_ölöe_com∂ëi⁄
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

109 
gboﬁón
 
ölöe_com∂ëi⁄
);

110 
gboﬁón
 
	`gtk_íåy_com∂ëi⁄_gë_ölöe_com∂ëi⁄
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

111 
	`gtk_íåy_com∂ëi⁄_£t_ölöe_£À˘i⁄
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

112 
gboﬁón
 
ölöe_£À˘i⁄
);

113 
gboﬁón
 
	`gtk_íåy_com∂ëi⁄_gë_ölöe_£À˘i⁄
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

114 
	`gtk_íåy_com∂ëi⁄_£t_p›up_com∂ëi⁄
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

115 
gboﬁón
 
p›up_com∂ëi⁄
);

116 
gboﬁón
 
	`gtk_íåy_com∂ëi⁄_gë_p›up_com∂ëi⁄
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

117 
	`gtk_íåy_com∂ëi⁄_£t_p›up_£t_width
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

118 
gboﬁón
 
p›up_£t_width
);

119 
gboﬁón
 
	`gtk_íåy_com∂ëi⁄_gë_p›up_£t_width
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

120 
	`gtk_íåy_com∂ëi⁄_£t_p›up_sögÀ_m©ch
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

121 
gboﬁón
 
p›up_sögÀ_m©ch
);

122 
gboﬁón
 
	`gtk_íåy_com∂ëi⁄_gë_p›up_sögÀ_m©ch
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

124 c⁄° 
gch¨
 *
	`gtk_íåy_com∂ëi⁄_gë_com∂ëi⁄_¥efix
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

126 
	`gtk_íåy_com∂ëi⁄_£t_ãxt_cﬁumn
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
,

127 
göt
 
cﬁumn
);

128 
göt
 
	`gtk_íåy_com∂ëi⁄_gë_ãxt_cﬁumn
 (
GtkE¡ryCom∂ëi⁄
 *
com∂ëi⁄
);

130 
G_END_DECLS


	@/usr/include/gtk/gtkenums.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ENUMS_H__


32 
	#__GTK_ENUMS_H__


	)

34 
	~<glib-obje˘.h
>

36 
G_BEGIN_DECLS


41 
	mGTK_ANCHOR_CENTER
,

42 
	mGTK_ANCHOR_NORTH
,

43 
	mGTK_ANCHOR_NORTH_WEST
,

44 
	mGTK_ANCHOR_NORTH_EAST
,

45 
	mGTK_ANCHOR_SOUTH
,

46 
	mGTK_ANCHOR_SOUTH_WEST
,

47 
	mGTK_ANCHOR_SOUTH_EAST
,

48 
	mGTK_ANCHOR_WEST
,

49 
	mGTK_ANCHOR_EAST
,

50 
	mGTK_ANCHOR_N
 = 
GTK_ANCHOR_NORTH
,

51 
	mGTK_ANCHOR_NW
 = 
GTK_ANCHOR_NORTH_WEST
,

52 
	mGTK_ANCHOR_NE
 = 
GTK_ANCHOR_NORTH_EAST
,

53 
	mGTK_ANCHOR_S
 = 
GTK_ANCHOR_SOUTH
,

54 
	mGTK_ANCHOR_SW
 = 
GTK_ANCHOR_SOUTH_WEST
,

55 
	mGTK_ANCHOR_SE
 = 
GTK_ANCHOR_SOUTH_EAST
,

56 
	mGTK_ANCHOR_W
 = 
GTK_ANCHOR_WEST
,

57 
	mGTK_ANCHOR_E
 = 
GTK_ANCHOR_EAST


58 } 
	tGtkAnch‹Ty≥
;

63 
	mGTK_ARROWS_BOTH
,

64 
	mGTK_ARROWS_START
,

65 
	mGTK_ARROWS_END


66 } 
	tGtkAºowPœ˚mít
;

71 
	mGTK_ARROW_UP
,

72 
	mGTK_ARROW_DOWN
,

73 
	mGTK_ARROW_LEFT
,

74 
	mGTK_ARROW_RIGHT
,

75 
	mGTK_ARROW_NONE


76 } 
	tGtkAºowTy≥
;

81 
	mGTK_EXPAND
 = 1 << 0,

82 
	mGTK_SHRINK
 = 1 << 1,

83 
	mGTK_FILL
 = 1 << 2

84 } 
	tGtkAâachO±i⁄s
;

89 
	mGTK_BUTTONBOX_DEFAULT_STYLE
,

90 
	mGTK_BUTTONBOX_SPREAD
,

91 
	mGTK_BUTTONBOX_EDGE
,

92 
	mGTK_BUTTONBOX_START
,

93 
	mGTK_BUTTONBOX_END
,

94 
	mGTK_BUTTONBOX_CENTER


95 } 
	tGtkBuâ⁄BoxStyÀ
;

97 #i‚de‡
GTK_DISABLE_DEPRECATED


101 
	mGTK_CURVE_TYPE_LINEAR
,

102 
	mGTK_CURVE_TYPE_SPLINE
,

103 
	mGTK_CURVE_TYPE_FREE


104 } 
	tGtkCurveTy≥
;

109 
	mGTK_DELETE_CHARS
,

110 
	mGTK_DELETE_WORD_ENDS
,

113 
	mGTK_DELETE_WORDS
,

114 
	mGTK_DELETE_DISPLAY_LINES
,

115 
	mGTK_DELETE_DISPLAY_LINE_ENDS
,

116 
	mGTK_DELETE_PARAGRAPH_ENDS
,

117 
	mGTK_DELETE_PARAGRAPHS
,

118 
	mGTK_DELETE_WHITESPACE


119 } 
	tGtkDñëeTy≥
;

124 
	mGTK_DIR_TAB_FORWARD
,

125 
	mGTK_DIR_TAB_BACKWARD
,

126 
	mGTK_DIR_UP
,

127 
	mGTK_DIR_DOWN
,

128 
	mGTK_DIR_LEFT
,

129 
	mGTK_DIR_RIGHT


130 } 
	tGtkDúe˘i⁄Ty≥
;

135 
	mGTK_EXPANDER_COLLAPSED
,

136 
	mGTK_EXPANDER_SEMI_COLLAPSED
,

137 
	mGTK_EXPANDER_SEMI_EXPANDED
,

138 
	mGTK_EXPANDER_EXPANDED


139 } 
	tGtkEx∑ndîStyÀ
;

144 
	mGTK_ICON_SIZE_INVALID
,

145 
	mGTK_ICON_SIZE_MENU
,

146 
	mGTK_ICON_SIZE_SMALL_TOOLBAR
,

147 
	mGTK_ICON_SIZE_LARGE_TOOLBAR
,

148 
	mGTK_ICON_SIZE_BUTTON
,

149 
	mGTK_ICON_SIZE_DND
,

150 
	mGTK_ICON_SIZE_DIALOG


151 } 
	tGtkIc⁄Size
;

156 
	mGTK_SENSITIVITY_AUTO
,

157 
	mGTK_SENSITIVITY_ON
,

158 
	mGTK_SENSITIVITY_OFF


159 } 
	tGtkSísôivôyTy≥
;

161 #i‚de‡
GTK_DISABLE_DEPRECATED


165 
	mGTK_SIDE_TOP
,

166 
	mGTK_SIDE_BOTTOM
,

167 
	mGTK_SIDE_LEFT
,

168 
	mGTK_SIDE_RIGHT


169 } 
	tGtkSideTy≥
;

175 
	mGTK_TEXT_DIR_NONE
,

176 
	mGTK_TEXT_DIR_LTR
,

177 
	mGTK_TEXT_DIR_RTL


178 } 
	tGtkTextDúe˘i⁄
;

183 
	mGTK_JUSTIFY_LEFT
,

184 
	mGTK_JUSTIFY_RIGHT
,

185 
	mGTK_JUSTIFY_CENTER
,

186 
	mGTK_JUSTIFY_FILL


187 } 
	tGtkJu°ifiˇti⁄
;

189 #i‚de‡
GTK_DISABLE_DEPRECATED


193 
	mGTK_MATCH_ALL
,

194 
	mGTK_MATCH_ALL_TAIL
,

195 
	mGTK_MATCH_HEAD
,

196 
	mGTK_MATCH_TAIL
,

197 
	mGTK_MATCH_EXACT
,

198 
	mGTK_MATCH_LAST


199 } 
	tGtkM©chTy≥
;

205 
	mGTK_MENU_DIR_PARENT
,

206 
	mGTK_MENU_DIR_CHILD
,

207 
	mGTK_MENU_DIR_NEXT
,

208 
	mGTK_MENU_DIR_PREV


209 } 
	tGtkMíuDúe˘i⁄Ty≥
;

213 
	mGTK_MESSAGE_INFO
,

214 
	mGTK_MESSAGE_WARNING
,

215 
	mGTK_MESSAGE_QUESTION
,

216 
	mGTK_MESSAGE_ERROR
,

217 
	mGTK_MESSAGE_OTHER


218 } 
	tGtkMesßgeTy≥
;

222 
	mGTK_PIXELS
,

223 
	mGTK_INCHES
,

224 
	mGTK_CENTIMETERS


225 } 
	tGtkMëricTy≥
;

229 
	mGTK_MOVEMENT_LOGICAL_POSITIONS
,

230 
	mGTK_MOVEMENT_VISUAL_POSITIONS
,

231 
	mGTK_MOVEMENT_WORDS
,

232 
	mGTK_MOVEMENT_DISPLAY_LINES
,

233 
	mGTK_MOVEMENT_DISPLAY_LINE_ENDS
,

234 
	mGTK_MOVEMENT_PARAGRAPHS
,

235 
	mGTK_MOVEMENT_PARAGRAPH_ENDS
,

236 
	mGTK_MOVEMENT_PAGES
,

237 
	mGTK_MOVEMENT_BUFFER_ENDS
,

238 
	mGTK_MOVEMENT_HORIZONTAL_PAGES


239 } 
	tGtkMovemítSãp
;

243 
	mGTK_SCROLL_STEPS
,

244 
	mGTK_SCROLL_PAGES
,

245 
	mGTK_SCROLL_ENDS
,

246 
	mGTK_SCROLL_HORIZONTAL_STEPS
,

247 
	mGTK_SCROLL_HORIZONTAL_PAGES
,

248 
	mGTK_SCROLL_HORIZONTAL_ENDS


249 } 
	tGtkS¸ﬁlSãp
;

254 
	mGTK_ORIENTATION_HORIZONTAL
,

255 
	mGTK_ORIENTATION_VERTICAL


256 } 
	tGtkOrõ¡©i⁄
;

261 
	mGTK_CORNER_TOP_LEFT
,

262 
	mGTK_CORNER_BOTTOM_LEFT
,

263 
	mGTK_CORNER_TOP_RIGHT
,

264 
	mGTK_CORNER_BOTTOM_RIGHT


265 } 
	tGtkC‹√rTy≥
;

270 
	mGTK_PACK_START
,

271 
	mGTK_PACK_END


272 } 
	tGtkPackTy≥
;

277 
	mGTK_PATH_PRIO_LOWEST
 = 0,

278 
	mGTK_PATH_PRIO_GTK
 = 4,

279 
	mGTK_PATH_PRIO_APPLICATION
 = 8,

280 
	mGTK_PATH_PRIO_THEME
 = 10,

281 
	mGTK_PATH_PRIO_RC
 = 12,

282 
	mGTK_PATH_PRIO_HIGHEST
 = 15

283 } 
	tGtkP©hPri‹ôyTy≥
;

284 
	#GTK_PATH_PRIO_MASK
 0x0f

	)

289 
	mGTK_PATH_WIDGET
,

290 
	mGTK_PATH_WIDGET_CLASS
,

291 
	mGTK_PATH_CLASS


292 } 
	tGtkP©hTy≥
;

297 
	mGTK_POLICY_ALWAYS
,

298 
	mGTK_POLICY_AUTOMATIC
,

299 
	mGTK_POLICY_NEVER


300 } 
	tGtkPﬁicyTy≥
;

304 
	mGTK_POS_LEFT
,

305 
	mGTK_POS_RIGHT
,

306 
	mGTK_POS_TOP
,

307 
	mGTK_POS_BOTTOM


308 } 
	tGtkPosôi⁄Ty≥
;

310 #i‚de‡
GTK_DISABLE_DEPRECATED


313 
	mGTK_PREVIEW_COLOR
,

314 
	mGTK_PREVIEW_GRAYSCALE


315 } 
	tGtkPªvõwTy≥
;

321 
	mGTK_RELIEF_NORMAL
,

322 
	mGTK_RELIEF_HALF
,

323 
	mGTK_RELIEF_NONE


324 } 
	tGtkRñõfStyÀ
;

329 
	mGTK_RESIZE_PARENT
,

330 
	mGTK_RESIZE_QUEUE
,

331 
	mGTK_RESIZE_IMMEDIATE


332 } 
	tGtkResizeMode
;

334 #i‚de‡
GTK_DISABLE_DEPRECATED


338 
	mGTK_RUN_FIRST
 = 
G_SIGNAL_RUN_FIRST
,

339 
	mGTK_RUN_LAST
 = 
G_SIGNAL_RUN_LAST
,

340 
	mGTK_RUN_BOTH
 = (
GTK_RUN_FIRST
 | 
GTK_RUN_LAST
),

341 
	mGTK_RUN_NO_RECURSE
 = 
G_SIGNAL_NO_RECURSE
,

342 
	mGTK_RUN_ACTION
 = 
G_SIGNAL_ACTION
,

343 
	mGTK_RUN_NO_HOOKS
 = 
G_SIGNAL_NO_HOOKS


344 } 
	tGtkSig«lRunTy≥
;

350 
	mGTK_SCROLL_NONE
,

351 
	mGTK_SCROLL_JUMP
,

352 
	mGTK_SCROLL_STEP_BACKWARD
,

353 
	mGTK_SCROLL_STEP_FORWARD
,

354 
	mGTK_SCROLL_PAGE_BACKWARD
,

355 
	mGTK_SCROLL_PAGE_FORWARD
,

356 
	mGTK_SCROLL_STEP_UP
,

357 
	mGTK_SCROLL_STEP_DOWN
,

358 
	mGTK_SCROLL_PAGE_UP
,

359 
	mGTK_SCROLL_PAGE_DOWN
,

360 
	mGTK_SCROLL_STEP_LEFT
,

361 
	mGTK_SCROLL_STEP_RIGHT
,

362 
	mGTK_SCROLL_PAGE_LEFT
,

363 
	mGTK_SCROLL_PAGE_RIGHT
,

364 
	mGTK_SCROLL_START
,

365 
	mGTK_SCROLL_END


366 } 
	tGtkS¸ﬁlTy≥
;

371 
	mGTK_SELECTION_NONE
,

372 
	mGTK_SELECTION_SINGLE
,

373 
	mGTK_SELECTION_BROWSE
,

374 
	mGTK_SELECTION_MULTIPLE
,

375 
	mGTK_SELECTION_EXTENDED
 = 
GTK_SELECTION_MULTIPLE


376 } 
	tGtkSñe˘i⁄Mode
;

381 
	mGTK_SHADOW_NONE
,

382 
	mGTK_SHADOW_IN
,

383 
	mGTK_SHADOW_OUT
,

384 
	mGTK_SHADOW_ETCHED_IN
,

385 
	mGTK_SHADOW_ETCHED_OUT


386 } 
	tGtkShadowTy≥
;

391 
	mGTK_STATE_NORMAL
,

392 
	mGTK_STATE_ACTIVE
,

393 
	mGTK_STATE_PRELIGHT
,

394 
	mGTK_STATE_SELECTED
,

395 
	mGTK_STATE_INSENSITIVE


396 } 
	tGtkSèãTy≥
;

398 #i‡!
deföed
(
GTK_DISABLE_DEPRECATED
Ë|| deföed (
GTK_MENU_INTERNALS
)

402 
	mGTK_DIRECTION_LEFT
,

403 
	mGTK_DIRECTION_RIGHT


404 } 
	tGtkSubmíuDúe˘i⁄
;

409 
	mGTK_TOP_BOTTOM
,

410 
	mGTK_LEFT_RIGHT


411 } 
	tGtkSubmíuPœ˚mít
;

417 
	mGTK_TOOLBAR_ICONS
,

418 
	mGTK_TOOLBAR_TEXT
,

419 
	mGTK_TOOLBAR_BOTH
,

420 
	mGTK_TOOLBAR_BOTH_HORIZ


421 } 
	tGtkToﬁb¨StyÀ
;

426 
	mGTK_UPDATE_CONTINUOUS
,

427 
	mGTK_UPDATE_DISCONTINUOUS
,

428 
	mGTK_UPDATE_DELAYED


429 } 
	tGtkUpd©eTy≥
;

434 
	mGTK_VISIBILITY_NONE
,

435 
	mGTK_VISIBILITY_PARTIAL
,

436 
	mGTK_VISIBILITY_FULL


437 } 
	tGtkVisibûôy
;

442 
	mGTK_WIN_POS_NONE
,

443 
	mGTK_WIN_POS_CENTER
,

444 
	mGTK_WIN_POS_MOUSE
,

445 
	mGTK_WIN_POS_CENTER_ALWAYS
,

446 
	mGTK_WIN_POS_CENTER_ON_PARENT


447 } 
	tGtkWödowPosôi⁄
;

452 
	mGTK_WINDOW_TOPLEVEL
,

453 
	mGTK_WINDOW_POPUP


454 } 
	tGtkWödowTy≥
;

459 
	mGTK_WRAP_NONE
,

460 
	mGTK_WRAP_CHAR
,

461 
	mGTK_WRAP_WORD
,

462 
	mGTK_WRAP_WORD_CHAR


463 } 
	tGtkWøpMode
;

468 
	mGTK_SORT_ASCENDING
,

469 
	mGTK_SORT_DESCENDING


470 } 
	tGtkS‹tTy≥
;

475 
	mGTK_IM_PREEDIT_NOTHING
,

476 
	mGTK_IM_PREEDIT_CALLBACK
,

477 
	mGTK_IM_PREEDIT_NONE


478 } 
	tGtkIMPªedôStyÀ
;

482 
	mGTK_IM_STATUS_NOTHING
,

483 
	mGTK_IM_STATUS_CALLBACK
,

484 
	mGTK_IM_STATUS_NONE


485 } 
	tGtkIMSètusStyÀ
;

489 
	mGTK_PACK_DIRECTION_LTR
,

490 
	mGTK_PACK_DIRECTION_RTL
,

491 
	mGTK_PACK_DIRECTION_TTB
,

492 
	mGTK_PACK_DIRECTION_BTT


493 } 
	tGtkPackDúe˘i⁄
;

497 
	mGTK_PRINT_PAGES_ALL
,

498 
	mGTK_PRINT_PAGES_CURRENT
,

499 
	mGTK_PRINT_PAGES_RANGES
,

500 
	mGTK_PRINT_PAGES_SELECTION


501 } 
	tGtkPrötPages
;

505 
	mGTK_PAGE_SET_ALL
,

506 
	mGTK_PAGE_SET_EVEN
,

507 
	mGTK_PAGE_SET_ODD


508 } 
	tGtkPageSë
;

512 
	mGTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM
,

513 
	mGTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP
,

514 
	mGTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM
,

515 
	mGTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP
,

516 
	mGTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT
,

517 
	mGTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT
,

518 
	mGTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT
,

519 
	mGTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT


520 } 
	tGtkNumbîUpLayout
;

524 
	mGTK_PAGE_ORIENTATION_PORTRAIT
,

525 
	mGTK_PAGE_ORIENTATION_LANDSCAPE
,

526 
	mGTK_PAGE_ORIENTATION_REVERSE_PORTRAIT
,

527 
	mGTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE


528 } 
	tGtkPageOrõ¡©i⁄
;

532 
	mGTK_PRINT_QUALITY_LOW
,

533 
	mGTK_PRINT_QUALITY_NORMAL
,

534 
	mGTK_PRINT_QUALITY_HIGH
,

535 
	mGTK_PRINT_QUALITY_DRAFT


536 } 
	tGtkPrötQuÆôy
;

540 
	mGTK_PRINT_DUPLEX_SIMPLEX
,

541 
	mGTK_PRINT_DUPLEX_HORIZONTAL
,

542 
	mGTK_PRINT_DUPLEX_VERTICAL


543 } 
	tGtkPrötDu∂ex
;

548 
	mGTK_UNIT_PIXEL
,

549 
	mGTK_UNIT_POINTS
,

550 
	mGTK_UNIT_INCH
,

551 
	mGTK_UNIT_MM


552 } 
	tGtkUnô
;

556 
	mGTK_TREE_VIEW_GRID_LINES_NONE
,

557 
	mGTK_TREE_VIEW_GRID_LINES_HORIZONTAL
,

558 
	mGTK_TREE_VIEW_GRID_LINES_VERTICAL
,

559 
	mGTK_TREE_VIEW_GRID_LINES_BOTH


560 } 
	tGtkTªeVõwGridLöes
;

564 
	mGTK_DRAG_RESULT_SUCCESS
,

565 
	mGTK_DRAG_RESULT_NO_TARGET
,

566 
	mGTK_DRAG_RESULT_USER_CANCELLED
,

567 
	mGTK_DRAG_RESULT_TIMEOUT_EXPIRED
,

568 
	mGTK_DRAG_RESULT_GRAB_BROKEN
,

569 
	mGTK_DRAG_RESULT_ERROR


570 } 
	tGtkDøgResu…
;

572 
	gG_END_DECLS


	@/usr/include/gtk/gtkeventbox.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_EVENT_BOX_H__


32 
	#__GTK_EVENT_BOX_H__


	)

35 
	~<gtk/gtkbö.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_EVENT_BOX
 (
	`gtk_evít_box_gë_ty≥
 ())

	)

41 
	#GTK_EVENT_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_EVENT_BOX
, 
GtkEvítBox
))

	)

42 
	#GTK_EVENT_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_EVENT_BOX
, 
GtkEvítBoxCœss
))

	)

43 
	#GTK_IS_EVENT_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_EVENT_BOX
))

	)

44 
	#GTK_IS_EVENT_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_EVENT_BOX
))

	)

45 
	#GTK_EVENT_BOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_EVENT_BOX
, 
GtkEvítBoxCœss
))

	)

47 
_GtkEvítBox
 
	tGtkEvítBox
;

48 
_GtkEvítBoxCœss
 
	tGtkEvítBoxCœss
;

50 
	s_GtkEvítBox


52 
GtkBö
 
	mbö
;

55 
	s_GtkEvítBoxCœss


57 
GtkBöCœss
 
	m∑ª¡_˛ass
;

60 
GTy≥
 
	$gtk_evít_box_gë_ty≥
 (Ë
G_GNUC_CONST
;

61 
GtkWidgë
* 
	`gtk_evít_box_√w
 ();

62 
gboﬁón
 
	`gtk_evít_box_gë_visibÀ_wödow
 (
GtkEvítBox
 *
evít_box
);

63 
	`gtk_evít_box_£t_visibÀ_wödow
 (
GtkEvítBox
 *
evít_box
,

64 
gboﬁón
 
visibÀ_wödow
);

65 
gboﬁón
 
	`gtk_evít_box_gë_above_chûd
 (
GtkEvítBox
 *
evít_box
);

66 
	`gtk_evít_box_£t_above_chûd
 (
GtkEvítBox
 *
evít_box
,

67 
gboﬁón
 
above_chûd
);

69 
G_END_DECLS


	@/usr/include/gtk/gtkexpander.h

24 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

28 #i‚de‡
__GTK_EXPANDER_H__


29 
	#__GTK_EXPANDER_H__


	)

31 
	~<gtk/gtkbö.h
>

33 
	gG_BEGIN_DECLS


35 
	#GTK_TYPE_EXPANDER
 (
	`gtk_ex∑ndî_gë_ty≥
 ())

	)

36 
	#GTK_EXPANDER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_EXPANDER
, 
GtkEx∑ndî
))

	)

37 
	#GTK_EXPANDER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_EXPANDER
, 
GtkEx∑ndîCœss
))

	)

38 
	#GTK_IS_EXPANDER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_EXPANDER
))

	)

39 
	#GTK_IS_EXPANDER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_EXPANDER
))

	)

40 
	#GTK_EXPANDER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_EXPANDER
, 
GtkEx∑ndîCœss
))

	)

42 
_GtkEx∑ndî
 
	tGtkEx∑ndî
;

43 
_GtkEx∑ndîCœss
 
	tGtkEx∑ndîCœss
;

44 
_GtkEx∑ndîPriv©e
 
	tGtkEx∑ndîPriv©e
;

46 
	s_GtkEx∑ndî


48 
GtkBö
 
	mbö
;

50 
GtkEx∑ndîPriv©e
 *
GSEAL
 (
¥iv
);

53 
	s_GtkEx∑ndîCœss


55 
GtkBöCœss
 
	m∑ª¡_˛ass
;

60 (* 
	ma˘iv©e
Ë(
GtkEx∑ndî
 *
	mex∑ndî
);

63 
GTy≥
 
	$gtk_ex∑ndî_gë_ty≥
 (Ë
G_GNUC_CONST
;

65 
GtkWidgë
 *
	`gtk_ex∑ndî_√w
 (c⁄° 
gch¨
 *
œbñ
);

66 
GtkWidgë
 *
	`gtk_ex∑ndî_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
œbñ
);

68 
	`gtk_ex∑ndî_£t_ex∑nded
 (
GtkEx∑ndî
 *
ex∑ndî
,

69 
gboﬁón
 
ex∑nded
);

70 
gboﬁón
 
	`gtk_ex∑ndî_gë_ex∑nded
 (
GtkEx∑ndî
 *
ex∑ndî
);

73 
	`gtk_ex∑ndî_£t_•acög
 (
GtkEx∑ndî
 *
ex∑ndî
,

74 
göt
 
•acög
);

75 
göt
 
	`gtk_ex∑ndî_gë_•acög
 (
GtkEx∑ndî
 *
ex∑ndî
);

77 
	`gtk_ex∑ndî_£t_œbñ
 (
GtkEx∑ndî
 *
ex∑ndî
,

78 c⁄° 
gch¨
 *
œbñ
);

79 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ex∑ndî_gë_œbñ
 (
GtkEx∑ndî
 *
ex∑ndî
);

81 
	`gtk_ex∑ndî_£t_u£_undîlöe
 (
GtkEx∑ndî
 *
ex∑ndî
,

82 
gboﬁón
 
u£_undîlöe
);

83 
gboﬁón
 
	`gtk_ex∑ndî_gë_u£_undîlöe
 (
GtkEx∑ndî
 *
ex∑ndî
);

85 
	`gtk_ex∑ndî_£t_u£_m¨kup
 (
GtkEx∑ndî
 *
ex∑ndî
,

86 
gboﬁón
 
u£_m¨kup
);

87 
gboﬁón
 
	`gtk_ex∑ndî_gë_u£_m¨kup
 (
GtkEx∑ndî
 *
ex∑ndî
);

89 
	`gtk_ex∑ndî_£t_œbñ_widgë
 (
GtkEx∑ndî
 *
ex∑ndî
,

90 
GtkWidgë
 *
œbñ_widgë
);

91 
GtkWidgë
 *
	`gtk_ex∑ndî_gë_œbñ_widgë
 (
GtkEx∑ndî
 *
ex∑ndî
);

93 
G_END_DECLS


	@/usr/include/gtk/gtkfilechooser.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_FILE_CHOOSER_H__


26 
	#__GTK_FILE_CHOOSER_H__


	)

28 
	~<gtk/gtkfûefûãr.h
>

29 
	~<gtk/gtkwidgë.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_FILE_CHOOSER
 (
	`gtk_fûe_choo£r_gë_ty≥
 ())

	)

34 
	#GTK_FILE_CHOOSER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FILE_CHOOSER
, 
GtkFûeChoo£r
))

	)

35 
	#GTK_IS_FILE_CHOOSER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FILE_CHOOSER
))

	)

37 
_GtkFûeChoo£r
 
	tGtkFûeChoo£r
;

58 
	mGTK_FILE_CHOOSER_ACTION_OPEN
,

59 
	mGTK_FILE_CHOOSER_ACTION_SAVE
,

60 
	mGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER
,

61 
	mGTK_FILE_CHOOSER_ACTION_CREATE_FOLDER


62 } 
	tGtkFûeChoo£rA˘i⁄
;

83 
	mGTK_FILE_CHOOSER_CONFIRMATION_CONFIRM
,

84 
	mGTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME
,

85 
	mGTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN


86 } 
	tGtkFûeChoo£rC⁄fúm©i⁄
;

88 
GTy≥
 
	$gtk_fûe_choo£r_gë_ty≥
 (Ë
G_GNUC_CONST
;

96 
	#GTK_FILE_CHOOSER_ERROR
 (
	`gtk_fûe_choo£r_îr‹_qu¨k
 ())

	)

110 
GTK_FILE_CHOOSER_ERROR_NONEXISTENT
,

111 
GTK_FILE_CHOOSER_ERROR_BAD_FILENAME
,

112 
GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS
,

113 
GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME


114 } 
	tGtkFûeChoo£rEº‹
;

116 
GQu¨k
 
	`gtk_fûe_choo£r_îr‹_qu¨k
 ();

120 
	`gtk_fûe_choo£r_£t_a˘i⁄
 (
GtkFûeChoo£r
 *
choo£r
,

121 
GtkFûeChoo£rA˘i⁄
 
a˘i⁄
);

122 
GtkFûeChoo£rA˘i⁄
 
	`gtk_fûe_choo£r_gë_a˘i⁄
 (
GtkFûeChoo£r
 *
choo£r
);

123 
	`gtk_fûe_choo£r_£t_loˇl_⁄ly
 (
GtkFûeChoo£r
 *
choo£r
,

124 
gboﬁón
 
loˇl_⁄ly
);

125 
gboﬁón
 
	`gtk_fûe_choo£r_gë_loˇl_⁄ly
 (
GtkFûeChoo£r
 *
choo£r
);

126 
	`gtk_fûe_choo£r_£t_£À˘_mu…ùÀ
 (
GtkFûeChoo£r
 *
choo£r
,

127 
gboﬁón
 
£À˘_mu…ùÀ
);

128 
gboﬁón
 
	`gtk_fûe_choo£r_gë_£À˘_mu…ùÀ
 (
GtkFûeChoo£r
 *
choo£r
);

129 
	`gtk_fûe_choo£r_£t_show_hiddí
 (
GtkFûeChoo£r
 *
choo£r
,

130 
gboﬁón
 
show_hiddí
);

131 
gboﬁón
 
	`gtk_fûe_choo£r_gë_show_hiddí
 (
GtkFûeChoo£r
 *
choo£r
);

133 
	`gtk_fûe_choo£r_£t_do_ovîwrôe_c⁄fúm©i⁄
 (
GtkFûeChoo£r
 *
choo£r
,

134 
gboﬁón
 
do_ovîwrôe_c⁄fúm©i⁄
);

135 
gboﬁón
 
	`gtk_fûe_choo£r_gë_do_ovîwrôe_c⁄fúm©i⁄
 (
GtkFûeChoo£r
 *
choo£r
);

137 
	`gtk_fûe_choo£r_£t_¸óã_fﬁdîs
 (
GtkFûeChoo£r
 *
choo£r
,

138 
gboﬁón
 
¸óã_fﬁdîs
);

139 
gboﬁón
 
	`gtk_fûe_choo£r_gë_¸óã_fﬁdîs
 (
GtkFûeChoo£r
 *
choo£r
);

143 
	`gtk_fûe_choo£r_£t_cuºít_«me
 (
GtkFûeChoo£r
 *
choo£r
,

144 c⁄° 
gch¨
 *
«me
);

148 #ifde‡
G_OS_WIN32


150 
	#gtk_fûe_choo£r_gë_fûíame
 
gtk_fûe_choo£r_gë_fûíame_utf8


	)

151 
	#gtk_fûe_choo£r_£t_fûíame
 
gtk_fûe_choo£r_£t_fûíame_utf8


	)

152 
	#gtk_fûe_choo£r_£À˘_fûíame
 
gtk_fûe_choo£r_£À˘_fûíame_utf8


	)

153 
	#gtk_fûe_choo£r_un£À˘_fûíame
 
gtk_fûe_choo£r_un£À˘_fûíame_utf8


	)

154 
	#gtk_fûe_choo£r_gë_fûíames
 
gtk_fûe_choo£r_gë_fûíames_utf8


	)

155 
	#gtk_fûe_choo£r_£t_cuºít_fﬁdî
 
gtk_fûe_choo£r_£t_cuºít_fﬁdî_utf8


	)

156 
	#gtk_fûe_choo£r_gë_cuºít_fﬁdî
 
gtk_fûe_choo£r_gë_cuºít_fﬁdî_utf8


	)

157 
	#gtk_fûe_choo£r_gë_¥evõw_fûíame
 
gtk_fûe_choo£r_gë_¥evõw_fûíame_utf8


	)

158 
	#gtk_fûe_choo£r_add_sh‹tcut_fﬁdî
 
gtk_fûe_choo£r_add_sh‹tcut_fﬁdî_utf8


	)

159 
	#gtk_fûe_choo£r_ªmove_sh‹tcut_fﬁdî
 
gtk_fûe_choo£r_ªmove_sh‹tcut_fﬁdî_utf8


	)

160 
	#gtk_fûe_choo£r_li°_sh‹tcut_fﬁdîs
 
gtk_fûe_choo£r_li°_sh‹tcut_fﬁdîs_utf8


	)

163 
gch¨
 * 
	`gtk_fûe_choo£r_gë_fûíame
 (
GtkFûeChoo£r
 *
choo£r
);

164 
gboﬁón
 
	`gtk_fûe_choo£r_£t_fûíame
 (
GtkFûeChoo£r
 *
choo£r
,

165 c⁄° *
fûíame
);

166 
gboﬁón
 
	`gtk_fûe_choo£r_£À˘_fûíame
 (
GtkFûeChoo£r
 *
choo£r
,

167 c⁄° *
fûíame
);

168 
	`gtk_fûe_choo£r_un£À˘_fûíame
 (
GtkFûeChoo£r
 *
choo£r
,

169 c⁄° *
fûíame
);

170 
	`gtk_fûe_choo£r_£À˘_Æl
 (
GtkFûeChoo£r
 *
choo£r
);

171 
	`gtk_fûe_choo£r_un£À˘_Æl
 (
GtkFûeChoo£r
 *
choo£r
);

172 
GSLi°
 * 
	`gtk_fûe_choo£r_gë_fûíames
 (
GtkFûeChoo£r
 *
choo£r
);

173 
gboﬁón
 
	`gtk_fûe_choo£r_£t_cuºít_fﬁdî
 (
GtkFûeChoo£r
 *
choo£r
,

174 c⁄° 
gch¨
 *
fûíame
);

175 
gch¨
 * 
	`gtk_fûe_choo£r_gë_cuºít_fﬁdî
 (
GtkFûeChoo£r
 *
choo£r
);

180 
gch¨
 * 
	`gtk_fûe_choo£r_gë_uri
 (
GtkFûeChoo£r
 *
choo£r
);

181 
gboﬁón
 
	`gtk_fûe_choo£r_£t_uri
 (
GtkFûeChoo£r
 *
choo£r
,

182 c⁄° *
uri
);

183 
gboﬁón
 
	`gtk_fûe_choo£r_£À˘_uri
 (
GtkFûeChoo£r
 *
choo£r
,

184 c⁄° *
uri
);

185 
	`gtk_fûe_choo£r_un£À˘_uri
 (
GtkFûeChoo£r
 *
choo£r
,

186 c⁄° *
uri
);

187 
GSLi°
 * 
	`gtk_fûe_choo£r_gë_uris
 (
GtkFûeChoo£r
 *
choo£r
);

188 
gboﬁón
 
	`gtk_fûe_choo£r_£t_cuºít_fﬁdî_uri
 (
GtkFûeChoo£r
 *
choo£r
,

189 c⁄° 
gch¨
 *
uri
);

190 
gch¨
 * 
	`gtk_fûe_choo£r_gë_cuºít_fﬁdî_uri
 (
GtkFûeChoo£r
 *
choo£r
);

193 
GFûe
 * 
	`gtk_fûe_choo£r_gë_fûe
 (
GtkFûeChoo£r
 *
choo£r
);

194 
gboﬁón
 
	`gtk_fûe_choo£r_£t_fûe
 (
GtkFûeChoo£r
 *
choo£r
,

195 
GFûe
 *
fûe
,

196 
GEº‹
 **
îr‹
);

197 
gboﬁón
 
	`gtk_fûe_choo£r_£À˘_fûe
 (
GtkFûeChoo£r
 *
choo£r
,

198 
GFûe
 *
fûe
,

199 
GEº‹
 **
îr‹
);

200 
	`gtk_fûe_choo£r_un£À˘_fûe
 (
GtkFûeChoo£r
 *
choo£r
,

201 
GFûe
 *
fûe
);

202 
GSLi°
 * 
	`gtk_fûe_choo£r_gë_fûes
 (
GtkFûeChoo£r
 *
choo£r
);

203 
gboﬁón
 
	`gtk_fûe_choo£r_£t_cuºít_fﬁdî_fûe
 (
GtkFûeChoo£r
 *
choo£r
,

204 
GFûe
 *
fûe
,

205 
GEº‹
 **
îr‹
);

206 
GFûe
 * 
	`gtk_fûe_choo£r_gë_cuºít_fﬁdî_fûe
 (
GtkFûeChoo£r
 *
choo£r
);

210 
	`gtk_fûe_choo£r_£t_¥evõw_widgë
 (
GtkFûeChoo£r
 *
choo£r
,

211 
GtkWidgë
 *
¥evõw_widgë
);

212 
GtkWidgë
 *
	`gtk_fûe_choo£r_gë_¥evõw_widgë
 (
GtkFûeChoo£r
 *
choo£r
);

213 
	`gtk_fûe_choo£r_£t_¥evõw_widgë_a˘ive
 (
GtkFûeChoo£r
 *
choo£r
,

214 
gboﬁón
 
a˘ive
);

215 
gboﬁón
 
	`gtk_fûe_choo£r_gë_¥evõw_widgë_a˘ive
 (
GtkFûeChoo£r
 *
choo£r
);

216 
	`gtk_fûe_choo£r_£t_u£_¥evõw_œbñ
 (
GtkFûeChoo£r
 *
choo£r
,

217 
gboﬁón
 
u£_œbñ
);

218 
gboﬁón
 
	`gtk_fûe_choo£r_gë_u£_¥evõw_œbñ
 (
GtkFûeChoo£r
 *
choo£r
);

220 *
	`gtk_fûe_choo£r_gë_¥evõw_fûíame
 (
GtkFûeChoo£r
 *
choo£r
);

221 *
	`gtk_fûe_choo£r_gë_¥evõw_uri
 (
GtkFûeChoo£r
 *
choo£r
);

222 
GFûe
 *
	`gtk_fûe_choo£r_gë_¥evõw_fûe
 (
GtkFûeChoo£r
 *
choo£r
);

226 
	`gtk_fûe_choo£r_£t_exåa_widgë
 (
GtkFûeChoo£r
 *
choo£r
,

227 
GtkWidgë
 *
exåa_widgë
);

228 
GtkWidgë
 *
	`gtk_fûe_choo£r_gë_exåa_widgë
 (
GtkFûeChoo£r
 *
choo£r
);

232 
	`gtk_fûe_choo£r_add_fûãr
 (
GtkFûeChoo£r
 *
choo£r
,

233 
GtkFûeFûãr
 *
fûãr
);

234 
	`gtk_fûe_choo£r_ªmove_fûãr
 (
GtkFûeChoo£r
 *
choo£r
,

235 
GtkFûeFûãr
 *
fûãr
);

236 
GSLi°
 *
	`gtk_fûe_choo£r_li°_fûãrs
 (
GtkFûeChoo£r
 *
choo£r
);

240 
	`gtk_fûe_choo£r_£t_fûãr
 (
GtkFûeChoo£r
 *
choo£r
,

241 
GtkFûeFûãr
 *
fûãr
);

242 
GtkFûeFûãr
 *
	`gtk_fûe_choo£r_gë_fûãr
 (
GtkFûeChoo£r
 *
choo£r
);

246 
gboﬁón
 
	`gtk_fûe_choo£r_add_sh‹tcut_fﬁdî
 (
GtkFûeChoo£r
 *
choo£r
,

247 c⁄° *
fﬁdî
,

248 
GEº‹
 **
îr‹
);

249 
gboﬁón
 
	`gtk_fûe_choo£r_ªmove_sh‹tcut_fﬁdî
 (
GtkFûeChoo£r
 *
choo£r
,

250 c⁄° *
fﬁdî
,

251 
GEº‹
 **
îr‹
);

252 
GSLi°
 *
	`gtk_fûe_choo£r_li°_sh‹tcut_fﬁdîs
 (
GtkFûeChoo£r
 *
choo£r
);

254 
gboﬁón
 
	`gtk_fûe_choo£r_add_sh‹tcut_fﬁdî_uri
 (
GtkFûeChoo£r
 *
choo£r
,

255 c⁄° *
uri
,

256 
GEº‹
 **
îr‹
);

257 
gboﬁón
 
	`gtk_fûe_choo£r_ªmove_sh‹tcut_fﬁdî_uri
 (
GtkFûeChoo£r
 *
choo£r
,

258 c⁄° *
uri
,

259 
GEº‹
 **
îr‹
);

260 
GSLi°
 *
	`gtk_fûe_choo£r_li°_sh‹tcut_fﬁdî_uris
 (
GtkFûeChoo£r
 *
choo£r
);

262 
G_END_DECLS


	@/usr/include/gtk/gtkfilechooserbutton.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_FILE_CHOOSER_BUTTON_H__


26 
	#__GTK_FILE_CHOOSER_BUTTON_H__


	)

28 
	~<gtk/gtkhbox.h
>

29 
	~<gtk/gtkfûechoo£r.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_FILE_CHOOSER_BUTTON
 (
	`gtk_fûe_choo£r_buâ⁄_gë_ty≥
 ())

	)

34 
	#GTK_FILE_CHOOSER_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FILE_CHOOSER_BUTTON
, 
GtkFûeChoo£rBuâ⁄
))

	)

35 
	#GTK_FILE_CHOOSER_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FILE_CHOOSER_BUTTON
, 
GtkFûeChoo£rBuâ⁄Cœss
))

	)

36 
	#GTK_IS_FILE_CHOOSER_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FILE_CHOOSER_BUTTON
))

	)

37 
	#GTK_IS_FILE_CHOOSER_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FILE_CHOOSER_BUTTON
))

	)

38 
	#GTK_FILE_CHOOSER_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FILE_CHOOSER_BUTTON
, 
GtkFûeChoo£rBuâ⁄Cœss
))

	)

40 
_GtkFûeChoo£rBuâ⁄
 
	tGtkFûeChoo£rBuâ⁄
;

41 
_GtkFûeChoo£rBuâ⁄Priv©e
 
	tGtkFûeChoo£rBuâ⁄Priv©e
;

42 
_GtkFûeChoo£rBuâ⁄Cœss
 
	tGtkFûeChoo£rBuâ⁄Cœss
;

44 
	s_GtkFûeChoo£rBuâ⁄


47 
GtkHBox
 
	m∑ª¡
;

49 
GtkFûeChoo£rBuâ⁄Priv©e
 *
GSEAL
 (
¥iv
);

52 
	s_GtkFûeChoo£rBuâ⁄Cœss


55 
GtkHBoxCœss
 
	m∑ª¡_˛ass
;

57 (* 
	mfûe_£t
Ë(
GtkFûeChoo£rBuâ⁄
 *
	mfc
);

59 (*
	m__gtk_ª£rved1
);

60 (*
	m__gtk_ª£rved2
);

61 (*
	m__gtk_ª£rved3
);

62 (*
	m__gtk_ª£rved4
);

63 (*
	m__gtk_ª£rved5
);

64 (*
	m__gtk_ª£rved6
);

65 (*
	m__gtk_ª£rved7
);

69 
GTy≥
 
	$gtk_fûe_choo£r_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkWidgë
 * 
	`gtk_fûe_choo£r_buâ⁄_√w
 (c⁄° 
gch¨
 *
tôÀ
,

71 
GtkFûeChoo£rA˘i⁄
 
a˘i⁄
);

73 #i‚de‡
GTK_DISABLE_DEPRECATED


74 
GtkWidgë
 * 
	`gtk_fûe_choo£r_buâ⁄_√w_wôh_backíd
 (c⁄° 
gch¨
 *
tôÀ
,

75 
GtkFûeChoo£rA˘i⁄
 
a˘i⁄
,

76 c⁄° 
gch¨
 *
backíd
);

79 
GtkWidgë
 * 
	`gtk_fûe_choo£r_buâ⁄_√w_wôh_dülog
 (GtkWidgë *
dülog
);

80 
G_CONST_RETURN
 
gch¨
 *
	`gtk_fûe_choo£r_buâ⁄_gë_tôÀ
 (
GtkFûeChoo£rBuâ⁄
 *
buâ⁄
);

81 
	`gtk_fûe_choo£r_buâ⁄_£t_tôÀ
 (
GtkFûeChoo£rBuâ⁄
 *
buâ⁄
,

82 c⁄° 
gch¨
 *
tôÀ
);

83 
göt
 
	`gtk_fûe_choo£r_buâ⁄_gë_width_ch¨s
 (
GtkFûeChoo£rBuâ⁄
 *
buâ⁄
);

84 
	`gtk_fûe_choo£r_buâ⁄_£t_width_ch¨s
 (
GtkFûeChoo£rBuâ⁄
 *
buâ⁄
,

85 
göt
 
n_ch¨s
);

86 
gboﬁón
 
	`gtk_fûe_choo£r_buâ⁄_gë_focus_⁄_˛ick
 (
GtkFûeChoo£rBuâ⁄
 *
buâ⁄
);

87 
	`gtk_fûe_choo£r_buâ⁄_£t_focus_⁄_˛ick
 (
GtkFûeChoo£rBuâ⁄
 *
buâ⁄
,

88 
gboﬁón
 
focus_⁄_˛ick
);

90 
G_END_DECLS


	@/usr/include/gtk/gtkfilechooserdialog.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_FILE_CHOOSER_DIALOG_H__


26 
	#__GTK_FILE_CHOOSER_DIALOG_H__


	)

28 
	~<gtk/gtkdülog.h
>

29 
	~<gtk/gtkfûechoo£r.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_FILE_CHOOSER_DIALOG
 (
	`gtk_fûe_choo£r_dülog_gë_ty≥
 ())

	)

34 
	#GTK_FILE_CHOOSER_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FILE_CHOOSER_DIALOG
, 
GtkFûeChoo£rDülog
))

	)

35 
	#GTK_FILE_CHOOSER_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FILE_CHOOSER_DIALOG
, 
GtkFûeChoo£rDülogCœss
))

	)

36 
	#GTK_IS_FILE_CHOOSER_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FILE_CHOOSER_DIALOG
))

	)

37 
	#GTK_IS_FILE_CHOOSER_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FILE_CHOOSER_DIALOG
))

	)

38 
	#GTK_FILE_CHOOSER_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FILE_CHOOSER_DIALOG
, 
GtkFûeChoo£rDülogCœss
))

	)

40 
_GtkFûeChoo£rDülog
 
	tGtkFûeChoo£rDülog
;

41 
_GtkFûeChoo£rDülogPriv©e
 
	tGtkFûeChoo£rDülogPriv©e
;

42 
_GtkFûeChoo£rDülogCœss
 
	tGtkFûeChoo£rDülogCœss
;

44 
	s_GtkFûeChoo£rDülog


46 
GtkDülog
 
	m∑ª¡_ö°™˚
;

48 
GtkFûeChoo£rDülogPriv©e
 *
GSEAL
 (
¥iv
);

51 
	s_GtkFûeChoo£rDülogCœss


53 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

56 
GTy≥
 
	$gtk_fûe_choo£r_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

57 
GtkWidgë
 *
	$gtk_fûe_choo£r_dülog_√w
 (c⁄° 
gch¨
 *
tôÀ
,

58 
GtkWödow
 *
∑ª¡
,

59 
GtkFûeChoo£rA˘i⁄
 
a˘i⁄
,

60 c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

61 ...Ë
G_GNUC_NULL_TERMINATED
;

63 #i‚de‡
GTK_DISABLE_DEPRECATED


64 
GtkWidgë
 *
	$gtk_fûe_choo£r_dülog_√w_wôh_backíd
 (c⁄° 
gch¨
 *
tôÀ
,

65 
GtkWödow
 *
∑ª¡
,

66 
GtkFûeChoo£rA˘i⁄
 
a˘i⁄
,

67 c⁄° 
gch¨
 *
backíd
,

68 c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

69 ...Ë
G_GNUC_NULL_TERMINATED
;

72 
G_END_DECLS


	@/usr/include/gtk/gtkfilechooserwidget.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_FILE_CHOOSER_WIDGET_H__


26 
	#__GTK_FILE_CHOOSER_WIDGET_H__


	)

28 
	~<gtk/gtkfûechoo£r.h
>

29 
	~<gtk/gtkvbox.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_FILE_CHOOSER_WIDGET
 (
	`gtk_fûe_choo£r_widgë_gë_ty≥
 ())

	)

34 
	#GTK_FILE_CHOOSER_WIDGET
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FILE_CHOOSER_WIDGET
, 
GtkFûeChoo£rWidgë
))

	)

35 
	#GTK_FILE_CHOOSER_WIDGET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FILE_CHOOSER_WIDGET
, 
GtkFûeChoo£rWidgëCœss
))

	)

36 
	#GTK_IS_FILE_CHOOSER_WIDGET
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FILE_CHOOSER_WIDGET
))

	)

37 
	#GTK_IS_FILE_CHOOSER_WIDGET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FILE_CHOOSER_WIDGET
))

	)

38 
	#GTK_FILE_CHOOSER_WIDGET_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FILE_CHOOSER_WIDGET
, 
GtkFûeChoo£rWidgëCœss
))

	)

40 
_GtkFûeChoo£rWidgë
 
	tGtkFûeChoo£rWidgë
;

41 
_GtkFûeChoo£rWidgëPriv©e
 
	tGtkFûeChoo£rWidgëPriv©e
;

42 
_GtkFûeChoo£rWidgëCœss
 
	tGtkFûeChoo£rWidgëCœss
;

44 
	s_GtkFûeChoo£rWidgë


46 
GtkVBox
 
	m∑ª¡_ö°™˚
;

48 
GtkFûeChoo£rWidgëPriv©e
 *
GSEAL
 (
¥iv
);

51 
	s_GtkFûeChoo£rWidgëCœss


53 
GtkVBoxCœss
 
	m∑ª¡_˛ass
;

56 
GTy≥
 
	$gtk_fûe_choo£r_widgë_gë_ty≥
 (Ë
G_GNUC_CONST
;

57 
GtkWidgë
 *
	`gtk_fûe_choo£r_widgë_√w
 (
GtkFûeChoo£rA˘i⁄
 
a˘i⁄
);

60 #i‚de‡
GTK_DISABLE_DEPRECATED


61 
GtkWidgë
 *
	`gtk_fûe_choo£r_widgë_√w_wôh_backíd
 (
GtkFûeChoo£rA˘i⁄
 
a˘i⁄
,

62 c⁄° 
gch¨
 *
backíd
);

65 
G_END_DECLS


	@/usr/include/gtk/gtkfilefilter.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_FILE_FILTER_H__


26 
	#__GTK_FILE_FILTER_H__


	)

28 
	~<glib-obje˘.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_FILE_FILTER
 (
	`gtk_fûe_fûãr_gë_ty≥
 ())

	)

33 
	#GTK_FILE_FILTER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FILE_FILTER
, 
GtkFûeFûãr
))

	)

34 
	#GTK_IS_FILE_FILTER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FILE_FILTER
))

	)

36 
_GtkFûeFûãr
 
	tGtkFûeFûãr
;

37 
_GtkFûeFûãrInfo
 
	tGtkFûeFûãrInfo
;

40 
	mGTK_FILE_FILTER_FILENAME
 = 1 << 0,

41 
	mGTK_FILE_FILTER_URI
 = 1 << 1,

42 
	mGTK_FILE_FILTER_DISPLAY_NAME
 = 1 << 2,

43 
	mGTK_FILE_FILTER_MIME_TYPE
 = 1 << 3

44 } 
	tGtkFûeFûãrFœgs
;

46 
	$gboﬁón
 (*
	tGtkFûeFûãrFunc
Ë(c⁄° 
	tGtkFûeFûãrInfo
 *
	tfûãr_öfo
,

47 
	tgpoöãr
 
	td©a
);

49 
	s_GtkFûeFûãrInfo


51 
GtkFûeFûãrFœgs
 
c⁄èös
;

53 c⁄° 
gch¨
 *
fûíame
;

54 c⁄° 
gch¨
 *
uri
;

55 c⁄° 
gch¨
 *
di•œy_«me
;

56 c⁄° 
gch¨
 *
mime_ty≥
;

59 
GTy≥
 
	$gtk_fûe_fûãr_gë_ty≥
 (Ë
G_GNUC_CONST
;

61 
GtkFûeFûãr
 * 
	`gtk_fûe_fûãr_√w
 ();

62 
	`gtk_fûe_fûãr_£t_«me
 (
GtkFûeFûãr
 *
fûãr
,

63 c⁄° 
gch¨
 *
«me
);

64 
G_CONST_RETURN
 
gch¨
 *
	`gtk_fûe_fûãr_gë_«me
 (
GtkFûeFûãr
 *
fûãr
);

66 
	`gtk_fûe_fûãr_add_mime_ty≥
 (
GtkFûeFûãr
 *
fûãr
,

67 c⁄° 
gch¨
 *
mime_ty≥
);

68 
	`gtk_fûe_fûãr_add_∑âîn
 (
GtkFûeFûãr
 *
fûãr
,

69 c⁄° 
gch¨
 *
∑âîn
);

70 
	`gtk_fûe_fûãr_add_pixbuf_f‹m©s
 (
GtkFûeFûãr
 *
fûãr
);

71 
	`gtk_fûe_fûãr_add_cu°om
 (
GtkFûeFûãr
 *
fûãr
,

72 
GtkFûeFûãrFœgs
 
√eded
,

73 
GtkFûeFûãrFunc
 
func
,

74 
gpoöãr
 
d©a
,

75 
GDe°royNŸify
 
nŸify
);

77 
GtkFûeFûãrFœgs
 
	`gtk_fûe_fûãr_gë_√eded
 (
GtkFûeFûãr
 *
fûãr
);

78 
gboﬁón
 
	`gtk_fûe_fûãr_fûãr
 (
GtkFûeFûãr
 *
fûãr
,

79 c⁄° 
GtkFûeFûãrInfo
 *
fûãr_öfo
);

81 
G_END_DECLS


	@/usr/include/gtk/gtkfilesel.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_FILESEL_H__


30 
	#__GTK_FILESEL_H__


	)

32 
	~<gtk/gtk.h
>

35 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_FILE_SELECTION
 (
	`gtk_fûe_£À˘i⁄_gë_ty≥
 ())

	)

39 
	#GTK_FILE_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FILE_SELECTION
, 
GtkFûeSñe˘i⁄
))

	)

40 
	#GTK_FILE_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FILE_SELECTION
, 
GtkFûeSñe˘i⁄Cœss
))

	)

41 
	#GTK_IS_FILE_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FILE_SELECTION
))

	)

42 
	#GTK_IS_FILE_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FILE_SELECTION
))

	)

43 
	#GTK_FILE_SELECTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FILE_SELECTION
, 
GtkFûeSñe˘i⁄Cœss
))

	)

46 
_GtkFûeSñe˘i⁄
 
	tGtkFûeSñe˘i⁄
;

47 
_GtkFûeSñe˘i⁄Cœss
 
	tGtkFûeSñe˘i⁄Cœss
;

49 
	s_GtkFûeSñe˘i⁄


52 
GtkDülog
 
	m∑ª¡_ö°™˚
;

55 
GtkWidgë
 *
	mdú_li°
;

56 
GtkWidgë
 *
	mfûe_li°
;

57 
GtkWidgë
 *
	m£À˘i⁄_íåy
;

58 
GtkWidgë
 *
	m£À˘i⁄_ãxt
;

59 
GtkWidgë
 *
	mmaö_vbox
;

60 
GtkWidgë
 *
	mok_buâ⁄
;

61 
GtkWidgë
 *
	mˇn˚l_buâ⁄
;

62 
GtkWidgë
 *
	mhñp_buâ⁄
;

63 
GtkWidgë
 *
	mhi°‹y_puŒdown
;

64 
GtkWidgë
 *
	mhi°‹y_míu
;

65 
GLi°
 *
	mhi°‹y_li°
;

66 
GtkWidgë
 *
	mfûe›_dülog
;

67 
GtkWidgë
 *
	mfûe›_íåy
;

68 
gch¨
 *
	mfûe›_fûe
;

69 
gpoöãr
 
	mcm∂_°©e
;

71 
GtkWidgë
 *
	mfûe›_c_dú
;

72 
GtkWidgë
 *
	mfûe›_dñ_fûe
;

73 
GtkWidgë
 *
	mfûe›_ªn_fûe
;

75 
GtkWidgë
 *
	mbuâ⁄_¨ó
;

76 
GtkWidgë
 *
	ma˘i⁄_¨ó
;

79 
GPåAºay
 *
	m£À˘ed_«mes
;

80 
gch¨
 *
	mœ°_£À˘ed
;

83 
	s_GtkFûeSñe˘i⁄Cœss


85 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

88 (*
	m_gtk_ª£rved1
) ();

89 (*
	m_gtk_ª£rved2
) ();

90 (*
	m_gtk_ª£rved3
) ();

91 (*
	m_gtk_ª£rved4
) ();

95 #ifde‡
G_OS_WIN32


97 
	#gtk_fûe_£À˘i⁄_gë_fûíame
 
gtk_fûe_£À˘i⁄_gë_fûíame_utf8


	)

98 
	#gtk_fûe_£À˘i⁄_£t_fûíame
 
gtk_fûe_£À˘i⁄_£t_fûíame_utf8


	)

99 
	#gtk_fûe_£À˘i⁄_gë_£À˘i⁄s
 
gtk_fûe_£À˘i⁄_gë_£À˘i⁄s_utf8


	)

102 
GTy≥
 
	$gtk_fûe_£À˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

103 
GtkWidgë
* 
	`gtk_fûe_£À˘i⁄_√w
 (c⁄° 
gch¨
 *
tôÀ
);

104 
	`gtk_fûe_£À˘i⁄_£t_fûíame
 (
GtkFûeSñe˘i⁄
 *
fûe£l
,

105 c⁄° 
gch¨
 *
fûíame
);

106 
G_CONST_RETURN
 
gch¨
* 
	`gtk_fûe_£À˘i⁄_gë_fûíame
 (
GtkFûeSñe˘i⁄
 *
fûe£l
);

108 
	`gtk_fûe_£À˘i⁄_com∂ëe
 (
GtkFûeSñe˘i⁄
 *
fûe£l
,

109 c⁄° 
gch¨
 *
∑âîn
);

110 
	`gtk_fûe_£À˘i⁄_show_fûe›_buâ⁄s
 (
GtkFûeSñe˘i⁄
 *
fûe£l
);

111 
	`gtk_fûe_£À˘i⁄_hide_fûe›_buâ⁄s
 (
GtkFûeSñe˘i⁄
 *
fûe£l
);

113 
gch¨
** 
	`gtk_fûe_£À˘i⁄_gë_£À˘i⁄s
 (
GtkFûeSñe˘i⁄
 *
fûe£l
);

115 
	`gtk_fûe_£À˘i⁄_£t_£À˘_mu…ùÀ
 (
GtkFûeSñe˘i⁄
 *
fûe£l
,

116 
gboﬁón
 
£À˘_mu…ùÀ
);

117 
gboﬁón
 
	`gtk_fûe_£À˘i⁄_gë_£À˘_mu…ùÀ
 (
GtkFûeSñe˘i⁄
 *
fûe£l
);

120 
G_END_DECLS


	@/usr/include/gtk/gtkfixed.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_FIXED_H__


32 
	#__GTK_FIXED_H__


	)

35 
	~<gtk/gtkc⁄èöî.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_FIXED
 (
	`gtk_fixed_gë_ty≥
 ())

	)

41 
	#GTK_FIXED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FIXED
, 
GtkFixed
))

	)

42 
	#GTK_FIXED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FIXED
, 
GtkFixedCœss
))

	)

43 
	#GTK_IS_FIXED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FIXED
))

	)

44 
	#GTK_IS_FIXED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FIXED
))

	)

45 
	#GTK_FIXED_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FIXED
, 
GtkFixedCœss
))

	)

48 
_GtkFixed
 
	tGtkFixed
;

49 
_GtkFixedCœss
 
	tGtkFixedCœss
;

50 
_GtkFixedChûd
 
	tGtkFixedChûd
;

52 
	s_GtkFixed


54 
GtkC⁄èöî
 
	mc⁄èöî
;

56 
GLi°
 *
GSEAL
 (
chûdªn
);

59 
	s_GtkFixedCœss


61 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

64 
	s_GtkFixedChûd


66 
GtkWidgë
 *
	mwidgë
;

67 
göt
 
	mx
;

68 
göt
 
	my
;

72 
GTy≥
 
	$gtk_fixed_gë_ty≥
 (Ë
G_GNUC_CONST
;

73 
GtkWidgë
* 
	`gtk_fixed_√w
 ();

74 
	`gtk_fixed_put
 (
GtkFixed
 *
fixed
,

75 
GtkWidgë
 *
widgë
,

76 
göt
 
x
,

77 
göt
 
y
);

78 
	`gtk_fixed_move
 (
GtkFixed
 *
fixed
,

79 
GtkWidgë
 *
widgë
,

80 
göt
 
x
,

81 
göt
 
y
);

82 #i‚de‡
GTK_DISABLE_DEPRECATED


83 
	`gtk_fixed_£t_has_wödow
 (
GtkFixed
 *
fixed
,

84 
gboﬁón
 
has_wödow
);

85 
gboﬁón
 
	`gtk_fixed_gë_has_wödow
 (
GtkFixed
 *
fixed
);

88 
G_END_DECLS


	@/usr/include/gtk/gtkfontbutton.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_FONT_BUTTON_H__


32 
	#__GTK_FONT_BUTTON_H__


	)

34 
	~<gtk/gtkbuâ⁄.h
>

37 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_FONT_BUTTON
 (
	`gtk_f⁄t_buâ⁄_gë_ty≥
 ())

	)

43 
	#GTK_FONT_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FONT_BUTTON
, 
GtkF⁄tBuâ⁄
))

	)

44 
	#GTK_FONT_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FONT_BUTTON
, 
GtkF⁄tBuâ⁄Cœss
))

	)

45 
	#GTK_IS_FONT_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FONT_BUTTON
))

	)

46 
	#GTK_IS_FONT_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FONT_BUTTON
))

	)

47 
	#GTK_FONT_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FONT_BUTTON
, 
GtkF⁄tBuâ⁄Cœss
))

	)

49 
_GtkF⁄tBuâ⁄
 
	tGtkF⁄tBuâ⁄
;

50 
_GtkF⁄tBuâ⁄Cœss
 
	tGtkF⁄tBuâ⁄Cœss
;

51 
_GtkF⁄tBuâ⁄Priv©e
 
	tGtkF⁄tBuâ⁄Priv©e
;

53 
	s_GtkF⁄tBuâ⁄
 {

54 
GtkBuâ⁄
 
	mbuâ⁄
;

57 
GtkF⁄tBuâ⁄Priv©e
 *
GSEAL
 (
¥iv
);

60 
	s_GtkF⁄tBuâ⁄Cœss
 {

61 
GtkBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

64 (* 
	mf⁄t_£t
Ë(
GtkF⁄tBuâ⁄
 *
	mgÂ
);

67 (*
	m_gtk_ª£rved1
) ();

68 (*
	m_gtk_ª£rved2
) ();

69 (*
	m_gtk_ª£rved3
) ();

70 (*
	m_gtk_ª£rved4
) ();

74 
GTy≥
 
	$gtk_f⁄t_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

75 
GtkWidgë
 *
	`gtk_f⁄t_buâ⁄_√w
 ();

76 
GtkWidgë
 *
	`gtk_f⁄t_buâ⁄_√w_wôh_f⁄t
 (c⁄° 
gch¨
 *
f⁄äame
);

78 
G_CONST_RETURN
 
gch¨
 *
	`gtk_f⁄t_buâ⁄_gë_tôÀ
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
);

79 
	`gtk_f⁄t_buâ⁄_£t_tôÀ
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
,

80 c⁄° 
gch¨
 *
tôÀ
);

81 
gboﬁón
 
	`gtk_f⁄t_buâ⁄_gë_u£_f⁄t
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
);

82 
	`gtk_f⁄t_buâ⁄_£t_u£_f⁄t
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
,

83 
gboﬁón
 
u£_f⁄t
);

84 
gboﬁón
 
	`gtk_f⁄t_buâ⁄_gë_u£_size
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
);

85 
	`gtk_f⁄t_buâ⁄_£t_u£_size
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
,

86 
gboﬁón
 
u£_size
);

87 
G_CONST_RETURN
 
gch¨
* 
	`gtk_f⁄t_buâ⁄_gë_f⁄t_«me
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
);

88 
gboﬁón
 
	`gtk_f⁄t_buâ⁄_£t_f⁄t_«me
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
,

89 c⁄° 
gch¨
 *
f⁄äame
);

90 
gboﬁón
 
	`gtk_f⁄t_buâ⁄_gë_show_°yÀ
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
);

91 
	`gtk_f⁄t_buâ⁄_£t_show_°yÀ
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
,

92 
gboﬁón
 
show_°yÀ
);

93 
gboﬁón
 
	`gtk_f⁄t_buâ⁄_gë_show_size
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
);

94 
	`gtk_f⁄t_buâ⁄_£t_show_size
 (
GtkF⁄tBuâ⁄
 *
f⁄t_buâ⁄
,

95 
gboﬁón
 
show_size
);

97 
G_END_DECLS


	@/usr/include/gtk/gtkfontsel.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_FONTSEL_H__


36 
	#__GTK_FONTSEL_H__


	)

39 
	~<gtk/gtkdülog.h
>

40 
	~<gtk/gtkvbox.h
>

43 
	gG_BEGIN_DECLS


45 
	#GTK_TYPE_FONT_SELECTION
 (
	`gtk_f⁄t_£À˘i⁄_gë_ty≥
 ())

	)

46 
	#GTK_FONT_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FONT_SELECTION
, 
GtkF⁄tSñe˘i⁄
))

	)

47 
	#GTK_FONT_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FONT_SELECTION
, 
GtkF⁄tSñe˘i⁄Cœss
))

	)

48 
	#GTK_IS_FONT_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FONT_SELECTION
))

	)

49 
	#GTK_IS_FONT_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FONT_SELECTION
))

	)

50 
	#GTK_FONT_SELECTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FONT_SELECTION
, 
GtkF⁄tSñe˘i⁄Cœss
))

	)

53 
	#GTK_TYPE_FONT_SELECTION_DIALOG
 (
	`gtk_f⁄t_£À˘i⁄_dülog_gë_ty≥
 ())

	)

54 
	#GTK_FONT_SELECTION_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FONT_SELECTION_DIALOG
, 
GtkF⁄tSñe˘i⁄Dülog
))

	)

55 
	#GTK_FONT_SELECTION_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FONT_SELECTION_DIALOG
, 
GtkF⁄tSñe˘i⁄DülogCœss
))

	)

56 
	#GTK_IS_FONT_SELECTION_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FONT_SELECTION_DIALOG
))

	)

57 
	#GTK_IS_FONT_SELECTION_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FONT_SELECTION_DIALOG
))

	)

58 
	#GTK_FONT_SELECTION_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FONT_SELECTION_DIALOG
, 
GtkF⁄tSñe˘i⁄DülogCœss
))

	)

61 
_GtkF⁄tSñe˘i⁄
 
	tGtkF⁄tSñe˘i⁄
;

62 
_GtkF⁄tSñe˘i⁄Cœss
 
	tGtkF⁄tSñe˘i⁄Cœss
;

64 
_GtkF⁄tSñe˘i⁄Dülog
 
	tGtkF⁄tSñe˘i⁄Dülog
;

65 
_GtkF⁄tSñe˘i⁄DülogCœss
 
	tGtkF⁄tSñe˘i⁄DülogCœss
;

67 
	s_GtkF⁄tSñe˘i⁄


69 
GtkVBox
 
	m∑ª¡_ö°™˚
;

71 
GtkWidgë
 *
GSEAL
 (
f⁄t_íåy
);

72 
GtkWidgë
 *
GSEAL
 (
Ámûy_li°
);

73 
GtkWidgë
 *
GSEAL
 (
f⁄t_°yÀ_íåy
);

74 
GtkWidgë
 *
GSEAL
 (
Á˚_li°
);

75 
GtkWidgë
 *
GSEAL
 (
size_íåy
);

76 
GtkWidgë
 *
GSEAL
 (
size_li°
);

77 
GtkWidgë
 *
GSEAL
 (
pixñs_buâ⁄
);

78 
GtkWidgë
 *
GSEAL
 (
poöts_buâ⁄
);

79 
GtkWidgë
 *
GSEAL
 (
fûãr_buâ⁄
);

80 
GtkWidgë
 *
GSEAL
 (
¥evõw_íåy
);

82 
P™goF⁄tFamûy
 *
GSEAL
 (
Ámûy
);

83 
P™goF⁄tFa˚
 *
GSEAL
 (
Á˚
);

85 
göt
 
GSEAL
 (
size
);

87 
GdkF⁄t
 *
GSEAL
 (
f⁄t
);

92 
	s_GtkF⁄tSñe˘i⁄Cœss


94 
GtkVBoxCœss
 
	m∑ª¡_˛ass
;

97 (*
	m_gtk_ª£rved1
) ();

98 (*
	m_gtk_ª£rved2
) ();

99 (*
	m_gtk_ª£rved3
) ();

100 (*
	m_gtk_ª£rved4
) ();

103 
	s_GtkF⁄tSñe˘i⁄Dülog


105 
GtkDülog
 
	m∑ª¡_ö°™˚
;

108 
GtkWidgë
 *
GSEAL
 (
f⁄t£l
);

110 
GtkWidgë
 *
GSEAL
 (
maö_vbox
);

111 
GtkWidgë
 *
GSEAL
 (
a˘i⁄_¨ó
);

114 
GtkWidgë
 *
GSEAL
 (
ok_buâ⁄
);

115 
GtkWidgë
 *
GSEAL
 (
≠∂y_buâ⁄
);

116 
GtkWidgë
 *
GSEAL
 (
ˇn˚l_buâ⁄
);

123 
göt
 
GSEAL
 (
dülog_width
);

124 
gboﬁón
 
GSEAL
 (
auto_ªsize
);

127 
	s_GtkF⁄tSñe˘i⁄DülogCœss


129 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

132 (*
	m_gtk_ª£rved1
) ();

133 (*
	m_gtk_ª£rved2
) ();

134 (*
	m_gtk_ª£rved3
) ();

135 (*
	m_gtk_ª£rved4
) ();

145 
GTy≥
 
	$gtk_f⁄t_£À˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

146 
GtkWidgë
 * 
	`gtk_f⁄t_£À˘i⁄_√w
 ();

147 
GtkWidgë
 * 
	`gtk_f⁄t_£À˘i⁄_gë_Ámûy_li°
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

148 
GtkWidgë
 * 
	`gtk_f⁄t_£À˘i⁄_gë_Á˚_li°
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

149 
GtkWidgë
 * 
	`gtk_f⁄t_£À˘i⁄_gë_size_íåy
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

150 
GtkWidgë
 * 
	`gtk_f⁄t_£À˘i⁄_gë_size_li°
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

151 
GtkWidgë
 * 
	`gtk_f⁄t_£À˘i⁄_gë_¥evõw_íåy
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

152 
P™goF⁄tFamûy
 *

153 
	`gtk_f⁄t_£À˘i⁄_gë_Ámûy
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

154 
P™goF⁄tFa˚
 *

155 
	`gtk_f⁄t_£À˘i⁄_gë_Á˚
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

156 
göt
 
	`gtk_f⁄t_£À˘i⁄_gë_size
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

157 
gch¨
* 
	`gtk_f⁄t_£À˘i⁄_gë_f⁄t_«me
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

159 #i‚de‡
GTK_DISABLE_DEPRECATED


160 
GdkF⁄t
* 
	`gtk_f⁄t_£À˘i⁄_gë_f⁄t
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

163 
gboﬁón
 
	`gtk_f⁄t_£À˘i⁄_£t_f⁄t_«me
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
,

164 c⁄° 
gch¨
 *
f⁄äame
);

165 c⁄° 
gch¨
* 
	`gtk_f⁄t_£À˘i⁄_gë_¥evõw_ãxt
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
);

166 
	`gtk_f⁄t_£À˘i⁄_£t_¥evõw_ãxt
 (
GtkF⁄tSñe˘i⁄
 *
f⁄t£l
,

167 c⁄° 
gch¨
 *
ãxt
);

175 
GTy≥
 
	$gtk_f⁄t_£À˘i⁄_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

176 
GtkWidgë
 *
	`gtk_f⁄t_£À˘i⁄_dülog_√w
 (c⁄° 
gch¨
 *
tôÀ
);

178 
GtkWidgë
 *
	`gtk_f⁄t_£À˘i⁄_dülog_gë_ok_buâ⁄
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
);

179 #i‚de‡
GTK_DISABLE_DEPRECATED


180 
GtkWidgë
 *
	`gtk_f⁄t_£À˘i⁄_dülog_gë_≠∂y_buâ⁄
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
);

182 
GtkWidgë
 *
	`gtk_f⁄t_£À˘i⁄_dülog_gë_ˇn˚l_buâ⁄
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
);

189 
gch¨
* 
	`gtk_f⁄t_£À˘i⁄_dülog_gë_f⁄t_«me
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
);

191 #i‚de‡
GTK_DISABLE_DEPRECATED


195 
GdkF⁄t
* 
	`gtk_f⁄t_£À˘i⁄_dülog_gë_f⁄t
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
);

202 
gboﬁón
 
	`gtk_f⁄t_£À˘i⁄_dülog_£t_f⁄t_«me
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
,

203 c⁄° 
gch¨
 *
f⁄äame
);

207 
G_CONST_RETURN
 
gch¨
*

208 
	`gtk_f⁄t_£À˘i⁄_dülog_gë_¥evõw_ãxt
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
);

212 
	`gtk_f⁄t_£À˘i⁄_dülog_£t_¥evõw_ãxt
 (
GtkF⁄tSñe˘i⁄Dülog
 *
fsd
,

213 c⁄° 
gch¨
 *
ãxt
);

216 
G_END_DECLS


	@/usr/include/gtk/gtkframe.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_FRAME_H__


32 
	#__GTK_FRAME_H__


	)

35 
	~<gtk/gtkbö.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_FRAME
 (
	`gtk_‰ame_gë_ty≥
 ())

	)

42 
	#GTK_FRAME
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_FRAME
, 
GtkFøme
))

	)

43 
	#GTK_FRAME_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_FRAME
, 
GtkFømeCœss
))

	)

44 
	#GTK_IS_FRAME
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_FRAME
))

	)

45 
	#GTK_IS_FRAME_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_FRAME
))

	)

46 
	#GTK_FRAME_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_FRAME
, 
GtkFømeCœss
))

	)

49 
_GtkFøme
 
	tGtkFøme
;

50 
_GtkFømeCœss
 
	tGtkFømeCœss
;

52 
	s_GtkFøme


54 
GtkBö
 
	mbö
;

56 
GtkWidgë
 *
GSEAL
 (
œbñ_widgë
);

57 
göt16
 
GSEAL
 (
shadow_ty≥
);

58 
gÊﬂt
 
GSEAL
 (
œbñ_xÆign
);

59 
gÊﬂt
 
GSEAL
 (
œbñ_yÆign
);

61 
GtkAŒoˇti⁄
 
GSEAL
 (
chûd_Æloˇti⁄
);

64 
	s_GtkFømeCœss


66 
GtkBöCœss
 
	m∑ª¡_˛ass
;

68 (*
	mcompuã_chûd_Æloˇti⁄
Ë(
GtkFøme
 *
	m‰ame
, 
GtkAŒoˇti⁄
 *
	mÆloˇti⁄
);

72 
GTy≥
 
	$gtk_‰ame_gë_ty≥
 (Ë
G_GNUC_CONST
;

73 
GtkWidgë
* 
	`gtk_‰ame_√w
 (c⁄° 
gch¨
 *
œbñ
);

75 
	`gtk_‰ame_£t_œbñ
 (
GtkFøme
 *
‰ame
,

76 c⁄° 
gch¨
 *
œbñ
);

77 
G_CONST_RETURN
 
gch¨
 *
	`gtk_‰ame_gë_œbñ
 (
GtkFøme
 *
‰ame
);

79 
	`gtk_‰ame_£t_œbñ_widgë
 (
GtkFøme
 *
‰ame
,

80 
GtkWidgë
 *
œbñ_widgë
);

81 
GtkWidgë
 *
	`gtk_‰ame_gë_œbñ_widgë
 (
GtkFøme
 *
‰ame
);

82 
	`gtk_‰ame_£t_œbñ_Æign
 (
GtkFøme
 *
‰ame
,

83 
gÊﬂt
 
xÆign
,

84 
gÊﬂt
 
yÆign
);

85 
	`gtk_‰ame_gë_œbñ_Æign
 (
GtkFøme
 *
‰ame
,

86 
gÊﬂt
 *
xÆign
,

87 
gÊﬂt
 *
yÆign
);

88 
	`gtk_‰ame_£t_shadow_ty≥
 (
GtkFøme
 *
‰ame
,

89 
GtkShadowTy≥
 
ty≥
);

90 
GtkShadowTy≥
 
	`gtk_‰ame_gë_shadow_ty≥
 (
GtkFøme
 *
‰ame
);

93 
G_END_DECLS


	@/usr/include/gtk/gtkgamma.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_GAMMA_CURVE_H__


30 
	#__GTK_GAMMA_CURVE_H__


	)

33 
	~<gtk/gtkvbox.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_GAMMA_CURVE
 (
	`gtk_gamma_curve_gë_ty≥
 ())

	)

39 
	#GTK_GAMMA_CURVE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_GAMMA_CURVE
, 
GtkGammaCurve
))

	)

40 
	#GTK_GAMMA_CURVE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_GAMMA_CURVE
, 
GtkGammaCurveCœss
))

	)

41 
	#GTK_IS_GAMMA_CURVE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_GAMMA_CURVE
))

	)

42 
	#GTK_IS_GAMMA_CURVE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_GAMMA_CURVE
))

	)

43 
	#GTK_GAMMA_CURVE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_GAMMA_CURVE
, 
GtkGammaCurveCœss
))

	)

45 
_GtkGammaCurve
 
	tGtkGammaCurve
;

46 
_GtkGammaCurveCœss
 
	tGtkGammaCurveCœss
;

49 
	s_GtkGammaCurve


51 
GtkVBox
 
	mvbox
;

53 
GtkWidgë
 *
GSEAL
 (
èbÀ
);

54 
GtkWidgë
 *
GSEAL
 (
curve
);

55 
GtkWidgë
 *
GSEAL
 (
buâ⁄
[5]);

57 
gÊﬂt
 
GSEAL
 (
gamma
);

58 
GtkWidgë
 *
GSEAL
 (
gamma_dülog
);

59 
GtkWidgë
 *
GSEAL
 (
gamma_ãxt
);

62 
	s_GtkGammaCurveCœss


64 
GtkVBoxCœss
 
	m∑ª¡_˛ass
;

67 (*
	m_gtk_ª£rved1
) ();

68 (*
	m_gtk_ª£rved2
) ();

69 (*
	m_gtk_ª£rved3
) ();

70 (*
	m_gtk_ª£rved4
) ();

74 
GTy≥
 
	$gtk_gamma_curve_gë_ty≥
 (Ë
G_GNUC_CONST
;

75 
GtkWidgë
* 
	`gtk_gamma_curve_√w
 ();

78 
G_END_DECLS


	@/usr/include/gtk/gtkgc.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_GC_H__


32 
	#__GTK_GC_H__


	)

35 
	~<gdk/gdk.h
>

38 
G_BEGIN_DECLS


40 
GdkGC
* 
gtk_gc_gë
 (
göt
 
dïth
,

41 
GdkCﬁ‹m≠
 *
cﬁ‹m≠
,

42 
GdkGCVÆues
 *
vÆues
,

43 
GdkGCVÆuesMask
 
vÆues_mask
);

44 
gtk_gc_ªÀa£
 (
GdkGC
 *
gc
);

47 
	gG_END_DECLS


	@/usr/include/gtk/gtkhandlebox.h

32 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

36 #i‚de‡
__GTK_HANDLE_BOX_H__


37 
	#__GTK_HANDLE_BOX_H__


	)

40 
	~<gtk/gtkbö.h
>

43 
	gG_BEGIN_DECLS


45 
	#GTK_TYPE_HANDLE_BOX
 (
	`gtk_h™dÀ_box_gë_ty≥
 ())

	)

46 
	#GTK_HANDLE_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HANDLE_BOX
, 
GtkH™dÀBox
))

	)

47 
	#GTK_HANDLE_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HANDLE_BOX
, 
GtkH™dÀBoxCœss
))

	)

48 
	#GTK_IS_HANDLE_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HANDLE_BOX
))

	)

49 
	#GTK_IS_HANDLE_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HANDLE_BOX
))

	)

50 
	#GTK_HANDLE_BOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HANDLE_BOX
, 
GtkH™dÀBoxCœss
))

	)

53 
_GtkH™dÀBox
 
	tGtkH™dÀBox
;

54 
_GtkH™dÀBoxCœss
 
	tGtkH™dÀBoxCœss
;

56 
	s_GtkH™dÀBox


58 
GtkBö
 
	mbö
;

60 
GdkWödow
 *
GSEAL
 (
bö_wödow
);

61 
GdkWödow
 *
GSEAL
 (
Êﬂt_wödow
);

62 
GtkShadowTy≥
 
GSEAL
 (
shadow_ty≥
);

63 
guöt
 
GSEAL
 (
h™dÀ_posôi⁄
) : 2;

64 
guöt
 
GSEAL
 (
Êﬂt_wödow_m≠≥d
) : 1;

65 
guöt
 
GSEAL
 (
chûd_dëached
) : 1;

66 
guöt
 
GSEAL
 (
ö_døg
) : 1;

67 
guöt
 
GSEAL
 (
shrök_⁄_dëach
) : 1;

69 sig√d 
GSEAL
 (
¢≠_edge
 : 3);

73 
göt
 
GSEAL
 (
deskoff_x
);

74 
göt
 
GSEAL
 (
deskoff_y
);

76 
GtkAŒoˇti⁄
 
GSEAL
 (
©èch_Æloˇti⁄
);

77 
GtkAŒoˇti⁄
 
GSEAL
 (
Êﬂt_Æloˇti⁄
);

80 
	s_GtkH™dÀBoxCœss


82 
GtkBöCœss
 
	m∑ª¡_˛ass
;

84 (*
	mchûd_©èched
Ë(
GtkH™dÀBox
 *
	mh™dÀ_box
,

85 
GtkWidgë
 *
	mchûd
);

86 (*
	mchûd_dëached
Ë(
GtkH™dÀBox
 *
	mh™dÀ_box
,

87 
GtkWidgë
 *
	mchûd
);

90 (*
	m_gtk_ª£rved1
) ();

91 (*
	m_gtk_ª£rved2
) ();

92 (*
	m_gtk_ª£rved3
) ();

93 (*
	m_gtk_ª£rved4
) ();

97 
GTy≥
 
	$gtk_h™dÀ_box_gë_ty≥
 (Ë
G_GNUC_CONST
;

98 
GtkWidgë
* 
	`gtk_h™dÀ_box_√w
 ();

99 
	`gtk_h™dÀ_box_£t_shadow_ty≥
 (
GtkH™dÀBox
 *
h™dÀ_box
,

100 
GtkShadowTy≥
 
ty≥
);

101 
GtkShadowTy≥
 
	`gtk_h™dÀ_box_gë_shadow_ty≥
 (
GtkH™dÀBox
 *
h™dÀ_box
);

102 
	`gtk_h™dÀ_box_£t_h™dÀ_posôi⁄
 (
GtkH™dÀBox
 *
h™dÀ_box
,

103 
GtkPosôi⁄Ty≥
 
posôi⁄
);

104 
GtkPosôi⁄Ty≥
 
	`gtk_h™dÀ_box_gë_h™dÀ_posôi⁄
(
GtkH™dÀBox
 *
h™dÀ_box
);

105 
	`gtk_h™dÀ_box_£t_¢≠_edge
 (
GtkH™dÀBox
 *
h™dÀ_box
,

106 
GtkPosôi⁄Ty≥
 
edge
);

107 
GtkPosôi⁄Ty≥
 
	`gtk_h™dÀ_box_gë_¢≠_edge
 (
GtkH™dÀBox
 *
h™dÀ_box
);

108 
gboﬁón
 
	`gtk_h™dÀ_box_gë_chûd_dëached
 (
GtkH™dÀBox
 *
h™dÀ_box
);

110 
G_END_DECLS


	@/usr/include/gtk/gtkhbbox.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_HBUTTON_BOX_H__


32 
	#__GTK_HBUTTON_BOX_H__


	)

35 
	~<gtk/gtkbbox.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_HBUTTON_BOX
 (
	`gtk_hbuâ⁄_box_gë_ty≥
 ())

	)

41 
	#GTK_HBUTTON_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HBUTTON_BOX
, 
GtkHBuâ⁄Box
))

	)

42 
	#GTK_HBUTTON_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HBUTTON_BOX
, 
GtkHBuâ⁄BoxCœss
))

	)

43 
	#GTK_IS_HBUTTON_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HBUTTON_BOX
))

	)

44 
	#GTK_IS_HBUTTON_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HBUTTON_BOX
))

	)

45 
	#GTK_HBUTTON_BOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HBUTTON_BOX
, 
GtkHBuâ⁄BoxCœss
))

	)

48 
_GtkHBuâ⁄Box
 
	tGtkHBuâ⁄Box
;

49 
_GtkHBuâ⁄BoxCœss
 
	tGtkHBuâ⁄BoxCœss
;

51 
	s_GtkHBuâ⁄Box


53 
GtkBuâ⁄Box
 
	mbuâ⁄_box
;

56 
	s_GtkHBuâ⁄BoxCœss


58 
GtkBuâ⁄BoxCœss
 
	m∑ª¡_˛ass
;

62 
GTy≥
 
	$gtk_hbuâ⁄_box_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
GtkWidgë
* 
	`gtk_hbuâ⁄_box_√w
 ();

67 #i‚de‡
GTK_DISABLE_DEPRECATED


68 
göt
 
	`gtk_hbuâ⁄_box_gë_•acög_deÁu…
 ();

69 
GtkBuâ⁄BoxStyÀ
 
	`gtk_hbuâ⁄_box_gë_œyout_deÁu…
 ();

71 
	`gtk_hbuâ⁄_box_£t_•acög_deÁu…
 (
göt
 
•acög
);

72 
	`gtk_hbuâ⁄_box_£t_œyout_deÁu…
 (
GtkBuâ⁄BoxStyÀ
 
œyout
);

76 
GtkBuâ⁄BoxStyÀ
 
	`_gtk_hbuâ⁄_box_gë_œyout_deÁu…
 ();

78 
G_END_DECLS


	@/usr/include/gtk/gtkhbox.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_HBOX_H__


32 
	#__GTK_HBOX_H__


	)

35 
	~<gtk/gtkbox.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_HBOX
 (
	`gtk_hbox_gë_ty≥
 ())

	)

41 
	#GTK_HBOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HBOX
, 
GtkHBox
))

	)

42 
	#GTK_HBOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HBOX
, 
GtkHBoxCœss
))

	)

43 
	#GTK_IS_HBOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HBOX
))

	)

44 
	#GTK_IS_HBOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HBOX
))

	)

45 
	#GTK_HBOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HBOX
, 
GtkHBoxCœss
))

	)

48 
_GtkHBox
 
	tGtkHBox
;

49 
_GtkHBoxCœss
 
	tGtkHBoxCœss
;

51 
	s_GtkHBox


53 
GtkBox
 
	mbox
;

56 
	s_GtkHBoxCœss


58 
GtkBoxCœss
 
	m∑ª¡_˛ass
;

62 
GTy≥
 
	$gtk_hbox_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
GtkWidgë
 * 
	`gtk_hbox_√w
 (
gboﬁón
 
homogíeous
,

64 
göt
 
•acög
);

66 
G_END_DECLS


	@/usr/include/gtk/gtkhpaned.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_HPANED_H__


32 
	#__GTK_HPANED_H__


	)

34 
	~<gtk/gtk∑√d.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_HPANED
 (
	`gtk_h∑√d_gë_ty≥
 ())

	)

39 
	#GTK_HPANED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HPANED
, 
GtkHP™ed
))

	)

40 
	#GTK_HPANED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HPANED
, 
GtkHP™edCœss
))

	)

41 
	#GTK_IS_HPANED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HPANED
))

	)

42 
	#GTK_IS_HPANED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HPANED
))

	)

43 
	#GTK_HPANED_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HPANED
, 
GtkHP™edCœss
))

	)

46 
_GtkHP™ed
 
	tGtkHP™ed
;

47 
_GtkHP™edCœss
 
	tGtkHP™edCœss
;

49 
	s_GtkHP™ed


51 
GtkP™ed
 
	m∑√d
;

54 
	s_GtkHP™edCœss


56 
GtkP™edCœss
 
	m∑ª¡_˛ass
;

60 
GTy≥
 
	$gtk_h∑√d_gë_ty≥
 (Ë
G_GNUC_CONST
;

61 
GtkWidgë
 * 
	`gtk_h∑√d_√w
 ();

63 
G_END_DECLS


	@/usr/include/gtk/gtkhruler.h

37 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

41 #i‚de‡
__GTK_HRULER_H__


42 
	#__GTK_HRULER_H__


	)

45 
	~<gtk/gtkruÀr.h
>

48 
	gG_BEGIN_DECLS


51 
	#GTK_TYPE_HRULER
 (
	`gtk_hruÀr_gë_ty≥
 ())

	)

52 
	#GTK_HRULER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HRULER
, 
GtkHRuÀr
))

	)

53 
	#GTK_HRULER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HRULER
, 
GtkHRuÀrCœss
))

	)

54 
	#GTK_IS_HRULER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HRULER
))

	)

55 
	#GTK_IS_HRULER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HRULER
))

	)

56 
	#GTK_HRULER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HRULER
, 
GtkHRuÀrCœss
))

	)

59 
_GtkHRuÀr
 
	tGtkHRuÀr
;

60 
_GtkHRuÀrCœss
 
	tGtkHRuÀrCœss
;

62 
	s_GtkHRuÀr


64 
GtkRuÀr
 
	mruÀr
;

67 
	s_GtkHRuÀrCœss


69 
GtkRuÀrCœss
 
	m∑ª¡_˛ass
;

73 
GTy≥
 
	$gtk_hruÀr_gë_ty≥
 (Ë
G_GNUC_CONST
;

74 
GtkWidgë
* 
	`gtk_hruÀr_√w
 ();

77 
G_END_DECLS


	@/usr/include/gtk/gtkhscale.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_HSCALE_H__


32 
	#__GTK_HSCALE_H__


	)

35 
	~<gtk/gtksˇÀ.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_HSCALE
 (
	`gtk_hsˇÀ_gë_ty≥
 ())

	)

41 
	#GTK_HSCALE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HSCALE
, 
GtkHSˇÀ
))

	)

42 
	#GTK_HSCALE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HSCALE
, 
GtkHSˇÀCœss
))

	)

43 
	#GTK_IS_HSCALE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HSCALE
))

	)

44 
	#GTK_IS_HSCALE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HSCALE
))

	)

45 
	#GTK_HSCALE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HSCALE
, 
GtkHSˇÀCœss
))

	)

48 
_GtkHSˇÀ
 
	tGtkHSˇÀ
;

49 
_GtkHSˇÀCœss
 
	tGtkHSˇÀCœss
;

51 
	s_GtkHSˇÀ


53 
GtkSˇÀ
 
	msˇÀ
;

56 
	s_GtkHSˇÀCœss


58 
GtkSˇÀCœss
 
	m∑ª¡_˛ass
;

62 
GTy≥
 
	$gtk_hsˇÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
GtkWidgë
* 
	`gtk_hsˇÀ_√w
 (
GtkAdju°mít
 *
adju°mít
);

64 
GtkWidgë
* 
	`gtk_hsˇÀ_√w_wôh_ønge
 (
gdoubÀ
 
mö
,

65 
gdoubÀ
 
max
,

66 
gdoubÀ
 
°ï
);

69 
G_END_DECLS


	@/usr/include/gtk/gtkhscrollbar.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_HSCROLLBAR_H__


32 
	#__GTK_HSCROLLBAR_H__


	)

35 
	~<gtk/gtks¸ﬁlb¨.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_HSCROLLBAR
 (
	`gtk_hs¸ﬁlb¨_gë_ty≥
 ())

	)

42 
	#GTK_HSCROLLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HSCROLLBAR
, 
GtkHS¸ﬁlb¨
))

	)

43 
	#GTK_HSCROLLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HSCROLLBAR
, 
GtkHS¸ﬁlb¨Cœss
))

	)

44 
	#GTK_IS_HSCROLLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HSCROLLBAR
))

	)

45 
	#GTK_IS_HSCROLLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HSCROLLBAR
))

	)

46 
	#GTK_HSCROLLBAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HSCROLLBAR
, 
GtkHS¸ﬁlb¨Cœss
))

	)

49 
_GtkHS¸ﬁlb¨
 
	tGtkHS¸ﬁlb¨
;

50 
_GtkHS¸ﬁlb¨Cœss
 
	tGtkHS¸ﬁlb¨Cœss
;

52 
	s_GtkHS¸ﬁlb¨


54 
GtkS¸ﬁlb¨
 
	ms¸ﬁlb¨
;

57 
	s_GtkHS¸ﬁlb¨Cœss


59 
GtkS¸ﬁlb¨Cœss
 
	m∑ª¡_˛ass
;

63 
GTy≥
 
	$gtk_hs¸ﬁlb¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

64 
GtkWidgë
* 
	`gtk_hs¸ﬁlb¨_√w
 (
GtkAdju°mít
 *
adju°mít
);

67 
G_END_DECLS


	@/usr/include/gtk/gtkhseparator.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_HSEPARATOR_H__


32 
	#__GTK_HSEPARATOR_H__


	)

35 
	~<gtk/gtk£∑øt‹.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_HSEPARATOR
 (
	`gtk_h£∑øt‹_gë_ty≥
 ())

	)

41 
	#GTK_HSEPARATOR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HSEPARATOR
, 
GtkHSï¨©‹
))

	)

42 
	#GTK_HSEPARATOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HSEPARATOR
, 
GtkHSï¨©‹Cœss
))

	)

43 
	#GTK_IS_HSEPARATOR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HSEPARATOR
))

	)

44 
	#GTK_IS_HSEPARATOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HSEPARATOR
))

	)

45 
	#GTK_HSEPARATOR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HSEPARATOR
, 
GtkHSï¨©‹Cœss
))

	)

48 
_GtkHSï¨©‹
 
	tGtkHSï¨©‹
;

49 
_GtkHSï¨©‹Cœss
 
	tGtkHSï¨©‹Cœss
;

51 
	s_GtkHSï¨©‹


53 
GtkSï¨©‹
 
	m£∑øt‹
;

56 
	s_GtkHSï¨©‹Cœss


58 
GtkSï¨©‹Cœss
 
	m∑ª¡_˛ass
;

62 
GTy≥
 
	$gtk_h£∑øt‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
GtkWidgë
* 
	`gtk_h£∑øt‹_√w
 ();

66 
G_END_DECLS


	@/usr/include/gtk/gtkhsv.h

32 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

36 #i‚de‡
__GTK_HSV_H__


37 
	#__GTK_HSV_H__


	)

39 
	~<gtk/gtkwidgë.h
>

41 
	gG_BEGIN_DECLS


43 
	#GTK_TYPE_HSV
 (
	`gtk_hsv_gë_ty≥
 ())

	)

44 
	#GTK_HSV
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_HSV
, 
GtkHSV
))

	)

45 
	#GTK_HSV_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_HSV
, 
GtkHSVCœss
))

	)

46 
	#GTK_IS_HSV
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_HSV
))

	)

47 
	#GTK_IS_HSV_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_HSV
))

	)

48 
	#GTK_HSV_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_HSV
, 
GtkHSVCœss
))

	)

51 
_GtkHSV
 
	tGtkHSV
;

52 
_GtkHSVCœss
 
	tGtkHSVCœss
;

54 
	s_GtkHSV


56 
GtkWidgë
 
	m∑ª¡_ö°™˚
;

59 
gpoöãr
 
GSEAL
 (
¥iv
);

62 
	s_GtkHSVCœss


64 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

67 (* 
	mch™ged
Ë(
GtkHSV
 *
	mhsv
);

70 (* 
	mmove
Ë(
GtkHSV
 *
	mhsv
,

71 
GtkDúe˘i⁄Ty≥
 
	mty≥
);

74 (*
	m_gtk_ª£rved1
) ();

75 (*
	m_gtk_ª£rved2
) ();

76 (*
	m_gtk_ª£rved3
) ();

77 (*
	m_gtk_ª£rved4
) ();

81 
GTy≥
 
	$gtk_hsv_gë_ty≥
 (Ë
G_GNUC_CONST
;

82 
GtkWidgë
* 
	`gtk_hsv_√w
 ();

83 
	`gtk_hsv_£t_cﬁ‹
 (
GtkHSV
 *
hsv
,

84 
h
,

85 
s
,

86 
v
);

87 
	`gtk_hsv_gë_cﬁ‹
 (
GtkHSV
 *
hsv
,

88 
gdoubÀ
 *
h
,

89 
gdoubÀ
 *
s
,

90 
gdoubÀ
 *
v
);

91 
	`gtk_hsv_£t_mërics
 (
GtkHSV
 *
hsv
,

92 
göt
 
size
,

93 
göt
 
rög_width
);

94 
	`gtk_hsv_gë_mërics
 (
GtkHSV
 *
hsv
,

95 
göt
 *
size
,

96 
göt
 *
rög_width
);

97 
gboﬁón
 
	`gtk_hsv_is_adju°ög
 (
GtkHSV
 *
hsv
);

100 
	`gtk_hsv_to_rgb
 (
gdoubÀ
 
h
,

101 
gdoubÀ
 
s
,

102 
gdoubÀ
 
v
,

103 
gdoubÀ
 *
r
,

104 
gdoubÀ
 *
g
,

105 
gdoubÀ
 *
b
);

106 
	`gtk_rgb_to_hsv
 (
gdoubÀ
 
r
,

107 
gdoubÀ
 
g
,

108 
gdoubÀ
 
b
,

109 
gdoubÀ
 *
h
,

110 
gdoubÀ
 *
s
,

111 
gdoubÀ
 *
v
);

113 
G_END_DECLS


	@/usr/include/gtk/gtkiconfactory.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ICON_FACTORY_H__


32 
	#__GTK_ICON_FACTORY_H__


	)

34 
	~<gdk/gdk.h
>

35 
	~<gtk/gtkrc.h
>

37 
G_BEGIN_DECLS


39 
_GtkIc⁄Fa˘‹yCœss
 
	tGtkIc⁄Fa˘‹yCœss
;

41 
	#GTK_TYPE_ICON_FACTORY
 (
	`gtk_ic⁄_Á˘‹y_gë_ty≥
 ())

	)

42 
	#GTK_ICON_FACTORY
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_ICON_FACTORY
, 
GtkIc⁄Fa˘‹y
))

	)

43 
	#GTK_ICON_FACTORY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ICON_FACTORY
, 
GtkIc⁄Fa˘‹yCœss
))

	)

44 
	#GTK_IS_ICON_FACTORY
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_ICON_FACTORY
))

	)

45 
	#GTK_IS_ICON_FACTORY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ICON_FACTORY
))

	)

46 
	#GTK_ICON_FACTORY_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ICON_FACTORY
, 
GtkIc⁄Fa˘‹yCœss
))

	)

47 
	#GTK_TYPE_ICON_SET
 (
	`gtk_ic⁄_£t_gë_ty≥
 ())

	)

48 
	#GTK_TYPE_ICON_SOURCE
 (
	`gtk_ic⁄_sour˚_gë_ty≥
 ())

	)

50 
	s_GtkIc⁄Fa˘‹y


52 
GObje˘
 
	m∑ª¡_ö°™˚
;

54 
GHashTabÀ
 *
GSEAL
 (
ic⁄s
);

57 
	s_GtkIc⁄Fa˘‹yCœss


59 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

62 (*
	m_gtk_ª£rved1
) ();

63 (*
	m_gtk_ª£rved2
) ();

64 (*
	m_gtk_ª£rved3
) ();

65 (*
	m_gtk_ª£rved4
) ();

68 #ifde‡
G_OS_WIN32


70 
	#gtk_ic⁄_sour˚_£t_fûíame
 
gtk_ic⁄_sour˚_£t_fûíame_utf8


	)

71 
	#gtk_ic⁄_sour˚_gë_fûíame
 
gtk_ic⁄_sour˚_gë_fûíame_utf8


	)

74 
GTy≥
 
	$gtk_ic⁄_Á˘‹y_gë_ty≥
 (Ë
G_GNUC_CONST
;

75 
GtkIc⁄Fa˘‹y
* 
	`gtk_ic⁄_Á˘‹y_√w
 ();

76 
	`gtk_ic⁄_Á˘‹y_add
 (
GtkIc⁄Fa˘‹y
 *
Á˘‹y
,

77 c⁄° 
gch¨
 *
°ock_id
,

78 
GtkIc⁄Së
 *
ic⁄_£t
);

79 
GtkIc⁄Së
* 
	`gtk_ic⁄_Á˘‹y_lookup
 (
GtkIc⁄Fa˘‹y
 *
Á˘‹y
,

80 c⁄° 
gch¨
 *
°ock_id
);

84 
	`gtk_ic⁄_Á˘‹y_add_deÁu…
 (
GtkIc⁄Fa˘‹y
 *
Á˘‹y
);

85 
	`gtk_ic⁄_Á˘‹y_ªmove_deÁu…
 (
GtkIc⁄Fa˘‹y
 *
Á˘‹y
);

86 
GtkIc⁄Së
* 
	`gtk_ic⁄_Á˘‹y_lookup_deÁu…
 (c⁄° 
gch¨
 *
°ock_id
);

99 #i‚de‡
GDK_MULTIHEAD_SAFE


100 
gboﬁón
 
	`gtk_ic⁄_size_lookup
 (
GtkIc⁄Size
 
size
,

101 
göt
 *
width
,

102 
göt
 *
height
);

104 
gboﬁón
 
	`gtk_ic⁄_size_lookup_f‹_£âögs
 (
GtkSëtögs
 *
£âögs
,

105 
GtkIc⁄Size
 
size
,

106 
göt
 *
width
,

107 
göt
 *
height
);

109 
GtkIc⁄Size
 
	`gtk_ic⁄_size_ªgi°î
 (c⁄° 
gch¨
 *
«me
,

110 
göt
 
width
,

111 
göt
 
height
);

112 
	`gtk_ic⁄_size_ªgi°î_Æüs
 (c⁄° 
gch¨
 *
Æüs
,

113 
GtkIc⁄Size
 
èrgë
);

114 
GtkIc⁄Size
 
	`gtk_ic⁄_size_‰om_«me
 (c⁄° 
gch¨
 *
«me
);

115 
G_CONST_RETURN
 
gch¨
* 
	`gtk_ic⁄_size_gë_«me
 (
GtkIc⁄Size
 
size
);

119 
GTy≥
 
	$gtk_ic⁄_£t_gë_ty≥
 (Ë
G_GNUC_CONST
;

120 
GtkIc⁄Së
* 
	`gtk_ic⁄_£t_√w
 ();

121 
GtkIc⁄Së
* 
	`gtk_ic⁄_£t_√w_‰om_pixbuf
 (
GdkPixbuf
 *
pixbuf
);

123 
GtkIc⁄Së
* 
	`gtk_ic⁄_£t_ªf
 (GtkIc⁄Së *
ic⁄_£t
);

124 
	`gtk_ic⁄_£t_uƒef
 (
GtkIc⁄Së
 *
ic⁄_£t
);

125 
GtkIc⁄Së
* 
	`gtk_ic⁄_£t_c›y
 (GtkIc⁄Së *
ic⁄_£t
);

130 
GdkPixbuf
* 
	`gtk_ic⁄_£t_ªndî_ic⁄
 (
GtkIc⁄Së
 *
ic⁄_£t
,

131 
GtkStyÀ
 *
°yÀ
,

132 
GtkTextDúe˘i⁄
 
dúe˘i⁄
,

133 
GtkSèãTy≥
 
°©e
,

134 
GtkIc⁄Size
 
size
,

135 
GtkWidgë
 *
widgë
,

136 c⁄° *
dëaû
);

139 
	`gtk_ic⁄_£t_add_sour˚
 (
GtkIc⁄Së
 *
ic⁄_£t
,

140 c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

142 
	`gtk_ic⁄_£t_gë_sizes
 (
GtkIc⁄Së
 *
ic⁄_£t
,

143 
GtkIc⁄Size
 **
sizes
,

144 
göt
 *
n_sizes
);

146 
GTy≥
 
	$gtk_ic⁄_sour˚_gë_ty≥
 (Ë
G_GNUC_CONST
;

147 
GtkIc⁄Sour˚
* 
	`gtk_ic⁄_sour˚_√w
 ();

148 
GtkIc⁄Sour˚
* 
	`gtk_ic⁄_sour˚_c›y
 (c⁄° GtkIc⁄Sour˚ *
sour˚
);

149 
	`gtk_ic⁄_sour˚_‰ì
 (
GtkIc⁄Sour˚
 *
sour˚
);

151 
	`gtk_ic⁄_sour˚_£t_fûíame
 (
GtkIc⁄Sour˚
 *
sour˚
,

152 c⁄° 
gch¨
 *
fûíame
);

153 
	`gtk_ic⁄_sour˚_£t_ic⁄_«me
 (
GtkIc⁄Sour˚
 *
sour˚
,

154 c⁄° 
gch¨
 *
ic⁄_«me
);

155 
	`gtk_ic⁄_sour˚_£t_pixbuf
 (
GtkIc⁄Sour˚
 *
sour˚
,

156 
GdkPixbuf
 *
pixbuf
);

158 
G_CONST_RETURN
 
gch¨
* 
	`gtk_ic⁄_sour˚_gë_fûíame
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

159 
G_CONST_RETURN
 
gch¨
* 
	`gtk_ic⁄_sour˚_gë_ic⁄_«me
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

160 
GdkPixbuf
* 
	`gtk_ic⁄_sour˚_gë_pixbuf
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

162 
	`gtk_ic⁄_sour˚_£t_dúe˘i⁄_wûdˇrded
 (
GtkIc⁄Sour˚
 *
sour˚
,

163 
gboﬁón
 
£âög
);

164 
	`gtk_ic⁄_sour˚_£t_°©e_wûdˇrded
 (
GtkIc⁄Sour˚
 *
sour˚
,

165 
gboﬁón
 
£âög
);

166 
	`gtk_ic⁄_sour˚_£t_size_wûdˇrded
 (
GtkIc⁄Sour˚
 *
sour˚
,

167 
gboﬁón
 
£âög
);

168 
gboﬁón
 
	`gtk_ic⁄_sour˚_gë_size_wûdˇrded
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

169 
gboﬁón
 
	`gtk_ic⁄_sour˚_gë_°©e_wûdˇrded
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

170 
gboﬁón
 
	`gtk_ic⁄_sour˚_gë_dúe˘i⁄_wûdˇrded
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

171 
	`gtk_ic⁄_sour˚_£t_dúe˘i⁄
 (
GtkIc⁄Sour˚
 *
sour˚
,

172 
GtkTextDúe˘i⁄
 
dúe˘i⁄
);

173 
	`gtk_ic⁄_sour˚_£t_°©e
 (
GtkIc⁄Sour˚
 *
sour˚
,

174 
GtkSèãTy≥
 
°©e
);

175 
	`gtk_ic⁄_sour˚_£t_size
 (
GtkIc⁄Sour˚
 *
sour˚
,

176 
GtkIc⁄Size
 
size
);

177 
GtkTextDúe˘i⁄
 
	`gtk_ic⁄_sour˚_gë_dúe˘i⁄
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

178 
GtkSèãTy≥
 
	`gtk_ic⁄_sour˚_gë_°©e
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

179 
GtkIc⁄Size
 
	`gtk_ic⁄_sour˚_gë_size
 (c⁄° 
GtkIc⁄Sour˚
 *
sour˚
);

183 
	`_gtk_ic⁄_£t_övÆid©e_ˇches
 ();

184 
GLi°
* 
	`_gtk_ic⁄_Á˘‹y_li°_ids
 ();

185 
	`_gtk_ic⁄_Á˘‹y_ísuª_deÁu…_ic⁄s
 ();

187 
G_END_DECLS


	@/usr/include/gtk/gtkicontheme.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_ICON_THEME_H__


25 
	#__GTK_ICON_THEME_H__


	)

27 
	~<gdk-pixbuf/gdk-pixbuf.h
>

28 
	~<gdk/gdk.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_ICON_INFO
 (
	`gtk_ic⁄_öfo_gë_ty≥
 ())

	)

34 
	#GTK_TYPE_ICON_THEME
 (
	`gtk_ic⁄_theme_gë_ty≥
 ())

	)

35 
	#GTK_ICON_THEME
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ICON_THEME
, 
GtkIc⁄Theme
))

	)

36 
	#GTK_ICON_THEME_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ICON_THEME
, 
GtkIc⁄ThemeCœss
))

	)

37 
	#GTK_IS_ICON_THEME
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ICON_THEME
))

	)

38 
	#GTK_IS_ICON_THEME_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ICON_THEME
))

	)

39 
	#GTK_ICON_THEME_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ICON_THEME
, 
GtkIc⁄ThemeCœss
))

	)

41 
_GtkIc⁄Info
 
	tGtkIc⁄Info
;

42 
_GtkIc⁄Theme
 
	tGtkIc⁄Theme
;

43 
_GtkIc⁄ThemeCœss
 
	tGtkIc⁄ThemeCœss
;

44 
_GtkIc⁄ThemePriv©e
 
	tGtkIc⁄ThemePriv©e
;

46 
	s_GtkIc⁄Theme


49 
GObje˘
 
	m∑ª¡_ö°™˚
;

51 
GtkIc⁄ThemePriv©e
 *
GSEAL
 (
¥iv
);

54 
	s_GtkIc⁄ThemeCœss


56 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

58 (* 
	mch™ged
Ë(
GtkIc⁄Theme
 *
	mic⁄_theme
);

82 
	mGTK_ICON_LOOKUP_NO_SVG
 = 1 << 0,

83 
	mGTK_ICON_LOOKUP_FORCE_SVG
 = 1 << 1,

84 
	mGTK_ICON_LOOKUP_USE_BUILTIN
 = 1 << 2,

85 
	mGTK_ICON_LOOKUP_GENERIC_FALLBACK
 = 1 << 3,

86 
	mGTK_ICON_LOOKUP_FORCE_SIZE
 = 1 << 4

87 } 
	tGtkIc⁄LookupFœgs
;

89 
	#GTK_ICON_THEME_ERROR
 
	`gtk_ic⁄_theme_îr‹_qu¨k
 ()

	)

99 
	mGTK_ICON_THEME_NOT_FOUND
,

100 
	mGTK_ICON_THEME_FAILED


101 } 
	tGtkIc⁄ThemeEº‹
;

103 
GQu¨k
 
gtk_ic⁄_theme_îr‹_qu¨k
 ();

105 #ifde‡
G_OS_WIN32


107 
	#gtk_ic⁄_theme_£t_£¨ch_∑th
 
gtk_ic⁄_theme_£t_£¨ch_∑th_utf8


	)

108 
	#gtk_ic⁄_theme_gë_£¨ch_∑th
 
gtk_ic⁄_theme_gë_£¨ch_∑th_utf8


	)

109 
	#gtk_ic⁄_theme_≠≥nd_£¨ch_∑th
 
gtk_ic⁄_theme_≠≥nd_£¨ch_∑th_utf8


	)

110 
	#gtk_ic⁄_theme_¥ïíd_£¨ch_∑th
 
gtk_ic⁄_theme_¥ïíd_£¨ch_∑th_utf8


	)

111 
	#gtk_ic⁄_öfo_gë_fûíame
 
gtk_ic⁄_öfo_gë_fûíame_utf8


	)

114 
GTy≥
 
	$gtk_ic⁄_theme_gë_ty≥
 (Ë
G_GNUC_CONST
;

116 
GtkIc⁄Theme
 *
	`gtk_ic⁄_theme_√w
 ();

117 
GtkIc⁄Theme
 *
	`gtk_ic⁄_theme_gë_deÁu…
 ();

118 
GtkIc⁄Theme
 *
	`gtk_ic⁄_theme_gë_f‹_s¸ìn
 (
GdkS¸ìn
 *
s¸ìn
);

119 
	`gtk_ic⁄_theme_£t_s¸ìn
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

120 
GdkS¸ìn
 *
s¸ìn
);

122 
	`gtk_ic⁄_theme_£t_£¨ch_∑th
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

123 c⁄° 
gch¨
 *
∑th
[],

124 
göt
 
n_ñemíts
);

125 
	`gtk_ic⁄_theme_gë_£¨ch_∑th
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

126 
gch¨
 **
∑th
[],

127 
göt
 *
n_ñemíts
);

128 
	`gtk_ic⁄_theme_≠≥nd_£¨ch_∑th
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

129 c⁄° 
gch¨
 *
∑th
);

130 
	`gtk_ic⁄_theme_¥ïíd_£¨ch_∑th
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

131 c⁄° 
gch¨
 *
∑th
);

133 
	`gtk_ic⁄_theme_£t_cu°om_theme
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

134 c⁄° 
gch¨
 *
theme_«me
);

136 
gboﬁón
 
	`gtk_ic⁄_theme_has_ic⁄
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

137 c⁄° 
gch¨
 *
ic⁄_«me
);

138 
göt
 *
	`gtk_ic⁄_theme_gë_ic⁄_sizes
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

139 c⁄° 
gch¨
 *
ic⁄_«me
);

140 
GtkIc⁄Info
 * 
	`gtk_ic⁄_theme_lookup_ic⁄
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

141 c⁄° 
gch¨
 *
ic⁄_«me
,

142 
göt
 
size
,

143 
GtkIc⁄LookupFœgs
 
Êags
);

144 
GtkIc⁄Info
 * 
	`gtk_ic⁄_theme_choo£_ic⁄
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

145 c⁄° 
gch¨
 *
ic⁄_«mes
[],

146 
göt
 
size
,

147 
GtkIc⁄LookupFœgs
 
Êags
);

148 
GdkPixbuf
 * 
	`gtk_ic⁄_theme_lﬂd_ic⁄
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

149 c⁄° 
gch¨
 *
ic⁄_«me
,

150 
göt
 
size
,

151 
GtkIc⁄LookupFœgs
 
Êags
,

152 
GEº‹
 **
îr‹
);

154 
GtkIc⁄Info
 * 
	`gtk_ic⁄_theme_lookup_by_gic⁄
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

155 
GIc⁄
 *
ic⁄
,

156 
göt
 
size
,

157 
GtkIc⁄LookupFœgs
 
Êags
);

159 
GLi°
 * 
	`gtk_ic⁄_theme_li°_ic⁄s
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

160 c⁄° 
gch¨
 *
c⁄ãxt
);

161 
GLi°
 * 
	`gtk_ic⁄_theme_li°_c⁄ãxts
 (
GtkIc⁄Theme
 *
ic⁄_theme
);

162 * 
	`gtk_ic⁄_theme_gë_exam∂e_ic⁄_«me
 (
GtkIc⁄Theme
 *
ic⁄_theme
);

164 
gboﬁón
 
	`gtk_ic⁄_theme_ªsˇn_if_√eded
 (
GtkIc⁄Theme
 *
ic⁄_theme
);

166 
	`gtk_ic⁄_theme_add_buûtö_ic⁄
 (c⁄° 
gch¨
 *
ic⁄_«me
,

167 
göt
 
size
,

168 
GdkPixbuf
 *
pixbuf
);

170 
GTy≥
 
	$gtk_ic⁄_öfo_gë_ty≥
 (Ë
G_GNUC_CONST
;

171 
GtkIc⁄Info
 * 
	`gtk_ic⁄_öfo_c›y
 (GtkIc⁄Infÿ*
ic⁄_öfo
);

172 
	`gtk_ic⁄_öfo_‰ì
 (
GtkIc⁄Info
 *
ic⁄_öfo
);

174 
GtkIc⁄Info
 * 
	`gtk_ic⁄_öfo_√w_f‹_pixbuf
 (
GtkIc⁄Theme
 *
ic⁄_theme
,

175 
GdkPixbuf
 *
pixbuf
);

177 
göt
 
	`gtk_ic⁄_öfo_gë_ba£_size
 (
GtkIc⁄Info
 *
ic⁄_öfo
);

178 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ic⁄_öfo_gë_fûíame
 (
GtkIc⁄Info
 *
ic⁄_öfo
);

179 
GdkPixbuf
 * 
	`gtk_ic⁄_öfo_gë_buûtö_pixbuf
 (
GtkIc⁄Info
 *
ic⁄_öfo
);

180 
GdkPixbuf
 * 
	`gtk_ic⁄_öfo_lﬂd_ic⁄
 (
GtkIc⁄Info
 *
ic⁄_öfo
,

181 
GEº‹
 **
îr‹
);

182 
	`gtk_ic⁄_öfo_£t_øw_co‹dö©es
 (
GtkIc⁄Info
 *
ic⁄_öfo
,

183 
gboﬁón
 
øw_co‹dö©es
);

185 
gboﬁón
 
	`gtk_ic⁄_öfo_gë_embedded_ª˘
 (
GtkIc⁄Info
 *
ic⁄_öfo
,

186 
GdkRe˘™gÀ
 *
ª˘™gÀ
);

187 
gboﬁón
 
	`gtk_ic⁄_öfo_gë_©èch_poöts
 (
GtkIc⁄Info
 *
ic⁄_öfo
,

188 
GdkPoöt
 **
poöts
,

189 
göt
 *
n_poöts
);

190 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ic⁄_öfo_gë_di•œy_«me
 (
GtkIc⁄Info
 *
ic⁄_öfo
);

193 
	`_gtk_ic⁄_theme_check_ªlﬂd
 (
GdkDi•œy
 *
di•œy
);

194 
	`_gtk_ic⁄_theme_ísuª_buûtö_ˇche
 ();

196 
G_END_DECLS


	@/usr/include/gtk/gtkiconview.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_ICON_VIEW_H__


25 
	#__GTK_ICON_VIEW_H__


	)

27 
	~<gtk/gtkc⁄èöî.h
>

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtk˚Œªndîî.h
>

30 
	~<gtk/gtk£À˘i⁄.h
>

31 
	~<gtk/gtktoﬁtù.h
>

33 
	gG_BEGIN_DECLS


35 
	#GTK_TYPE_ICON_VIEW
 (
	`gtk_ic⁄_võw_gë_ty≥
 ())

	)

36 
	#GTK_ICON_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ICON_VIEW
, 
GtkIc⁄Võw
))

	)

37 
	#GTK_ICON_VIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ICON_VIEW
, 
GtkIc⁄VõwCœss
))

	)

38 
	#GTK_IS_ICON_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ICON_VIEW
))

	)

39 
	#GTK_IS_ICON_VIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ICON_VIEW
))

	)

40 
	#GTK_ICON_VIEW_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ICON_VIEW
, 
GtkIc⁄VõwCœss
))

	)

42 
_GtkIc⁄Võw
 
	tGtkIc⁄Võw
;

43 
_GtkIc⁄VõwCœss
 
	tGtkIc⁄VõwCœss
;

44 
_GtkIc⁄VõwPriv©e
 
	tGtkIc⁄VõwPriv©e
;

46 (* 
	tGtkIc⁄VõwF‹óchFunc
Ë(
	tGtkIc⁄Võw
 *
	tic⁄_võw
,

47 
	tGtkTªeP©h
 *
	t∑th
,

48 
	tgpoöãr
 
	td©a
);

52 
GTK_ICON_VIEW_NO_DROP
,

53 
GTK_ICON_VIEW_DROP_INTO
,

54 
GTK_ICON_VIEW_DROP_LEFT
,

55 
GTK_ICON_VIEW_DROP_RIGHT
,

56 
GTK_ICON_VIEW_DROP_ABOVE
,

57 
GTK_ICON_VIEW_DROP_BELOW


58 } 
	tGtkIc⁄VõwDr›Posôi⁄
;

60 
	s_GtkIc⁄Võw


62 
GtkC⁄èöî
 
∑ª¡
;

64 
GtkIc⁄VõwPriv©e
 *
	`GSEAL
 (
¥iv
);

67 
	s_GtkIc⁄VõwCœss


69 
GtkC⁄èöîCœss
 
∑ª¡_˛ass
;

71 (* 
£t_s¸ﬁl_adju°míts
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
,

72 
GtkAdju°mít
 *
hadju°mít
,

73 
GtkAdju°mít
 *
vadju°mít
);

75 (* 
ôem_a˘iv©ed
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
,

76 
GtkTªeP©h
 *
∑th
);

77 (* 
£À˘i⁄_ch™ged
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
);

80 (* 
£À˘_Æl
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
);

81 (* 
un£À˘_Æl
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
);

82 (* 
£À˘_curs‹_ôem
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
);

83 (* 
toggÀ_curs‹_ôem
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
);

84 
	`gboﬁón
 (* 
move_curs‹
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
,

85 
GtkMovemítSãp
 
°ï
,

86 
göt
 
cou¡
);

87 
	`gboﬁón
 (* 
a˘iv©e_curs‹_ôem
Ë(
GtkIc⁄Võw
 *
ic⁄_võw
);

90 
GTy≥
 
	$gtk_ic⁄_võw_gë_ty≥
 (Ë
G_GNUC_CONST
;

91 
GtkWidgë
 * 
	`gtk_ic⁄_võw_√w
 ();

92 
GtkWidgë
 * 
	`gtk_ic⁄_võw_√w_wôh_modñ
 (
GtkTªeModñ
 *
modñ
);

94 
	`gtk_ic⁄_võw_£t_modñ
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

95 
GtkTªeModñ
 *
modñ
);

96 
GtkTªeModñ
 * 
	`gtk_ic⁄_võw_gë_modñ
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

97 
	`gtk_ic⁄_võw_£t_ãxt_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

98 
göt
 
cﬁumn
);

99 
göt
 
	`gtk_ic⁄_võw_gë_ãxt_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

100 
	`gtk_ic⁄_võw_£t_m¨kup_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

101 
göt
 
cﬁumn
);

102 
göt
 
	`gtk_ic⁄_võw_gë_m¨kup_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

103 
	`gtk_ic⁄_võw_£t_pixbuf_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

104 
göt
 
cﬁumn
);

105 
göt
 
	`gtk_ic⁄_võw_gë_pixbuf_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

107 
	`gtk_ic⁄_võw_£t_‹õ¡©i⁄
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

108 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

109 
GtkOrõ¡©i⁄
 
	`gtk_ic⁄_võw_gë_‹õ¡©i⁄
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

110 
	`gtk_ic⁄_võw_£t_cﬁumns
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

111 
göt
 
cﬁumns
);

112 
göt
 
	`gtk_ic⁄_võw_gë_cﬁumns
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

113 
	`gtk_ic⁄_võw_£t_ôem_width
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

114 
göt
 
ôem_width
);

115 
göt
 
	`gtk_ic⁄_võw_gë_ôem_width
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

116 
	`gtk_ic⁄_võw_£t_•acög
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

117 
göt
 
•acög
);

118 
göt
 
	`gtk_ic⁄_võw_gë_•acög
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

119 
	`gtk_ic⁄_võw_£t_row_•acög
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

120 
göt
 
row_•acög
);

121 
göt
 
	`gtk_ic⁄_võw_gë_row_•acög
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

122 
	`gtk_ic⁄_võw_£t_cﬁumn_•acög
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

123 
göt
 
cﬁumn_•acög
);

124 
göt
 
	`gtk_ic⁄_võw_gë_cﬁumn_•acög
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

125 
	`gtk_ic⁄_võw_£t_m¨gö
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

126 
göt
 
m¨gö
);

127 
göt
 
	`gtk_ic⁄_võw_gë_m¨gö
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

128 
	`gtk_ic⁄_võw_£t_ôem_∑ddög
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

129 
göt
 
ôem_∑ddög
);

130 
göt
 
	`gtk_ic⁄_võw_gë_ôem_∑ddög
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

133 
GtkTªeP©h
 * 
	`gtk_ic⁄_võw_gë_∑th_©_pos
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

134 
göt
 
x
,

135 
göt
 
y
);

136 
gboﬁón
 
	`gtk_ic⁄_võw_gë_ôem_©_pos
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

137 
göt
 
x
,

138 
göt
 
y
,

139 
GtkTªeP©h
 **
∑th
,

140 
GtkCñlRídîî
 **
˚Œ
);

141 
gboﬁón
 
	`gtk_ic⁄_võw_gë_visibÀ_ønge
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

142 
GtkTªeP©h
 **
°¨t_∑th
,

143 
GtkTªeP©h
 **
íd_∑th
);

145 
	`gtk_ic⁄_võw_£À˘ed_f‹óch
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

146 
GtkIc⁄VõwF‹óchFunc
 
func
,

147 
gpoöãr
 
d©a
);

148 
	`gtk_ic⁄_võw_£t_£À˘i⁄_mode
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

149 
GtkSñe˘i⁄Mode
 
mode
);

150 
GtkSñe˘i⁄Mode
 
	`gtk_ic⁄_võw_gë_£À˘i⁄_mode
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

151 
	`gtk_ic⁄_võw_£À˘_∑th
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

152 
GtkTªeP©h
 *
∑th
);

153 
	`gtk_ic⁄_võw_un£À˘_∑th
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

154 
GtkTªeP©h
 *
∑th
);

155 
gboﬁón
 
	`gtk_ic⁄_võw_∑th_is_£À˘ed
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

156 
GtkTªeP©h
 *
∑th
);

157 
GLi°
 *
	`gtk_ic⁄_võw_gë_£À˘ed_ôems
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

158 
	`gtk_ic⁄_võw_£À˘_Æl
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

159 
	`gtk_ic⁄_võw_un£À˘_Æl
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

160 
	`gtk_ic⁄_võw_ôem_a˘iv©ed
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

161 
GtkTªeP©h
 *
∑th
);

162 
	`gtk_ic⁄_võw_£t_curs‹
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

163 
GtkTªeP©h
 *
∑th
,

164 
GtkCñlRídîî
 *
˚Œ
,

165 
gboﬁón
 
°¨t_edôög
);

166 
gboﬁón
 
	`gtk_ic⁄_võw_gë_curs‹
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

167 
GtkTªeP©h
 **
∑th
,

168 
GtkCñlRídîî
 **
˚Œ
);

169 
	`gtk_ic⁄_võw_s¸ﬁl_to_∑th
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

170 
GtkTªeP©h
 *
∑th
,

171 
gboﬁón
 
u£_Æign
,

172 
gÊﬂt
 
row_Æign
,

173 
gÊﬂt
 
cﬁ_Æign
);

176 
	`gtk_ic⁄_võw_íabÀ_modñ_døg_sour˚
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

177 
GdkModifõrTy≥
 
°¨t_buâ⁄_mask
,

178 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

179 
göt
 
n_èrgës
,

180 
GdkDøgA˘i⁄
 
a˘i⁄s
);

181 
	`gtk_ic⁄_võw_íabÀ_modñ_døg_de°
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

182 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

183 
göt
 
n_èrgës
,

184 
GdkDøgA˘i⁄
 
a˘i⁄s
);

185 
	`gtk_ic⁄_võw_un£t_modñ_døg_sour˚
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

186 
	`gtk_ic⁄_võw_un£t_modñ_døg_de°
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

187 
	`gtk_ic⁄_võw_£t_ª‹dîabÀ
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

188 
gboﬁón
 
ª‹dîabÀ
);

189 
gboﬁón
 
	`gtk_ic⁄_võw_gë_ª‹dîabÀ
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

193 
	`gtk_ic⁄_võw_£t_døg_de°_ôem
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

194 
GtkTªeP©h
 *
∑th
,

195 
GtkIc⁄VõwDr›Posôi⁄
 
pos
);

196 
	`gtk_ic⁄_võw_gë_døg_de°_ôem
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

197 
GtkTªeP©h
 **
∑th
,

198 
GtkIc⁄VõwDr›Posôi⁄
 *
pos
);

199 
gboﬁón
 
	`gtk_ic⁄_võw_gë_de°_ôem_©_pos
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

200 
göt
 
døg_x
,

201 
göt
 
døg_y
,

202 
GtkTªeP©h
 **
∑th
,

203 
GtkIc⁄VõwDr›Posôi⁄
 *
pos
);

204 
GdkPixm≠
 *
	`gtk_ic⁄_võw_¸óã_døg_ic⁄
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

205 
GtkTªeP©h
 *
∑th
);

207 
	`gtk_ic⁄_võw_c⁄vît_widgë_to_bö_wödow_co‹ds
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

208 
göt
 
wx
,

209 
göt
 
wy
,

210 
göt
 *
bx
,

211 
göt
 *
by
);

214 
	`gtk_ic⁄_võw_£t_toﬁtù_ôem
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

215 
GtkToﬁtù
 *
toﬁtù
,

216 
GtkTªeP©h
 *
∑th
);

217 
	`gtk_ic⁄_võw_£t_toﬁtù_˚Œ
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

218 
GtkToﬁtù
 *
toﬁtù
,

219 
GtkTªeP©h
 *
∑th
,

220 
GtkCñlRídîî
 *
˚Œ
);

221 
gboﬁón
 
	`gtk_ic⁄_võw_gë_toﬁtù_c⁄ãxt
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

222 
göt
 *
x
,

223 
göt
 *
y
,

224 
gboﬁón
 
keybﬂrd_tù
,

225 
GtkTªeModñ
 **
modñ
,

226 
GtkTªeP©h
 **
∑th
,

227 
GtkTªeIãr
 *
ôî
);

228 
	`gtk_ic⁄_võw_£t_toﬁtù_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
,

229 
göt
 
cﬁumn
);

230 
göt
 
	`gtk_ic⁄_võw_gë_toﬁtù_cﬁumn
 (
GtkIc⁄Võw
 *
ic⁄_võw
);

233 
G_END_DECLS


	@/usr/include/gtk/gtkimage.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_IMAGE_H__


32 
	#__GTK_IMAGE_H__


	)

35 
	~<gio/gio.h
>

36 
	~<gtk/gtkmisc.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_IMAGE
 (
	`gtk_image_gë_ty≥
 ())

	)

42 
	#GTK_IMAGE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_IMAGE
, 
GtkImage
))

	)

43 
	#GTK_IMAGE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_IMAGE
, 
GtkImageCœss
))

	)

44 
	#GTK_IS_IMAGE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_IMAGE
))

	)

45 
	#GTK_IS_IMAGE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_IMAGE
))

	)

46 
	#GTK_IMAGE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_IMAGE
, 
GtkImageCœss
))

	)

49 
_GtkImage
 
	tGtkImage
;

50 
_GtkImageCœss
 
	tGtkImageCœss
;

52 
_GtkImagePixm≠D©a
 
	tGtkImagePixm≠D©a
;

53 
_GtkImageImageD©a
 
	tGtkImageImageD©a
;

54 
_GtkImagePixbufD©a
 
	tGtkImagePixbufD©a
;

55 
_GtkImageStockD©a
 
	tGtkImageStockD©a
;

56 
_GtkImageIc⁄SëD©a
 
	tGtkImageIc⁄SëD©a
;

57 
_GtkImageAnim©i⁄D©a
 
	tGtkImageAnim©i⁄D©a
;

58 
_GtkImageIc⁄NameD©a
 
	tGtkImageIc⁄NameD©a
;

59 
_GtkImageGIc⁄D©a
 
	tGtkImageGIc⁄D©a
;

61 
	s_GtkImagePixm≠D©a


63 
GdkPixm≠
 *
	mpixm≠
;

66 
	s_GtkImageImageD©a


68 
GdkImage
 *
	mimage
;

71 
	s_GtkImagePixbufD©a


73 
GdkPixbuf
 *
	mpixbuf
;

76 
	s_GtkImageStockD©a


78 
gch¨
 *
	m°ock_id
;

81 
	s_GtkImageIc⁄SëD©a


83 
GtkIc⁄Së
 *
	mic⁄_£t
;

86 
	s_GtkImageAnim©i⁄D©a


88 
GdkPixbufAnim©i⁄
 *
	m™im
;

89 
GdkPixbufAnim©i⁄Iãr
 *
	môî
;

90 
guöt
 
	m‰ame_timeout
;

93 
	s_GtkImageIc⁄NameD©a


95 
gch¨
 *
	mic⁄_«me
;

96 
GdkPixbuf
 *
	mpixbuf
;

97 
guöt
 
	mtheme_ch™ge_id
;

100 
	s_GtkImageGIc⁄D©a


102 
GIc⁄
 *
	mic⁄
;

103 
GdkPixbuf
 *
	mpixbuf
;

104 
guöt
 
	mtheme_ch™ge_id
;

131 
	mGTK_IMAGE_EMPTY
,

132 
	mGTK_IMAGE_PIXMAP
,

133 
	mGTK_IMAGE_IMAGE
,

134 
	mGTK_IMAGE_PIXBUF
,

135 
	mGTK_IMAGE_STOCK
,

136 
	mGTK_IMAGE_ICON_SET
,

137 
	mGTK_IMAGE_ANIMATION
,

138 
	mGTK_IMAGE_ICON_NAME
,

139 
	mGTK_IMAGE_GICON


140 } 
	tGtkImageTy≥
;

148 
	s_GtkImage


150 
GtkMisc
 
	mmisc
;

152 
GtkImageTy≥
 
GSEAL
 (
°‹age_ty≥
);

156 
GtkImagePixm≠D©a
 
	mpixm≠
;

157 
GtkImageImageD©a
 
	mimage
;

158 
GtkImagePixbufD©a
 
	mpixbuf
;

159 
GtkImageStockD©a
 
	m°ock
;

160 
GtkImageIc⁄SëD©a
 
	mic⁄_£t
;

161 
GtkImageAnim©i⁄D©a
 
	m™im
;

162 
GtkImageIc⁄NameD©a
 
	m«me
;

163 
GtkImageGIc⁄D©a
 
	mgic⁄
;

164 } 
GSEAL
 (
d©a
);

167 
GdkBôm≠
 *
GSEAL
 (
mask
);

170 
GtkIc⁄Size
 
GSEAL
 (
ic⁄_size
);

173 
	s_GtkImageCœss


175 
GtkMiscCœss
 
	m∑ª¡_˛ass
;

178 (*
	m_gtk_ª£rved1
) ();

179 (*
	m_gtk_ª£rved2
) ();

180 (*
	m_gtk_ª£rved3
) ();

181 (*
	m_gtk_ª£rved4
) ();

184 #ifde‡
G_OS_WIN32


186 
	#gtk_image_√w_‰om_fûe
 
gtk_image_√w_‰om_fûe_utf8


	)

187 
	#gtk_image_£t_‰om_fûe
 
gtk_image_£t_‰om_fûe_utf8


	)

190 
GTy≥
 
	$gtk_image_gë_ty≥
 (Ë
G_GNUC_CONST
;

192 
GtkWidgë
* 
	`gtk_image_√w
 ();

193 
GtkWidgë
* 
	`gtk_image_√w_‰om_pixm≠
 (
GdkPixm≠
 *
pixm≠
,

194 
GdkBôm≠
 *
mask
);

195 
GtkWidgë
* 
	`gtk_image_√w_‰om_image
 (
GdkImage
 *
image
,

196 
GdkBôm≠
 *
mask
);

197 
GtkWidgë
* 
	`gtk_image_√w_‰om_fûe
 (c⁄° 
gch¨
 *
fûíame
);

198 
GtkWidgë
* 
	`gtk_image_√w_‰om_pixbuf
 (
GdkPixbuf
 *
pixbuf
);

199 
GtkWidgë
* 
	`gtk_image_√w_‰om_°ock
 (c⁄° 
gch¨
 *
°ock_id
,

200 
GtkIc⁄Size
 
size
);

201 
GtkWidgë
* 
	`gtk_image_√w_‰om_ic⁄_£t
 (
GtkIc⁄Së
 *
ic⁄_£t
,

202 
GtkIc⁄Size
 
size
);

203 
GtkWidgë
* 
	`gtk_image_√w_‰om_™im©i⁄
 (
GdkPixbufAnim©i⁄
 *
™im©i⁄
);

204 
GtkWidgë
* 
	`gtk_image_√w_‰om_ic⁄_«me
 (c⁄° 
gch¨
 *
ic⁄_«me
,

205 
GtkIc⁄Size
 
size
);

206 
GtkWidgë
* 
	`gtk_image_√w_‰om_gic⁄
 (
GIc⁄
 *
ic⁄
,

207 
GtkIc⁄Size
 
size
);

209 
	`gtk_image_˛ór
 (
GtkImage
 *
image
);

210 
	`gtk_image_£t_‰om_pixm≠
 (
GtkImage
 *
image
,

211 
GdkPixm≠
 *
pixm≠
,

212 
GdkBôm≠
 *
mask
);

213 
	`gtk_image_£t_‰om_image
 (
GtkImage
 *
image
,

214 
GdkImage
 *
gdk_image
,

215 
GdkBôm≠
 *
mask
);

216 
	`gtk_image_£t_‰om_fûe
 (
GtkImage
 *
image
,

217 c⁄° 
gch¨
 *
fûíame
);

218 
	`gtk_image_£t_‰om_pixbuf
 (
GtkImage
 *
image
,

219 
GdkPixbuf
 *
pixbuf
);

220 
	`gtk_image_£t_‰om_°ock
 (
GtkImage
 *
image
,

221 c⁄° 
gch¨
 *
°ock_id
,

222 
GtkIc⁄Size
 
size
);

223 
	`gtk_image_£t_‰om_ic⁄_£t
 (
GtkImage
 *
image
,

224 
GtkIc⁄Së
 *
ic⁄_£t
,

225 
GtkIc⁄Size
 
size
);

226 
	`gtk_image_£t_‰om_™im©i⁄
 (
GtkImage
 *
image
,

227 
GdkPixbufAnim©i⁄
 *
™im©i⁄
);

228 
	`gtk_image_£t_‰om_ic⁄_«me
 (
GtkImage
 *
image
,

229 c⁄° 
gch¨
 *
ic⁄_«me
,

230 
GtkIc⁄Size
 
size
);

231 
	`gtk_image_£t_‰om_gic⁄
 (
GtkImage
 *
image
,

232 
GIc⁄
 *
ic⁄
,

233 
GtkIc⁄Size
 
size
);

234 
	`gtk_image_£t_pixñ_size
 (
GtkImage
 *
image
,

235 
göt
 
pixñ_size
);

237 
GtkImageTy≥
 
	`gtk_image_gë_°‹age_ty≥
 (
GtkImage
 *
image
);

239 
	`gtk_image_gë_pixm≠
 (
GtkImage
 *
image
,

240 
GdkPixm≠
 **
pixm≠
,

241 
GdkBôm≠
 **
mask
);

242 
	`gtk_image_gë_image
 (
GtkImage
 *
image
,

243 
GdkImage
 **
gdk_image
,

244 
GdkBôm≠
 **
mask
);

245 
GdkPixbuf
* 
	`gtk_image_gë_pixbuf
 (
GtkImage
 *
image
);

246 
	`gtk_image_gë_°ock
 (
GtkImage
 *
image
,

247 
gch¨
 **
°ock_id
,

248 
GtkIc⁄Size
 *
size
);

249 
	`gtk_image_gë_ic⁄_£t
 (
GtkImage
 *
image
,

250 
GtkIc⁄Së
 **
ic⁄_£t
,

251 
GtkIc⁄Size
 *
size
);

252 
GdkPixbufAnim©i⁄
* 
	`gtk_image_gë_™im©i⁄
 (
GtkImage
 *
image
);

253 
	`gtk_image_gë_ic⁄_«me
 (
GtkImage
 *
image
,

254 
G_CONST_RETURN
 
gch¨
 **
ic⁄_«me
,

255 
GtkIc⁄Size
 *
size
);

256 
	`gtk_image_gë_gic⁄
 (
GtkImage
 *
image
,

257 
GIc⁄
 **
gic⁄
,

258 
GtkIc⁄Size
 *
size
);

259 
göt
 
	`gtk_image_gë_pixñ_size
 (
GtkImage
 *
image
);

261 #i‚de‡
GTK_DISABLE_DEPRECATED


264 
	`gtk_image_£t
 (
GtkImage
 *
image
,

265 
GdkImage
 *
vÆ
,

266 
GdkBôm≠
 *
mask
);

267 
	`gtk_image_gë
 (
GtkImage
 *
image
,

268 
GdkImage
 **
vÆ
,

269 
GdkBôm≠
 **
mask
);

272 
G_END_DECLS


	@/usr/include/gtk/gtkimagemenuitem.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_IMAGE_MENU_ITEM_H__


32 
	#__GTK_IMAGE_MENU_ITEM_H__


	)

35 
	~<gtk/gtkmíuôem.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_IMAGE_MENU_ITEM
 (
	`gtk_image_míu_ôem_gë_ty≥
 ())

	)

41 
	#GTK_IMAGE_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_IMAGE_MENU_ITEM
, 
GtkImageMíuIãm
))

	)

42 
	#GTK_IMAGE_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_IMAGE_MENU_ITEM
, 
GtkImageMíuIãmCœss
))

	)

43 
	#GTK_IS_IMAGE_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_IMAGE_MENU_ITEM
))

	)

44 
	#GTK_IS_IMAGE_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_IMAGE_MENU_ITEM
))

	)

45 
	#GTK_IMAGE_MENU_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_IMAGE_MENU_ITEM
, 
GtkImageMíuIãmCœss
))

	)

48 
_GtkImageMíuIãm
 
	tGtkImageMíuIãm
;

49 
_GtkImageMíuIãmCœss
 
	tGtkImageMíuIãmCœss
;

51 
	s_GtkImageMíuIãm


53 
GtkMíuIãm
 
	mmíu_ôem
;

56 
GtkWidgë
 *
GSEAL
 (
image
);

60 
	s_GtkImageMíuIãmCœss


62 
GtkMíuIãmCœss
 
	m∑ª¡_˛ass
;

66 
GTy≥
 
	$gtk_image_míu_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

67 
GtkWidgë
* 
	`gtk_image_míu_ôem_√w
 ();

68 
GtkWidgë
* 
	`gtk_image_míu_ôem_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

69 
GtkWidgë
* 
	`gtk_image_míu_ôem_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
œbñ
);

70 
GtkWidgë
* 
	`gtk_image_míu_ôem_√w_‰om_°ock
 (c⁄° 
gch¨
 *
°ock_id
,

71 
GtkAc˚lGroup
 *
ac˚l_group
);

72 
	`gtk_image_míu_ôem_£t_Æways_show_image
 (
GtkImageMíuIãm
 *
image_míu_ôem
,

73 
gboﬁón
 
Æways_show
);

74 
gboﬁón
 
	`gtk_image_míu_ôem_gë_Æways_show_image
 (
GtkImageMíuIãm
 *
image_míu_ôem
);

75 
	`gtk_image_míu_ôem_£t_image
 (
GtkImageMíuIãm
 *
image_míu_ôem
,

76 
GtkWidgë
 *
image
);

77 
GtkWidgë
* 
	`gtk_image_míu_ôem_gë_image
 (
GtkImageMíuIãm
 *
image_míu_ôem
);

78 
	`gtk_image_míu_ôem_£t_u£_°ock
 (
GtkImageMíuIãm
 *
image_míu_ôem
,

79 
gboﬁón
 
u£_°ock
);

80 
gboﬁón
 
	`gtk_image_míu_ôem_gë_u£_°ock
 (
GtkImageMíuIãm
 *
image_míu_ôem
);

81 
	`gtk_image_míu_ôem_£t_ac˚l_group
 (
GtkImageMíuIãm
 *
image_míu_ôem
,

82 
GtkAc˚lGroup
 *
ac˚l_group
);

84 
G_END_DECLS


	@/usr/include/gtk/gtkimcontext.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_IM_CONTEXT_H__


25 
	#__GTK_IM_CONTEXT_H__


	)

28 
	~<gdk/gdk.h
>

29 
	~<gtk/gtkobje˘.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_IM_CONTEXT
 (
	`gtk_im_c⁄ãxt_gë_ty≥
 ())

	)

35 
	#GTK_IM_CONTEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_IM_CONTEXT
, 
GtkIMC⁄ãxt
))

	)

36 
	#GTK_IM_CONTEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_IM_CONTEXT
, 
GtkIMC⁄ãxtCœss
))

	)

37 
	#GTK_IS_IM_CONTEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_IM_CONTEXT
))

	)

38 
	#GTK_IS_IM_CONTEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_IM_CONTEXT
))

	)

39 
	#GTK_IM_CONTEXT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_IM_CONTEXT
, 
GtkIMC⁄ãxtCœss
))

	)

42 
_GtkIMC⁄ãxt
 
	tGtkIMC⁄ãxt
;

43 
_GtkIMC⁄ãxtCœss
 
	tGtkIMC⁄ãxtCœss
;

45 
	s_GtkIMC⁄ãxt


47 
GObje˘
 
	m∑ª¡_ö°™˚
;

50 
	s_GtkIMC⁄ãxtCœss


56 
GtkObje˘Cœss
 
	m∑ª¡_˛ass
;

60 (*
	m¥ìdô_°¨t
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
);

61 (*
	m¥ìdô_íd
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
);

62 (*
	m¥ìdô_ch™ged
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
);

63 (*
	mcommô
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
, c⁄° 
gch¨
 *
	m°r
);

64 
gboﬁón
 (*
ªåõve_suºoundög
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
);

65 
gboﬁón
 (*
dñëe_suºoundög
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

66 
göt
 
	moff£t
,

67 
göt
 
	mn_ch¨s
);

70 (*
	m£t_˛õ¡_wödow
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

71 
GdkWödow
 *
	mwödow
);

72 (*
	mgë_¥ìdô_°rög
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

73 
gch¨
 **
	m°r
,

74 
P™goAârLi°
 **
	m©ås
,

75 
göt
 *
	mcurs‹_pos
);

76 
gboﬁón
 (*
fûãr_key¥ess
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

77 
GdkEvítKey
 *
	mevít
);

78 (*
	mfocus_ö
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
);

79 (*
	mfocus_out
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
);

80 (*
	mª£t
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
);

81 (*
	m£t_curs‹_loˇti⁄
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

82 
GdkRe˘™gÀ
 *
	m¨ó
);

83 (*
	m£t_u£_¥ìdô
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

84 
gboﬁón
 
	mu£_¥ìdô
);

85 (*
	m£t_suºoundög
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

86 c⁄° 
gch¨
 *
	mãxt
,

87 
göt
 
	mÀn
,

88 
göt
 
	mcurs‹_ödex
);

89 
gboﬁón
 (*
gë_suºoundög
Ë(
GtkIMC⁄ãxt
 *
	mc⁄ãxt
,

90 
gch¨
 **
	mãxt
,

91 
göt
 *
	mcurs‹_ödex
);

94 (*
	m_gtk_ª£rved1
) ();

95 (*
	m_gtk_ª£rved2
) ();

96 (*
	m_gtk_ª£rved3
) ();

97 (*
	m_gtk_ª£rved4
) ();

98 (*
	m_gtk_ª£rved5
) ();

99 (*
	m_gtk_ª£rved6
) ();

102 
GTy≥
 
	$gtk_im_c⁄ãxt_gë_ty≥
 (Ë
G_GNUC_CONST
;

104 
	`gtk_im_c⁄ãxt_£t_˛õ¡_wödow
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

105 
GdkWödow
 *
wödow
);

106 
	`gtk_im_c⁄ãxt_gë_¥ìdô_°rög
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

107 
gch¨
 **
°r
,

108 
P™goAârLi°
 **
©ås
,

109 
göt
 *
curs‹_pos
);

110 
gboﬁón
 
	`gtk_im_c⁄ãxt_fûãr_key¥ess
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

111 
GdkEvítKey
 *
evít
);

112 
	`gtk_im_c⁄ãxt_focus_ö
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
);

113 
	`gtk_im_c⁄ãxt_focus_out
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
);

114 
	`gtk_im_c⁄ãxt_ª£t
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
);

115 
	`gtk_im_c⁄ãxt_£t_curs‹_loˇti⁄
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

116 c⁄° 
GdkRe˘™gÀ
 *
¨ó
);

117 
	`gtk_im_c⁄ãxt_£t_u£_¥ìdô
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

118 
gboﬁón
 
u£_¥ìdô
);

119 
	`gtk_im_c⁄ãxt_£t_suºoundög
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

120 c⁄° 
gch¨
 *
ãxt
,

121 
göt
 
Àn
,

122 
göt
 
curs‹_ödex
);

123 
gboﬁón
 
	`gtk_im_c⁄ãxt_gë_suºoundög
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

124 
gch¨
 **
ãxt
,

125 
göt
 *
curs‹_ödex
);

126 
gboﬁón
 
	`gtk_im_c⁄ãxt_dñëe_suºoundög
 (
GtkIMC⁄ãxt
 *
c⁄ãxt
,

127 
göt
 
off£t
,

128 
göt
 
n_ch¨s
);

130 
G_END_DECLS


	@/usr/include/gtk/gtkimcontextsimple.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_IM_CONTEXT_SIMPLE_H__


25 
	#__GTK_IM_CONTEXT_SIMPLE_H__


	)

27 
	~<gtk/gtkimc⁄ãxt.h
>

30 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_IM_CONTEXT_SIMPLE
 (
	`gtk_im_c⁄ãxt_sim∂e_gë_ty≥
 ())

	)

34 
	#GTK_IM_CONTEXT_SIMPLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_IM_CONTEXT_SIMPLE
, 
GtkIMC⁄ãxtSim∂e
))

	)

35 
	#GTK_IM_CONTEXT_SIMPLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_IM_CONTEXT_SIMPLE
, 
GtkIMC⁄ãxtSim∂eCœss
))

	)

36 
	#GTK_IS_IM_CONTEXT_SIMPLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_IM_CONTEXT_SIMPLE
))

	)

37 
	#GTK_IS_IM_CONTEXT_SIMPLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_IM_CONTEXT_SIMPLE
))

	)

38 
	#GTK_IM_CONTEXT_SIMPLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_IM_CONTEXT_SIMPLE
, 
GtkIMC⁄ãxtSim∂eCœss
))

	)

41 
_GtkIMC⁄ãxtSim∂e
 
	tGtkIMC⁄ãxtSim∂e
;

42 
_GtkIMC⁄ãxtSim∂eCœss
 
	tGtkIMC⁄ãxtSim∂eCœss
;

44 
	#GTK_MAX_COMPOSE_LEN
 7

	)

46 
	s_GtkIMC⁄ãxtSim∂e


48 
GtkIMC⁄ãxt
 
	mobje˘
;

50 
GSLi°
 *
GSEAL
 (
èbÀs
);

52 
guöt
 
GSEAL
 (
compo£_buf„r
[
GTK_MAX_COMPOSE_LEN
 + 1]);

53 
gunich¨
 
GSEAL
 (
ã¡©ive_m©ch
);

54 
göt
 
GSEAL
 (
ã¡©ive_m©ch_Àn
);

56 
guöt
 
GSEAL
 (
ö_hex_£quí˚
) : 1;

57 
guöt
 
GSEAL
 (
modifõrs_dr›≥d
) : 1;

60 
	s_GtkIMC⁄ãxtSim∂eCœss


62 
GtkIMC⁄ãxtCœss
 
	m∑ª¡_˛ass
;

65 
GTy≥
 
	$gtk_im_c⁄ãxt_sim∂e_gë_ty≥
 (Ë
G_GNUC_CONST
;

66 
GtkIMC⁄ãxt
 *
	`gtk_im_c⁄ãxt_sim∂e_√w
 ();

68 
	`gtk_im_c⁄ãxt_sim∂e_add_èbÀ
 (
GtkIMC⁄ãxtSim∂e
 *
c⁄ãxt_sim∂e
,

69 
guöt16
 *
d©a
,

70 
göt
 
max_£q_Àn
,

71 
göt
 
n_£qs
);

74 
G_END_DECLS


	@/usr/include/gtk/gtkimmulticontext.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_IM_MULTICONTEXT_H__


25 
	#__GTK_IM_MULTICONTEXT_H__


	)

27 
	~<gtk/gtkimc⁄ãxt.h
>

28 
	~<gtk/gtkmíushñl.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_IM_MULTICONTEXT
 (
	`gtk_im_mu…ic⁄ãxt_gë_ty≥
 ())

	)

33 
	#GTK_IM_MULTICONTEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_IM_MULTICONTEXT
, 
GtkIMMu…ic⁄ãxt
))

	)

34 
	#GTK_IM_MULTICONTEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_IM_MULTICONTEXT
, 
GtkIMMu…ic⁄ãxtCœss
))

	)

35 
	#GTK_IS_IM_MULTICONTEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_IM_MULTICONTEXT
))

	)

36 
	#GTK_IS_IM_MULTICONTEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_IM_MULTICONTEXT
))

	)

37 
	#GTK_IM_MULTICONTEXT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_IM_MULTICONTEXT
, 
GtkIMMu…ic⁄ãxtCœss
))

	)

40 
_GtkIMMu…ic⁄ãxt
 
	tGtkIMMu…ic⁄ãxt
;

41 
_GtkIMMu…ic⁄ãxtCœss
 
	tGtkIMMu…ic⁄ãxtCœss
;

42 
_GtkIMMu…ic⁄ãxtPriv©e
 
	tGtkIMMu…ic⁄ãxtPriv©e
;

44 
	s_GtkIMMu…ic⁄ãxt


46 
GtkIMC⁄ãxt
 
	mobje˘
;

48 
GtkIMC⁄ãxt
 *
GSEAL
 (
¶ave
);

50 
GtkIMMu…ic⁄ãxtPriv©e
 *
GSEAL
 (
¥iv
);

52 
gch¨
 *
GSEAL
 (
c⁄ãxt_id
);

55 
	s_GtkIMMu…ic⁄ãxtCœss


57 
GtkIMC⁄ãxtCœss
 
	m∑ª¡_˛ass
;

60 (*
	m_gtk_ª£rved1
) ();

61 (*
	m_gtk_ª£rved2
) ();

62 (*
	m_gtk_ª£rved3
) ();

63 (*
	m_gtk_ª£rved4
) ();

66 
GTy≥
 
	$gtk_im_mu…ic⁄ãxt_gë_ty≥
 (Ë
G_GNUC_CONST
;

67 
GtkIMC⁄ãxt
 *
	`gtk_im_mu…ic⁄ãxt_√w
 ();

69 
	`gtk_im_mu…ic⁄ãxt_≠≥nd_míuôems
 (
GtkIMMu…ic⁄ãxt
 *
c⁄ãxt
,

70 
GtkMíuShñl
 *
míushñl
);

71 c⁄° * 
	`gtk_im_mu…ic⁄ãxt_gë_c⁄ãxt_id
 (
GtkIMMu…ic⁄ãxt
 *
c⁄ãxt
);

73 
	`gtk_im_mu…ic⁄ãxt_£t_c⁄ãxt_id
 (
GtkIMMu…ic⁄ãxt
 *
c⁄ãxt
,

74 c⁄° *
c⁄ãxt_id
);

76 
G_END_DECLS


	@/usr/include/gtk/gtkinfobar.h

31 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_INFO_BAR_H__


36 
	#__GTK_INFO_BAR_H__


	)

38 
	~<gtk/gtkhbox.h
>

39 
	~<gtk/gtkíums.h
>

41 
	gG_BEGIN_DECLS


46 
	#GTK_TYPE_INFO_BAR
 (
	`gtk_öfo_b¨_gë_ty≥
())

	)

47 
	#GTK_INFO_BAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
((obj), 
GTK_TYPE_INFO_BAR
, 
GtkInfoB¨
))

	)

48 
	#GTK_INFO_BAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
((kœss), 
GTK_TYPE_INFO_BAR
, 
GtkInfoB¨Cœss
))

	)

49 
	#GTK_IS_INFO_BAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
((obj), 
GTK_TYPE_INFO_BAR
))

	)

50 
	#GTK_IS_INFO_BAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_INFO_BAR
))

	)

51 
	#GTK_INFO_BAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_INFO_BAR
, 
GtkInfoB¨Cœss
))

	)

54 
_GtkInfoB¨Priv©e
 
	tGtkInfoB¨Priv©e
;

55 
_GtkInfoB¨Cœss
 
	tGtkInfoB¨Cœss
;

56 
_GtkInfoB¨
 
	tGtkInfoB¨
;

59 
	s_GtkInfoB¨


61 
GtkHBox
 
	m∑ª¡
;

64 
GtkInfoB¨Priv©e
 *
	m¥iv
;

68 
	s_GtkInfoB¨Cœss


70 
GtkHBoxCœss
 
	m∑ª¡_˛ass
;

73 (* 
	mª•⁄£
Ë(
GtkInfoB¨
 *
	möfo_b¨
, 
göt
 
	mª•⁄£_id
);

76 (* 
	m˛o£
Ë(
GtkInfoB¨
 *
	möfo_b¨
);

79 (*
	m_gtk_ª£rved1
) ();

80 (*
	m_gtk_ª£rved2
) ();

81 (*
	m_gtk_ª£rved3
) ();

82 (*
	m_gtk_ª£rved4
) ();

83 (*
	m_gtk_ª£rved5
) ();

84 (*
	m_gtk_ª£rved6
) ();

87 
GTy≥
 
	$gtk_öfo_b¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

88 
GtkWidgë
 *
	`gtk_öfo_b¨_√w
 ();

90 
GtkWidgë
 *
	`gtk_öfo_b¨_√w_wôh_buâ⁄s
 (c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

93 
GtkWidgë
 *
	`gtk_öfo_b¨_gë_a˘i⁄_¨ó
 (
GtkInfoB¨
 *
öfo_b¨
);

94 
GtkWidgë
 *
	`gtk_öfo_b¨_gë_c⁄ã¡_¨ó
 (
GtkInfoB¨
 *
öfo_b¨
);

95 
	`gtk_öfo_b¨_add_a˘i⁄_widgë
 (
GtkInfoB¨
 *
öfo_b¨
,

96 
GtkWidgë
 *
chûd
,

97 
göt
 
ª•⁄£_id
);

98 
GtkWidgë
 *
	`gtk_öfo_b¨_add_buâ⁄
 (
GtkInfoB¨
 *
öfo_b¨
,

99 c⁄° 
gch¨
 *
buâ⁄_ãxt
,

100 
göt
 
ª•⁄£_id
);

101 
	`gtk_öfo_b¨_add_buâ⁄s
 (
GtkInfoB¨
 *
öfo_b¨
,

102 c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

104 
	`gtk_öfo_b¨_£t_ª•⁄£_£nsôive
 (
GtkInfoB¨
 *
öfo_b¨
,

105 
göt
 
ª•⁄£_id
,

106 
gboﬁón
 
£âög
);

107 
	`gtk_öfo_b¨_£t_deÁu…_ª•⁄£
 (
GtkInfoB¨
 *
öfo_b¨
,

108 
göt
 
ª•⁄£_id
);

111 
	`gtk_öfo_b¨_ª•⁄£
 (
GtkInfoB¨
 *
öfo_b¨
,

112 
göt
 
ª•⁄£_id
);

114 
	`gtk_öfo_b¨_£t_mesßge_ty≥
 (
GtkInfoB¨
 *
öfo_b¨
,

115 
GtkMesßgeTy≥
 
mesßge_ty≥
);

116 
GtkMesßgeTy≥
 
	`gtk_öfo_b¨_gë_mesßge_ty≥
 (
GtkInfoB¨
 *
öfo_b¨
);

118 
G_END_DECLS


	@/usr/include/gtk/gtkinputdialog.h

37 #i‚de‡
GTK_DISABLE_DEPRECATED


39 #i‚de‡
__GTK_INPUTDIALOG_H__


40 
	#__GTK_INPUTDIALOG_H__


	)

43 
	~<gtk/gtkdülog.h
>

46 
	gG_BEGIN_DECLS


48 
	#GTK_TYPE_INPUT_DIALOG
 (
	`gtk_öput_dülog_gë_ty≥
 ())

	)

49 
	#GTK_INPUT_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_INPUT_DIALOG
, 
GtkI≈utDülog
))

	)

50 
	#GTK_INPUT_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_INPUT_DIALOG
, 
GtkI≈utDülogCœss
))

	)

51 
	#GTK_IS_INPUT_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_INPUT_DIALOG
))

	)

52 
	#GTK_IS_INPUT_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_INPUT_DIALOG
))

	)

53 
	#GTK_INPUT_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_INPUT_DIALOG
, 
GtkI≈utDülogCœss
))

	)

56 
_GtkI≈utDülog
 
	tGtkI≈utDülog
;

57 
_GtkI≈utDülogCœss
 
	tGtkI≈utDülogCœss
;

59 
	s_GtkI≈utDülog


61 
GtkDülog
 
	mdülog
;

63 
GtkWidgë
 *
GSEAL
 (
axis_li°
);

64 
GtkWidgë
 *
GSEAL
 (
axis_li°box
);

65 
GtkWidgë
 *
GSEAL
 (
mode_›ti⁄míu
);

67 
GtkWidgë
 *
GSEAL
 (
˛o£_buâ⁄
);

68 
GtkWidgë
 *
GSEAL
 (
ßve_buâ⁄
);

70 
GtkWidgë
 *
GSEAL
 (
axis_ôems
[
GDK_AXIS_LAST
]);

71 
GdkDevi˚
 *
GSEAL
 (
cuºít_devi˚
);

73 
GtkWidgë
 *
GSEAL
 (
keys_li°
);

74 
GtkWidgë
 *
GSEAL
 (
keys_li°box
);

77 
	s_GtkI≈utDülogCœss


79 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

81 (* 
	míabÀ_devi˚
Ë(
GtkI≈utDülog
 *
	möputd
,

82 
GdkDevi˚
 *
	mdevi˚
);

83 (* 
	mdißbÀ_devi˚
Ë(
GtkI≈utDülog
 *
	möputd
,

84 
GdkDevi˚
 *
	mdevi˚
);

87 (*
	m_gtk_ª£rved1
) ();

88 (*
	m_gtk_ª£rved2
) ();

89 (*
	m_gtk_ª£rved3
) ();

90 (*
	m_gtk_ª£rved4
) ();

93 
GTy≥
 
	$gtk_öput_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

94 
GtkWidgë
* 
	`gtk_öput_dülog_√w
 ();

96 
G_END_DECLS


	@/usr/include/gtk/gtkinvisible.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_INVISIBLE_H__


32 
	#__GTK_INVISIBLE_H__


	)

34 
	~<gtk/gtkwidgë.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_INVISIBLE
 (
	`gtk_övisibÀ_gë_ty≥
 ())

	)

39 
	#GTK_INVISIBLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_INVISIBLE
, 
GtkInvisibÀ
))

	)

40 
	#GTK_INVISIBLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_INVISIBLE
, 
GtkInvisibÀCœss
))

	)

41 
	#GTK_IS_INVISIBLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_INVISIBLE
))

	)

42 
	#GTK_IS_INVISIBLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_INVISIBLE
))

	)

43 
	#GTK_INVISIBLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_INVISIBLE
, 
GtkInvisibÀCœss
))

	)

46 
_GtkInvisibÀ
 
	tGtkInvisibÀ
;

47 
_GtkInvisibÀCœss
 
	tGtkInvisibÀCœss
;

49 
	s_GtkInvisibÀ


51 
GtkWidgë
 
	mwidgë
;

53 
gboﬁón
 
GSEAL
 (
has_u£r_ªf_cou¡
);

54 
GdkS¸ìn
 *
GSEAL
 (
s¸ìn
);

57 
	s_GtkInvisibÀCœss


59 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

62 (*
	m_gtk_ª£rved1
) ();

63 (*
	m_gtk_ª£rved2
) ();

64 (*
	m_gtk_ª£rved3
) ();

65 (*
	m_gtk_ª£rved4
) ();

68 
GTy≥
 
	$gtk_övisibÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkWidgë
* 
	`gtk_övisibÀ_√w
 ();

71 
GtkWidgë
* 
	`gtk_övisibÀ_√w_f‹_s¸ìn
 (
GdkS¸ìn
 *
s¸ìn
);

72 
	`gtk_övisibÀ_£t_s¸ìn
 (
GtkInvisibÀ
 *
övisibÀ
,

73 
GdkS¸ìn
 *
s¸ìn
);

74 
GdkS¸ìn
* 
	`gtk_övisibÀ_gë_s¸ìn
 (
GtkInvisibÀ
 *
övisibÀ
);

76 
G_END_DECLS


	@/usr/include/gtk/gtkitem.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_ITEM_H__


32 
	#__GTK_ITEM_H__


	)

35 
	~<gtk/gtkbö.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_ITEM
 (
	`gtk_ôem_gë_ty≥
 ())

	)

41 
	#GTK_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ITEM
, 
GtkIãm
))

	)

42 
	#GTK_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ITEM
, 
GtkIãmCœss
))

	)

43 
	#GTK_IS_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ITEM
))

	)

44 
	#GTK_IS_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ITEM
))

	)

45 
	#GTK_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ITEM
, 
GtkIãmCœss
))

	)

48 
_GtkIãm
 
	tGtkIãm
;

49 
_GtkIãmCœss
 
	tGtkIãmCœss
;

51 
	s_GtkIãm


53 
GtkBö
 
	mbö
;

56 
	s_GtkIãmCœss


58 
GtkBöCœss
 
	m∑ª¡_˛ass
;

60 (* 
	m£À˘
Ë(
GtkIãm
 *
	môem
);

61 (* 
	mde£À˘
Ë(
GtkIãm
 *
	môem
);

62 (* 
	mtoggÀ
Ë(
GtkIãm
 *
	môem
);

65 (*
	m_gtk_ª£rved1
) ();

66 (*
	m_gtk_ª£rved2
) ();

67 (*
	m_gtk_ª£rved3
) ();

68 (*
	m_gtk_ª£rved4
) ();

72 
GTy≥
 
	$gtk_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

73 
	`gtk_ôem_£À˘
 (
GtkIãm
 *
ôem
);

74 
	`gtk_ôem_de£À˘
 (
GtkIãm
 *
ôem
);

75 
	`gtk_ôem_toggÀ
 (
GtkIãm
 *
ôem
);

77 
G_END_DECLS


	@/usr/include/gtk/gtkitemfactory.h

30 #i‚de‡
GTK_DISABLE_DEPRECATED


32 #i‚de‡
__GTK_ITEM_FACTORY_H__


33 
	#__GTK_ITEM_FACTORY_H__


	)

35 
	~<gtk/gtk.h
>

38 
G_BEGIN_DECLS


40 (*
	tGtkPrötFunc
Ë(
	tgpoöãr
 
	tfunc_d©a
,

41 c⁄° 
	tgch¨
 *
	t°r
);

47 (*
	tGtkIãmFa˘‹yCÆlback
) ();

48 (*
	tGtkIãmFa˘‹yCÆlback1
Ë(
	tgpoöãr
 
	tˇŒback_d©a
,

49 
	tguöt
 
	tˇŒback_a˘i⁄
,

50 
	tGtkWidgë
 *
	twidgë
);

52 
	#GTK_TYPE_ITEM_FACTORY
 (
	`gtk_ôem_Á˘‹y_gë_ty≥
 ())

	)

53 
	#GTK_ITEM_FACTORY
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_ITEM_FACTORY
, 
GtkIãmFa˘‹y
))

	)

54 
	#GTK_ITEM_FACTORY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_ITEM_FACTORY
, 
GtkIãmFa˘‹yCœss
))

	)

55 
	#GTK_IS_ITEM_FACTORY
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_ITEM_FACTORY
))

	)

56 
	#GTK_IS_ITEM_FACTORY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_ITEM_FACTORY
))

	)

57 
	#GTK_ITEM_FACTORY_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_ITEM_FACTORY
, 
GtkIãmFa˘‹yCœss
))

	)

60 
_GtkIãmFa˘‹y
 
	tGtkIãmFa˘‹y
;

61 
_GtkIãmFa˘‹yCœss
 
	tGtkIãmFa˘‹yCœss
;

62 
_GtkIãmFa˘‹yE¡ry
 
	tGtkIãmFa˘‹yE¡ry
;

63 
_GtkIãmFa˘‹yIãm
 
	tGtkIãmFa˘‹yIãm
;

65 
	s_GtkIãmFa˘‹y


67 
GtkObje˘
 
obje˘
;

69 
gch¨
 *
∑th
;

70 
GtkAc˚lGroup
 *
ac˚l_group
;

71 
GtkWidgë
 *
widgë
;

72 
GSLi°
 *
ôems
;

74 
GtkTøn¶©eFunc
 
å™¶©e_func
;

75 
gpoöãr
 
å™¶©e_d©a
;

76 
GDe°royNŸify
 
å™¶©e_nŸify
;

79 
	s_GtkIãmFa˘‹yCœss


81 
GtkObje˘Cœss
 
obje˘_˛ass
;

83 
GHashTabÀ
 *
ôem_ht
;

86 (*
_gtk_ª£rved1
) ();

87 (*
_gtk_ª£rved2
) ();

88 (*
_gtk_ª£rved3
) ();

89 (*
_gtk_ª£rved4
) ();

92 
	s_GtkIãmFa˘‹yE¡ry


94 
gch¨
 *
∑th
;

95 
gch¨
 *
ac˚Àøt‹
;

97 
GtkIãmFa˘‹yCÆlback
 
ˇŒback
;

98 
guöt
 
ˇŒback_a˘i⁄
;

116 
gch¨
 *
ôem_ty≥
;

122 
gc⁄°poöãr
 
exåa_d©a
;

125 
	s_GtkIãmFa˘‹yIãm


127 
gch¨
 *
∑th
;

128 
GSLi°
 *
widgës
;

132 
GTy≥
 
	$gtk_ôem_Á˘‹y_gë_ty≥
 (Ë
G_GNUC_CONST
;

137 
GtkIãmFa˘‹y
* 
	`gtk_ôem_Á˘‹y_√w
 (
GTy≥
 
c⁄èöî_ty≥
,

138 c⁄° 
gch¨
 *
∑th
,

139 
GtkAc˚lGroup
 *
ac˚l_group
);

140 
	`gtk_ôem_Á˘‹y_c⁄°ru˘
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

141 
GTy≥
 
c⁄èöî_ty≥
,

142 c⁄° 
gch¨
 *
∑th
,

143 
GtkAc˚lGroup
 *
ac˚l_group
);

147 
	`gtk_ôem_Á˘‹y_add_f‹eign
 (
GtkWidgë
 *
ac˚l_widgë
,

148 c⁄° 
gch¨
 *
fuŒ_∑th
,

149 
GtkAc˚lGroup
 *
ac˚l_group
,

150 
guöt
 
keyvÆ
,

151 
GdkModifõrTy≥
 
modifõrs
);

153 
GtkIãmFa˘‹y
* 
	`gtk_ôem_Á˘‹y_‰om_widgë
 (
GtkWidgë
 *
widgë
);

154 
G_CONST_RETURN
 
gch¨
* 
	`gtk_ôem_Á˘‹y_∑th_‰om_widgë
 (
GtkWidgë
 *
widgë
);

156 
GtkWidgë
* 
	`gtk_ôem_Á˘‹y_gë_ôem
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

157 c⁄° 
gch¨
 *
∑th
);

158 
GtkWidgë
* 
	`gtk_ôem_Á˘‹y_gë_widgë
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

159 c⁄° 
gch¨
 *
∑th
);

160 
GtkWidgë
* 
	`gtk_ôem_Á˘‹y_gë_widgë_by_a˘i⁄
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

161 
guöt
 
a˘i⁄
);

162 
GtkWidgë
* 
	`gtk_ôem_Á˘‹y_gë_ôem_by_a˘i⁄
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

163 
guöt
 
a˘i⁄
);

165 
	`gtk_ôem_Á˘‹y_¸óã_ôem
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

166 
GtkIãmFa˘‹yE¡ry
 *
íåy
,

167 
gpoöãr
 
ˇŒback_d©a
,

168 
guöt
 
ˇŒback_ty≥
);

169 
	`gtk_ôem_Á˘‹y_¸óã_ôems
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

170 
guöt
 
n_íåõs
,

171 
GtkIãmFa˘‹yE¡ry
 *
íåõs
,

172 
gpoöãr
 
ˇŒback_d©a
);

173 
	`gtk_ôem_Á˘‹y_dñëe_ôem
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

174 c⁄° 
gch¨
 *
∑th
);

175 
	`gtk_ôem_Á˘‹y_dñëe_íåy
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

176 
GtkIãmFa˘‹yE¡ry
 *
íåy
);

177 
	`gtk_ôem_Á˘‹y_dñëe_íåõs
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

178 
guöt
 
n_íåõs
,

179 
GtkIãmFa˘‹yE¡ry
 *
íåõs
);

180 
	`gtk_ôem_Á˘‹y_p›up
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

181 
guöt
 
x
,

182 
guöt
 
y
,

183 
guöt
 
mou£_buâ⁄
,

184 
guöt32
 
time_
);

185 
	`gtk_ôem_Á˘‹y_p›up_wôh_d©a
(
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

186 
gpoöãr
 
p›up_d©a
,

187 
GDe°royNŸify
 
de°roy
,

188 
guöt
 
x
,

189 
guöt
 
y
,

190 
guöt
 
mou£_buâ⁄
,

191 
guöt32
 
time_
);

192 
gpoöãr
 
	`gtk_ôem_Á˘‹y_p›up_d©a
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
);

193 
gpoöãr
 
	`gtk_ôem_Á˘‹y_p›up_d©a_‰om_widgë
 (
GtkWidgë
 *
widgë
);

194 
	`gtk_ôem_Á˘‹y_£t_å™¶©e_func
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

195 
GtkTøn¶©eFunc
 
func
,

196 
gpoöãr
 
d©a
,

197 
GDe°royNŸify
 
nŸify
);

203 (*
	tGtkMíuCÆlback
Ë(
	tGtkWidgë
 *
	twidgë
,

204 
	tgpoöãr
 
	tu£r_d©a
);

206 
gch¨
 *
∑th
;

207 
gch¨
 *
ac˚Àøt‹
;

208 
GtkMíuCÆlback
 
ˇŒback
;

209 
gpoöãr
 
ˇŒback_d©a
;

210 
GtkWidgë
 *
widgë
;

211 } 
	tGtkMíuE¡ry
;

214 (*
	tGtkIãmFa˘‹yCÆlback2
Ë(
	tGtkWidgë
 *
	twidgë
,

215 
	tgpoöãr
 
	tˇŒback_d©a
,

216 
	tguöt
 
	tˇŒback_a˘i⁄
);

219 
	`gtk_ôem_Á˘‹y_¸óã_ôems_ac
 (
GtkIãmFa˘‹y
 *
iÁ˘‹y
,

220 
guöt
 
n_íåõs
,

221 
GtkIãmFa˘‹yE¡ry
 *
íåõs
,

222 
gpoöãr
 
ˇŒback_d©a
,

223 
guöt
 
ˇŒback_ty≥
);

225 
GtkIãmFa˘‹y
* 
	`gtk_ôem_Á˘‹y_‰om_∑th
 (c⁄° 
gch¨
 *
∑th
);

226 
	`gtk_ôem_Á˘‹y_¸óã_míu_íåõs
 (
guöt
 
n_íåõs
,

227 
GtkMíuE¡ry
 *
íåõs
);

228 
	`gtk_ôem_Á˘‹õs_∑th_dñëe
 (c⁄° 
gch¨
 *
iÁ˘‹y_∑th
,

229 c⁄° 
gch¨
 *
∑th
);

231 
G_END_DECLS


	@/usr/include/gtk/gtklabel.h

26 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

30 #i‚de‡
__GTK_LABEL_H__


31 
	#__GTK_LABEL_H__


	)

34 
	~<gtk/gtkmisc.h
>

35 
	~<gtk/gtkwödow.h
>

36 
	~<gtk/gtkmíu.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_LABEL
 (
	`gtk_œbñ_gë_ty≥
 ())

	)

42 
	#GTK_LABEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_LABEL
, 
GtkLabñ
))

	)

43 
	#GTK_LABEL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_LABEL
, 
GtkLabñCœss
))

	)

44 
	#GTK_IS_LABEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_LABEL
))

	)

45 
	#GTK_IS_LABEL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_LABEL
))

	)

46 
	#GTK_LABEL_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_LABEL
, 
GtkLabñCœss
))

	)

49 
_GtkLabñ
 
	tGtkLabñ
;

50 
_GtkLabñCœss
 
	tGtkLabñCœss
;

52 
_GtkLabñSñe˘i⁄Info
 
	tGtkLabñSñe˘i⁄Info
;

54 
	s_GtkLabñ


56 
GtkMisc
 
	mmisc
;

59 
gch¨
 *
GSEAL
 (
œbñ
);

60 
guöt
 
GSEAL
 (
jty≥
) : 2;

61 
guöt
 
GSEAL
 (
wøp
) : 1;

62 
guöt
 
GSEAL
 (
u£_undîlöe
) : 1;

63 
guöt
 
GSEAL
 (
u£_m¨kup
) : 1;

64 
guöt
 
GSEAL
 (
ñlùsize
) : 3;

65 
guöt
 
GSEAL
 (
sögÀ_löe_mode
) : 1;

66 
guöt
 
GSEAL
 (
have_å™sf‹m
) : 1;

67 
guöt
 
GSEAL
 (
ö_˛ick
) : 1;

68 
guöt
 
GSEAL
 (
wøp_mode
) : 3;

69 
guöt
 
GSEAL
 (
∑âîn_£t
) : 1;

70 
guöt
 
GSEAL
 (
åack_löks
) : 1;

72 
guöt
 
GSEAL
 (
m√m⁄ic_keyvÆ
);

74 
gch¨
 *
GSEAL
 (
ãxt
);

75 
P™goAârLi°
 *
GSEAL
 (
©ås
);

76 
P™goAârLi°
 *
GSEAL
 (
ef„˘ive_©ås
);

78 
P™goLayout
 *
GSEAL
 (
œyout
);

80 
GtkWidgë
 *
GSEAL
 (
m√m⁄ic_widgë
);

81 
GtkWödow
 *
GSEAL
 (
m√m⁄ic_wödow
);

83 
GtkLabñSñe˘i⁄Info
 *
GSEAL
 (
£À˘_öfo
);

86 
	s_GtkLabñCœss


88 
GtkMiscCœss
 
	m∑ª¡_˛ass
;

90 (* 
	mmove_curs‹
Ë(
GtkLabñ
 *
	mœbñ
,

91 
GtkMovemítSãp
 
	m°ï
,

92 
göt
 
	mcou¡
,

93 
gboﬁón
 
	mexãnd_£À˘i⁄
);

94 (* 
	mc›y_˛ùbﬂrd
Ë(
GtkLabñ
 *
	mœbñ
);

97 (* 
	mp›uœã_p›up
Ë(
GtkLabñ
 *
	mœbñ
,

98 
GtkMíu
 *
	mmíu
);

100 
gboﬁón
 (*
a˘iv©e_lök
Ë(
GtkLabñ
 *
	mœbñ
,

101 c⁄° 
gch¨
 *
	muri
);

104 (*
	m_gtk_ª£rved1
) ();

105 (*
	m_gtk_ª£rved2
) ();

106 (*
	m_gtk_ª£rved3
) ();

109 
GTy≥
 
	$gtk_œbñ_gë_ty≥
 (Ë
G_GNUC_CONST
;

110 
GtkWidgë
* 
	`gtk_œbñ_√w
 (c⁄° 
gch¨
 *
°r
);

111 
GtkWidgë
* 
	`gtk_œbñ_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
°r
);

112 
	`gtk_œbñ_£t_ãxt
 (
GtkLabñ
 *
œbñ
,

113 c⁄° 
gch¨
 *
°r
);

114 
G_CONST_RETURN
 
gch¨
* 
	`gtk_œbñ_gë_ãxt
 (
GtkLabñ
 *
œbñ
);

115 
	`gtk_œbñ_£t_©åibuãs
 (
GtkLabñ
 *
œbñ
,

116 
P™goAârLi°
 *
©ås
);

117 
P™goAârLi°
 *
	`gtk_œbñ_gë_©åibuãs
 (
GtkLabñ
 *
œbñ
);

118 
	`gtk_œbñ_£t_œbñ
 (
GtkLabñ
 *
œbñ
,

119 c⁄° 
gch¨
 *
°r
);

120 
G_CONST_RETURN
 
gch¨
 *
	`gtk_œbñ_gë_œbñ
 (
GtkLabñ
 *
œbñ
);

121 
	`gtk_œbñ_£t_m¨kup
 (
GtkLabñ
 *
œbñ
,

122 c⁄° 
gch¨
 *
°r
);

123 
	`gtk_œbñ_£t_u£_m¨kup
 (
GtkLabñ
 *
œbñ
,

124 
gboﬁón
 
£âög
);

125 
gboﬁón
 
	`gtk_œbñ_gë_u£_m¨kup
 (
GtkLabñ
 *
œbñ
);

126 
	`gtk_œbñ_£t_u£_undîlöe
 (
GtkLabñ
 *
œbñ
,

127 
gboﬁón
 
£âög
);

128 
gboﬁón
 
	`gtk_œbñ_gë_u£_undîlöe
 (
GtkLabñ
 *
œbñ
);

130 
	`gtk_œbñ_£t_m¨kup_wôh_m√m⁄ic
 (
GtkLabñ
 *
œbñ
,

131 c⁄° 
gch¨
 *
°r
);

132 
guöt
 
	`gtk_œbñ_gë_m√m⁄ic_keyvÆ
 (
GtkLabñ
 *
œbñ
);

133 
	`gtk_œbñ_£t_m√m⁄ic_widgë
 (
GtkLabñ
 *
œbñ
,

134 
GtkWidgë
 *
widgë
);

135 
GtkWidgë
 *
	`gtk_œbñ_gë_m√m⁄ic_widgë
 (
GtkLabñ
 *
œbñ
);

136 
	`gtk_œbñ_£t_ãxt_wôh_m√m⁄ic
 (
GtkLabñ
 *
œbñ
,

137 c⁄° 
gch¨
 *
°r
);

138 
	`gtk_œbñ_£t_ju°ify
 (
GtkLabñ
 *
œbñ
,

139 
GtkJu°ifiˇti⁄
 
jty≥
);

140 
GtkJu°ifiˇti⁄
 
	`gtk_œbñ_gë_ju°ify
 (
GtkLabñ
 *
œbñ
);

141 
	`gtk_œbñ_£t_ñlùsize
 (
GtkLabñ
 *
œbñ
,

142 
P™goEŒùsizeMode
 
mode
);

143 
P™goEŒùsizeMode
 
	`gtk_œbñ_gë_ñlùsize
 (
GtkLabñ
 *
œbñ
);

144 
	`gtk_œbñ_£t_width_ch¨s
 (
GtkLabñ
 *
œbñ
,

145 
göt
 
n_ch¨s
);

146 
göt
 
	`gtk_œbñ_gë_width_ch¨s
 (
GtkLabñ
 *
œbñ
);

147 
	`gtk_œbñ_£t_max_width_ch¨s
 (
GtkLabñ
 *
œbñ
,

148 
göt
 
n_ch¨s
);

149 
göt
 
	`gtk_œbñ_gë_max_width_ch¨s
 (
GtkLabñ
 *
œbñ
);

150 
	`gtk_œbñ_£t_∑âîn
 (
GtkLabñ
 *
œbñ
,

151 c⁄° 
gch¨
 *
∑âîn
);

152 
	`gtk_œbñ_£t_löe_wøp
 (
GtkLabñ
 *
œbñ
,

153 
gboﬁón
 
wøp
);

154 
gboﬁón
 
	`gtk_œbñ_gë_löe_wøp
 (
GtkLabñ
 *
œbñ
);

155 
	`gtk_œbñ_£t_löe_wøp_mode
 (
GtkLabñ
 *
œbñ
,

156 
P™goWøpMode
 
wøp_mode
);

157 
P™goWøpMode
 
	`gtk_œbñ_gë_löe_wøp_mode
 (
GtkLabñ
 *
œbñ
);

158 
	`gtk_œbñ_£t_£À˘abÀ
 (
GtkLabñ
 *
œbñ
,

159 
gboﬁón
 
£âög
);

160 
gboﬁón
 
	`gtk_œbñ_gë_£À˘abÀ
 (
GtkLabñ
 *
œbñ
);

161 
	`gtk_œbñ_£t_™gÀ
 (
GtkLabñ
 *
œbñ
,

162 
gdoubÀ
 
™gÀ
);

163 
gdoubÀ
 
	`gtk_œbñ_gë_™gÀ
 (
GtkLabñ
 *
œbñ
);

164 
	`gtk_œbñ_£À˘_ªgi⁄
 (
GtkLabñ
 *
œbñ
,

165 
göt
 
°¨t_off£t
,

166 
göt
 
íd_off£t
);

167 
gboﬁón
 
	`gtk_œbñ_gë_£À˘i⁄_bounds
 (
GtkLabñ
 *
œbñ
,

168 
göt
 *
°¨t
,

169 
göt
 *
íd
);

171 
P™goLayout
 *
	`gtk_œbñ_gë_œyout
 (
GtkLabñ
 *
œbñ
);

172 
	`gtk_œbñ_gë_œyout_off£ts
 (
GtkLabñ
 *
œbñ
,

173 
göt
 *
x
,

174 
göt
 *
y
);

176 
	`gtk_œbñ_£t_sögÀ_löe_mode
 (
GtkLabñ
 *
œbñ
,

177 
gboﬁón
 
sögÀ_löe_mode
);

178 
gboﬁón
 
	`gtk_œbñ_gë_sögÀ_löe_mode
 (
GtkLabñ
 *
œbñ
);

180 
G_CONST_RETURN
 
gch¨
 *
	`gtk_œbñ_gë_cuºít_uri
 (
GtkLabñ
 *
œbñ
);

181 
	`gtk_œbñ_£t_åack_visôed_löks
 (
GtkLabñ
 *
œbñ
,

182 
gboﬁón
 
åack_löks
);

183 
gboﬁón
 
	`gtk_œbñ_gë_åack_visôed_löks
 (
GtkLabñ
 *
œbñ
);

185 #i‚de‡
GTK_DISABLE_DEPRECATED


187 
	#gtk_œbñ_£t
 
gtk_œbñ_£t_ãxt


	)

188 
	`gtk_œbñ_gë
 (
GtkLabñ
 *
œbñ
,

189 
gch¨
 **
°r
);

195 
guöt
 
	`gtk_œbñ_∑r£_ulöe
 (
GtkLabñ
 *
œbñ
,

196 c⁄° 
gch¨
 *
°rög
);

202 
	`_gtk_œbñ_m√m⁄ics_visibÀ_≠∂y_ªcursivñy
 (
GtkWidgë
 *
widgë
,

203 
gboﬁón
 
m√m⁄ics_visibÀ
);

205 
G_END_DECLS


	@/usr/include/gtk/gtklayout.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_LAYOUT_H__


36 
	#__GTK_LAYOUT_H__


	)

39 
	~<gtk/gtkc⁄èöî.h
>

40 
	~<gtk/gtkadju°mít.h
>

43 
	gG_BEGIN_DECLS


45 
	#GTK_TYPE_LAYOUT
 (
	`gtk_œyout_gë_ty≥
 ())

	)

46 
	#GTK_LAYOUT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_LAYOUT
, 
GtkLayout
))

	)

47 
	#GTK_LAYOUT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_LAYOUT
, 
GtkLayoutCœss
))

	)

48 
	#GTK_IS_LAYOUT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_LAYOUT
))

	)

49 
	#GTK_IS_LAYOUT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_LAYOUT
))

	)

50 
	#GTK_LAYOUT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_LAYOUT
, 
GtkLayoutCœss
))

	)

53 
_GtkLayout
 
	tGtkLayout
;

54 
_GtkLayoutCœss
 
	tGtkLayoutCœss
;

56 
	s_GtkLayout


58 
GtkC⁄èöî
 
GSEAL
 (
c⁄èöî
);

60 
GLi°
 *
GSEAL
 (
chûdªn
);

62 
guöt
 
GSEAL
 (
width
);

63 
guöt
 
GSEAL
 (
height
);

65 
GtkAdju°mít
 *
GSEAL
 (
hadju°mít
);

66 
GtkAdju°mít
 *
GSEAL
 (
vadju°mít
);

69 
GdkWödow
 *
GSEAL
 (
bö_wödow
);

72 
GdkVisibûôySèã
 
GSEAL
 (
visibûôy
);

73 
göt
 
GSEAL
 (
s¸ﬁl_x
);

74 
göt
 
GSEAL
 (
s¸ﬁl_y
);

76 
guöt
 
GSEAL
 (
‰ìze_cou¡
);

79 
	s_GtkLayoutCœss


81 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

83 (*
	m£t_s¸ﬁl_adju°míts
Ë(
GtkLayout
 *
	mœyout
,

84 
GtkAdju°mít
 *
	mhadju°mít
,

85 
GtkAdju°mít
 *
	mvadju°mít
);

88 (*
	m_gtk_ª£rved1
) ();

89 (*
	m_gtk_ª£rved2
) ();

90 (*
	m_gtk_ª£rved3
) ();

91 (*
	m_gtk_ª£rved4
) ();

94 
GTy≥
 
	$gtk_œyout_gë_ty≥
 (Ë
G_GNUC_CONST
;

95 
GtkWidgë
* 
	`gtk_œyout_√w
 (
GtkAdju°mít
 *
hadju°mít
,

96 
GtkAdju°mít
 *
vadju°mít
);

97 
GdkWödow
* 
	`gtk_œyout_gë_bö_wödow
 (
GtkLayout
 *
œyout
);

98 
	`gtk_œyout_put
 (
GtkLayout
 *
œyout
,

99 
GtkWidgë
 *
chûd_widgë
,

100 
göt
 
x
,

101 
göt
 
y
);

103 
	`gtk_œyout_move
 (
GtkLayout
 *
œyout
,

104 
GtkWidgë
 *
chûd_widgë
,

105 
göt
 
x
,

106 
göt
 
y
);

108 
	`gtk_œyout_£t_size
 (
GtkLayout
 *
œyout
,

109 
guöt
 
width
,

110 
guöt
 
height
);

111 
	`gtk_œyout_gë_size
 (
GtkLayout
 *
œyout
,

112 
guöt
 *
width
,

113 
guöt
 *
height
);

115 
GtkAdju°mít
* 
	`gtk_œyout_gë_hadju°mít
 (
GtkLayout
 *
œyout
);

116 
GtkAdju°mít
* 
	`gtk_œyout_gë_vadju°mít
 (
GtkLayout
 *
œyout
);

117 
	`gtk_œyout_£t_hadju°mít
 (
GtkLayout
 *
œyout
,

118 
GtkAdju°mít
 *
adju°mít
);

119 
	`gtk_œyout_£t_vadju°mít
 (
GtkLayout
 *
œyout
,

120 
GtkAdju°mít
 *
adju°mít
);

123 #i‚de‡
GTK_DISABLE_DEPRECATED


132 
	`gtk_œyout_‰ìze
 (
GtkLayout
 *
œyout
);

133 
	`gtk_œyout_thaw
 (
GtkLayout
 *
œyout
);

136 
G_END_DECLS


	@/usr/include/gtk/gtklinkbutton.h

25 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

29 #i‚de‡
__GTK_LINK_BUTTON_H__


30 
	#__GTK_LINK_BUTTON_H__


	)

32 
	~<gtk/gtkbuâ⁄.h
>

34 
	gG_BEGIN_DECLS


36 
	#GTK_TYPE_LINK_BUTTON
 (
	`gtk_lök_buâ⁄_gë_ty≥
 ())

	)

37 
	#GTK_LINK_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_LINK_BUTTON
, 
GtkLökBuâ⁄
))

	)

38 
	#GTK_IS_LINK_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_LINK_BUTTON
))

	)

39 
	#GTK_LINK_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_LINK_BUTTON
, 
GtkLökBuâ⁄Cœss
))

	)

40 
	#GTK_IS_LINK_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_LINK_BUTTON
))

	)

41 
	#GTK_LINK_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_LINK_BUTTON
, 
GtkLökBuâ⁄Cœss
))

	)

43 
_GtkLökBuâ⁄
 
	tGtkLökBuâ⁄
;

44 
_GtkLökBuâ⁄Cœss
 
	tGtkLökBuâ⁄Cœss
;

45 
_GtkLökBuâ⁄Priv©e
 
	tGtkLökBuâ⁄Priv©e
;

47 (*
	tGtkLökBuâ⁄UriFunc
Ë(
	tGtkLökBuâ⁄
 *
	tbuâ⁄
,

48 c⁄° 
	tgch¨
 *
	tlök_
,

49 
	tgpoöãr
 
	tu£r_d©a
);

51 
	s_GtkLökBuâ⁄


53 
GtkBuâ⁄
 
∑ª¡_ö°™˚
;

55 
GtkLökBuâ⁄Priv©e
 *
	`GSEAL
 (
¥iv
);

58 
	s_GtkLökBuâ⁄Cœss


60 
GtkBuâ⁄Cœss
 
∑ª¡_˛ass
;

62 (*
_gtk_∑ddög1
) ();

63 (*
_gtk_∑ddög2
) ();

64 (*
_gtk_∑ddög3
) ();

65 (*
_gtk_∑ddög4
) ();

68 
GTy≥
 
	$gtk_lök_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkWidgë
 * 
	`gtk_lök_buâ⁄_√w
 (c⁄° 
gch¨
 *
uri
);

71 
GtkWidgë
 * 
	`gtk_lök_buâ⁄_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
uri
,

72 c⁄° 
gch¨
 *
œbñ
);

74 
G_CONST_RETURN
 
gch¨
 *
	`gtk_lök_buâ⁄_gë_uri
 (
GtkLökBuâ⁄
 *
lök_buâ⁄
);

75 
	`gtk_lök_buâ⁄_£t_uri
 (
GtkLökBuâ⁄
 *
lök_buâ⁄
,

76 c⁄° 
gch¨
 *
uri
);

78 
GtkLökBuâ⁄UriFunc
 
	`gtk_lök_buâ⁄_£t_uri_hook
 (GtkLökBuâ⁄UriFun¯
func
,

79 
gpoöãr
 
d©a
,

80 
GDe°royNŸify
 
de°roy
);

82 
gboﬁón
 
	`gtk_lök_buâ⁄_gë_visôed
 (
GtkLökBuâ⁄
 *
lök_buâ⁄
);

83 
	`gtk_lök_buâ⁄_£t_visôed
 (
GtkLökBuâ⁄
 *
lök_buâ⁄
,

84 
gboﬁón
 
visôed
);

87 
G_END_DECLS


	@/usr/include/gtk/gtklist.h

27 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
__GTK_LIST_C__
)

29 #i‚de‡
__GTK_LIST_H__


30 
	#__GTK_LIST_H__


	)

32 
	~<gtk/gtk.h
>

34 
	gG_BEGIN_DECLS


36 
	#GTK_TYPE_LIST
 (
	`gtk_li°_gë_ty≥
 ())

	)

37 
	#GTK_LIST
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_LIST
, 
GtkLi°
))

	)

38 
	#GTK_LIST_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_LIST
, 
GtkLi°Cœss
))

	)

39 
	#GTK_IS_LIST
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_LIST
))

	)

40 
	#GTK_IS_LIST_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_LIST
))

	)

41 
	#GTK_LIST_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_LIST
, 
GtkLi°Cœss
))

	)

44 
_GtkLi°
 
	tGtkLi°
;

45 
_GtkLi°Cœss
 
	tGtkLi°Cœss
;

47 
	s_GtkLi°


49 
GtkC⁄èöî
 
	mc⁄èöî
;

51 
GLi°
 *
	mchûdªn
;

52 
GLi°
 *
	m£À˘i⁄
;

54 
GLi°
 *
	mundo_£À˘i⁄
;

55 
GLi°
 *
	mundo_un£À˘i⁄
;

57 
GtkWidgë
 *
	mœ°_focus_chûd
;

58 
GtkWidgë
 *
	mundo_focus_chûd
;

60 
guöt
 
	mhtimî
;

61 
guöt
 
	mvtimî
;

63 
göt
 
	m™ch‹
;

64 
göt
 
	mdøg_pos
;

65 
GtkSèãTy≥
 
	m™ch‹_°©e
;

67 
guöt
 
	m£À˘i⁄_mode
 : 2;

68 
guöt
 
	mdøg_£À˘i⁄
:1;

69 
guöt
 
	madd_mode
:1;

72 
	s_GtkLi°Cœss


74 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

76 (* 
	m£À˘i⁄_ch™ged
Ë(
GtkLi°
 *
	mli°
);

77 (* 
	m£À˘_chûd
Ë(
GtkLi°
 *
	mli°
,

78 
GtkWidgë
 *
	mchûd
);

79 (* 
	mun£À˘_chûd
Ë(
GtkLi°
 *
	mli°
,

80 
GtkWidgë
 *
	mchûd
);

84 
GTy≥
 
	$gtk_li°_gë_ty≥
 (Ë
G_GNUC_CONST
;

85 
GtkWidgë
* 
	`gtk_li°_√w
 ();

86 
	`gtk_li°_ö£π_ôems
 (
GtkLi°
 *
li°
,

87 
GLi°
 *
ôems
,

88 
göt
 
posôi⁄
);

89 
	`gtk_li°_≠≥nd_ôems
 (
GtkLi°
 *
li°
,

90 
GLi°
 *
ôems
);

91 
	`gtk_li°_¥ïíd_ôems
 (
GtkLi°
 *
li°
,

92 
GLi°
 *
ôems
);

93 
	`gtk_li°_ªmove_ôems
 (
GtkLi°
 *
li°
,

94 
GLi°
 *
ôems
);

95 
	`gtk_li°_ªmove_ôems_no_uƒef
 (
GtkLi°
 *
li°
,

96 
GLi°
 *
ôems
);

97 
	`gtk_li°_˛ór_ôems
 (
GtkLi°
 *
li°
,

98 
göt
 
°¨t
,

99 
göt
 
íd
);

100 
	`gtk_li°_£À˘_ôem
 (
GtkLi°
 *
li°
,

101 
göt
 
ôem
);

102 
	`gtk_li°_un£À˘_ôem
 (
GtkLi°
 *
li°
,

103 
göt
 
ôem
);

104 
	`gtk_li°_£À˘_chûd
 (
GtkLi°
 *
li°
,

105 
GtkWidgë
 *
chûd
);

106 
	`gtk_li°_un£À˘_chûd
 (
GtkLi°
 *
li°
,

107 
GtkWidgë
 *
chûd
);

108 
göt
 
	`gtk_li°_chûd_posôi⁄
 (
GtkLi°
 *
li°
,

109 
GtkWidgë
 *
chûd
);

110 
	`gtk_li°_£t_£À˘i⁄_mode
 (
GtkLi°
 *
li°
,

111 
GtkSñe˘i⁄Mode
 
mode
);

113 
	`gtk_li°_exãnd_£À˘i⁄
 (
GtkLi°
 *
li°
,

114 
GtkS¸ﬁlTy≥
 
s¸ﬁl_ty≥
,

115 
gÊﬂt
 
posôi⁄
,

116 
gboﬁón
 
auto_°¨t_£À˘i⁄
);

117 
	`gtk_li°_°¨t_£À˘i⁄
 (
GtkLi°
 *
li°
);

118 
	`gtk_li°_íd_£À˘i⁄
 (
GtkLi°
 *
li°
);

119 
	`gtk_li°_£À˘_Æl
 (
GtkLi°
 *
li°
);

120 
	`gtk_li°_un£À˘_Æl
 (
GtkLi°
 *
li°
);

121 
	`gtk_li°_s¸ﬁl_h‹iz⁄èl
 (
GtkLi°
 *
li°
,

122 
GtkS¸ﬁlTy≥
 
s¸ﬁl_ty≥
,

123 
gÊﬂt
 
posôi⁄
);

124 
	`gtk_li°_s¸ﬁl_vîtiˇl
 (
GtkLi°
 *
li°
,

125 
GtkS¸ﬁlTy≥
 
s¸ﬁl_ty≥
,

126 
gÊﬂt
 
posôi⁄
);

127 
	`gtk_li°_toggÀ_add_mode
 (
GtkLi°
 *
li°
);

128 
	`gtk_li°_toggÀ_focus_row
 (
GtkLi°
 *
li°
);

129 
	`gtk_li°_toggÀ_row
 (
GtkLi°
 *
li°
,

130 
GtkWidgë
 *
ôem
);

131 
	`gtk_li°_undo_£À˘i⁄
 (
GtkLi°
 *
li°
);

132 
	`gtk_li°_íd_døg_£À˘i⁄
 (
GtkLi°
 *
li°
);

134 
G_END_DECLS


	@/usr/include/gtk/gtklistitem.h

27 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
__GTK_LIST_ITEM_C__
)

29 #i‚de‡
__GTK_LIST_ITEM_H__


30 
	#__GTK_LIST_ITEM_H__


	)

32 
	~<gtk/gtk.h
>

35 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_LIST_ITEM
 (
	`gtk_li°_ôem_gë_ty≥
 ())

	)

39 
	#GTK_LIST_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_LIST_ITEM
, 
GtkLi°Iãm
))

	)

40 
	#GTK_LIST_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_LIST_ITEM
, 
GtkLi°IãmCœss
))

	)

41 
	#GTK_IS_LIST_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_LIST_ITEM
))

	)

42 
	#GTK_IS_LIST_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_LIST_ITEM
))

	)

43 
	#GTK_LIST_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_LIST_ITEM
, 
GtkLi°IãmCœss
))

	)

46 
_GtkLi°Iãm
 
	tGtkLi°Iãm
;

47 
_GtkLi°IãmCœss
 
	tGtkLi°IãmCœss
;

49 
	s_GtkLi°Iãm


51 
GtkIãm
 
	môem
;

54 
	s_GtkLi°IãmCœss


56 
GtkIãmCœss
 
	m∑ª¡_˛ass
;

58 (*
	mtoggÀ_focus_row
Ë(
GtkLi°Iãm
 *
	mli°_ôem
);

59 (*
	m£À˘_Æl
Ë(
GtkLi°Iãm
 *
	mli°_ôem
);

60 (*
	mun£À˘_Æl
Ë(
GtkLi°Iãm
 *
	mli°_ôem
);

61 (*
	mundo_£À˘i⁄
Ë(
GtkLi°Iãm
 *
	mli°_ôem
);

62 (*
	m°¨t_£À˘i⁄
Ë(
GtkLi°Iãm
 *
	mli°_ôem
);

63 (*
	míd_£À˘i⁄
Ë(
GtkLi°Iãm
 *
	mli°_ôem
);

64 (*
	mexãnd_£À˘i⁄
Ë(
GtkLi°Iãm
 *
	mli°_ôem
,

65 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl_ty≥
,

66 
gÊﬂt
 
	mposôi⁄
,

67 
gboﬁón
 
	mauto_°¨t_£À˘i⁄
);

68 (*
	ms¸ﬁl_h‹iz⁄èl
Ë(
GtkLi°Iãm
 *
	mli°_ôem
,

69 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl_ty≥
,

70 
gÊﬂt
 
	mposôi⁄
);

71 (*
	ms¸ﬁl_vîtiˇl
Ë(
GtkLi°Iãm
 *
	mli°_ôem
,

72 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl_ty≥
,

73 
gÊﬂt
 
	mposôi⁄
);

74 (*
	mtoggÀ_add_mode
Ë(
GtkLi°Iãm
 *
	mli°_ôem
);

78 
GTy≥
 
	$gtk_li°_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

79 
GtkWidgë
* 
	`gtk_li°_ôem_√w
 ();

80 
GtkWidgë
* 
	`gtk_li°_ôem_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

81 
	`gtk_li°_ôem_£À˘
 (
GtkLi°Iãm
 *
li°_ôem
);

82 
	`gtk_li°_ôem_de£À˘
 (
GtkLi°Iãm
 *
li°_ôem
);

86 
G_END_DECLS


	@/usr/include/gtk/gtkliststore.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_LIST_STORE_H__


25 
	#__GTK_LIST_STORE_H__


	)

27 
	~<gdkc⁄fig.h
>

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtkåìs‹èbÀ.h
>

32 
	gG_BEGIN_DECLS


35 
	#GTK_TYPE_LIST_STORE
 (
	`gtk_li°_°‹e_gë_ty≥
 ())

	)

36 
	#GTK_LIST_STORE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_LIST_STORE
, 
GtkLi°St‹e
))

	)

37 
	#GTK_LIST_STORE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_LIST_STORE
, 
GtkLi°St‹eCœss
))

	)

38 
	#GTK_IS_LIST_STORE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_LIST_STORE
))

	)

39 
	#GTK_IS_LIST_STORE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_LIST_STORE
))

	)

40 
	#GTK_LIST_STORE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_LIST_STORE
, 
GtkLi°St‹eCœss
))

	)

42 
_GtkLi°St‹e
 
	tGtkLi°St‹e
;

43 
_GtkLi°St‹eCœss
 
	tGtkLi°St‹eCœss
;

45 
	s_GtkLi°St‹e


47 
GObje˘
 
	m∑ª¡
;

50 
göt
 
GSEAL
 (
°amp
);

51 
gpoöãr
 
GSEAL
 (
£q
);

52 
gpoöãr
 
GSEAL
 (
_gtk_ª£rved1
);

53 
GLi°
 *
GSEAL
 (
s‹t_li°
);

54 
göt
 
GSEAL
 (
n_cﬁumns
);

55 
göt
 
GSEAL
 (
s‹t_cﬁumn_id
);

56 
GtkS‹tTy≥
 
GSEAL
 (
‹dî
);

57 
GTy≥
 *
GSEAL
 (
cﬁumn_hódîs
);

58 
göt
 
GSEAL
 (
Àngth
);

59 
GtkTªeIãrCom∑ªFunc
 
GSEAL
 (
deÁu…_s‹t_func
);

60 
gpoöãr
 
GSEAL
 (
deÁu…_s‹t_d©a
);

61 
GDe°royNŸify
 
GSEAL
 (
deÁu…_s‹t_de°roy
);

62 
guöt
 
GSEAL
 (
cﬁumns_dúty
) : 1;

65 
	s_GtkLi°St‹eCœss


67 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

70 (*
	m_gtk_ª£rved1
) ();

71 (*
	m_gtk_ª£rved2
) ();

72 (*
	m_gtk_ª£rved3
) ();

73 (*
	m_gtk_ª£rved4
) ();

77 
GTy≥
 
	$gtk_li°_°‹e_gë_ty≥
 (Ë
G_GNUC_CONST
;

78 
GtkLi°St‹e
 *
	`gtk_li°_°‹e_√w
 (
göt
 
n_cﬁumns
,

80 
GtkLi°St‹e
 *
	`gtk_li°_°‹e_√wv
 (
göt
 
n_cﬁumns
,

81 
GTy≥
 *
ty≥s
);

82 
	`gtk_li°_°‹e_£t_cﬁumn_ty≥s
 (
GtkLi°St‹e
 *
li°_°‹e
,

83 
göt
 
n_cﬁumns
,

84 
GTy≥
 *
ty≥s
);

88 
	`gtk_li°_°‹e_£t_vÆue
 (
GtkLi°St‹e
 *
li°_°‹e
,

89 
GtkTªeIãr
 *
ôî
,

90 
göt
 
cﬁumn
,

91 
GVÆue
 *
vÆue
);

92 
	`gtk_li°_°‹e_£t
 (
GtkLi°St‹e
 *
li°_°‹e
,

93 
GtkTªeIãr
 *
ôî
,

95 
	`gtk_li°_°‹e_£t_vÆuesv
 (
GtkLi°St‹e
 *
li°_°‹e
,

96 
GtkTªeIãr
 *
ôî
,

97 
göt
 *
cﬁumns
,

98 
GVÆue
 *
vÆues
,

99 
göt
 
n_vÆues
);

100 
	`gtk_li°_°‹e_£t_vÆi°
 (
GtkLi°St‹e
 *
li°_°‹e
,

101 
GtkTªeIãr
 *
ôî
,

102 
va_li°
 
v¨_¨gs
);

103 
gboﬁón
 
	`gtk_li°_°‹e_ªmove
 (
GtkLi°St‹e
 *
li°_°‹e
,

104 
GtkTªeIãr
 *
ôî
);

105 
	`gtk_li°_°‹e_ö£π
 (
GtkLi°St‹e
 *
li°_°‹e
,

106 
GtkTªeIãr
 *
ôî
,

107 
göt
 
posôi⁄
);

108 
	`gtk_li°_°‹e_ö£π_bef‹e
 (
GtkLi°St‹e
 *
li°_°‹e
,

109 
GtkTªeIãr
 *
ôî
,

110 
GtkTªeIãr
 *
siblög
);

111 
	`gtk_li°_°‹e_ö£π_a·î
 (
GtkLi°St‹e
 *
li°_°‹e
,

112 
GtkTªeIãr
 *
ôî
,

113 
GtkTªeIãr
 *
siblög
);

114 
	`gtk_li°_°‹e_ö£π_wôh_vÆues
 (
GtkLi°St‹e
 *
li°_°‹e
,

115 
GtkTªeIãr
 *
ôî
,

116 
göt
 
posôi⁄
,

118 
	`gtk_li°_°‹e_ö£π_wôh_vÆuesv
 (
GtkLi°St‹e
 *
li°_°‹e
,

119 
GtkTªeIãr
 *
ôî
,

120 
göt
 
posôi⁄
,

121 
göt
 *
cﬁumns
,

122 
GVÆue
 *
vÆues
,

123 
göt
 
n_vÆues
);

124 
	`gtk_li°_°‹e_¥ïíd
 (
GtkLi°St‹e
 *
li°_°‹e
,

125 
GtkTªeIãr
 *
ôî
);

126 
	`gtk_li°_°‹e_≠≥nd
 (
GtkLi°St‹e
 *
li°_°‹e
,

127 
GtkTªeIãr
 *
ôî
);

128 
	`gtk_li°_°‹e_˛ór
 (
GtkLi°St‹e
 *
li°_°‹e
);

129 
gboﬁón
 
	`gtk_li°_°‹e_ôî_is_vÆid
 (
GtkLi°St‹e
 *
li°_°‹e
,

130 
GtkTªeIãr
 *
ôî
);

131 
	`gtk_li°_°‹e_ª‹dî
 (
GtkLi°St‹e
 *
°‹e
,

132 
göt
 *
√w_‹dî
);

133 
	`gtk_li°_°‹e_sw≠
 (
GtkLi°St‹e
 *
°‹e
,

134 
GtkTªeIãr
 *
a
,

135 
GtkTªeIãr
 *
b
);

136 
	`gtk_li°_°‹e_move_a·î
 (
GtkLi°St‹e
 *
°‹e
,

137 
GtkTªeIãr
 *
ôî
,

138 
GtkTªeIãr
 *
posôi⁄
);

139 
	`gtk_li°_°‹e_move_bef‹e
 (
GtkLi°St‹e
 *
°‹e
,

140 
GtkTªeIãr
 *
ôî
,

141 
GtkTªeIãr
 *
posôi⁄
);

144 
G_END_DECLS


	@/usr/include/gtk/gtkmain.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MAIN_H__


32 
	#__GTK_MAIN_H__


	)

35 
	~<gdk/gdk.h
>

36 
	~<gtk/gtkwidgë.h
>

37 #ifde‡
G_PLATFORM_WIN32


38 
	~<gtk/gtkbox.h
>

39 
	~<gtk/gtkwödow.h
>

42 
	gG_BEGIN_DECLS


46 
	#GTK_PRIORITY_RESIZE
 (
G_PRIORITY_HIGH_IDLE
 + 10)

	)

48 #i‚de‡
GTK_DISABLE_DEPRECATED


51 
	#GTK_PRIORITY_REDRAW
 (
G_PRIORITY_HIGH_IDLE
 + 20)

	)

55 
	#GTK_PRIORITY_HIGH
 
G_PRIORITY_HIGH


	)

56 
	#GTK_PRIORITY_INTERNAL
 
GTK_PRIORITY_REDRAW


	)

57 
	#GTK_PRIORITY_DEFAULT
 
G_PRIORITY_DEFAULT_IDLE


	)

58 
	#GTK_PRIORITY_LOW
 
G_PRIORITY_LOW


	)

62 
	$göt
 (*
	tGtkKeySno›Func
Ë(
	tGtkWidgë
 *
	tgøb_widgë
,

63 
	tGdkEvítKey
 *
	tevít
,

64 
	tgpoöãr
 
	tfunc_d©a
);

68 #ifde‡
G_PLATFORM_WIN32


69 #ifde‡
GTK_COMPILATION


70 
	#GTKMAIN_C_VAR
 
	`__de˛•ec
(
dŒexp‹t
)

	)

72 
	#GTKMAIN_C_VAR
 
	`__de˛•ec
(
dŒimp‹t
)

	)

75 
	#GTKMAIN_C_VAR
 

	)

78 
GTKMAIN_C_VAR
 c⁄° 
guöt
 
gtk_maj‹_vîsi⁄
;

79 
GTKMAIN_C_VAR
 c⁄° 
guöt
 
gtk_mö‹_vîsi⁄
;

80 
GTKMAIN_C_VAR
 c⁄° 
guöt
 
gtk_mi¸o_vîsi⁄
;

81 
GTKMAIN_C_VAR
 c⁄° 
guöt
 
gtk_bö¨y_age
;

82 
GTKMAIN_C_VAR
 c⁄° 
guöt
 
gtk_öãrÁ˚_age
;

83 c⁄° 
gch¨
* 
	`gtk_check_vîsi⁄
 (
guöt
 
ªquúed_maj‹
,

84 
guöt
 
ªquúed_mö‹
,

85 
guöt
 
ªquúed_mi¸o
);

91 
gboﬁón
 
	`gtk_∑r£_¨gs
 (*
¨gc
,

92 ***
¨gv
);

94 
	`gtk_öô
 (*
¨gc
,

95 ***
¨gv
);

97 
gboﬁón
 
	`gtk_öô_check
 (*
¨gc
,

98 ***
¨gv
);

100 
gboﬁón
 
	`gtk_öô_wôh_¨gs
 (*
¨gc
,

101 ***
¨gv
,

102 c⁄° *
∑ømëî_°rög
,

103 
GO±i⁄E¡ry
 *
íåõs
,

104 c⁄° *
å™¶©i⁄_domaö
,

105 
GEº‹
 **
îr‹
);

107 
GO±i⁄Group
 *
	`gtk_gë_›ti⁄_group
 (
gboﬁón
 
›í_deÁu…_di•œy
);

109 #ifde‡
G_PLATFORM_WIN32


114 
	`gtk_öô_abi_check
 (*
¨gc
,

115 ***
¨gv
,

116 
num_checks
,

117 
size_t
 
sizeof_GtkWödow
,

118 
size_t
 
sizeof_GtkBox
);

119 
gboﬁón
 
	`gtk_öô_check_abi_check
 (*
¨gc
,

120 ***
¨gv
,

121 
num_checks
,

122 
size_t
 
sizeof_GtkWödow
,

123 
size_t
 
sizeof_GtkBox
);

125 
	#gtk_öô
(
¨gc
, 
¨gv
Ë
	`gtk_öô_abi_check
 (¨gc,árgv, 2,  (
GtkWödow
),  (
GtkBox
))

	)

126 
	#gtk_öô_check
(
¨gc
, 
¨gv
Ë
	`gtk_öô_check_abi_check
 (¨gc,árgv, 2,  (
GtkWödow
),  (
GtkBox
))

	)

130 #i‚de‡
GTK_DISABLE_DEPRECATED


131 
	`gtk_exô
 (
göt
 
îr‹_code
);

134 
	`gtk_dißbÀ_£éoˇÀ
 ();

135 
gch¨
 * 
	`gtk_£t_loˇÀ
 ();

136 
P™goL™guage
 *
	`gtk_gë_deÁu…_œnguage
 ();

137 
gboﬁón
 
	`gtk_evíts_≥ndög
 ();

143 
	`gtk_maö_do_evít
 (
GdkEvít
 *
evít
);

145 
	`gtk_maö
 ();

146 
guöt
 
	`gtk_maö_Àvñ
 ();

147 
	`gtk_maö_quô
 ();

148 
gboﬁón
 
	`gtk_maö_ôî©i⁄
 ();

150 
gboﬁón
 
	`gtk_maö_ôî©i⁄_do
 (gboﬁó¿
blockög
);

152 
gboﬁón
 
	$gtk_åue
 (Ë
G_GNUC_CONST
;

153 
gboﬁón
 
	$gtk_Ál£
 (Ë
G_GNUC_CONST
;

155 
	`gtk_gøb_add
 (
GtkWidgë
 *
widgë
);

156 
GtkWidgë
* 
	`gtk_gøb_gë_cuºít
 ();

157 
	`gtk_gøb_ªmove
 (
GtkWidgë
 *
widgë
);

159 
	`gtk_öô_add
 (
GtkFun˘i⁄
 
fun˘i⁄
,

160 
gpoöãr
 
d©a
);

161 
	`gtk_quô_add_de°roy
 (
guöt
 
maö_Àvñ
,

162 
GtkObje˘
 *
obje˘
);

163 
guöt
 
	`gtk_quô_add
 (guöà
maö_Àvñ
,

164 
GtkFun˘i⁄
 
fun˘i⁄
,

165 
gpoöãr
 
d©a
);

166 
guöt
 
	`gtk_quô_add_fuŒ
 (guöà
maö_Àvñ
,

167 
GtkFun˘i⁄
 
fun˘i⁄
,

168 
GtkCÆlbackM¨shÆ
 
m¨shÆ
,

169 
gpoöãr
 
d©a
,

170 
GDe°royNŸify
 
de°roy
);

171 
	`gtk_quô_ªmove
 (
guöt
 
quô_h™dÀr_id
);

172 
	`gtk_quô_ªmove_by_d©a
 (
gpoöãr
 
d©a
);

173 #i‚de‡
GTK_DISABLE_DEPRECATED


174 
guöt
 
	`gtk_timeout_add
 (
guöt32
 
öãrvÆ
,

175 
GtkFun˘i⁄
 
fun˘i⁄
,

176 
gpoöãr
 
d©a
);

177 
guöt
 
	`gtk_timeout_add_fuŒ
 (
guöt32
 
öãrvÆ
,

178 
GtkFun˘i⁄
 
fun˘i⁄
,

179 
GtkCÆlbackM¨shÆ
 
m¨shÆ
,

180 
gpoöãr
 
d©a
,

181 
GDe°royNŸify
 
de°roy
);

182 
	`gtk_timeout_ªmove
 (
guöt
 
timeout_h™dÀr_id
);

184 
guöt
 
	`gtk_idÀ_add
 (
GtkFun˘i⁄
 
fun˘i⁄
,

185 
gpoöãr
 
d©a
);

186 
guöt
 
	`gtk_idÀ_add_¥i‹ôy
 (
göt
 
¥i‹ôy
,

187 
GtkFun˘i⁄
 
fun˘i⁄
,

188 
gpoöãr
 
d©a
);

189 
guöt
 
	`gtk_idÀ_add_fuŒ
 (
göt
 
¥i‹ôy
,

190 
GtkFun˘i⁄
 
fun˘i⁄
,

191 
GtkCÆlbackM¨shÆ
 
m¨shÆ
,

192 
gpoöãr
 
d©a
,

193 
GDe°royNŸify
 
de°roy
);

194 
	`gtk_idÀ_ªmove
 (
guöt
 
idÀ_h™dÀr_id
);

195 
	`gtk_idÀ_ªmove_by_d©a
 (
gpoöãr
 
d©a
);

196 
guöt
 
	`gtk_öput_add_fuŒ
 (
göt
 
sour˚
,

197 
GdkI≈utC⁄dôi⁄
 
c⁄dôi⁄
,

198 
GdkI≈utFun˘i⁄
 
fun˘i⁄
,

199 
GtkCÆlbackM¨shÆ
 
m¨shÆ
,

200 
gpoöãr
 
d©a
,

201 
GDe°royNŸify
 
de°roy
);

202 
	`gtk_öput_ªmove
 (
guöt
 
öput_h™dÀr_id
);

205 
guöt
 
	`gtk_key_¢o›î_ö°Æl
 (
GtkKeySno›Func
 
¢o›î
,

206 
gpoöãr
 
func_d©a
);

207 
	`gtk_key_¢o›î_ªmove
 (
guöt
 
¢o›î_h™dÀr_id
);

209 
GdkEvít
* 
	`gtk_gë_cuºít_evít
 ();

210 
guöt32
 
	`gtk_gë_cuºít_evít_time
 ();

211 
gboﬁón
 
	`gtk_gë_cuºít_evít_°©e
 (
GdkModifõrTy≥
 *
°©e
);

213 
GtkWidgë
* 
	`gtk_gë_evít_widgë
 (
GdkEvít
 *
evít
);

218 
	`gtk_¥›ag©e_evít
 (
GtkWidgë
 *
widgë
,

219 
GdkEvít
 *
evít
);

221 
gboﬁón
 
	`_gtk_boﬁón_h™dÀd_accumuœt‹
 (
GSig«lInvoˇti⁄Höt
 *
ihöt
,

222 
GVÆue
 *
ªtu∫_accu
,

223 c⁄° 
GVÆue
 *
h™dÀr_ªtu∫
,

224 
gpoöãr
 
dummy
);

226 
gch¨
 *
	`_gtk_gë_lc_˘y≥
 ();

228 
G_END_DECLS


	@/usr/include/gtk/gtkmenu.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MENU_H__


32 
	#__GTK_MENU_H__


	)

35 
	~<gtk/gtkac˚lgroup.h
>

36 
	~<gtk/gtkmíushñl.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_MENU
 (
	`gtk_míu_gë_ty≥
 ())

	)

42 
	#GTK_MENU
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_MENU
, 
GtkMíu
))

	)

43 
	#GTK_MENU_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_MENU
, 
GtkMíuCœss
))

	)

44 
	#GTK_IS_MENU
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_MENU
))

	)

45 
	#GTK_IS_MENU_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_MENU
))

	)

46 
	#GTK_MENU_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_MENU
, 
GtkMíuCœss
))

	)

49 
_GtkMíu
 
	tGtkMíu
;

50 
_GtkMíuCœss
 
	tGtkMíuCœss
;

52 (*
	tGtkMíuPosôi⁄Func
Ë(
	tGtkMíu
 *
	tmíu
,

53 
	tgöt
 *
	tx
,

54 
	tgöt
 *
	ty
,

55 
	tgboﬁón
 *
	tpush_ö
,

56 
	tgpoöãr
 
	tu£r_d©a
);

57 (*
	tGtkMíuDëachFunc
Ë(
	tGtkWidgë
 *
	t©èch_widgë
,

58 
	tGtkMíu
 *
	tmíu
);

60 
	s_GtkMíu


62 
GtkMíuShñl
 
	`GSEAL
 (
míu_shñl
);

64 
GtkWidgë
 *
	`GSEAL
 (
∑ª¡_míu_ôem
);

65 
GtkWidgë
 *
	`GSEAL
 (
ﬁd_a˘ive_míu_ôem
);

67 
GtkAc˚lGroup
 *
	`GSEAL
 (
ac˚l_group
);

68 
gch¨
 *
	`GSEAL
 (
ac˚l_∑th
);

69 
GtkMíuPosôi⁄Func
 
	`GSEAL
 (
posôi⁄_func
);

70 
gpoöãr
 
	`GSEAL
 (
posôi⁄_func_d©a
);

72 
guöt
 
	`GSEAL
 (
toggÀ_size
);

77 
GtkWidgë
 *
	`GSEAL
 (
t›Àvñ
);

79 
GtkWidgë
 *
	`GSEAL
 (
ã¨off_wödow
);

80 
GtkWidgë
 *
	`GSEAL
 (
ã¨off_hbox
);

81 
GtkWidgë
 *
	`GSEAL
 (
ã¨off_s¸ﬁlb¨
);

82 
GtkAdju°mít
 *
	`GSEAL
 (
ã¨off_adju°mít
);

84 
GdkWödow
 *
	`GSEAL
 (
võw_wödow
);

85 
GdkWödow
 *
	`GSEAL
 (
bö_wödow
);

87 
göt
 
	`GSEAL
 (
s¸ﬁl_off£t
);

88 
göt
 
	`GSEAL
 (
ßved_s¸ﬁl_off£t
);

89 
göt
 
	`GSEAL
 (
s¸ﬁl_°ï
);

90 
guöt
 
	`GSEAL
 (
timeout_id
);

95 
GdkRegi⁄
 *
	`GSEAL
 (
«vig©i⁄_ªgi⁄
);

96 
guöt
 
	`GSEAL
 (
«vig©i⁄_timeout
);

98 
guöt
 
	`GSEAL
 (
√eds_de°ru˘i⁄_ªf_cou¡
) : 1;

99 
guöt
 
	`GSEAL
 (
t‹n_off
) : 1;

103 
guöt
 
	`GSEAL
 (
ã¨off_a˘ive
) : 1;

105 
guöt
 
	`GSEAL
 (
s¸ﬁl_Á°
) : 1;

107 
guöt
 
	`GSEAL
 (
uµî_¨row_visibÀ
) : 1;

108 
guöt
 
	`GSEAL
 (
lowî_¨row_visibÀ
) : 1;

109 
guöt
 
	`GSEAL
 (
uµî_¨row_¥ñight
) : 1;

110 
guöt
 
	`GSEAL
 (
lowî_¨row_¥ñight
) : 1;

113 
	s_GtkMíuCœss


115 
GtkMíuShñlCœss
 
∑ª¡_˛ass
;

118 (*
_gtk_ª£rved1
) ();

119 (*
_gtk_ª£rved2
) ();

120 (*
_gtk_ª£rved3
) ();

121 (*
_gtk_ª£rved4
) ();

125 
GTy≥
 
	$gtk_míu_gë_ty≥
 (Ë
G_GNUC_CONST
;

126 
GtkWidgë
* 
	`gtk_míu_√w
 ();

129 
	`gtk_míu_p›up
 (
GtkMíu
 *
míu
,

130 
GtkWidgë
 *
∑ª¡_míu_shñl
,

131 
GtkWidgë
 *
∑ª¡_míu_ôem
,

132 
GtkMíuPosôi⁄Func
 
func
,

133 
gpoöãr
 
d©a
,

134 
guöt
 
buâ⁄
,

135 
guöt32
 
a˘iv©e_time
);

140 
	`gtk_míu_ªposôi⁄
 (
GtkMíu
 *
míu
);

142 
	`gtk_míu_p›down
 (
GtkMíu
 *
míu
);

147 
GtkWidgë
* 
	`gtk_míu_gë_a˘ive
 (
GtkMíu
 *
míu
);

148 
	`gtk_míu_£t_a˘ive
 (
GtkMíu
 *
míu
,

149 
guöt
 
ödex_
);

154 
	`gtk_míu_£t_ac˚l_group
 (
GtkMíu
 *
míu
,

155 
GtkAc˚lGroup
 *
ac˚l_group
);

156 
GtkAc˚lGroup
* 
	`gtk_míu_gë_ac˚l_group
 (
GtkMíu
 *
míu
);

157 
	`gtk_míu_£t_ac˚l_∑th
 (
GtkMíu
 *
míu
,

158 c⁄° 
gch¨
 *
ac˚l_∑th
);

159 c⁄° 
gch¨
* 
	`gtk_míu_gë_ac˚l_∑th
 (
GtkMíu
 *
míu
);

165 
	`gtk_míu_©èch_to_widgë
 (
GtkMíu
 *
míu
,

166 
GtkWidgë
 *
©èch_widgë
,

167 
GtkMíuDëachFunc
 
dëachî
);

168 
	`gtk_míu_dëach
 (
GtkMíu
 *
míu
);

174 
GtkWidgë
* 
	`gtk_míu_gë_©èch_widgë
 (
GtkMíu
 *
míu
);

176 
	`gtk_míu_£t_ã¨off_°©e
 (
GtkMíu
 *
míu
,

177 
gboﬁón
 
t‹n_off
);

178 
gboﬁón
 
	`gtk_míu_gë_ã¨off_°©e
 (
GtkMíu
 *
míu
);

183 
	`gtk_míu_£t_tôÀ
 (
GtkMíu
 *
míu
,

184 c⁄° 
gch¨
 *
tôÀ
);

185 
G_CONST_RETURN
 
gch¨
 *
	`gtk_míu_gë_tôÀ
 (
GtkMíu
 *
míu
);

187 
	`gtk_míu_ª‹dî_chûd
 (
GtkMíu
 *
míu
,

188 
GtkWidgë
 *
chûd
,

189 
göt
 
posôi⁄
);

191 
	`gtk_míu_£t_s¸ìn
 (
GtkMíu
 *
míu
,

192 
GdkS¸ìn
 *
s¸ìn
);

194 
	`gtk_míu_©èch
 (
GtkMíu
 *
míu
,

195 
GtkWidgë
 *
chûd
,

196 
guöt
 
À·_©èch
,

197 
guöt
 
right_©èch
,

198 
guöt
 
t›_©èch
,

199 
guöt
 
bŸtom_©èch
);

201 
	`gtk_míu_£t_m⁄ô‹
 (
GtkMíu
 *
míu
,

202 
göt
 
m⁄ô‹_num
);

203 
göt
 
	`gtk_míu_gë_m⁄ô‹
 (
GtkMíu
 *
míu
);

204 
GLi°
* 
	`gtk_míu_gë_f‹_©èch_widgë
 (
GtkWidgë
 *
widgë
);

206 #i‚de‡
GTK_DISABLE_DEPRECATED


207 
	#gtk_míu_≠≥nd
(
míu
,
chûd
Ë
	`gtk_míu_shñl_≠≥nd
 ((
GtkMíuShñl
 *)(míu),(chûd))

	)

208 
	#gtk_míu_¥ïíd
(
míu
,
chûd
Ë
	`gtk_míu_shñl_¥ïíd
 ((
GtkMíuShñl
 *)(míu),(chûd))

	)

209 
	#gtk_míu_ö£π
(
míu
,
chûd
,
pos
Ë
	`gtk_míu_shñl_ö£π
 ((
GtkMíuShñl
 *)(míu),(chûd),’os))

	)

212 
	`gtk_míu_£t_ª£rve_toggÀ_size
 (
GtkMíu
 *
míu
,

213 
gboﬁón
 
ª£rve_toggÀ_size
);

214 
gboﬁón
 
	`gtk_míu_gë_ª£rve_toggÀ_size
 (
GtkMíu
 *
míu
);

217 
G_END_DECLS


	@/usr/include/gtk/gtkmenubar.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MENU_BAR_H__


32 
	#__GTK_MENU_BAR_H__


	)

35 
	~<gtk/gtkmíushñl.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_MENU_BAR
 (
	`gtk_míu_b¨_gë_ty≥
 ())

	)

42 
	#GTK_MENU_BAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_MENU_BAR
, 
GtkMíuB¨
))

	)

43 
	#GTK_MENU_BAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_MENU_BAR
, 
GtkMíuB¨Cœss
))

	)

44 
	#GTK_IS_MENU_BAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_MENU_BAR
))

	)

45 
	#GTK_IS_MENU_BAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_MENU_BAR
))

	)

46 
	#GTK_MENU_BAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_MENU_BAR
, 
GtkMíuB¨Cœss
))

	)

48 
_GtkMíuB¨
 
	tGtkMíuB¨
;

49 
_GtkMíuB¨Cœss
 
	tGtkMíuB¨Cœss
;

51 
	s_GtkMíuB¨


53 
GtkMíuShñl
 
	mmíu_shñl
;

56 
	s_GtkMíuB¨Cœss


58 
GtkMíuShñlCœss
 
	m∑ª¡_˛ass
;

61 (*
	m_gtk_ª£rved1
) ();

62 (*
	m_gtk_ª£rved2
) ();

63 (*
	m_gtk_ª£rved3
) ();

64 (*
	m_gtk_ª£rved4
) ();

68 
GTy≥
 
	$gtk_míu_b¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

69 
GtkWidgë
* 
	`gtk_míu_b¨_√w
 ();

71 
GtkPackDúe˘i⁄
 
	`gtk_míu_b¨_gë_∑ck_dúe˘i⁄
 (
GtkMíuB¨
 *
míub¨
);

72 
	`gtk_míu_b¨_£t_∑ck_dúe˘i⁄
 (
GtkMíuB¨
 *
míub¨
,

73 
GtkPackDúe˘i⁄
 
∑ck_dú
);

74 
GtkPackDúe˘i⁄
 
	`gtk_míu_b¨_gë_chûd_∑ck_dúe˘i⁄
 (
GtkMíuB¨
 *
míub¨
);

75 
	`gtk_míu_b¨_£t_chûd_∑ck_dúe˘i⁄
 (
GtkMíuB¨
 *
míub¨
,

76 
GtkPackDúe˘i⁄
 
chûd_∑ck_dú
);

78 #i‚de‡
GTK_DISABLE_DEPRECATED


79 
	#gtk_míu_b¨_≠≥nd
(
míu
,
chûd
Ë
	`gtk_míu_shñl_≠≥nd
 ((
GtkMíuShñl
 *)(míu),(chûd))

	)

80 
	#gtk_míu_b¨_¥ïíd
(
míu
,
chûd
Ë
	`gtk_míu_shñl_¥ïíd
 ((
GtkMíuShñl
 *)(míu),(chûd))

	)

81 
	#gtk_míu_b¨_ö£π
(
míu
,
chûd
,
pos
Ë
	`gtk_míu_shñl_ö£π
 ((
GtkMíuShñl
 *)(míu),(chûd),’os))

	)

85 
	`_gtk_míu_b¨_cy˛e_focus
 (
GtkMíuB¨
 *
míub¨
,

86 
GtkDúe˘i⁄Ty≥
 
dú
);

89 
G_END_DECLS


	@/usr/include/gtk/gtkmenuitem.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MENU_ITEM_H__


32 
	#__GTK_MENU_ITEM_H__


	)

35 
	~<gtk/gtkôem.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_MENU_ITEM
 (
	`gtk_míu_ôem_gë_ty≥
 ())

	)

41 
	#GTK_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_MENU_ITEM
, 
GtkMíuIãm
))

	)

42 
	#GTK_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_MENU_ITEM
, 
GtkMíuIãmCœss
))

	)

43 
	#GTK_IS_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_MENU_ITEM
))

	)

44 
	#GTK_IS_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_MENU_ITEM
))

	)

45 
	#GTK_MENU_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_MENU_ITEM
, 
GtkMíuIãmCœss
))

	)

48 
_GtkMíuIãm
 
	tGtkMíuIãm
;

49 
_GtkMíuIãmCœss
 
	tGtkMíuIãmCœss
;

51 
	s_GtkMíuIãm


53 
GtkIãm
 
	môem
;

55 
GtkWidgë
 *
GSEAL
 (
submíu
);

56 
GdkWödow
 *
GSEAL
 (
evít_wödow
);

58 
guöt16
 
GSEAL
 (
toggÀ_size
);

59 
guöt16
 
GSEAL
 (
ac˚Àøt‹_width
);

60 
gch¨
 *
GSEAL
 (
ac˚l_∑th
);

62 
guöt
 
GSEAL
 (
show_submíu_ödiˇt‹
) : 1;

63 
guöt
 
GSEAL
 (
submíu_∂a˚mít
) : 1;

64 
guöt
 
GSEAL
 (
submíu_dúe˘i⁄
) : 1;

65 
guöt
 
GSEAL
 (
right_ju°ify
): 1;

66 
guöt
 
GSEAL
 (
timî_‰om_key¥ess
) : 1;

67 
guöt
 
GSEAL
 (
‰om_míub¨
) : 1;

68 
guöt
 
GSEAL
 (
timî
);

71 
	s_GtkMíuIãmCœss


73 
GtkIãmCœss
 
	m∑ª¡_˛ass
;

81 
guöt
 
	mhide_⁄_a˘iv©e
 : 1;

83 (* 
	ma˘iv©e
Ë(
GtkMíuIãm
 *
	mmíu_ôem
);

84 (* 
	ma˘iv©e_ôem
Ë(
GtkMíuIãm
 *
	mmíu_ôem
);

85 (* 
	mtoggÀ_size_ªque°
Ë(
GtkMíuIãm
 *
	mmíu_ôem
,

86 
göt
 *
	mªquisôi⁄
);

87 (* 
	mtoggÀ_size_Æloˇã
Ë(
GtkMíuIãm
 *
	mmíu_ôem
,

88 
göt
 
	mÆloˇti⁄
);

89 (* 
	m£t_œbñ
Ë(
GtkMíuIãm
 *
	mmíu_ôem
,

90 c⁄° 
gch¨
 *
	mœbñ
);

91 
G_CONST_RETURN
 
	mgch¨
 *(* 
	mgë_œbñ
Ë(
GtkMíuIãm
 *
	mmíu_ôem
);

94 (*
	m_gtk_ª£rved1
) ();

95 (*
	m_gtk_ª£rved2
) ();

99 
GTy≥
 
	$gtk_míu_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

100 
GtkWidgë
* 
	`gtk_míu_ôem_√w
 ();

101 
GtkWidgë
* 
	`gtk_míu_ôem_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

102 
GtkWidgë
* 
	`gtk_míu_ôem_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
œbñ
);

103 
	`gtk_míu_ôem_£t_submíu
 (
GtkMíuIãm
 *
míu_ôem
,

104 
GtkWidgë
 *
submíu
);

105 
GtkWidgë
* 
	`gtk_míu_ôem_gë_submíu
 (
GtkMíuIãm
 *
míu_ôem
);

106 
	`gtk_míu_ôem_£À˘
 (
GtkMíuIãm
 *
míu_ôem
);

107 
	`gtk_míu_ôem_de£À˘
 (
GtkMíuIãm
 *
míu_ôem
);

108 
	`gtk_míu_ôem_a˘iv©e
 (
GtkMíuIãm
 *
míu_ôem
);

109 
	`gtk_míu_ôem_toggÀ_size_ªque°
 (
GtkMíuIãm
 *
míu_ôem
,

110 
göt
 *
ªquisôi⁄
);

111 
	`gtk_míu_ôem_toggÀ_size_Æloˇã
 (
GtkMíuIãm
 *
míu_ôem
,

112 
göt
 
Æloˇti⁄
);

113 
	`gtk_míu_ôem_£t_right_ju°ifõd
 (
GtkMíuIãm
 *
míu_ôem
,

114 
gboﬁón
 
right_ju°ifõd
);

115 
gboﬁón
 
	`gtk_míu_ôem_gë_right_ju°ifõd
 (
GtkMíuIãm
 *
míu_ôem
);

116 
	`gtk_míu_ôem_£t_ac˚l_∑th
 (
GtkMíuIãm
 *
míu_ôem
,

117 c⁄° 
gch¨
 *
ac˚l_∑th
);

118 
G_CONST_RETURN
 
gch¨
* 
	`gtk_míu_ôem_gë_ac˚l_∑th
 (
GtkMíuIãm
 *
míu_ôem
);

120 
	`gtk_míu_ôem_£t_œbñ
 (
GtkMíuIãm
 *
míu_ôem
,

121 c⁄° 
gch¨
 *
œbñ
);

122 
G_CONST_RETURN
 
gch¨
 *
	`gtk_míu_ôem_gë_œbñ
 (
GtkMíuIãm
 *
míu_ôem
);

124 
	`gtk_míu_ôem_£t_u£_undîlöe
 (
GtkMíuIãm
 *
míu_ôem
,

125 
gboﬁón
 
£âög
);

126 
gboﬁón
 
	`gtk_míu_ôem_gë_u£_undîlöe
 (
GtkMíuIãm
 *
míu_ôem
);

129 
	`_gtk_míu_ôem_ª‰esh_ac˚l_∑th
 (
GtkMíuIãm
 *
míu_ôem
,

130 c⁄° 
gch¨
 *
¥efix
,

131 
GtkAc˚lGroup
 *
ac˚l_group
,

132 
gboﬁón
 
group_ch™ged
);

133 
gboﬁón
 
	`_gtk_míu_ôem_is_£À˘abÀ
 (
GtkWidgë
 *
míu_ôem
);

134 
	`_gtk_míu_ôem_p›up_submíu
 (
GtkWidgë
 *
míu_ôem
,

135 
gboﬁón
 
wôh_dñay
);

136 
	`_gtk_míu_ôem_p›down_submíu
 (
GtkWidgë
 *
míu_ôem
);

138 #i‚de‡
GTK_DISABLE_DEPRECATED


139 
	`gtk_míu_ôem_ªmove_submíu
 (
GtkMíuIãm
 *
míu_ôem
);

140 
	#gtk_míu_ôem_right_ju°ify
(
míu_ôem
Ë
	`gtk_míu_ôem_£t_right_ju°ifõd
 ((míu_ôem), 
TRUE
)

	)

143 
G_END_DECLS


	@/usr/include/gtk/gtkmenushell.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MENU_SHELL_H__


32 
	#__GTK_MENU_SHELL_H__


	)

35 
	~<gtk/gtkc⁄èöî.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_MENU_SHELL
 (
	`gtk_míu_shñl_gë_ty≥
 ())

	)

41 
	#GTK_MENU_SHELL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_MENU_SHELL
, 
GtkMíuShñl
))

	)

42 
	#GTK_MENU_SHELL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_MENU_SHELL
, 
GtkMíuShñlCœss
))

	)

43 
	#GTK_IS_MENU_SHELL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_MENU_SHELL
))

	)

44 
	#GTK_IS_MENU_SHELL_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_MENU_SHELL
))

	)

45 
	#GTK_MENU_SHELL_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_MENU_SHELL
, 
GtkMíuShñlCœss
))

	)

48 
_GtkMíuShñl
 
	tGtkMíuShñl
;

49 
_GtkMíuShñlCœss
 
	tGtkMíuShñlCœss
;

51 
	s_GtkMíuShñl


53 
GtkC⁄èöî
 
	mc⁄èöî
;

55 
GLi°
 *
GSEAL
 (
chûdªn
);

56 
GtkWidgë
 *
GSEAL
 (
a˘ive_míu_ôem
);

57 
GtkWidgë
 *
GSEAL
 (
∑ª¡_míu_shñl
);

59 
guöt
 
GSEAL
 (
buâ⁄
);

60 
guöt32
 
GSEAL
 (
a˘iv©e_time
);

62 
guöt
 
GSEAL
 (
a˘ive
) : 1;

63 
guöt
 
GSEAL
 (
have_gøb
) : 1;

64 
guöt
 
GSEAL
 (
have_xgøb
) : 1;

65 
guöt
 
GSEAL
 (
ign‹e_Àave
) : 1;

66 
guöt
 
GSEAL
 (
míu_Êag
) : 1;

67 
guöt
 
GSEAL
 (
ign‹e_íãr
) : 1;

68 
guöt
 
GSEAL
 (
keybﬂrd_mode
) : 1;

71 
	s_GtkMíuShñlCœss


73 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

75 
guöt
 
	msubmíu_∂a˚mít
 : 1;

77 (*
	mdó˘iv©e
Ë(
GtkMíuShñl
 *
	mmíu_shñl
);

78 (*
	m£À˘i⁄_d⁄e
Ë(
GtkMíuShñl
 *
	mmíu_shñl
);

80 (*
	mmove_cuºít
Ë(
GtkMíuShñl
 *
	mmíu_shñl
,

81 
GtkMíuDúe˘i⁄Ty≥
 
	mdúe˘i⁄
);

82 (*
	ma˘iv©e_cuºít
Ë(
GtkMíuShñl
 *
	mmíu_shñl
,

83 
gboﬁón
 
	mf‹˚_hide
);

84 (*
	mˇn˚l
Ë(
GtkMíuShñl
 *
	mmíu_shñl
);

85 (*
	m£À˘_ôem
Ë(
GtkMíuShñl
 *
	mmíu_shñl
,

86 
GtkWidgë
 *
	mmíu_ôem
);

87 (*
	mö£π
Ë(
GtkMíuShñl
 *
	mmíu_shñl
,

88 
GtkWidgë
 *
	mchûd
,

89 
göt
 
	mposôi⁄
);

90 
göt
 (*
gë_p›up_dñay
Ë(
GtkMíuShñl
 *
	mmíu_shñl
);

91 
gboﬁón
 (*
move_£À˘ed
Ë(
GtkMíuShñl
 *
	mmíu_shñl
,

92 
göt
 
	mdi°™˚
);

95 (*
	m_gtk_ª£rved1
) ();

96 (*
	m_gtk_ª£rved2
) ();

100 
GTy≥
 
	$gtk_míu_shñl_gë_ty≥
 (Ë
G_GNUC_CONST
;

101 
	`gtk_míu_shñl_≠≥nd
 (
GtkMíuShñl
 *
míu_shñl
,

102 
GtkWidgë
 *
chûd
);

103 
	`gtk_míu_shñl_¥ïíd
 (
GtkMíuShñl
 *
míu_shñl
,

104 
GtkWidgë
 *
chûd
);

105 
	`gtk_míu_shñl_ö£π
 (
GtkMíuShñl
 *
míu_shñl
,

106 
GtkWidgë
 *
chûd
,

107 
göt
 
posôi⁄
);

108 
	`gtk_míu_shñl_dó˘iv©e
 (
GtkMíuShñl
 *
míu_shñl
);

109 
	`gtk_míu_shñl_£À˘_ôem
 (
GtkMíuShñl
 *
míu_shñl
,

110 
GtkWidgë
 *
míu_ôem
);

111 
	`gtk_míu_shñl_de£À˘
 (
GtkMíuShñl
 *
míu_shñl
);

112 
	`gtk_míu_shñl_a˘iv©e_ôem
 (
GtkMíuShñl
 *
míu_shñl
,

113 
GtkWidgë
 *
míu_ôem
,

114 
gboﬁón
 
f‹˚_dó˘iv©e
);

115 
	`gtk_míu_shñl_£À˘_fú°
 (
GtkMíuShñl
 *
míu_shñl
,

116 
gboﬁón
 
£¨ch_£nsôive
);

117 
	`_gtk_míu_shñl_£À˘_œ°
 (
GtkMíuShñl
 *
míu_shñl
,

118 
gboﬁón
 
£¨ch_£nsôive
);

119 
	`_gtk_míu_shñl_a˘iv©e
 (
GtkMíuShñl
 *
míu_shñl
);

120 
göt
 
	`_gtk_míu_shñl_gë_p›up_dñay
 (
GtkMíuShñl
 *
míu_shñl
);

121 
	`gtk_míu_shñl_ˇn˚l
 (
GtkMíuShñl
 *
míu_shñl
);

123 
	`_gtk_míu_shñl_add_m√m⁄ic
 (
GtkMíuShñl
 *
míu_shñl
,

124 
guöt
 
keyvÆ
,

125 
GtkWidgë
 *
èrgë
);

126 
	`_gtk_míu_shñl_ªmove_m√m⁄ic
 (
GtkMíuShñl
 *
míu_shñl
,

127 
guöt
 
keyvÆ
,

128 
GtkWidgë
 *
èrgë
);

130 
gboﬁón
 
	`gtk_míu_shñl_gë_èke_focus
 (
GtkMíuShñl
 *
míu_shñl
);

131 
	`gtk_míu_shñl_£t_èke_focus
 (
GtkMíuShñl
 *
míu_shñl
,

132 
gboﬁón
 
èke_focus
);

134 
	`_gtk_míu_shñl_upd©e_m√m⁄ics
 (
GtkMíuShñl
 *
míu_shñl
);

135 
	`_gtk_míu_shñl_£t_keybﬂrd_mode
 (
GtkMíuShñl
 *
míu_shñl
,

136 
gboﬁón
 
keybﬂrd_mode
);

137 
gboﬁón
 
	`_gtk_míu_shñl_gë_keybﬂrd_mode
 (
GtkMíuShñl
 *
míu_shñl
);

139 
G_END_DECLS


	@/usr/include/gtk/gtkmenutoolbutton.h

22 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_MENU_TOOL_BUTTON_H__


27 
	#__GTK_MENU_TOOL_BUTTON_H__


	)

29 
	~<gtk/gtkmíu.h
>

30 
	~<gtk/gtktoﬁbuâ⁄.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_MENU_TOOL_BUTTON
 (
	`gtk_míu_toﬁ_buâ⁄_gë_ty≥
 ())

	)

35 
	#GTK_MENU_TOOL_BUTTON
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((o), 
GTK_TYPE_MENU_TOOL_BUTTON
, 
GtkMíuToﬁBuâ⁄
))

	)

36 
	#GTK_MENU_TOOL_BUTTON_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_CAST
((k), 
GTK_TYPE_MENU_TOOL_BUTTON
, 
GtkMíuToﬁBuâ⁄Cœss
))

	)

37 
	#GTK_IS_MENU_TOOL_BUTTON
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((o), 
GTK_TYPE_MENU_TOOL_BUTTON
))

	)

38 
	#GTK_IS_MENU_TOOL_BUTTON_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((k), 
GTK_TYPE_MENU_TOOL_BUTTON
))

	)

39 
	#GTK_MENU_TOOL_BUTTON_GET_CLASS
(
o
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((o), 
GTK_TYPE_MENU_TOOL_BUTTON
, 
GtkMíuToﬁBuâ⁄Cœss
))

	)

41 
_GtkMíuToﬁBuâ⁄Cœss
 
	tGtkMíuToﬁBuâ⁄Cœss
;

42 
_GtkMíuToﬁBuâ⁄
 
	tGtkMíuToﬁBuâ⁄
;

43 
_GtkMíuToﬁBuâ⁄Priv©e
 
	tGtkMíuToﬁBuâ⁄Priv©e
;

45 
	s_GtkMíuToﬁBuâ⁄


47 
GtkToﬁBuâ⁄
 
	m∑ª¡
;

50 
GtkMíuToﬁBuâ⁄Priv©e
 *
GSEAL
 (
¥iv
);

53 
	s_GtkMíuToﬁBuâ⁄Cœss


55 
GtkToﬁBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

57 (*
	mshow_míu
Ë(
GtkMíuToﬁBuâ⁄
 *
	mbuâ⁄
);

60 (*
	m_gtk_ª£rved1
) ();

61 (*
	m_gtk_ª£rved2
) ();

62 (*
	m_gtk_ª£rved3
) ();

63 (*
	m_gtk_ª£rved4
) ();

66 
GTy≥
 
	$gtk_míu_toﬁ_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

67 
GtkToﬁIãm
 *
	`gtk_míu_toﬁ_buâ⁄_√w
 (
GtkWidgë
 *
ic⁄_widgë
,

68 c⁄° 
gch¨
 *
œbñ
);

69 
GtkToﬁIãm
 *
	`gtk_míu_toﬁ_buâ⁄_√w_‰om_°ock
 (c⁄° 
gch¨
 *
°ock_id
);

71 
	`gtk_míu_toﬁ_buâ⁄_£t_míu
 (
GtkMíuToﬁBuâ⁄
 *
buâ⁄
,

72 
GtkWidgë
 *
míu
);

73 
GtkWidgë
 *
	`gtk_míu_toﬁ_buâ⁄_gë_míu
 (
GtkMíuToﬁBuâ⁄
 *
buâ⁄
);

75 #i‚de‡
GTK_DISABLE_DEPRECATED


76 
	`gtk_míu_toﬁ_buâ⁄_£t_¨row_toﬁtù
 (
GtkMíuToﬁBuâ⁄
 *
buâ⁄
,

77 
GtkToﬁtùs
 *
toﬁtùs
,

78 c⁄° 
gch¨
 *
tù_ãxt
,

79 c⁄° 
gch¨
 *
tù_¥iv©e
);

82 
	`gtk_míu_toﬁ_buâ⁄_£t_¨row_toﬁtù_ãxt
 (
GtkMíuToﬁBuâ⁄
 *
buâ⁄
,

83 c⁄° 
gch¨
 *
ãxt
);

84 
	`gtk_míu_toﬁ_buâ⁄_£t_¨row_toﬁtù_m¨kup
 (
GtkMíuToﬁBuâ⁄
 *
buâ⁄
,

85 c⁄° 
gch¨
 *
m¨kup
);

87 
G_END_DECLS


	@/usr/include/gtk/gtkmessagedialog.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MESSAGE_DIALOG_H__


32 
	#__GTK_MESSAGE_DIALOG_H__


	)

34 
	~<gtk/gtkdülog.h
>

35 
	~<gtk/gtkíums.h
>

37 
G_BEGIN_DECLS


41 
	mGTK_BUTTONS_NONE
,

42 
	mGTK_BUTTONS_OK
,

43 
	mGTK_BUTTONS_CLOSE
,

44 
	mGTK_BUTTONS_CANCEL
,

45 
	mGTK_BUTTONS_YES_NO
,

46 
	mGTK_BUTTONS_OK_CANCEL


47 } 
	tGtkBuâ⁄sTy≥
;

49 
	#GTK_TYPE_MESSAGE_DIALOG
 (
	`gtk_mesßge_dülog_gë_ty≥
 ())

	)

50 
	#GTK_MESSAGE_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_MESSAGE_DIALOG
, 
GtkMesßgeDülog
))

	)

51 
	#GTK_MESSAGE_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_MESSAGE_DIALOG
, 
GtkMesßgeDülogCœss
))

	)

52 
	#GTK_IS_MESSAGE_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_MESSAGE_DIALOG
))

	)

53 
	#GTK_IS_MESSAGE_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_MESSAGE_DIALOG
))

	)

54 
	#GTK_MESSAGE_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_MESSAGE_DIALOG
, 
GtkMesßgeDülogCœss
))

	)

56 
_GtkMesßgeDülog
 
	tGtkMesßgeDülog
;

57 
_GtkMesßgeDülogCœss
 
	tGtkMesßgeDülogCœss
;

59 
	s_GtkMesßgeDülog


63 
GtkDülog
 
	m∑ª¡_ö°™˚
;

65 
GtkWidgë
 *
GSEAL
 (
image
);

66 
GtkWidgë
 *
GSEAL
 (
œbñ
);

69 
	s_GtkMesßgeDülogCœss


71 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

74 (*
	m_gtk_ª£rved1
) ();

75 (*
	m_gtk_ª£rved2
) ();

76 (*
	m_gtk_ª£rved3
) ();

77 (*
	m_gtk_ª£rved4
) ();

80 
GTy≥
 
	$gtk_mesßge_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

82 
GtkWidgë
* 
	$gtk_mesßge_dülog_√w
 (
GtkWödow
 *
∑ª¡
,

83 
GtkDülogFœgs
 
Êags
,

84 
GtkMesßgeTy≥
 
ty≥
,

85 
GtkBuâ⁄sTy≥
 
buâ⁄s
,

86 c⁄° 
gch¨
 *
mesßge_f‹m©
,

87 ...Ë
	`G_GNUC_PRINTF
 (5, 6);

89 
GtkWidgë
* 
	$gtk_mesßge_dülog_√w_wôh_m¨kup
 (
GtkWödow
 *
∑ª¡
,

90 
GtkDülogFœgs
 
Êags
,

91 
GtkMesßgeTy≥
 
ty≥
,

92 
GtkBuâ⁄sTy≥
 
buâ⁄s
,

93 c⁄° 
gch¨
 *
mesßge_f‹m©
,

94 ...Ë
	`G_GNUC_PRINTF
 (5, 6);

96 
	`gtk_mesßge_dülog_£t_image
 (
GtkMesßgeDülog
 *
dülog
,

97 
GtkWidgë
 *
image
);

99 
GtkWidgë
 * 
	`gtk_mesßge_dülog_gë_image
 (
GtkMesßgeDülog
 *
dülog
);

101 
	`gtk_mesßge_dülog_£t_m¨kup
 (
GtkMesßgeDülog
 *
mesßge_dülog
,

102 c⁄° 
gch¨
 *
°r
);

104 
	$gtk_mesßge_dülog_f‹m©_£c⁄d¨y_ãxt
 (
GtkMesßgeDülog
 *
mesßge_dülog
,

105 c⁄° 
gch¨
 *
mesßge_f‹m©
,

106 ...Ë
	`G_GNUC_PRINTF
 (2, 3);

108 
	$gtk_mesßge_dülog_f‹m©_£c⁄d¨y_m¨kup
 (
GtkMesßgeDülog
 *
mesßge_dülog
,

109 c⁄° 
gch¨
 *
mesßge_f‹m©
,

110 ...Ë
	`G_GNUC_PRINTF
 (2, 3);

112 
G_END_DECLS


	@/usr/include/gtk/gtkmisc.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MISC_H__


32 
	#__GTK_MISC_H__


	)

35 
	~<gtk/gtkwidgë.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_MISC
 (
	`gtk_misc_gë_ty≥
 ())

	)

41 
	#GTK_MISC
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_MISC
, 
GtkMisc
))

	)

42 
	#GTK_MISC_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_MISC
, 
GtkMiscCœss
))

	)

43 
	#GTK_IS_MISC
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_MISC
))

	)

44 
	#GTK_IS_MISC_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_MISC
))

	)

45 
	#GTK_MISC_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_MISC
, 
GtkMiscCœss
))

	)

48 
_GtkMisc
 
	tGtkMisc
;

49 
_GtkMiscCœss
 
	tGtkMiscCœss
;

51 
	s_GtkMisc


53 
GtkWidgë
 
	mwidgë
;

55 
gÊﬂt
 
GSEAL
 (
xÆign
);

56 
gÊﬂt
 
GSEAL
 (
yÆign
);

58 
guöt16
 
GSEAL
 (
x∑d
);

59 
guöt16
 
GSEAL
 (
y∑d
);

62 
	s_GtkMiscCœss


64 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

68 
GTy≥
 
	$gtk_misc_gë_ty≥
 (Ë
G_GNUC_CONST
;

69 
	`gtk_misc_£t_Æignmít
 (
GtkMisc
 *
misc
,

70 
gÊﬂt
 
xÆign
,

71 
gÊﬂt
 
yÆign
);

72 
	`gtk_misc_gë_Æignmít
 (
GtkMisc
 *
misc
,

73 
gÊﬂt
 *
xÆign
,

74 
gÊﬂt
 *
yÆign
);

75 
	`gtk_misc_£t_∑ddög
 (
GtkMisc
 *
misc
,

76 
göt
 
x∑d
,

77 
göt
 
y∑d
);

78 
	`gtk_misc_gë_∑ddög
 (
GtkMisc
 *
misc
,

79 
göt
 *
x∑d
,

80 
göt
 *
y∑d
);

83 
G_END_DECLS


	@/usr/include/gtk/gtkmodules.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_MODULES_H__


26 
	#__GTK_MODULES_H__


	)

28 
	~<gtk/gtk£âögs.h
>

31 
G_BEGIN_DECLS


36 
gch¨
 * 
_gtk_föd_moduÀ
 (c⁄° gch¨ *
«me
,

37 c⁄° 
gch¨
 *
ty≥
);

38 
gch¨
 **
_gtk_gë_moduÀ_∑th
 (c⁄° gch¨ *
ty≥
);

40 
_gtk_moduÀs_öô
 (
göt
 *
¨gc
,

41 
gch¨
 ***
¨gv
,

42 c⁄° 
gch¨
 *
gtk_moduÀs_¨gs
);

43 
_gtk_moduÀs_£âögs_ch™ged
 (
GtkSëtögs
 *
£âögs
,

44 c⁄° 
gch¨
 *
moduÀs
);

46 (*
	tGtkModuÀInôFunc
Ë(
	tgöt
 *
	t¨gc
,

47 
	tgch¨
 ***
	t¨gv
);

48 (*
	tGtkModuÀDi•œyInôFunc
Ë(
	tGdkDi•œy
 *
	tdi•œy
);

51 
G_END_DECLS


	@/usr/include/gtk/gtkmountoperation.h

27 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_MOUNT_OPERATION_H__


32 
	#__GTK_MOUNT_OPERATION_H__


	)

34 
	gG_BEGIN_DECLS


36 
	#GTK_TYPE_MOUNT_OPERATION
 (
	`gtk_mou¡_›î©i⁄_gë_ty≥
 ())

	)

37 
	#GTK_MOUNT_OPERATION
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((o), 
GTK_TYPE_MOUNT_OPERATION
, 
GtkMou¡O≥øti⁄
))

	)

38 
	#GTK_MOUNT_OPERATION_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_CAST
((k), 
GTK_TYPE_MOUNT_OPERATION
, 
GtkMou¡O≥øti⁄Cœss
))

	)

39 
	#GTK_IS_MOUNT_OPERATION
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((o), 
GTK_TYPE_MOUNT_OPERATION
))

	)

40 
	#GTK_IS_MOUNT_OPERATION_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((k), 
GTK_TYPE_MOUNT_OPERATION
))

	)

41 
	#GTK_MOUNT_OPERATION_GET_CLASS
(
o
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((o), 
GTK_TYPE_MOUNT_OPERATION
, 
GtkMou¡O≥øti⁄Cœss
))

	)

43 
_GtkMou¡O≥øti⁄
 
	tGtkMou¡O≥øti⁄
;

44 
_GtkMou¡O≥øti⁄Cœss
 
	tGtkMou¡O≥øti⁄Cœss
;

45 
_GtkMou¡O≥øti⁄Priv©e
 
	tGtkMou¡O≥øti⁄Priv©e
;

52 
	s_GtkMou¡O≥øti⁄


54 
GMou¡O≥øti⁄
 
	m∑ª¡_ö°™˚
;

56 
GtkMou¡O≥øti⁄Priv©e
 *
	m¥iv
;

59 
	s_GtkMou¡O≥øti⁄Cœss


61 
GMou¡O≥øti⁄Cœss
 
	m∑ª¡_˛ass
;

64 (*
	m_gtk_ª£rved1
) ();

65 (*
	m_gtk_ª£rved2
) ();

66 (*
	m_gtk_ª£rved3
) ();

67 (*
	m_gtk_ª£rved4
) ();

71 
GTy≥
 
gtk_mou¡_›î©i⁄_gë_ty≥
 ();

72 
GMou¡O≥øti⁄
 *
gtk_mou¡_›î©i⁄_√w
 (
GtkWödow
 *
∑ª¡
);

73 
gboﬁón
 
gtk_mou¡_›î©i⁄_is_showög
 (
GtkMou¡O≥øti⁄
 *
›
);

74 
gtk_mou¡_›î©i⁄_£t_∑ª¡
 (
GtkMou¡O≥øti⁄
 *
›
,

75 
GtkWödow
 *
∑ª¡
);

76 
GtkWödow
 * 
gtk_mou¡_›î©i⁄_gë_∑ª¡
 (
GtkMou¡O≥øti⁄
 *
›
);

77 
gtk_mou¡_›î©i⁄_£t_s¸ìn
 (
GtkMou¡O≥øti⁄
 *
›
,

78 
GdkS¸ìn
 *
s¸ìn
);

79 
GdkS¸ìn
 *
gtk_mou¡_›î©i⁄_gë_s¸ìn
 (
GtkMou¡O≥øti⁄
 *
›
);

81 
	gG_END_DECLS


	@/usr/include/gtk/gtknotebook.h

28 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

32 #i‚de‡
__GTK_NOTEBOOK_H__


33 
	#__GTK_NOTEBOOK_H__


	)

36 
	~<gtk/gtkc⁄èöî.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_NOTEBOOK
 (
	`gtk_nŸebook_gë_ty≥
 ())

	)

42 
	#GTK_NOTEBOOK
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_NOTEBOOK
, 
GtkNŸebook
))

	)

43 
	#GTK_NOTEBOOK_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_NOTEBOOK
, 
GtkNŸebookCœss
))

	)

44 
	#GTK_IS_NOTEBOOK
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_NOTEBOOK
))

	)

45 
	#GTK_IS_NOTEBOOK_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_NOTEBOOK
))

	)

46 
	#GTK_NOTEBOOK_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_NOTEBOOK
, 
GtkNŸebookCœss
))

	)

51 
	mGTK_NOTEBOOK_TAB_FIRST
,

52 
	mGTK_NOTEBOOK_TAB_LAST


53 } 
	tGtkNŸebookTab
;

55 
_GtkNŸebook
 
	tGtkNŸebook
;

56 
_GtkNŸebookCœss
 
	tGtkNŸebookCœss
;

57 
_GtkNŸebookPage
 
	tGtkNŸebookPage
;

59 
	s_GtkNŸebook


61 
GtkC⁄èöî
 
	mc⁄èöî
;

63 
GtkNŸebookPage
 *
GSEAL
 (
cur_∑ge
);

64 
GLi°
 *
GSEAL
 (
chûdªn
);

65 
GLi°
 *
GSEAL
 (
fú°_èb
);

66 
GLi°
 *
GSEAL
 (
focus_èb
);

68 
GtkWidgë
 *
GSEAL
 (
míu
);

69 
GdkWödow
 *
GSEAL
 (
evít_wödow
);

71 
guöt32
 
GSEAL
 (
timî
);

73 
guöt16
 
GSEAL
 (
èb_hb‹dî
);

74 
guöt16
 
GSEAL
 (
èb_vb‹dî
);

76 
guöt
 
GSEAL
 (
show_èbs
) : 1;

77 
guöt
 
GSEAL
 (
homogíeous
) : 1;

78 
guöt
 
GSEAL
 (
show_b‹dî
) : 1;

79 
guöt
 
GSEAL
 (
èb_pos
) : 2;

80 
guöt
 
GSEAL
 (
s¸ﬁœbÀ
) : 1;

81 
guöt
 
GSEAL
 (
ö_chûd
) : 3;

82 
guöt
 
GSEAL
 (
˛ick_chûd
) : 3;

83 
guöt
 
GSEAL
 (
buâ⁄
) : 2;

84 
guöt
 
GSEAL
 (
√ed_timî
) : 1;

85 
guöt
 
GSEAL
 (
chûd_has_focus
) : 1;

86 
guöt
 
GSEAL
 (
have_visibÀ_chûd
) : 1;

87 
guöt
 
GSEAL
 (
focus_out
) : 1;

89 
guöt
 
GSEAL
 (
has_bef‹e_¥evious
) : 1;

90 
guöt
 
GSEAL
 (
has_bef‹e_√xt
) : 1;

91 
guöt
 
GSEAL
 (
has_a·î_¥evious
) : 1;

92 
guöt
 
GSEAL
 (
has_a·î_√xt
) : 1;

95 
	s_GtkNŸebookCœss


97 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

99 (* 
	mswôch_∑ge
Ë(
GtkNŸebook
 *
	mnŸebook
,

100 
GtkNŸebookPage
 *
	m∑ge
,

101 
guöt
 
	m∑ge_num
);

104 
gboﬁón
 (* 
£À˘_∑ge
Ë(
GtkNŸebook
 *
	mnŸebook
,

105 
gboﬁón
 
	mmove_focus
);

106 
gboﬁón
 (* 
focus_èb
Ë(
GtkNŸebook
 *
	mnŸebook
,

107 
GtkNŸebookTab
 
	mty≥
);

108 
gboﬁón
 (* 
ch™ge_cuºít_∑ge
Ë(
GtkNŸebook
 *
	mnŸebook
,

109 
göt
 
	moff£t
);

110 (* 
	mmove_focus_out
Ë(
GtkNŸebook
 *
	mnŸebook
,

111 
GtkDúe˘i⁄Ty≥
 
	mdúe˘i⁄
);

112 
gboﬁón
 (* 
ª‹dî_èb
Ë(
GtkNŸebook
 *
	mnŸebook
,

113 
GtkDúe˘i⁄Ty≥
 
	mdúe˘i⁄
,

114 
gboﬁón
 
	mmove_to_œ°
);

117 
göt
 (* 
ö£π_∑ge
Ë(
GtkNŸebook
 *
	mnŸebook
,

118 
GtkWidgë
 *
	mchûd
,

119 
GtkWidgë
 *
	mèb_œbñ
,

120 
GtkWidgë
 *
	mmíu_œbñ
,

121 
göt
 
	mposôi⁄
);

123 
	mGtkNŸebook
 * (* 
	m¸óã_wödow
Ë(
GtkNŸebook
 *
	mnŸebook
,

124 
GtkWidgë
 *
	m∑ge
,

125 
göt
 
	mx
,

126 
göt
 
	my
);

128 (*
	m_gtk_ª£rved1
) ();

131 
	gGtkNŸebook
* (*
	tGtkNŸebookWödowCª©i⁄Func
Ë(
	tGtkNŸebook
 *
	tsour˚
,

132 
	tGtkWidgë
 *
	t∑ge
,

133 
	tgöt
 
	tx
,

134 
	tgöt
 
	ty
,

135 
	tgpoöãr
 
	td©a
);

141 
GTy≥
 
	$gtk_nŸebook_gë_ty≥
 (Ë
G_GNUC_CONST
;

142 
GtkWidgë
 * 
	`gtk_nŸebook_√w
 ();

143 
göt
 
	`gtk_nŸebook_≠≥nd_∑ge
 (
GtkNŸebook
 *
nŸebook
,

144 
GtkWidgë
 *
chûd
,

145 
GtkWidgë
 *
èb_œbñ
);

146 
göt
 
	`gtk_nŸebook_≠≥nd_∑ge_míu
 (
GtkNŸebook
 *
nŸebook
,

147 
GtkWidgë
 *
chûd
,

148 
GtkWidgë
 *
èb_œbñ
,

149 
GtkWidgë
 *
míu_œbñ
);

150 
göt
 
	`gtk_nŸebook_¥ïíd_∑ge
 (
GtkNŸebook
 *
nŸebook
,

151 
GtkWidgë
 *
chûd
,

152 
GtkWidgë
 *
èb_œbñ
);

153 
göt
 
	`gtk_nŸebook_¥ïíd_∑ge_míu
 (
GtkNŸebook
 *
nŸebook
,

154 
GtkWidgë
 *
chûd
,

155 
GtkWidgë
 *
èb_œbñ
,

156 
GtkWidgë
 *
míu_œbñ
);

157 
göt
 
	`gtk_nŸebook_ö£π_∑ge
 (
GtkNŸebook
 *
nŸebook
,

158 
GtkWidgë
 *
chûd
,

159 
GtkWidgë
 *
èb_œbñ
,

160 
göt
 
posôi⁄
);

161 
göt
 
	`gtk_nŸebook_ö£π_∑ge_míu
 (
GtkNŸebook
 *
nŸebook
,

162 
GtkWidgë
 *
chûd
,

163 
GtkWidgë
 *
èb_œbñ
,

164 
GtkWidgë
 *
míu_œbñ
,

165 
göt
 
posôi⁄
);

166 
	`gtk_nŸebook_ªmove_∑ge
 (
GtkNŸebook
 *
nŸebook
,

167 
göt
 
∑ge_num
);

173 
	`gtk_nŸebook_£t_wödow_¸óti⁄_hook
 (
GtkNŸebookWödowCª©i⁄Func
 
func
,

174 
gpoöãr
 
d©a
,

175 
GDe°royNŸify
 
de°roy
);

176 #i‚de‡
GTK_DISABLE_DEPRECATED


177 
	`gtk_nŸebook_£t_group_id
 (
GtkNŸebook
 *
nŸebook
,

178 
göt
 
group_id
);

179 
göt
 
	`gtk_nŸebook_gë_group_id
 (
GtkNŸebook
 *
nŸebook
);

183 
	`gtk_nŸebook_£t_group
 (
GtkNŸebook
 *
nŸebook
,

184 
gpoöãr
 
group
);

185 
gpoöãr
 
	`gtk_nŸebook_gë_group
 (
GtkNŸebook
 *
nŸebook
);

193 
göt
 
	`gtk_nŸebook_gë_cuºít_∑ge
 (
GtkNŸebook
 *
nŸebook
);

194 
GtkWidgë
* 
	`gtk_nŸebook_gë_¡h_∑ge
 (
GtkNŸebook
 *
nŸebook
,

195 
göt
 
∑ge_num
);

196 
göt
 
	`gtk_nŸebook_gë_n_∑ges
 (
GtkNŸebook
 *
nŸebook
);

197 
göt
 
	`gtk_nŸebook_∑ge_num
 (
GtkNŸebook
 *
nŸebook
,

198 
GtkWidgë
 *
chûd
);

199 
	`gtk_nŸebook_£t_cuºít_∑ge
 (
GtkNŸebook
 *
nŸebook
,

200 
göt
 
∑ge_num
);

201 
	`gtk_nŸebook_√xt_∑ge
 (
GtkNŸebook
 *
nŸebook
);

202 
	`gtk_nŸebook_¥ev_∑ge
 (
GtkNŸebook
 *
nŸebook
);

208 
	`gtk_nŸebook_£t_show_b‹dî
 (
GtkNŸebook
 *
nŸebook
,

209 
gboﬁón
 
show_b‹dî
);

210 
gboﬁón
 
	`gtk_nŸebook_gë_show_b‹dî
 (
GtkNŸebook
 *
nŸebook
);

211 
	`gtk_nŸebook_£t_show_èbs
 (
GtkNŸebook
 *
nŸebook
,

212 
gboﬁón
 
show_èbs
);

213 
gboﬁón
 
	`gtk_nŸebook_gë_show_èbs
 (
GtkNŸebook
 *
nŸebook
);

214 
	`gtk_nŸebook_£t_èb_pos
 (
GtkNŸebook
 *
nŸebook
,

215 
GtkPosôi⁄Ty≥
 
pos
);

216 
GtkPosôi⁄Ty≥
 
	`gtk_nŸebook_gë_èb_pos
 (
GtkNŸebook
 *
nŸebook
);

218 #i‚de‡
GTK_DISABLE_DEPRECATED


219 
	`gtk_nŸebook_£t_homogíeous_èbs
 (
GtkNŸebook
 *
nŸebook
,

220 
gboﬁón
 
homogíeous
);

221 
	`gtk_nŸebook_£t_èb_b‹dî
 (
GtkNŸebook
 *
nŸebook
,

222 
guöt
 
b‹dî_width
);

223 
	`gtk_nŸebook_£t_èb_hb‹dî
 (
GtkNŸebook
 *
nŸebook
,

224 
guöt
 
èb_hb‹dî
);

225 
	`gtk_nŸebook_£t_èb_vb‹dî
 (
GtkNŸebook
 *
nŸebook
,

226 
guöt
 
èb_vb‹dî
);

229 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
 (
GtkNŸebook
 *
nŸebook
,

230 
gboﬁón
 
s¸ﬁœbÀ
);

231 
gboﬁón
 
	`gtk_nŸebook_gë_s¸ﬁœbÀ
 (
GtkNŸebook
 *
nŸebook
);

237 
	`gtk_nŸebook_p›up_íabÀ
 (
GtkNŸebook
 *
nŸebook
);

238 
	`gtk_nŸebook_p›up_dißbÀ
 (
GtkNŸebook
 *
nŸebook
);

244 
GtkWidgë
 * 
	`gtk_nŸebook_gë_èb_œbñ
 (
GtkNŸebook
 *
nŸebook
,

245 
GtkWidgë
 *
chûd
);

246 
	`gtk_nŸebook_£t_èb_œbñ
 (
GtkNŸebook
 *
nŸebook
,

247 
GtkWidgë
 *
chûd
,

248 
GtkWidgë
 *
èb_œbñ
);

249 
	`gtk_nŸebook_£t_èb_œbñ_ãxt
 (
GtkNŸebook
 *
nŸebook
,

250 
GtkWidgë
 *
chûd
,

251 c⁄° 
gch¨
 *
èb_ãxt
);

252 
G_CONST_RETURN
 
gch¨
 *
	`gtk_nŸebook_gë_èb_œbñ_ãxt
 (
GtkNŸebook
 *
nŸebook
,

253 
GtkWidgë
 *
chûd
);

254 
GtkWidgë
 * 
	`gtk_nŸebook_gë_míu_œbñ
 (
GtkNŸebook
 *
nŸebook
,

255 
GtkWidgë
 *
chûd
);

256 
	`gtk_nŸebook_£t_míu_œbñ
 (
GtkNŸebook
 *
nŸebook
,

257 
GtkWidgë
 *
chûd
,

258 
GtkWidgë
 *
míu_œbñ
);

259 
	`gtk_nŸebook_£t_míu_œbñ_ãxt
 (
GtkNŸebook
 *
nŸebook
,

260 
GtkWidgë
 *
chûd
,

261 c⁄° 
gch¨
 *
míu_ãxt
);

262 
G_CONST_RETURN
 
gch¨
 *
	`gtk_nŸebook_gë_míu_œbñ_ãxt
 (
GtkNŸebook
 *
nŸebook
,

263 
GtkWidgë
 *
chûd
);

264 #i‚de‡
GTK_DISABLE_DEPRECATED


265 
	`gtk_nŸebook_quîy_èb_œbñ_∑ckög
 (
GtkNŸebook
 *
nŸebook
,

266 
GtkWidgë
 *
chûd
,

267 
gboﬁón
 *
ex∑nd
,

268 
gboﬁón
 *
fûl
,

269 
GtkPackTy≥
 *
∑ck_ty≥
);

270 
	`gtk_nŸebook_£t_èb_œbñ_∑ckög
 (
GtkNŸebook
 *
nŸebook
,

271 
GtkWidgë
 *
chûd
,

272 
gboﬁón
 
ex∑nd
,

273 
gboﬁón
 
fûl
,

274 
GtkPackTy≥
 
∑ck_ty≥
);

276 
	`gtk_nŸebook_ª‹dî_chûd
 (
GtkNŸebook
 *
nŸebook
,

277 
GtkWidgë
 *
chûd
,

278 
göt
 
posôi⁄
);

279 
gboﬁón
 
	`gtk_nŸebook_gë_èb_ª‹dîabÀ
 (
GtkNŸebook
 *
nŸebook
,

280 
GtkWidgë
 *
chûd
);

281 
	`gtk_nŸebook_£t_èb_ª‹dîabÀ
 (
GtkNŸebook
 *
nŸebook
,

282 
GtkWidgë
 *
chûd
,

283 
gboﬁón
 
ª‹dîabÀ
);

284 
gboﬁón
 
	`gtk_nŸebook_gë_èb_dëachabÀ
 (
GtkNŸebook
 *
nŸebook
,

285 
GtkWidgë
 *
chûd
);

286 
	`gtk_nŸebook_£t_èb_dëachabÀ
 (
GtkNŸebook
 *
nŸebook
,

287 
GtkWidgë
 *
chûd
,

288 
gboﬁón
 
dëachabÀ
);

290 
GtkWidgë
* 
	`gtk_nŸebook_gë_a˘i⁄_widgë
 (
GtkNŸebook
 *
nŸebook
,

291 
GtkPackTy≥
 
∑ck_ty≥
);

292 
	`gtk_nŸebook_£t_a˘i⁄_widgë
 (
GtkNŸebook
 *
nŸebook
,

293 
GtkWidgë
 *
widgë
,

294 
GtkPackTy≥
 
∑ck_ty≥
);

296 #i‚de‡
GTK_DISABLE_DEPRECATED


297 
	#gtk_nŸebook_cuºít_∑ge
 
gtk_nŸebook_gë_cuºít_∑ge


	)

298 
	#gtk_nŸebook_£t_∑ge
 
gtk_nŸebook_£t_cuºít_∑ge


	)

301 
G_END_DECLS


	@/usr/include/gtk/gtkobject.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_OBJECT_H__


32 
	#__GTK_OBJECT_H__


	)

35 
	~<gdkc⁄fig.h
>

36 
	~<gtk/gtkíums.h
>

37 
	~<gtk/gtkty≥utûs.h
>

38 
	~<gtk/gtkdebug.h
>

41 
	gG_BEGIN_DECLS


47 
	#GTK_TYPE_OBJECT
 (
	`gtk_obje˘_gë_ty≥
 ())

	)

48 
	#GTK_OBJECT
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_OBJECT
, 
GtkObje˘
))

	)

49 
	#GTK_OBJECT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_OBJECT
, 
GtkObje˘Cœss
))

	)

50 
	#GTK_IS_OBJECT
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_OBJECT
))

	)

51 
	#GTK_IS_OBJECT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_OBJECT
))

	)

52 
	#GTK_OBJECT_GET_CLASS
(
obje˘
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obje˘), 
GTK_TYPE_OBJECT
, 
GtkObje˘Cœss
))

	)

56 #i‚de‡
GTK_DISABLE_DEPRECATED


65 
	#GTK_OBJECT_TYPE
 
G_OBJECT_TYPE


	)

74 
	#GTK_OBJECT_TYPE_NAME
 
G_OBJECT_TYPE_NAME


	)

84 
	mGTK_IN_DESTRUCTION
 = 1 << 0,

85 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
GTK_COMPILATION
)

86 
	mGTK_FLOATING
 = 1 << 1,

88 
	mGTK_RESERVED_1
 = 1 << 2,

89 
	mGTK_RESERVED_2
 = 1 << 3

90 } 
	tGtkObje˘Fœgs
;

94 
	#GTK_OBJECT_FLAGS
(
obj
Ë(
	`GTK_OBJECT
 (obj)->
Êags
)

	)

95 #i‚de‡
GTK_DISABLE_DEPRECATED


96 
	#GTK_OBJECT_FLOATING
(
obj
Ë(
	`g_obje˘_is_Êﬂtög
 (obj))

	)

101 
	#GTK_OBJECT_SET_FLAGS
(
obj
,
Êag
Ë
G_STMT_START
{ (
	`GTK_OBJECT_FLAGS
 (objË|(Êag)); }
G_STMT_END


	)

102 
	#GTK_OBJECT_UNSET_FLAGS
(
obj
,
Êag
Ë
G_STMT_START
{ (
	`GTK_OBJECT_FLAGS
 (objË&~(Êag)); }
G_STMT_END


	)

104 
_GtkObje˘Cœss
 
	tGtkObje˘Cœss
;

107 
	s_GtkObje˘


109 
GInôüŒyUnow√d
 
	m∑ª¡_ö°™˚
;

116 
guöt32
 
GSEAL
 (
Êags
);

119 
	s_GtkObje˘Cœss


121 
GInôüŒyUnow√dCœss
 
	m∑ª¡_˛ass
;

124 (*
	m£t_¨g
Ë(
GtkObje˘
 *
	mobje˘
,

125 
GtkArg
 *
	m¨g
,

126 
guöt
 
	m¨g_id
);

127 (*
	mgë_¨g
Ë(
GtkObje˘
 *
	mobje˘
,

128 
GtkArg
 *
	m¨g
,

129 
guöt
 
	m¨g_id
);

139 (*
	mde°roy
Ë(
GtkObje˘
 *
	mobje˘
);

146 
GTy≥
 
	$gtk_obje˘_gë_ty≥
 (Ë
G_GNUC_CONST
;

148 #i‚de‡
GTK_DISABLE_DEPRECATED


149 
	`gtk_obje˘_sök
 (
GtkObje˘
 *
obje˘
);

151 
	`gtk_obje˘_de°roy
 (
GtkObje˘
 *
obje˘
);

155 #i‚de‡
GTK_DISABLE_DEPRECATED


157 
GtkObje˘
* 
	`gtk_obje˘_√w
 (
GTy≥
 
ty≥
,

158 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

160 
GtkObje˘
* 
	`gtk_obje˘_ªf
 (GtkObje˘ *
obje˘
);

161 
	`gtk_obje˘_uƒef
 (
GtkObje˘
 *
obje˘
);

162 
	`gtk_obje˘_wókªf
 (
GtkObje˘
 *
obje˘
,

163 
GDe°royNŸify
 
nŸify
,

164 
gpoöãr
 
d©a
);

165 
	`gtk_obje˘_wókuƒef
 (
GtkObje˘
 *
obje˘
,

166 
GDe°royNŸify
 
nŸify
,

167 
gpoöãr
 
d©a
);

181 
	`gtk_obje˘_£t_d©a
 (
GtkObje˘
 *
obje˘
,

182 c⁄° 
gch¨
 *
key
,

183 
gpoöãr
 
d©a
);

184 
	`gtk_obje˘_£t_d©a_fuŒ
 (
GtkObje˘
 *
obje˘
,

185 c⁄° 
gch¨
 *
key
,

186 
gpoöãr
 
d©a
,

187 
GDe°royNŸify
 
de°roy
);

188 
	`gtk_obje˘_ªmove_d©a
 (
GtkObje˘
 *
obje˘
,

189 c⁄° 
gch¨
 *
key
);

190 
gpoöãr
 
	`gtk_obje˘_gë_d©a
 (
GtkObje˘
 *
obje˘
,

191 c⁄° 
gch¨
 *
key
);

192 
	`gtk_obje˘_ªmove_no_nŸify
 (
GtkObje˘
 *
obje˘
,

193 c⁄° 
gch¨
 *
key
);

200 
	`gtk_obje˘_£t_u£r_d©a
 (
GtkObje˘
 *
obje˘
,

201 
gpoöãr
 
d©a
);

202 
gpoöãr
 
	`gtk_obje˘_gë_u£r_d©a
 (
GtkObje˘
 *
obje˘
);

208 
	`gtk_obje˘_£t_d©a_by_id
 (
GtkObje˘
 *
obje˘
,

209 
GQu¨k
 
d©a_id
,

210 
gpoöãr
 
d©a
);

211 
	`gtk_obje˘_£t_d©a_by_id_fuŒ
 (
GtkObje˘
 *
obje˘
,

212 
GQu¨k
 
d©a_id
,

213 
gpoöãr
 
d©a
,

214 
GDe°royNŸify
 
de°roy
);

215 
gpoöãr
 
	`gtk_obje˘_gë_d©a_by_id
 (
GtkObje˘
 *
obje˘
,

216 
GQu¨k
 
d©a_id
);

217 
	`gtk_obje˘_ªmove_d©a_by_id
 (
GtkObje˘
 *
obje˘
,

218 
GQu¨k
 
d©a_id
);

219 
	`gtk_obje˘_ªmove_no_nŸify_by_id
 (
GtkObje˘
 *
obje˘
,

220 
GQu¨k
 
key_id
);

221 
	#gtk_obje˘_d©a_åy_key
 
g_qu¨k_åy_°rög


	)

222 
	#gtk_obje˘_d©a_f‹˚_id
 
g_qu¨k_‰om_°rög


	)

228 
GTK_ARG_READABLE
 = 
G_PARAM_READABLE
,

229 
GTK_ARG_WRITABLE
 = 
G_PARAM_WRITABLE
,

230 
GTK_ARG_CONSTRUCT
 = 
G_PARAM_CONSTRUCT
,

231 
GTK_ARG_CONSTRUCT_ONLY
 = 
G_PARAM_CONSTRUCT_ONLY
,

232 
GTK_ARG_CHILD_ARG
 = 1 << 4

233 } 
	tGtkArgFœgs
;

234 
	#GTK_ARG_READWRITE
 (
GTK_ARG_READABLE
 | 
GTK_ARG_WRITABLE
)

	)

235 
	$gtk_obje˘_gë
 (
GtkObje˘
 *
obje˘
,

236 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

237 ...Ë
G_GNUC_NULL_TERMINATED
;

238 
	$gtk_obje˘_£t
 (
GtkObje˘
 *
obje˘
,

239 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

240 ...Ë
G_GNUC_NULL_TERMINATED
;

241 
	`gtk_obje˘_add_¨g_ty≥
 (c⁄° 
gch¨
 *
¨g_«me
,

242 
GTy≥
 
¨g_ty≥
,

243 
guöt
 
¨g_Êags
,

244 
guöt
 
¨g_id
);

248 
G_END_DECLS


	@/usr/include/gtk/gtkoffscreenwindow.h

21 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_OFFSCREEN_WINDOW_H__


26 
	#__GTK_OFFSCREEN_WINDOW_H__


	)

28 
	~<gtk/gtkwödow.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_OFFSCREEN_WINDOW
 (
	`gtk_offs¸ìn_wödow_gë_ty≥
 ())

	)

33 
	#GTK_OFFSCREEN_WINDOW
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((o), 
GTK_TYPE_OFFSCREEN_WINDOW
, 
GtkOffs¸ìnWödow
))

	)

34 
	#GTK_OFFSCREEN_WINDOW_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((k), 
GTK_TYPE_OFFSCREEN_WINDOW
, 
GtkOffs¸ìnWödowCœss
))

	)

35 
	#GTK_IS_OFFSCREEN_WINDOW
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((o), 
GTK_TYPE_OFFSCREEN_WINDOW
))

	)

36 
	#GTK_IS_OFFSCREEN_WINDOW_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((k), 
GTK_TYPE_OFFSCREEN_WINDOW
))

	)

37 
	#GTK_OFFSCREEN_WINDOW_GET_CLASS
(
o
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((o), 
GTK_TYPE_OFFSCREEN_WINDOW
, 
GtkOffs¸ìnWödowCœss
))

	)

39 
_GtkOffs¸ìnWödow
 
	tGtkOffs¸ìnWödow
;

40 
_GtkOffs¸ìnWödowCœss
 
	tGtkOffs¸ìnWödowCœss
;

42 
	s_GtkOffs¸ìnWödow


44 
GtkWödow
 
	m∑ª¡_obje˘
;

47 
	s_GtkOffs¸ìnWödowCœss


49 
GtkWödowCœss
 
	m∑ª¡_˛ass
;

52 
GTy≥
 
	$gtk_offs¸ìn_wödow_gë_ty≥
 (Ë
G_GNUC_CONST
;

54 
GtkWidgë
 *
	`gtk_offs¸ìn_wödow_√w
 ();

55 
GdkPixm≠
 *
	`gtk_offs¸ìn_wödow_gë_pixm≠
 (
GtkOffs¸ìnWödow
 *
offs¸ìn
);

56 
GdkPixbuf
 *
	`gtk_offs¸ìn_wödow_gë_pixbuf
 (
GtkOffs¸ìnWödow
 *
offs¸ìn
);

58 
G_END_DECLS


	@/usr/include/gtk/gtkoldeditable.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_OLD_EDITABLE_H__


30 
	#__GTK_OLD_EDITABLE_H__


	)

32 
	~<gtk/gtk.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_OLD_EDITABLE
 (
	`gtk_ﬁd_edôabÀ_gë_ty≥
 ())

	)

38 
	#GTK_OLD_EDITABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_OLD_EDITABLE
, 
GtkOldEdôabÀ
))

	)

39 
	#GTK_OLD_EDITABLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_OLD_EDITABLE
, 
GtkOldEdôabÀCœss
))

	)

40 
	#GTK_IS_OLD_EDITABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_OLD_EDITABLE
))

	)

41 
	#GTK_IS_OLD_EDITABLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_OLD_EDITABLE
))

	)

42 
	#GTK_OLD_EDITABLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_OLD_EDITABLE
, 
GtkOldEdôabÀCœss
))

	)

45 
_GtkOldEdôabÀ
 
	tGtkOldEdôabÀ
;

46 
_GtkOldEdôabÀCœss
 
	tGtkOldEdôabÀCœss
;

48 (*
	tGtkTextFun˘i⁄
Ë(
	tGtkOldEdôabÀ
 *
	tedôabÀ
, 
	tguöt32
 
	ttime_
);

50 
	s_GtkOldEdôabÀ


52 
GtkWidgë
 
widgë
;

55 
guöt
 
cuºít_pos
;

57 
guöt
 
£À˘i⁄_°¨t_pos
;

58 
guöt
 
£À˘i⁄_íd_pos
;

59 
guöt
 
has_£À˘i⁄
 : 1;

62 
guöt
 
edôabÀ
 : 1;

63 
guöt
 
visibÀ
 : 1;

65 
gch¨
 *
˛ùbﬂrd_ãxt
;

68 
	s_GtkOldEdôabÀCœss


70 
GtkWidgëCœss
 
∑ª¡_˛ass
;

73 (* 
a˘iv©e
Ë(
GtkOldEdôabÀ
 *
edôabÀ
);

74 (* 
£t_edôabÀ
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

75 
gboﬁón
 
is_edôabÀ
);

76 (* 
move_curs‹
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

77 
göt
 
x
,

78 
göt
 
y
);

79 (* 
move_w‹d
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

80 
göt
 
n
);

81 (* 
move_∑ge
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

82 
göt
 
x
,

83 
göt
 
y
);

84 (* 
move_to_row
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

85 
göt
 
row
);

86 (* 
move_to_cﬁumn
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

87 
göt
 
row
);

88 (* 
kûl_ch¨
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

89 
göt
 
dúe˘i⁄
);

90 (* 
kûl_w‹d
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

91 
göt
 
dúe˘i⁄
);

92 (* 
kûl_löe
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

93 
göt
 
dúe˘i⁄
);

94 (* 
cut_˛ùbﬂrd
Ë(
GtkOldEdôabÀ
 *
edôabÀ
);

95 (* 
c›y_˛ùbﬂrd
Ë(
GtkOldEdôabÀ
 *
edôabÀ
);

96 (* 
∑°e_˛ùbﬂrd
Ë(
GtkOldEdôabÀ
 *
edôabÀ
);

103 (* 
upd©e_ãxt
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

104 
göt
 
°¨t_pos
,

105 
göt
 
íd_pos
);

106 
gch¨
* (* 
gë_ch¨s
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

107 
göt
 
°¨t_pos
,

108 
göt
 
íd_pos
);

109 (* 
£t_£À˘i⁄
)(
GtkOldEdôabÀ
 *
edôabÀ
,

110 
göt
 
°¨t_pos
,

111 
göt
 
íd_pos
);

112 (* 
£t_posôi⁄
Ë(
GtkOldEdôabÀ
 *
edôabÀ
,

113 
göt
 
posôi⁄
);

116 
GTy≥
 
	$gtk_ﬁd_edôabÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

117 
	`gtk_ﬁd_edôabÀ_˛aim_£À˘i⁄
 (
GtkOldEdôabÀ
 *
ﬁd_edôabÀ
,

118 
gboﬁón
 
˛aim
,

119 
guöt32
 
time_
);

120 
	`gtk_ﬁd_edôabÀ_ch™ged
 (
GtkOldEdôabÀ
 *
ﬁd_edôabÀ
);

122 
G_END_DECLS


	@/usr/include/gtk/gtkoptionmenu.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_OPTION_MENU_H__


30 
	#__GTK_OPTION_MENU_H__


	)

32 
	~<gtk/gtk.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_OPTION_MENU
 (
	`gtk_›ti⁄_míu_gë_ty≥
 ())

	)

38 
	#GTK_OPTION_MENU
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_OPTION_MENU
, 
GtkO±i⁄Míu
))

	)

39 
	#GTK_OPTION_MENU_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_OPTION_MENU
, 
GtkO±i⁄MíuCœss
))

	)

40 
	#GTK_IS_OPTION_MENU
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_OPTION_MENU
))

	)

41 
	#GTK_IS_OPTION_MENU_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_OPTION_MENU
))

	)

42 
	#GTK_OPTION_MENU_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_OPTION_MENU
, 
GtkO±i⁄MíuCœss
))

	)

45 
_GtkO±i⁄Míu
 
	tGtkO±i⁄Míu
;

46 
_GtkO±i⁄MíuCœss
 
	tGtkO±i⁄MíuCœss
;

48 
	s_GtkO±i⁄Míu


50 
GtkBuâ⁄
 
	mbuâ⁄
;

52 
GtkWidgë
 *
	mmíu
;

53 
GtkWidgë
 *
	mmíu_ôem
;

55 
guöt16
 
	mwidth
;

56 
guöt16
 
	mheight
;

59 
	s_GtkO±i⁄MíuCœss


61 
GtkBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

63 (*
	mch™ged
Ë(
GtkO±i⁄Míu
 *
	m›ti⁄_míu
);

66 (*
	m_gtk_ª£rved1
) ();

67 (*
	m_gtk_ª£rved2
) ();

68 (*
	m_gtk_ª£rved3
) ();

69 (*
	m_gtk_ª£rved4
) ();

73 
GTy≥
 
	$gtk_›ti⁄_míu_gë_ty≥
 (Ë
G_GNUC_CONST
;

74 
GtkWidgë
* 
	`gtk_›ti⁄_míu_√w
 ();

75 
GtkWidgë
* 
	`gtk_›ti⁄_míu_gë_míu
 (
GtkO±i⁄Míu
 *
›ti⁄_míu
);

76 
	`gtk_›ti⁄_míu_£t_míu
 (
GtkO±i⁄Míu
 *
›ti⁄_míu
,

77 
GtkWidgë
 *
míu
);

78 
	`gtk_›ti⁄_míu_ªmove_míu
 (
GtkO±i⁄Míu
 *
›ti⁄_míu
);

79 
göt
 
	`gtk_›ti⁄_míu_gë_hi°‹y
 (
GtkO±i⁄Míu
 *
›ti⁄_míu
);

80 
	`gtk_›ti⁄_míu_£t_hi°‹y
 (
GtkO±i⁄Míu
 *
›ti⁄_míu
,

81 
guöt
 
ödex_
);

84 
G_END_DECLS


	@/usr/include/gtk/gtkorientable.h

24 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

28 #i‚de‡
__GTK_ORIENTABLE_H__


29 
	#__GTK_ORIENTABLE_H__


	)

31 
	~<gtk/gtkwidgë.h
>

33 
	gG_BEGIN_DECLS


35 
	#GTK_TYPE_ORIENTABLE
 (
	`gtk_‹õ¡abÀ_gë_ty≥
 ())

	)

36 
	#GTK_ORIENTABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_ORIENTABLE
, 
GtkOrõ¡abÀ
))

	)

37 
	#GTK_ORIENTABLE_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((vèbÀ), 
GTK_TYPE_ORIENTABLE
, 
GtkOrõ¡abÀIÁ˚
))

	)

38 
	#GTK_IS_ORIENTABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_ORIENTABLE
))

	)

39 
	#GTK_IS_ORIENTABLE_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((vèbÀ), 
GTK_TYPE_ORIENTABLE
))

	)

40 
	#GTK_ORIENTABLE_GET_IFACE
(
ö°
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((ö°), 
GTK_TYPE_ORIENTABLE
, 
GtkOrõ¡abÀIÁ˚
))

	)

43 
_GtkOrõ¡abÀ
 
	tGtkOrõ¡abÀ
;

44 
_GtkOrõ¡abÀIÁ˚
 
	tGtkOrõ¡abÀIÁ˚
;

46 
	s_GtkOrõ¡abÀIÁ˚


48 
GTy≥I¡îÁ˚
 
	mba£_iÁ˚
;

52 
GTy≥
 
	$gtk_‹õ¡abÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

54 
	`gtk_‹õ¡abÀ_£t_‹õ¡©i⁄
 (
GtkOrõ¡abÀ
 *
‹õ¡abÀ
,

55 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

56 
GtkOrõ¡©i⁄
 
	`gtk_‹õ¡abÀ_gë_‹õ¡©i⁄
 (
GtkOrõ¡abÀ
 *
‹õ¡abÀ
);

58 
G_END_DECLS


	@/usr/include/gtk/gtkpagesetup.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_PAGE_SETUP_H__


26 
	#__GTK_PAGE_SETUP_H__


	)

29 
	~<gtk/gtk∑≥rsize.h
>

32 
G_BEGIN_DECLS


34 
_GtkPageSëup
 
	tGtkPageSëup
;

36 
	#GTK_TYPE_PAGE_SETUP
 (
	`gtk_∑ge_£tup_gë_ty≥
 ())

	)

37 
	#GTK_PAGE_SETUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PAGE_SETUP
, 
GtkPageSëup
))

	)

38 
	#GTK_IS_PAGE_SETUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PAGE_SETUP
))

	)

40 
GTy≥
 
	$gtk_∑ge_£tup_gë_ty≥
 (Ë
G_GNUC_CONST
;

41 
GtkPageSëup
 * 
	`gtk_∑ge_£tup_√w
 ();

42 
GtkPageSëup
 * 
	`gtk_∑ge_£tup_c›y
 (GtkPageSëu∞*
Ÿhî
);

43 
GtkPageOrõ¡©i⁄
 
	`gtk_∑ge_£tup_gë_‹õ¡©i⁄
 (
GtkPageSëup
 *
£tup
);

44 
	`gtk_∑ge_£tup_£t_‹õ¡©i⁄
 (
GtkPageSëup
 *
£tup
,

45 
GtkPageOrõ¡©i⁄
 
‹õ¡©i⁄
);

46 
GtkP≠îSize
 * 
	`gtk_∑ge_£tup_gë_∑≥r_size
 (
GtkPageSëup
 *
£tup
);

47 
	`gtk_∑ge_£tup_£t_∑≥r_size
 (
GtkPageSëup
 *
£tup
,

48 
GtkP≠îSize
 *
size
);

49 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_t›_m¨gö
 (
GtkPageSëup
 *
£tup
,

50 
GtkUnô
 
unô
);

51 
	`gtk_∑ge_£tup_£t_t›_m¨gö
 (
GtkPageSëup
 *
£tup
,

52 
gdoubÀ
 
m¨gö
,

53 
GtkUnô
 
unô
);

54 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_bŸtom_m¨gö
 (
GtkPageSëup
 *
£tup
,

55 
GtkUnô
 
unô
);

56 
	`gtk_∑ge_£tup_£t_bŸtom_m¨gö
 (
GtkPageSëup
 *
£tup
,

57 
gdoubÀ
 
m¨gö
,

58 
GtkUnô
 
unô
);

59 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_À·_m¨gö
 (
GtkPageSëup
 *
£tup
,

60 
GtkUnô
 
unô
);

61 
	`gtk_∑ge_£tup_£t_À·_m¨gö
 (
GtkPageSëup
 *
£tup
,

62 
gdoubÀ
 
m¨gö
,

63 
GtkUnô
 
unô
);

64 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_right_m¨gö
 (
GtkPageSëup
 *
£tup
,

65 
GtkUnô
 
unô
);

66 
	`gtk_∑ge_£tup_£t_right_m¨gö
 (
GtkPageSëup
 *
£tup
,

67 
gdoubÀ
 
m¨gö
,

68 
GtkUnô
 
unô
);

70 
	`gtk_∑ge_£tup_£t_∑≥r_size_™d_deÁu…_m¨gös
 (
GtkPageSëup
 *
£tup
,

71 
GtkP≠îSize
 *
size
);

74 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_∑≥r_width
 (
GtkPageSëup
 *
£tup
,

75 
GtkUnô
 
unô
);

76 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_∑≥r_height
 (
GtkPageSëup
 *
£tup
,

77 
GtkUnô
 
unô
);

81 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_∑ge_width
 (
GtkPageSëup
 *
£tup
,

82 
GtkUnô
 
unô
);

83 
gdoubÀ
 
	`gtk_∑ge_£tup_gë_∑ge_height
 (
GtkPageSëup
 *
£tup
,

84 
GtkUnô
 
unô
);

87 
GtkPageSëup
 *
	`gtk_∑ge_£tup_√w_‰om_fûe
 (c⁄° 
gch¨
 *
fûe_«me
,

88 
GEº‹
 **
îr‹
);

89 
gboﬁón
 
	`gtk_∑ge_£tup_lﬂd_fûe
 (
GtkPageSëup
 *
£tup
,

90 c⁄° *
fûe_«me
,

91 
GEº‹
 **
îr‹
);

92 
gboﬁón
 
	`gtk_∑ge_£tup_to_fûe
 (
GtkPageSëup
 *
£tup
,

93 c⁄° *
fûe_«me
,

94 
GEº‹
 **
îr‹
);

95 
GtkPageSëup
 *
	`gtk_∑ge_£tup_√w_‰om_key_fûe
 (
GKeyFûe
 *
key_fûe
,

96 c⁄° 
gch¨
 *
group_«me
,

97 
GEº‹
 **
îr‹
);

98 
gboﬁón
 
	`gtk_∑ge_£tup_lﬂd_key_fûe
 (
GtkPageSëup
 *
£tup
,

99 
GKeyFûe
 *
key_fûe
,

100 c⁄° 
gch¨
 *
group_«me
,

101 
GEº‹
 **
îr‹
);

102 
	`gtk_∑ge_£tup_to_key_fûe
 (
GtkPageSëup
 *
£tup
,

103 
GKeyFûe
 *
key_fûe
,

104 c⁄° 
gch¨
 *
group_«me
);

106 
G_END_DECLS


	@/usr/include/gtk/gtkpaned.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_PANED_H__


32 
	#__GTK_PANED_H__


	)

34 
	~<gtk/gtkc⁄èöî.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_PANED
 (
	`gtk_∑√d_gë_ty≥
 ())

	)

39 
	#GTK_PANED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PANED
, 
GtkP™ed
))

	)

40 
	#GTK_PANED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_PANED
, 
GtkP™edCœss
))

	)

41 
	#GTK_IS_PANED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PANED
))

	)

42 
	#GTK_IS_PANED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_PANED
))

	)

43 
	#GTK_PANED_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_PANED
, 
GtkP™edCœss
))

	)

46 
_GtkP™ed
 
	tGtkP™ed
;

47 
_GtkP™edCœss
 
	tGtkP™edCœss
;

48 
_GtkP™edPriv©e
 
	tGtkP™edPriv©e
;

50 
	s_GtkP™ed


52 
GtkC⁄èöî
 
	mc⁄èöî
;

54 
GtkWidgë
 *
GSEAL
 (
chûd1
);

55 
GtkWidgë
 *
GSEAL
 (
chûd2
);

57 
GdkWödow
 *
GSEAL
 (
h™dÀ
);

58 
GdkGC
 *
GSEAL
 (
x‹_gc
);

59 
GdkCurs‹Ty≥
 
GSEAL
 (
curs‹_ty≥
);

62 
GdkRe˘™gÀ
 
GSEAL
 (
h™dÀ_pos
);

64 
göt
 
GSEAL
 (
chûd1_size
);

65 
göt
 
GSEAL
 (
œ°_Æloˇti⁄
);

66 
göt
 
GSEAL
 (
mö_posôi⁄
);

67 
göt
 
GSEAL
 (
max_posôi⁄
);

69 
guöt
 
GSEAL
 (
posôi⁄_£t
) : 1;

70 
guöt
 
GSEAL
 (
ö_døg
) : 1;

71 
guöt
 
GSEAL
 (
chûd1_shrök
) : 1;

72 
guöt
 
GSEAL
 (
chûd1_ªsize
) : 1;

73 
guöt
 
GSEAL
 (
chûd2_shrök
) : 1;

74 
guöt
 
GSEAL
 (
chûd2_ªsize
) : 1;

75 
guöt
 
GSEAL
 (
‹õ¡©i⁄
) : 1;

76 
guöt
 
GSEAL
 (
ö_ªcursi⁄
) : 1;

77 
guöt
 
GSEAL
 (
h™dÀ_¥ñô
) : 1;

79 
GtkWidgë
 *
GSEAL
 (
œ°_chûd1_focus
);

80 
GtkWidgë
 *
GSEAL
 (
œ°_chûd2_focus
);

81 
GtkP™edPriv©e
 *
GSEAL
 (
¥iv
);

83 
göt
 
GSEAL
 (
døg_pos
);

84 
göt
 
GSEAL
 (
‹igöÆ_posôi⁄
);

87 
	s_GtkP™edCœss


89 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

91 
gboﬁón
 (* 
cy˛e_chûd_focus
Ë(
GtkP™ed
 *
	m∑√d
,

92 
gboﬁón
 
	mªvî£
);

93 
gboﬁón
 (* 
toggÀ_h™dÀ_focus
Ë(
GtkP™ed
 *
	m∑√d
);

94 
gboﬁón
 (* 
move_h™dÀ
Ë(
GtkP™ed
 *
	m∑√d
,

95 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl
);

96 
gboﬁón
 (* 
cy˛e_h™dÀ_focus
Ë(
GtkP™ed
 *
	m∑√d
,

97 
gboﬁón
 
	mªvî£
);

98 
gboﬁón
 (* 
ac˚±_posôi⁄
Ë(
GtkP™ed
 *
	m∑√d
);

99 
gboﬁón
 (* 
ˇn˚l_posôi⁄
Ë(
GtkP™ed
 *
	m∑√d
);

102 (*
	m_gtk_ª£rved1
) ();

103 (*
	m_gtk_ª£rved2
) ();

104 (*
	m_gtk_ª£rved3
) ();

105 (*
	m_gtk_ª£rved4
) ();

109 
GTy≥
 
	$gtk_∑√d_gë_ty≥
 (Ë
G_GNUC_CONST
;

110 
	`gtk_∑√d_add1
 (
GtkP™ed
 *
∑√d
,

111 
GtkWidgë
 *
chûd
);

112 
	`gtk_∑√d_add2
 (
GtkP™ed
 *
∑√d
,

113 
GtkWidgë
 *
chûd
);

114 
	`gtk_∑√d_∑ck1
 (
GtkP™ed
 *
∑√d
,

115 
GtkWidgë
 *
chûd
,

116 
gboﬁón
 
ªsize
,

117 
gboﬁón
 
shrök
);

118 
	`gtk_∑√d_∑ck2
 (
GtkP™ed
 *
∑√d
,

119 
GtkWidgë
 *
chûd
,

120 
gboﬁón
 
ªsize
,

121 
gboﬁón
 
shrök
);

123 
göt
 
	`gtk_∑√d_gë_posôi⁄
 (
GtkP™ed
 *
∑√d
);

124 
	`gtk_∑√d_£t_posôi⁄
 (
GtkP™ed
 *
∑√d
,

125 
göt
 
posôi⁄
);

127 
GtkWidgë
 * 
	`gtk_∑√d_gë_chûd1
 (
GtkP™ed
 *
∑√d
);

128 
GtkWidgë
 * 
	`gtk_∑√d_gë_chûd2
 (
GtkP™ed
 *
∑√d
);

130 
GdkWödow
 * 
	`gtk_∑√d_gë_h™dÀ_wödow
 (
GtkP™ed
 *
∑√d
);

132 #i‚de‡
GTK_DISABLE_DEPRECATED


134 
	`gtk_∑√d_compuã_posôi⁄
 (
GtkP™ed
 *
∑√d
,

135 
göt
 
Æloˇti⁄
,

136 
göt
 
chûd1_ªq
,

137 
göt
 
chûd2_ªq
);

138 
	#gtk_∑√d_guâî_size
(
p
,
s
Ë(Ë0

	)

139 
	#gtk_∑√d_£t_guâî_size
(
p
,
s
Ë(Ë0

	)

142 
G_END_DECLS


	@/usr/include/gtk/gtkpapersize.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_PAPER_SIZE_H__


26 
	#__GTK_PAPER_SIZE_H__


	)

29 
	~<gtk/gtkíums.h
>

32 
G_BEGIN_DECLS


34 
_GtkP≠îSize
 
	tGtkP≠îSize
;

36 
	#GTK_TYPE_PAPER_SIZE
 (
	`gtk_∑≥r_size_gë_ty≥
 ())

	)

39 
	#GTK_PAPER_NAME_A3
 "iso_a3"

	)

40 
	#GTK_PAPER_NAME_A4
 "iso_a4"

	)

41 
	#GTK_PAPER_NAME_A5
 "iso_a5"

	)

42 
	#GTK_PAPER_NAME_B5
 "iso_b5"

	)

43 
	#GTK_PAPER_NAME_LETTER
 "«_Àâî"

	)

44 
	#GTK_PAPER_NAME_EXECUTIVE
 "«_executive"

	)

45 
	#GTK_PAPER_NAME_LEGAL
 "«_ÀgÆ"

	)

47 
GTy≥
 
	$gtk_∑≥r_size_gë_ty≥
 (Ë
G_GNUC_CONST
;

49 
GtkP≠îSize
 *
	`gtk_∑≥r_size_√w
 (c⁄° 
gch¨
 *
«me
);

50 
GtkP≠îSize
 *
	`gtk_∑≥r_size_√w_‰om_µd
 (c⁄° 
gch¨
 *
µd_«me
,

51 c⁄° 
gch¨
 *
µd_di•œy_«me
,

52 
gdoubÀ
 
width
,

53 
gdoubÀ
 
height
);

54 
GtkP≠îSize
 *
	`gtk_∑≥r_size_√w_cu°om
 (c⁄° 
gch¨
 *
«me
,

55 c⁄° 
gch¨
 *
di•œy_«me
,

56 
gdoubÀ
 
width
,

57 
gdoubÀ
 
height
,

58 
GtkUnô
 
unô
);

59 
GtkP≠îSize
 *
	`gtk_∑≥r_size_c›y
 (GtkP≠îSizê*
Ÿhî
);

60 
	`gtk_∑≥r_size_‰ì
 (
GtkP≠îSize
 *
size
);

61 
gboﬁón
 
	`gtk_∑≥r_size_is_equÆ
 (
GtkP≠îSize
 *
size1
,

62 
GtkP≠îSize
 *
size2
);

64 
GLi°
 *
	`gtk_∑≥r_size_gë_∑≥r_sizes
 (
gboﬁón
 
ö˛ude_cu°om
);

67 
G_CONST_RETURN
 
gch¨
 *
	`gtk_∑≥r_size_gë_«me
 (
GtkP≠îSize
 *
size
);

68 
G_CONST_RETURN
 
gch¨
 *
	`gtk_∑≥r_size_gë_di•œy_«me
 (
GtkP≠îSize
 *
size
);

69 
G_CONST_RETURN
 
gch¨
 *
	`gtk_∑≥r_size_gë_µd_«me
 (
GtkP≠îSize
 *
size
);

71 
gdoubÀ
 
	`gtk_∑≥r_size_gë_width
 (
GtkP≠îSize
 *
size
, 
GtkUnô
 
unô
);

72 
gdoubÀ
 
	`gtk_∑≥r_size_gë_height
 (
GtkP≠îSize
 *
size
, 
GtkUnô
 
unô
);

73 
gboﬁón
 
	`gtk_∑≥r_size_is_cu°om
 (
GtkP≠îSize
 *
size
);

76 
	`gtk_∑≥r_size_£t_size
 (
GtkP≠îSize
 *
size
,

77 
gdoubÀ
 
width
,

78 
gdoubÀ
 
height
,

79 
GtkUnô
 
unô
);

81 
gdoubÀ
 
	`gtk_∑≥r_size_gë_deÁu…_t›_m¨gö
 (
GtkP≠îSize
 *
size
,

82 
GtkUnô
 
unô
);

83 
gdoubÀ
 
	`gtk_∑≥r_size_gë_deÁu…_bŸtom_m¨gö
 (
GtkP≠îSize
 *
size
,

84 
GtkUnô
 
unô
);

85 
gdoubÀ
 
	`gtk_∑≥r_size_gë_deÁu…_À·_m¨gö
 (
GtkP≠îSize
 *
size
,

86 
GtkUnô
 
unô
);

87 
gdoubÀ
 
	`gtk_∑≥r_size_gë_deÁu…_right_m¨gö
 (
GtkP≠îSize
 *
size
,

88 
GtkUnô
 
unô
);

90 
G_CONST_RETURN
 
gch¨
 *
	`gtk_∑≥r_size_gë_deÁu…
 ();

92 
GtkP≠îSize
 *
	`gtk_∑≥r_size_√w_‰om_key_fûe
 (
GKeyFûe
 *
key_fûe
,

93 c⁄° 
gch¨
 *
group_«me
,

94 
GEº‹
 **
îr‹
);

95 
	`gtk_∑≥r_size_to_key_fûe
 (
GtkP≠îSize
 *
size
,

96 
GKeyFûe
 *
key_fûe
,

97 c⁄° 
gch¨
 *
group_«me
);

99 
G_END_DECLS


	@/usr/include/gtk/gtkpixmap.h

27 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
__GTK_PIXMAP_C__
)

29 #i‚de‡
__GTK_PIXMAP_H__


30 
	#__GTK_PIXMAP_H__


	)

32 
	~<gtk/gtk.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_PIXMAP
 (
	`gtk_pixm≠_gë_ty≥
 ())

	)

38 
	#GTK_PIXMAP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PIXMAP
, 
GtkPixm≠
))

	)

39 
	#GTK_PIXMAP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_PIXMAP
, 
GtkPixm≠Cœss
))

	)

40 
	#GTK_IS_PIXMAP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PIXMAP
))

	)

41 
	#GTK_IS_PIXMAP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_PIXMAP
))

	)

42 
	#GTK_PIXMAP_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_PIXMAP
, 
GtkPixm≠Cœss
))

	)

45 
_GtkPixm≠
 
	tGtkPixm≠
;

46 
_GtkPixm≠Cœss
 
	tGtkPixm≠Cœss
;

48 
	s_GtkPixm≠


50 
GtkMisc
 
	mmisc
;

52 
GdkPixm≠
 *
	mpixm≠
;

53 
GdkBôm≠
 *
	mmask
;

55 
GdkPixm≠
 *
	mpixm≠_ö£nsôive
;

56 
guöt
 
	mbuûd_ö£nsôive
 : 1;

59 
	s_GtkPixm≠Cœss


61 
GtkMiscCœss
 
	m∑ª¡_˛ass
;

65 
GTy≥
 
	$gtk_pixm≠_gë_ty≥
 (Ë
G_GNUC_CONST
;

66 
GtkWidgë
* 
	`gtk_pixm≠_√w
 (
GdkPixm≠
 *
pixm≠
,

67 
GdkBôm≠
 *
mask
);

68 
	`gtk_pixm≠_£t
 (
GtkPixm≠
 *
pixm≠
,

69 
GdkPixm≠
 *
vÆ
,

70 
GdkBôm≠
 *
mask
);

71 
	`gtk_pixm≠_gë
 (
GtkPixm≠
 *
pixm≠
,

72 
GdkPixm≠
 **
vÆ
,

73 
GdkBôm≠
 **
mask
);

75 
	`gtk_pixm≠_£t_buûd_ö£nsôive
 (
GtkPixm≠
 *
pixm≠
,

76 
gboﬁón
 
buûd
);

79 
G_END_DECLS


	@/usr/include/gtk/gtkplug.h

26 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

30 #i‚de‡
__GTK_PLUG_H__


31 
	#__GTK_PLUG_H__


	)

34 
	~<gtk/gtksockë.h
>

35 
	~<gtk/gtkwödow.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_PLUG
 (
	`gtk_∂ug_gë_ty≥
 ())

	)

41 
	#GTK_PLUG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PLUG
, 
GtkPlug
))

	)

42 
	#GTK_PLUG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_PLUG
, 
GtkPlugCœss
))

	)

43 
	#GTK_IS_PLUG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PLUG
))

	)

44 
	#GTK_IS_PLUG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_PLUG
))

	)

45 
	#GTK_PLUG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_PLUG
, 
GtkPlugCœss
))

	)

48 
_GtkPlug
 
	tGtkPlug
;

49 
_GtkPlugCœss
 
	tGtkPlugCœss
;

52 
	s_GtkPlug


54 
GtkWödow
 
	mwödow
;

56 
GdkWödow
 *
GSEAL
 (
sockë_wödow
);

57 
GtkWidgë
 *
GSEAL
 (
modÆôy_wödow
);

58 
GtkWödowGroup
 *
GSEAL
 (
modÆôy_group
);

59 
GHashTabÀ
 *
GSEAL
 (
gøbbed_keys
);

61 
guöt
 
GSEAL
 (
ßme_≠p
) : 1;

64 
	s_GtkPlugCœss


66 
GtkWödowCœss
 
	m∑ª¡_˛ass
;

68 (*
	membedded
Ë(
GtkPlug
 *
	m∂ug
);

71 (*
	m_gtk_ª£rved1
) ();

72 (*
	m_gtk_ª£rved2
) ();

73 (*
	m_gtk_ª£rved3
) ();

74 (*
	m_gtk_ª£rved4
) ();

78 
GTy≥
 
	$gtk_∂ug_gë_ty≥
 (Ë
G_GNUC_CONST
;

80 #i‚de‡
GDK_MULTIHEAD_SAFE


81 
	`gtk_∂ug_c⁄°ru˘
 (
GtkPlug
 *
∂ug
,

82 
GdkN©iveWödow
 
sockë_id
);

83 
GtkWidgë
* 
	`gtk_∂ug_√w
 (
GdkN©iveWödow
 
sockë_id
);

86 
	`gtk_∂ug_c⁄°ru˘_f‹_di•œy
 (
GtkPlug
 *
∂ug
,

87 
GdkDi•œy
 *
di•œy
,

88 
GdkN©iveWödow
 
sockë_id
);

89 
GtkWidgë
* 
	`gtk_∂ug_√w_f‹_di•œy
 (
GdkDi•œy
 *
di•œy
,

90 
GdkN©iveWödow
 
sockë_id
);

92 
GdkN©iveWödow
 
	`gtk_∂ug_gë_id
 (
GtkPlug
 *
∂ug
);

94 
gboﬁón
 
	`gtk_∂ug_gë_embedded
 (
GtkPlug
 *
∂ug
);

96 
GdkWödow
 *
	`gtk_∂ug_gë_sockë_wödow
 (
GtkPlug
 *
∂ug
);

98 
	`_gtk_∂ug_add_to_sockë
 (
GtkPlug
 *
∂ug
,

99 
GtkSockë
 *
sockë_
);

100 
	`_gtk_∂ug_ªmove_‰om_sockë
 (
GtkPlug
 *
∂ug
,

101 
GtkSockë
 *
sockë_
);

103 
G_END_DECLS


	@/usr/include/gtk/gtkpreview.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_PREVIEW_H__


30 
	#__GTK_PREVIEW_H__


	)

32 
	~<gtk/gtk.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_PREVIEW
 (
	`gtk_¥evõw_gë_ty≥
 ())

	)

38 
	#GTK_PREVIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PREVIEW
, 
GtkPªvõw
))

	)

39 
	#GTK_PREVIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_PREVIEW
, 
GtkPªvõwCœss
))

	)

40 
	#GTK_IS_PREVIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PREVIEW
))

	)

41 
	#GTK_IS_PREVIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_PREVIEW
))

	)

42 
	#GTK_PREVIEW_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_PREVIEW
, 
GtkPªvõwCœss
))

	)

45 
_GtkPªvõw
 
	tGtkPªvõw
;

46 
_GtkPªvõwInfo
 
	tGtkPªvõwInfo
;

47 
_GtkDôhîInfo
 
	tGtkDôhîInfo
;

48 
_GtkPªvõwCœss
 
	tGtkPªvõwCœss
;

50 
	s_GtkPªvõw


52 
GtkWidgë
 
	mwidgë
;

54 
guch¨
 *
	mbuf„r
;

55 
guöt16
 
	mbuf„r_width
;

56 
guöt16
 
	mbuf„r_height
;

58 
guöt16
 
	mbµ
;

59 
guöt16
 
	mrow°ride
;

61 
GdkRgbDôhî
 
	mdôhî
;

63 
guöt
 
	mty≥
 : 1;

64 
guöt
 
	mex∑nd
 : 1;

67 
	s_GtkPªvõwInfo


69 
guch¨
 *
	mlookup
;

71 
gdoubÀ
 
	mgamma
;

74 
	u_GtkDôhîInfo


76 
gush‹t
 
	ms
[2];

77 
guch¨
 
	mc
[4];

80 
	s_GtkPªvõwCœss


82 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

84 
GtkPªvõwInfo
 
	möfo
;

89 
GTy≥
 
	$gtk_¥evõw_gë_ty≥
 (Ë
G_GNUC_CONST
;

90 
	`gtk_¥evõw_unöô
 ();

91 
GtkWidgë
* 
	`gtk_¥evõw_√w
 (
GtkPªvõwTy≥
 
ty≥
);

92 
	`gtk_¥evõw_size
 (
GtkPªvõw
 *
¥evõw
,

93 
göt
 
width
,

94 
göt
 
height
);

95 
	`gtk_¥evõw_put
 (
GtkPªvõw
 *
¥evõw
,

96 
GdkWödow
 *
wödow
,

97 
GdkGC
 *
gc
,

98 
göt
 
§cx
,

99 
göt
 
§cy
,

100 
göt
 
de°x
,

101 
göt
 
de°y
,

102 
göt
 
width
,

103 
göt
 
height
);

104 
	`gtk_¥evõw_døw_row
 (
GtkPªvõw
 *
¥evõw
,

105 
guch¨
 *
d©a
,

106 
göt
 
x
,

107 
göt
 
y
,

108 
göt
 
w
);

109 
	`gtk_¥evõw_£t_ex∑nd
 (
GtkPªvõw
 *
¥evõw
,

110 
gboﬁón
 
ex∑nd
);

112 
	`gtk_¥evõw_£t_gamma
 (
gamma_
);

113 
	`gtk_¥evõw_£t_cﬁ‹_cube
 (
guöt
 
ƒed_shades
,

114 
guöt
 
ngªí_shades
,

115 
guöt
 
nblue_shades
,

116 
guöt
 
ngøy_shades
);

117 
	`gtk_¥evõw_£t_ö°Æl_cm≠
 (
göt
 
ö°Æl_cm≠
);

118 
	`gtk_¥evõw_£t_ª£rved
 (
göt
 
ƒe£rved
);

119 
	`gtk_¥evõw_£t_dôhî
 (
GtkPªvõw
 *
¥evõw
,

120 
GdkRgbDôhî
 
dôhî
);

121 
GdkVisuÆ
* 
	`gtk_¥evõw_gë_visuÆ
 ();

122 
GdkCﬁ‹m≠
* 
	`gtk_¥evõw_gë_cm≠
 ();

123 
GtkPªvõwInfo
* 
	`gtk_¥evõw_gë_öfo
 ();

130 
	`gtk_¥evõw_ª£t
 ();

133 
G_END_DECLS


	@/usr/include/gtk/gtkprintcontext.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_PRINT_CONTEXT_H__


26 
	#__GTK_PRINT_CONTEXT_H__


	)

29 
	~<∑ngo/∑ngo.h
>

30 
	~<gtk/gtk∑ge£tup.h
>

33 
G_BEGIN_DECLS


35 
_GtkPrötC⁄ãxt
 
	tGtkPrötC⁄ãxt
;

37 
	#GTK_TYPE_PRINT_CONTEXT
 (
	`gtk_¥öt_c⁄ãxt_gë_ty≥
 ())

	)

38 
	#GTK_PRINT_CONTEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PRINT_CONTEXT
, 
GtkPrötC⁄ãxt
))

	)

39 
	#GTK_IS_PRINT_CONTEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PRINT_CONTEXT
))

	)

41 
GTy≥
 
	$gtk_¥öt_c⁄ãxt_gë_ty≥
 (Ë
G_GNUC_CONST
;

45 
ˇúo_t
 *
	`gtk_¥öt_c⁄ãxt_gë_ˇúo_c⁄ãxt
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

47 
GtkPageSëup
 *
	`gtk_¥öt_c⁄ãxt_gë_∑ge_£tup
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

48 
gdoubÀ
 
	`gtk_¥öt_c⁄ãxt_gë_width
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

49 
gdoubÀ
 
	`gtk_¥öt_c⁄ãxt_gë_height
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

50 
gdoubÀ
 
	`gtk_¥öt_c⁄ãxt_gë_dpi_x
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

51 
gdoubÀ
 
	`gtk_¥öt_c⁄ãxt_gë_dpi_y
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

52 
gboﬁón
 
	`gtk_¥öt_c⁄ãxt_gë_h¨d_m¨gös
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
,

53 
gdoubÀ
 *
t›
,

54 
gdoubÀ
 *
bŸtom
,

55 
gdoubÀ
 *
À·
,

56 
gdoubÀ
 *
right
);

59 
P™goF⁄tM≠
 *
	`gtk_¥öt_c⁄ãxt_gë_∑ngo_f⁄tm≠
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

60 
P™goC⁄ãxt
 *
	`gtk_¥öt_c⁄ãxt_¸óã_∑ngo_c⁄ãxt
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

61 
P™goLayout
 *
	`gtk_¥öt_c⁄ãxt_¸óã_∑ngo_œyout
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
);

64 
	`gtk_¥öt_c⁄ãxt_£t_ˇúo_c⁄ãxt
 (
GtkPrötC⁄ãxt
 *
c⁄ãxt
,

65 
ˇúo_t
 *
¸
,

66 
dpi_x
,

67 
dpi_y
);

69 
G_END_DECLS


	@/usr/include/gtk/gtkprintoperation.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_PRINT_OPERATION_H__


26 
	#__GTK_PRINT_OPERATION_H__


	)

29 
	~<ˇúo.h
>

30 
	~<gtk/gtkmaö.h
>

31 
	~<gtk/gtkwödow.h
>

32 
	~<gtk/gtk∑ge£tup.h
>

33 
	~<gtk/gtk¥öt£âögs.h
>

34 
	~<gtk/gtk¥ötc⁄ãxt.h
>

35 
	~<gtk/gtk¥öt›î©i⁄¥evõw.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_PRINT_OPERATION
 (
	`gtk_¥öt_›î©i⁄_gë_ty≥
 ())

	)

41 
	#GTK_PRINT_OPERATION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PRINT_OPERATION
, 
GtkPrötO≥øti⁄
))

	)

42 
	#GTK_PRINT_OPERATION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_PRINT_OPERATION
, 
GtkPrötO≥øti⁄Cœss
))

	)

43 
	#GTK_IS_PRINT_OPERATION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PRINT_OPERATION
))

	)

44 
	#GTK_IS_PRINT_OPERATION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_PRINT_OPERATION
))

	)

45 
	#GTK_PRINT_OPERATION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_PRINT_OPERATION
, 
GtkPrötO≥øti⁄Cœss
))

	)

47 
_GtkPrötO≥øti⁄Cœss
 
	tGtkPrötO≥øti⁄Cœss
;

48 
_GtkPrötO≥øti⁄Priv©e
 
	tGtkPrötO≥øti⁄Priv©e
;

49 
_GtkPrötO≥øti⁄
 
	tGtkPrötO≥øti⁄
;

52 
	mGTK_PRINT_STATUS_INITIAL
,

53 
	mGTK_PRINT_STATUS_PREPARING
,

54 
	mGTK_PRINT_STATUS_GENERATING_DATA
,

55 
	mGTK_PRINT_STATUS_SENDING_DATA
,

56 
	mGTK_PRINT_STATUS_PENDING
,

57 
	mGTK_PRINT_STATUS_PENDING_ISSUE
,

58 
	mGTK_PRINT_STATUS_PRINTING
,

59 
	mGTK_PRINT_STATUS_FINISHED
,

60 
	mGTK_PRINT_STATUS_FINISHED_ABORTED


61 } 
	tGtkPrötSètus
;

64 
	mGTK_PRINT_OPERATION_RESULT_ERROR
,

65 
	mGTK_PRINT_OPERATION_RESULT_APPLY
,

66 
	mGTK_PRINT_OPERATION_RESULT_CANCEL
,

67 
	mGTK_PRINT_OPERATION_RESULT_IN_PROGRESS


68 } 
	tGtkPrötO≥øti⁄Resu…
;

71 
	mGTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
,

72 
	mGTK_PRINT_OPERATION_ACTION_PRINT
,

73 
	mGTK_PRINT_OPERATION_ACTION_PREVIEW
,

74 
	mGTK_PRINT_OPERATION_ACTION_EXPORT


75 } 
	tGtkPrötO≥øti⁄A˘i⁄
;

78 
	s_GtkPrötO≥øti⁄


80 
GObje˘
 
	m∑ª¡_ö°™˚
;

82 
GtkPrötO≥øti⁄Priv©e
 *
GSEAL
 (
¥iv
);

85 
	s_GtkPrötO≥øti⁄Cœss


87 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

89 (*
	md⁄e
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

90 
GtkPrötO≥øti⁄Resu…
 
	mªsu…
);

91 (*
	mbegö_¥öt
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

92 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
);

93 
gboﬁón
 (*
∑gö©e
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

94 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
);

95 (*
	mªque°_∑ge_£tup
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

96 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
,

97 
göt
 
	m∑ge_ƒ
,

98 
GtkPageSëup
 *
	m£tup
);

99 (*
	mdøw_∑ge
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

100 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
,

101 
göt
 
	m∑ge_ƒ
);

102 (*
	míd_¥öt
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

103 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
);

104 (*
	m°©us_ch™ged
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
);

106 
	mGtkWidgë
 *(*
	m¸óã_cu°om_widgë
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
);

107 (*
	mcu°om_widgë_≠∂y
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

108 
GtkWidgë
 *
	mwidgë
);

110 
gboﬁón
 (*
¥evõw
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

111 
GtkPrötO≥øti⁄Pªvõw
 *
	m¥evõw
,

112 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
,

113 
GtkWödow
 *
	m∑ª¡
);

115 (*
	mupd©e_cu°om_widgë
Ë(
GtkPrötO≥øti⁄
 *
	m›î©i⁄
,

116 
GtkWidgë
 *
	mwidgë
,

117 
GtkPageSëup
 *
	m£tup
,

118 
GtkPrötSëtögs
 *
	m£âögs
);

121 (*
	m_gtk_ª£rved1
) ();

122 (*
	m_gtk_ª£rved2
) ();

123 (*
	m_gtk_ª£rved3
) ();

124 (*
	m_gtk_ª£rved4
) ();

125 (*
	m_gtk_ª£rved5
) ();

126 (*
	m_gtk_ª£rved6
) ();

129 
	#GTK_PRINT_ERROR
 
	`gtk_¥öt_îr‹_qu¨k
 ()

	)

133 
	mGTK_PRINT_ERROR_GENERAL
,

134 
	mGTK_PRINT_ERROR_INTERNAL_ERROR
,

135 
	mGTK_PRINT_ERROR_NOMEM
,

136 
	mGTK_PRINT_ERROR_INVALID_FILE


137 } 
	tGtkPrötEº‹
;

139 
GQu¨k
 
gtk_¥öt_îr‹_qu¨k
 ();

141 
GTy≥
 
	$gtk_¥öt_›î©i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

142 
GtkPrötO≥øti⁄
 * 
	`gtk_¥öt_›î©i⁄_√w
 ();

143 
	`gtk_¥öt_›î©i⁄_£t_deÁu…_∑ge_£tup
 (
GtkPrötO≥øti⁄
 *
›
,

144 
GtkPageSëup
 *
deÁu…_∑ge_£tup
);

145 
GtkPageSëup
 * 
	`gtk_¥öt_›î©i⁄_gë_deÁu…_∑ge_£tup
 (
GtkPrötO≥øti⁄
 *
›
);

146 
	`gtk_¥öt_›î©i⁄_£t_¥öt_£âögs
 (
GtkPrötO≥øti⁄
 *
›
,

147 
GtkPrötSëtögs
 *
¥öt_£âögs
);

148 
GtkPrötSëtögs
 * 
	`gtk_¥öt_›î©i⁄_gë_¥öt_£âögs
 (
GtkPrötO≥øti⁄
 *
›
);

149 
	`gtk_¥öt_›î©i⁄_£t_job_«me
 (
GtkPrötO≥øti⁄
 *
›
,

150 c⁄° 
gch¨
 *
job_«me
);

151 
	`gtk_¥öt_›î©i⁄_£t_n_∑ges
 (
GtkPrötO≥øti⁄
 *
›
,

152 
göt
 
n_∑ges
);

153 
	`gtk_¥öt_›î©i⁄_£t_cuºít_∑ge
 (
GtkPrötO≥øti⁄
 *
›
,

154 
göt
 
cuºít_∑ge
);

155 
	`gtk_¥öt_›î©i⁄_£t_u£_fuŒ_∑ge
 (
GtkPrötO≥øti⁄
 *
›
,

156 
gboﬁón
 
fuŒ_∑ge
);

157 
	`gtk_¥öt_›î©i⁄_£t_unô
 (
GtkPrötO≥øti⁄
 *
›
,

158 
GtkUnô
 
unô
);

159 
	`gtk_¥öt_›î©i⁄_£t_exp‹t_fûíame
 (
GtkPrötO≥øti⁄
 *
›
,

160 c⁄° 
gch¨
 *
fûíame
);

161 
	`gtk_¥öt_›î©i⁄_£t_åack_¥öt_°©us
 (
GtkPrötO≥øti⁄
 *
›
,

162 
gboﬁón
 
åack_°©us
);

163 
	`gtk_¥öt_›î©i⁄_£t_show_¥ogªss
 (
GtkPrötO≥øti⁄
 *
›
,

164 
gboﬁón
 
show_¥ogªss
);

165 
	`gtk_¥öt_›î©i⁄_£t_Ælow_async
 (
GtkPrötO≥øti⁄
 *
›
,

166 
gboﬁón
 
Ælow_async
);

167 
	`gtk_¥öt_›î©i⁄_£t_cu°om_èb_œbñ
 (
GtkPrötO≥øti⁄
 *
›
,

168 c⁄° 
gch¨
 *
œbñ
);

169 
GtkPrötO≥øti⁄Resu…
 
	`gtk_¥öt_›î©i⁄_run
 (
GtkPrötO≥øti⁄
 *
›
,

170 
GtkPrötO≥øti⁄A˘i⁄
 
a˘i⁄
,

171 
GtkWödow
 *
∑ª¡
,

172 
GEº‹
 **
îr‹
);

173 
	`gtk_¥öt_›î©i⁄_gë_îr‹
 (
GtkPrötO≥øti⁄
 *
›
,

174 
GEº‹
 **
îr‹
);

175 
GtkPrötSètus
 
	`gtk_¥öt_›î©i⁄_gë_°©us
 (
GtkPrötO≥øti⁄
 *
›
);

176 
G_CONST_RETURN
 
gch¨
 * 
	`gtk_¥öt_›î©i⁄_gë_°©us_°rög
 (
GtkPrötO≥øti⁄
 *
›
);

177 
gboﬁón
 
	`gtk_¥öt_›î©i⁄_is_föished
 (
GtkPrötO≥øti⁄
 *
›
);

178 
	`gtk_¥öt_›î©i⁄_ˇn˚l
 (
GtkPrötO≥øti⁄
 *
›
);

179 
	`gtk_¥öt_›î©i⁄_døw_∑ge_föish
 (
GtkPrötO≥øti⁄
 *
›
);

180 
	`gtk_¥öt_›î©i⁄_£t_de„r_døwög
 (
GtkPrötO≥øti⁄
 *
›
);

181 
	`gtk_¥öt_›î©i⁄_£t_suµ‹t_£À˘i⁄
 (
GtkPrötO≥øti⁄
 *
›
,

182 
gboﬁón
 
suµ‹t_£À˘i⁄
);

183 
gboﬁón
 
	`gtk_¥öt_›î©i⁄_gë_suµ‹t_£À˘i⁄
 (
GtkPrötO≥øti⁄
 *
›
);

184 
	`gtk_¥öt_›î©i⁄_£t_has_£À˘i⁄
 (
GtkPrötO≥øti⁄
 *
›
,

185 
gboﬁón
 
has_£À˘i⁄
);

186 
gboﬁón
 
	`gtk_¥öt_›î©i⁄_gë_has_£À˘i⁄
 (
GtkPrötO≥øti⁄
 *
›
);

187 
	`gtk_¥öt_›î©i⁄_£t_embed_∑ge_£tup
 (
GtkPrötO≥øti⁄
 *
›
,

188 
gboﬁón
 
embed
);

189 
gboﬁón
 
	`gtk_¥öt_›î©i⁄_gë_embed_∑ge_£tup
 (
GtkPrötO≥øti⁄
 *
›
);

190 
göt
 
	`gtk_¥öt_›î©i⁄_gë_n_∑ges_to_¥öt
 (
GtkPrötO≥øti⁄
 *
›
);

192 
GtkPageSëup
 *
	`gtk_¥öt_run_∑ge_£tup_dülog
 (
GtkWödow
 *
∑ª¡
,

193 
GtkPageSëup
 *
∑ge_£tup
,

194 
GtkPrötSëtögs
 *
£âögs
);

196 (* 
	tGtkPageSëupD⁄eFunc
Ë(
	tGtkPageSëup
 *
	t∑ge_£tup
,

197 
	tgpoöãr
 
	td©a
);

199 
	`gtk_¥öt_run_∑ge_£tup_dülog_async
 (
GtkWödow
 *
∑ª¡
,

200 
GtkPageSëup
 *
∑ge_£tup
,

201 
GtkPrötSëtögs
 *
£âögs
,

202 
GtkPageSëupD⁄eFunc
 
d⁄e_cb
,

203 
gpoöãr
 
d©a
);

205 
G_END_DECLS


	@/usr/include/gtk/gtkprintoperationpreview.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_PRINT_OPERATION_PREVIEW_H__


26 
	#__GTK_PRINT_OPERATION_PREVIEW_H__


	)

28 
	~<ˇúo.h
>

29 
	~<gtk/gtk¥ötc⁄ãxt.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_PRINT_OPERATION_PREVIEW
 (
	`gtk_¥öt_›î©i⁄_¥evõw_gë_ty≥
 ())

	)

34 
	#GTK_PRINT_OPERATION_PREVIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PRINT_OPERATION_PREVIEW
, 
GtkPrötO≥øti⁄Pªvõw
))

	)

35 
	#GTK_IS_PRINT_OPERATION_PREVIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PRINT_OPERATION_PREVIEW
))

	)

36 
	#GTK_PRINT_OPERATION_PREVIEW_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_PRINT_OPERATION_PREVIEW
, 
GtkPrötO≥øti⁄PªvõwIÁ˚
))

	)

38 
_GtkPrötO≥øti⁄Pªvõw
 
	tGtkPrötO≥øti⁄Pªvõw
;

39 
_GtkPrötO≥øti⁄PªvõwIÁ˚
 
	tGtkPrötO≥øti⁄PªvõwIÁ˚
;

42 
	s_GtkPrötO≥øti⁄PªvõwIÁ˚


44 
GTy≥I¡îÁ˚
 
	mg_iÁ˚
;

47 (*
	mªady
Ë(
GtkPrötO≥øti⁄Pªvõw
 *
	m¥evõw
,

48 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
);

49 (*
	mgŸ_∑ge_size
Ë(
GtkPrötO≥øti⁄Pªvõw
 *
	m¥evõw
,

50 
GtkPrötC⁄ãxt
 *
	mc⁄ãxt
,

51 
GtkPageSëup
 *
	m∑ge_£tup
);

54 (*
	mªndî_∑ge
Ë(
GtkPrötO≥øti⁄Pªvõw
 *
	m¥evõw
,

55 
göt
 
	m∑ge_ƒ
);

56 
gboﬁón
 (*
is_£À˘ed
Ë(
GtkPrötO≥øti⁄Pªvõw
 *
	m¥evõw
,

57 
göt
 
	m∑ge_ƒ
);

58 (*
	míd_¥evõw
Ë(
GtkPrötO≥øti⁄Pªvõw
 *
	m¥evõw
);

61 (*
	m_gtk_ª£rved1
) ();

62 (*
	m_gtk_ª£rved2
) ();

63 (*
	m_gtk_ª£rved3
) ();

64 (*
	m_gtk_ª£rved4
) ();

65 (*
	m_gtk_ª£rved5
) ();

66 (*
	m_gtk_ª£rved6
) ();

67 (*
	m_gtk_ª£rved7
) ();

70 
GTy≥
 
	$gtk_¥öt_›î©i⁄_¥evõw_gë_ty≥
 (Ë
G_GNUC_CONST
;

72 
	`gtk_¥öt_›î©i⁄_¥evõw_ªndî_∑ge
 (
GtkPrötO≥øti⁄Pªvõw
 *
¥evõw
,

73 
göt
 
∑ge_ƒ
);

74 
	`gtk_¥öt_›î©i⁄_¥evõw_íd_¥evõw
 (
GtkPrötO≥øti⁄Pªvõw
 *
¥evõw
);

75 
gboﬁón
 
	`gtk_¥öt_›î©i⁄_¥evõw_is_£À˘ed
 (
GtkPrötO≥øti⁄Pªvõw
 *
¥evõw
,

76 
göt
 
∑ge_ƒ
);

78 
G_END_DECLS


	@/usr/include/gtk/gtkprintsettings.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_PRINT_SETTINGS_H__


26 
	#__GTK_PRINT_SETTINGS_H__


	)

28 
	~<gtk/gtk∑≥rsize.h
>

30 
G_BEGIN_DECLS


32 
_GtkPrötSëtögs
 
	tGtkPrötSëtögs
;

34 
	#GTK_TYPE_PRINT_SETTINGS
 (
	`gtk_¥öt_£âögs_gë_ty≥
 ())

	)

35 
	#GTK_PRINT_SETTINGS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PRINT_SETTINGS
, 
GtkPrötSëtögs
))

	)

36 
	#GTK_IS_PRINT_SETTINGS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PRINT_SETTINGS
))

	)

38 (*
	tGtkPrötSëtögsFunc
Ë(c⁄° 
	tgch¨
 *
	tkey
,

39 c⁄° 
	tgch¨
 *
	tvÆue
,

40 
	tgpoöãr
 
	tu£r_d©a
);

42 
_GtkPageR™ge
 
	tGtkPageR™ge
;

43 
	s_GtkPageR™ge


45 
göt
 
°¨t
;

46 
göt
 
íd
;

49 
GTy≥
 
	$gtk_¥öt_£âögs_gë_ty≥
 (Ë
G_GNUC_CONST
;

50 
GtkPrötSëtögs
 *
	`gtk_¥öt_£âögs_√w
 ();

52 
GtkPrötSëtögs
 *
	`gtk_¥öt_£âögs_c›y
 (GtkPrötSëtög†*
Ÿhî
);

54 
GtkPrötSëtögs
 *
	`gtk_¥öt_£âögs_√w_‰om_fûe
 (c⁄° 
gch¨
 *
fûe_«me
,

55 
GEº‹
 **
îr‹
);

56 
gboﬁón
 
	`gtk_¥öt_£âögs_lﬂd_fûe
 (
GtkPrötSëtögs
 *
£âögs
,

57 c⁄° 
gch¨
 *
fûe_«me
,

58 
GEº‹
 **
îr‹
);

59 
gboﬁón
 
	`gtk_¥öt_£âögs_to_fûe
 (
GtkPrötSëtögs
 *
£âögs
,

60 c⁄° 
gch¨
 *
fûe_«me
,

61 
GEº‹
 **
îr‹
);

62 
GtkPrötSëtögs
 *
	`gtk_¥öt_£âögs_√w_‰om_key_fûe
 (
GKeyFûe
 *
key_fûe
,

63 c⁄° 
gch¨
 *
group_«me
,

64 
GEº‹
 **
îr‹
);

65 
gboﬁón
 
	`gtk_¥öt_£âögs_lﬂd_key_fûe
 (
GtkPrötSëtögs
 *
£âögs
,

66 
GKeyFûe
 *
key_fûe
,

67 c⁄° 
gch¨
 *
group_«me
,

68 
GEº‹
 **
îr‹
);

69 
	`gtk_¥öt_£âögs_to_key_fûe
 (
GtkPrötSëtögs
 *
£âögs
,

70 
GKeyFûe
 *
key_fûe
,

71 c⁄° 
gch¨
 *
group_«me
);

72 
gboﬁón
 
	`gtk_¥öt_£âögs_has_key
 (
GtkPrötSëtögs
 *
£âögs
,

73 c⁄° 
gch¨
 *
key
);

74 
G_CONST_RETURN
 
gch¨
 *
	`gtk_¥öt_£âögs_gë
 (
GtkPrötSëtögs
 *
£âögs
,

75 c⁄° 
gch¨
 *
key
);

76 
	`gtk_¥öt_£âögs_£t
 (
GtkPrötSëtögs
 *
£âögs
,

77 c⁄° 
gch¨
 *
key
,

78 c⁄° 
gch¨
 *
vÆue
);

79 
	`gtk_¥öt_£âögs_un£t
 (
GtkPrötSëtögs
 *
£âögs
,

80 c⁄° 
gch¨
 *
key
);

81 
	`gtk_¥öt_£âögs_f‹óch
 (
GtkPrötSëtögs
 *
£âögs
,

82 
GtkPrötSëtögsFunc
 
func
,

83 
gpoöãr
 
u£r_d©a
);

84 
gboﬁón
 
	`gtk_¥öt_£âögs_gë_boﬁ
 (
GtkPrötSëtögs
 *
£âögs
,

85 c⁄° 
gch¨
 *
key
);

86 
	`gtk_¥öt_£âögs_£t_boﬁ
 (
GtkPrötSëtögs
 *
£âögs
,

87 c⁄° 
gch¨
 *
key
,

88 
gboﬁón
 
vÆue
);

89 
gdoubÀ
 
	`gtk_¥öt_£âögs_gë_doubÀ
 (
GtkPrötSëtögs
 *
£âögs
,

90 c⁄° 
gch¨
 *
key
);

91 
gdoubÀ
 
	`gtk_¥öt_£âögs_gë_doubÀ_wôh_deÁu…
 (
GtkPrötSëtögs
 *
£âögs
,

92 c⁄° 
gch¨
 *
key
,

93 
gdoubÀ
 
def
);

94 
	`gtk_¥öt_£âögs_£t_doubÀ
 (
GtkPrötSëtögs
 *
£âögs
,

95 c⁄° 
gch¨
 *
key
,

96 
gdoubÀ
 
vÆue
);

97 
gdoubÀ
 
	`gtk_¥öt_£âögs_gë_Àngth
 (
GtkPrötSëtögs
 *
£âögs
,

98 c⁄° 
gch¨
 *
key
,

99 
GtkUnô
 
unô
);

100 
	`gtk_¥öt_£âögs_£t_Àngth
 (
GtkPrötSëtögs
 *
£âögs
,

101 c⁄° 
gch¨
 *
key
,

102 
gdoubÀ
 
vÆue
,

103 
GtkUnô
 
unô
);

104 
göt
 
	`gtk_¥öt_£âögs_gë_öt
 (
GtkPrötSëtögs
 *
£âögs
,

105 c⁄° 
gch¨
 *
key
);

106 
göt
 
	`gtk_¥öt_£âögs_gë_öt_wôh_deÁu…
 (
GtkPrötSëtögs
 *
£âögs
,

107 c⁄° 
gch¨
 *
key
,

108 
göt
 
def
);

109 
	`gtk_¥öt_£âögs_£t_öt
 (
GtkPrötSëtögs
 *
£âögs
,

110 c⁄° 
gch¨
 *
key
,

111 
göt
 
vÆue
);

113 
	#GTK_PRINT_SETTINGS_PRINTER
 "¥öãr"

	)

114 
	#GTK_PRINT_SETTINGS_ORIENTATION
 "‹õ¡©i⁄"

	)

115 
	#GTK_PRINT_SETTINGS_PAPER_FORMAT
 "∑≥r-f‹m©"

	)

116 
	#GTK_PRINT_SETTINGS_PAPER_WIDTH
 "∑≥r-width"

	)

117 
	#GTK_PRINT_SETTINGS_PAPER_HEIGHT
 "∑≥r-height"

	)

118 
	#GTK_PRINT_SETTINGS_N_COPIES
 "n-c›õs"

	)

119 
	#GTK_PRINT_SETTINGS_DEFAULT_SOURCE
 "deÁu…-sour˚"

	)

120 
	#GTK_PRINT_SETTINGS_QUALITY
 "quÆôy"

	)

121 
	#GTK_PRINT_SETTINGS_RESOLUTION
 "ªsﬁuti⁄"

	)

122 
	#GTK_PRINT_SETTINGS_USE_COLOR
 "u£-cﬁ‹"

	)

123 
	#GTK_PRINT_SETTINGS_DUPLEX
 "du∂ex"

	)

124 
	#GTK_PRINT_SETTINGS_COLLATE
 "cﬁœã"

	)

125 
	#GTK_PRINT_SETTINGS_REVERSE
 "ªvî£"

	)

126 
	#GTK_PRINT_SETTINGS_MEDIA_TYPE
 "medü-ty≥"

	)

127 
	#GTK_PRINT_SETTINGS_DITHER
 "dôhî"

	)

128 
	#GTK_PRINT_SETTINGS_SCALE
 "sˇÀ"

	)

129 
	#GTK_PRINT_SETTINGS_PRINT_PAGES
 "¥öt-∑ges"

	)

130 
	#GTK_PRINT_SETTINGS_PAGE_RANGES
 "∑ge-ønges"

	)

131 
	#GTK_PRINT_SETTINGS_PAGE_SET
 "∑ge-£t"

	)

132 
	#GTK_PRINT_SETTINGS_FINISHINGS
 "föishögs"

	)

133 
	#GTK_PRINT_SETTINGS_NUMBER_UP
 "numbî-up"

	)

134 
	#GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT
 "numbî-up-œyout"

	)

135 
	#GTK_PRINT_SETTINGS_OUTPUT_BIN
 "ouçut-bö"

	)

136 
	#GTK_PRINT_SETTINGS_RESOLUTION_X
 "ªsﬁuti⁄-x"

	)

137 
	#GTK_PRINT_SETTINGS_RESOLUTION_Y
 "ªsﬁuti⁄-y"

	)

138 
	#GTK_PRINT_SETTINGS_PRINTER_LPI
 "¥öãr-Õi"

	)

140 
	#GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT
 "ouçut-fûe-f‹m©"

	)

141 
	#GTK_PRINT_SETTINGS_OUTPUT_URI
 "ouçut-uri"

	)

143 
	#GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION
 "wö32-drivî-vîsi⁄"

	)

144 
	#GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA
 "wö32-drivî-exåa"

	)

148 
G_CONST_RETURN
 
gch¨
 *
	`gtk_¥öt_£âögs_gë_¥öãr
 (
GtkPrötSëtögs
 *
£âögs
);

149 
	`gtk_¥öt_£âögs_£t_¥öãr
 (
GtkPrötSëtögs
 *
£âögs
,

150 c⁄° 
gch¨
 *
¥öãr
);

151 
GtkPageOrõ¡©i⁄
 
	`gtk_¥öt_£âögs_gë_‹õ¡©i⁄
 (
GtkPrötSëtögs
 *
£âögs
);

152 
	`gtk_¥öt_£âögs_£t_‹õ¡©i⁄
 (
GtkPrötSëtögs
 *
£âögs
,

153 
GtkPageOrõ¡©i⁄
 
‹õ¡©i⁄
);

154 
GtkP≠îSize
 * 
	`gtk_¥öt_£âögs_gë_∑≥r_size
 (
GtkPrötSëtögs
 *
£âögs
);

155 
	`gtk_¥öt_£âögs_£t_∑≥r_size
 (
GtkPrötSëtögs
 *
£âögs
,

156 
GtkP≠îSize
 *
∑≥r_size
);

157 
gdoubÀ
 
	`gtk_¥öt_£âögs_gë_∑≥r_width
 (
GtkPrötSëtögs
 *
£âögs
,

158 
GtkUnô
 
unô
);

159 
	`gtk_¥öt_£âögs_£t_∑≥r_width
 (
GtkPrötSëtögs
 *
£âögs
,

160 
gdoubÀ
 
width
,

161 
GtkUnô
 
unô
);

162 
gdoubÀ
 
	`gtk_¥öt_£âögs_gë_∑≥r_height
 (
GtkPrötSëtögs
 *
£âögs
,

163 
GtkUnô
 
unô
);

164 
	`gtk_¥öt_£âögs_£t_∑≥r_height
 (
GtkPrötSëtögs
 *
£âögs
,

165 
gdoubÀ
 
height
,

166 
GtkUnô
 
unô
);

167 
gboﬁón
 
	`gtk_¥öt_£âögs_gë_u£_cﬁ‹
 (
GtkPrötSëtögs
 *
£âögs
);

168 
	`gtk_¥öt_£âögs_£t_u£_cﬁ‹
 (
GtkPrötSëtögs
 *
£âögs
,

169 
gboﬁón
 
u£_cﬁ‹
);

170 
gboﬁón
 
	`gtk_¥öt_£âögs_gë_cﬁœã
 (
GtkPrötSëtögs
 *
£âögs
);

171 
	`gtk_¥öt_£âögs_£t_cﬁœã
 (
GtkPrötSëtögs
 *
£âögs
,

172 
gboﬁón
 
cﬁœã
);

173 
gboﬁón
 
	`gtk_¥öt_£âögs_gë_ªvî£
 (
GtkPrötSëtögs
 *
£âögs
);

174 
	`gtk_¥öt_£âögs_£t_ªvî£
 (
GtkPrötSëtögs
 *
£âögs
,

175 
gboﬁón
 
ªvî£
);

176 
GtkPrötDu∂ex
 
	`gtk_¥öt_£âögs_gë_du∂ex
 (
GtkPrötSëtögs
 *
£âögs
);

177 
	`gtk_¥öt_£âögs_£t_du∂ex
 (
GtkPrötSëtögs
 *
£âögs
,

178 
GtkPrötDu∂ex
 
du∂ex
);

179 
GtkPrötQuÆôy
 
	`gtk_¥öt_£âögs_gë_quÆôy
 (
GtkPrötSëtögs
 *
£âögs
);

180 
	`gtk_¥öt_£âögs_£t_quÆôy
 (
GtkPrötSëtögs
 *
£âögs
,

181 
GtkPrötQuÆôy
 
quÆôy
);

182 
göt
 
	`gtk_¥öt_£âögs_gë_n_c›õs
 (
GtkPrötSëtögs
 *
£âögs
);

183 
	`gtk_¥öt_£âögs_£t_n_c›õs
 (
GtkPrötSëtögs
 *
£âögs
,

184 
göt
 
num_c›õs
);

185 
göt
 
	`gtk_¥öt_£âögs_gë_numbî_up
 (
GtkPrötSëtögs
 *
£âögs
);

186 
	`gtk_¥öt_£âögs_£t_numbî_up
 (
GtkPrötSëtögs
 *
£âögs
,

187 
göt
 
numbî_up
);

188 
GtkNumbîUpLayout
 
	`gtk_¥öt_£âögs_gë_numbî_up_œyout
 (
GtkPrötSëtögs
 *
£âögs
);

189 
	`gtk_¥öt_£âögs_£t_numbî_up_œyout
 (
GtkPrötSëtögs
 *
£âögs
,

190 
GtkNumbîUpLayout
 
numbî_up_œyout
);

191 
göt
 
	`gtk_¥öt_£âögs_gë_ªsﬁuti⁄
 (
GtkPrötSëtögs
 *
£âögs
);

192 
	`gtk_¥öt_£âögs_£t_ªsﬁuti⁄
 (
GtkPrötSëtögs
 *
£âögs
,

193 
göt
 
ªsﬁuti⁄
);

194 
göt
 
	`gtk_¥öt_£âögs_gë_ªsﬁuti⁄_x
 (
GtkPrötSëtögs
 *
£âögs
);

195 
göt
 
	`gtk_¥öt_£âögs_gë_ªsﬁuti⁄_y
 (
GtkPrötSëtögs
 *
£âögs
);

196 
	`gtk_¥öt_£âögs_£t_ªsﬁuti⁄_xy
 (
GtkPrötSëtögs
 *
£âögs
,

197 
göt
 
ªsﬁuti⁄_x
,

198 
göt
 
ªsﬁuti⁄_y
);

199 
gdoubÀ
 
	`gtk_¥öt_£âögs_gë_¥öãr_Õi
 (
GtkPrötSëtögs
 *
£âögs
);

200 
	`gtk_¥öt_£âögs_£t_¥öãr_Õi
 (
GtkPrötSëtögs
 *
£âögs
,

201 
gdoubÀ
 
Õi
);

202 
gdoubÀ
 
	`gtk_¥öt_£âögs_gë_sˇÀ
 (
GtkPrötSëtögs
 *
£âögs
);

203 
	`gtk_¥öt_£âögs_£t_sˇÀ
 (
GtkPrötSëtögs
 *
£âögs
,

204 
gdoubÀ
 
sˇÀ
);

205 
GtkPrötPages
 
	`gtk_¥öt_£âögs_gë_¥öt_∑ges
 (
GtkPrötSëtögs
 *
£âögs
);

206 
	`gtk_¥öt_£âögs_£t_¥öt_∑ges
 (
GtkPrötSëtögs
 *
£âögs
,

207 
GtkPrötPages
 
∑ges
);

208 
GtkPageR™ge
 * 
	`gtk_¥öt_£âögs_gë_∑ge_ønges
 (
GtkPrötSëtögs
 *
£âögs
,

209 
göt
 *
num_ønges
);

210 
	`gtk_¥öt_£âögs_£t_∑ge_ønges
 (
GtkPrötSëtögs
 *
£âögs
,

211 
GtkPageR™ge
 *
∑ge_ønges
,

212 
göt
 
num_ønges
);

213 
GtkPageSë
 
	`gtk_¥öt_£âögs_gë_∑ge_£t
 (
GtkPrötSëtögs
 *
£âögs
);

214 
	`gtk_¥öt_£âögs_£t_∑ge_£t
 (
GtkPrötSëtögs
 *
£âögs
,

215 
GtkPageSë
 
∑ge_£t
);

216 
G_CONST_RETURN
 
gch¨
 *
	`gtk_¥öt_£âögs_gë_deÁu…_sour˚
 (
GtkPrötSëtögs
 *
£âögs
);

217 
	`gtk_¥öt_£âögs_£t_deÁu…_sour˚
 (
GtkPrötSëtögs
 *
£âögs
,

218 c⁄° 
gch¨
 *
deÁu…_sour˚
);

219 
G_CONST_RETURN
 
gch¨
 *
	`gtk_¥öt_£âögs_gë_medü_ty≥
 (
GtkPrötSëtögs
 *
£âögs
);

220 
	`gtk_¥öt_£âögs_£t_medü_ty≥
 (
GtkPrötSëtögs
 *
£âögs
,

221 c⁄° 
gch¨
 *
medü_ty≥
);

222 
G_CONST_RETURN
 
gch¨
 *
	`gtk_¥öt_£âögs_gë_dôhî
 (
GtkPrötSëtögs
 *
£âögs
);

223 
	`gtk_¥öt_£âögs_£t_dôhî
 (
GtkPrötSëtögs
 *
£âögs
,

224 c⁄° 
gch¨
 *
dôhî
);

225 
G_CONST_RETURN
 
gch¨
 *
	`gtk_¥öt_£âögs_gë_föishögs
 (
GtkPrötSëtögs
 *
£âögs
);

226 
	`gtk_¥öt_£âögs_£t_föishögs
 (
GtkPrötSëtögs
 *
£âögs
,

227 c⁄° 
gch¨
 *
föishögs
);

228 
G_CONST_RETURN
 
gch¨
 *
	`gtk_¥öt_£âögs_gë_ouçut_bö
 (
GtkPrötSëtögs
 *
£âögs
);

229 
	`gtk_¥öt_£âögs_£t_ouçut_bö
 (
GtkPrötSëtögs
 *
£âögs
,

230 c⁄° 
gch¨
 *
ouçut_bö
);

232 
G_END_DECLS


	@/usr/include/gtk/gtkprogress.h

27 #i‚de‡
__GTK_PROGRESS_H__


28 
	#__GTK_PROGRESS_H__


	)

31 
	~<gtk/gtkwidgë.h
>

32 
	~<gtk/gtkadju°mít.h
>

35 
	gG_BEGIN_DECLS


37 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
__GTK_PROGRESS_C__
Ë|| deföed (
__GTK_PROGRESS_BAR_C__
)

39 
	#GTK_TYPE_PROGRESS
 (
	`gtk_¥ogªss_gë_ty≥
 ())

	)

40 
	#GTK_PROGRESS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PROGRESS
, 
GtkProgªss
))

	)

41 
	#GTK_PROGRESS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_PROGRESS
, 
GtkProgªssCœss
))

	)

42 
	#GTK_IS_PROGRESS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PROGRESS
))

	)

43 
	#GTK_IS_PROGRESS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_PROGRESS
))

	)

44 
	#GTK_PROGRESS_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_PROGRESS
, 
GtkProgªssCœss
))

	)

48 
_GtkProgªss
 
	tGtkProgªss
;

49 
_GtkProgªssCœss
 
	tGtkProgªssCœss
;

52 
	s_GtkProgªss


54 
GtkWidgë
 
	mwidgë
;

56 
GtkAdju°mít
 *
	madju°mít
;

57 
GdkPixm≠
 *
	moffs¸ìn_pixm≠
;

58 
gch¨
 *
	mf‹m©
;

59 
gÊﬂt
 
	mx_Æign
;

60 
gÊﬂt
 
	my_Æign
;

62 
guöt
 
	mshow_ãxt
 : 1;

63 
guöt
 
	ma˘ivôy_mode
 : 1;

64 
guöt
 
	mu£_ãxt_f‹m©
 : 1;

67 
	s_GtkProgªssCœss


69 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

71 (* 
	m∑öt
Ë(
GtkProgªss
 *
	m¥ogªss
);

72 (* 
	mupd©e
Ë(
GtkProgªss
 *
	m¥ogªss
);

73 (* 
	ma˘_mode_íãr
Ë(
GtkProgªss
 *
	m¥ogªss
);

76 (*
	m_gtk_ª£rved1
) ();

77 (*
	m_gtk_ª£rved2
) ();

78 (*
	m_gtk_ª£rved3
) ();

79 (*
	m_gtk_ª£rved4
) ();

86 #i‡!
deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
__GTK_PROGRESS_C__
Ë|| deföed (
__GTK_PROGRESS_BAR_C__
)

88 
GTy≥
 
	$gtk_¥ogªss_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
	`gtk_¥ogªss_£t_show_ãxt
 (
GtkProgªss
 *
¥ogªss
,

90 
gboﬁón
 
show_ãxt
);

91 
	`gtk_¥ogªss_£t_ãxt_Æignmít
 (
GtkProgªss
 *
¥ogªss
,

92 
gÊﬂt
 
x_Æign
,

93 
gÊﬂt
 
y_Æign
);

94 
	`gtk_¥ogªss_£t_f‹m©_°rög
 (
GtkProgªss
 *
¥ogªss
,

95 c⁄° 
gch¨
 *
f‹m©
);

96 
	`gtk_¥ogªss_£t_adju°mít
 (
GtkProgªss
 *
¥ogªss
,

97 
GtkAdju°mít
 *
adju°mít
);

98 
	`gtk_¥ogªss_c⁄figuª
 (
GtkProgªss
 *
¥ogªss
,

99 
gdoubÀ
 
vÆue
,

100 
gdoubÀ
 
mö
,

101 
gdoubÀ
 
max
);

102 
	`gtk_¥ogªss_£t_≥r˚¡age
 (
GtkProgªss
 *
¥ogªss
,

103 
gdoubÀ
 
≥r˚¡age
);

104 
	`gtk_¥ogªss_£t_vÆue
 (
GtkProgªss
 *
¥ogªss
,

105 
gdoubÀ
 
vÆue
);

106 
gdoubÀ
 
	`gtk_¥ogªss_gë_vÆue
 (
GtkProgªss
 *
¥ogªss
);

107 
	`gtk_¥ogªss_£t_a˘ivôy_mode
 (
GtkProgªss
 *
¥ogªss
,

108 
gboﬁón
 
a˘ivôy_mode
);

109 
gch¨
* 
	`gtk_¥ogªss_gë_cuºít_ãxt
 (
GtkProgªss
 *
¥ogªss
);

110 
gch¨
* 
	`gtk_¥ogªss_gë_ãxt_‰om_vÆue
 (
GtkProgªss
 *
¥ogªss
,

111 
gdoubÀ
 
vÆue
);

112 
gdoubÀ
 
	`gtk_¥ogªss_gë_cuºít_≥r˚¡age
 (
GtkProgªss
 *
¥ogªss
);

113 
gdoubÀ
 
	`gtk_¥ogªss_gë_≥r˚¡age_‰om_vÆue
 (
GtkProgªss
 *
¥ogªss
,

114 
gdoubÀ
 
vÆue
);

118 
G_END_DECLS


	@/usr/include/gtk/gtkprogressbar.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_PROGRESS_BAR_H__


32 
	#__GTK_PROGRESS_BAR_H__


	)

35 
	~<gtk/gtk¥ogªss.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_PROGRESS_BAR
 (
	`gtk_¥ogªss_b¨_gë_ty≥
 ())

	)

41 
	#GTK_PROGRESS_BAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_PROGRESS_BAR
, 
GtkProgªssB¨
))

	)

42 
	#GTK_PROGRESS_BAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_PROGRESS_BAR
, 
GtkProgªssB¨Cœss
))

	)

43 
	#GTK_IS_PROGRESS_BAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_PROGRESS_BAR
))

	)

44 
	#GTK_IS_PROGRESS_BAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_PROGRESS_BAR
))

	)

45 
	#GTK_PROGRESS_BAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_PROGRESS_BAR
, 
GtkProgªssB¨Cœss
))

	)

48 
_GtkProgªssB¨
 
	tGtkProgªssB¨
;

49 
_GtkProgªssB¨Cœss
 
	tGtkProgªssB¨Cœss
;

53 
	mGTK_PROGRESS_CONTINUOUS
,

54 
	mGTK_PROGRESS_DISCRETE


55 } 
	tGtkProgªssB¨StyÀ
;

59 
	mGTK_PROGRESS_LEFT_TO_RIGHT
,

60 
	mGTK_PROGRESS_RIGHT_TO_LEFT
,

61 
	mGTK_PROGRESS_BOTTOM_TO_TOP
,

62 
	mGTK_PROGRESS_TOP_TO_BOTTOM


63 } 
	tGtkProgªssB¨Orõ¡©i⁄
;

65 
	s_GtkProgªssB¨


67 
GtkProgªss
 
	m¥ogªss
;

69 
GtkProgªssB¨StyÀ
 
GSEAL
 (
b¨_°yÀ
);

70 
GtkProgªssB¨Orõ¡©i⁄
 
GSEAL
 (
‹õ¡©i⁄
);

72 
guöt
 
GSEAL
 (
blocks
);

73 
göt
 
GSEAL
 (
ö_block
);

75 
göt
 
GSEAL
 (
a˘ivôy_pos
);

76 
guöt
 
GSEAL
 (
a˘ivôy_°ï
);

77 
guöt
 
GSEAL
 (
a˘ivôy_blocks
);

79 
gdoubÀ
 
GSEAL
 (
pul£_‰a˘i⁄
);

81 
guöt
 
GSEAL
 (
a˘ivôy_dú
) : 1;

82 
guöt
 
GSEAL
 (
ñlùsize
) : 3;

83 
guöt
 
GSEAL
 (
dúty
) : 1;

86 
	s_GtkProgªssB¨Cœss


88 
GtkProgªssCœss
 
	m∑ª¡_˛ass
;

91 (*
	m_gtk_ª£rved1
) ();

92 (*
	m_gtk_ª£rved2
) ();

93 (*
	m_gtk_ª£rved3
) ();

94 (*
	m_gtk_ª£rved4
) ();

98 
GTy≥
 
	$gtk_¥ogªss_b¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

99 
GtkWidgë
* 
	`gtk_¥ogªss_b¨_√w
 ();

128 
	`gtk_¥ogªss_b¨_pul£
 (
GtkProgªssB¨
 *
pb¨
);

129 
	`gtk_¥ogªss_b¨_£t_ãxt
 (
GtkProgªssB¨
 *
pb¨
,

130 c⁄° 
gch¨
 *
ãxt
);

131 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
 (
GtkProgªssB¨
 *
pb¨
,

132 
gdoubÀ
 
‰a˘i⁄
);

134 
	`gtk_¥ogªss_b¨_£t_pul£_°ï
 (
GtkProgªssB¨
 *
pb¨
,

135 
gdoubÀ
 
‰a˘i⁄
);

136 
	`gtk_¥ogªss_b¨_£t_‹õ¡©i⁄
 (
GtkProgªssB¨
 *
pb¨
,

137 
GtkProgªssB¨Orõ¡©i⁄
 
‹õ¡©i⁄
);

139 
G_CONST_RETURN
 
gch¨
* 
	`gtk_¥ogªss_b¨_gë_ãxt
 (
GtkProgªssB¨
 *
pb¨
);

140 
gdoubÀ
 
	`gtk_¥ogªss_b¨_gë_‰a˘i⁄
 (
GtkProgªssB¨
 *
pb¨
);

141 
gdoubÀ
 
	`gtk_¥ogªss_b¨_gë_pul£_°ï
 (
GtkProgªssB¨
 *
pb¨
);

143 
GtkProgªssB¨Orõ¡©i⁄
 
	`gtk_¥ogªss_b¨_gë_‹õ¡©i⁄
 (
GtkProgªssB¨
 *
pb¨
);

144 
	`gtk_¥ogªss_b¨_£t_ñlùsize
 (
GtkProgªssB¨
 *
pb¨
,

145 
P™goEŒùsizeMode
 
mode
);

146 
P™goEŒùsizeMode
 
	`gtk_¥ogªss_b¨_gë_ñlùsize
 (
GtkProgªssB¨
 *
pb¨
);

149 #i‚de‡
GTK_DISABLE_DEPRECATED


152 
GtkWidgë
* 
	`gtk_¥ogªss_b¨_√w_wôh_adju°mít
 (
GtkAdju°mít
 *
adju°mít
);

153 
	`gtk_¥ogªss_b¨_£t_b¨_°yÀ
 (
GtkProgªssB¨
 *
pb¨
,

154 
GtkProgªssB¨StyÀ
 
°yÀ
);

155 
	`gtk_¥ogªss_b¨_£t_dis¸ëe_blocks
 (
GtkProgªssB¨
 *
pb¨
,

156 
guöt
 
blocks
);

161 
	`gtk_¥ogªss_b¨_£t_a˘ivôy_°ï
 (
GtkProgªssB¨
 *
pb¨
,

162 
guöt
 
°ï
);

163 
	`gtk_¥ogªss_b¨_£t_a˘ivôy_blocks
 (
GtkProgªssB¨
 *
pb¨
,

164 
guöt
 
blocks
);

165 
	`gtk_¥ogªss_b¨_upd©e
 (
GtkProgªssB¨
 *
pb¨
,

166 
gdoubÀ
 
≥r˚¡age
);

170 
G_END_DECLS


	@/usr/include/gtk/gtkradioaction.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_RADIO_ACTION_H__


36 
	#__GTK_RADIO_ACTION_H__


	)

38 
	~<gtk/gtktoggÀa˘i⁄.h
>

40 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_RADIO_ACTION
 (
	`gtk_ødio_a˘i⁄_gë_ty≥
 ())

	)

43 
	#GTK_RADIO_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RADIO_ACTION
, 
GtkRadioA˘i⁄
))

	)

44 
	#GTK_RADIO_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RADIO_ACTION
, 
GtkRadioA˘i⁄Cœss
))

	)

45 
	#GTK_IS_RADIO_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RADIO_ACTION
))

	)

46 
	#GTK_IS_RADIO_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RADIO_ACTION
))

	)

47 
	#GTK_RADIO_ACTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_RADIO_ACTION
, 
GtkRadioA˘i⁄Cœss
))

	)

49 
_GtkRadioA˘i⁄
 
	tGtkRadioA˘i⁄
;

50 
_GtkRadioA˘i⁄Priv©e
 
	tGtkRadioA˘i⁄Priv©e
;

51 
_GtkRadioA˘i⁄Cœss
 
	tGtkRadioA˘i⁄Cœss
;

53 
	s_GtkRadioA˘i⁄


55 
GtkToggÀA˘i⁄
 
	m∑ª¡
;

59 
GtkRadioA˘i⁄Priv©e
 *
GSEAL
 (
¥iv©e_d©a
);

62 
	s_GtkRadioA˘i⁄Cœss


64 
GtkToggÀA˘i⁄Cœss
 
	m∑ª¡_˛ass
;

66 (* 
	mch™ged
Ë(
GtkRadioA˘i⁄
 *
	ma˘i⁄
, GtkRadioA˘i⁄ *
	mcuºít
);

69 (*
	m_gtk_ª£rved1
) ();

70 (*
	m_gtk_ª£rved2
) ();

71 (*
	m_gtk_ª£rved3
) ();

72 (*
	m_gtk_ª£rved4
) ();

75 
GTy≥
 
	$gtk_ødio_a˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

76 
GtkRadioA˘i⁄
 *
	`gtk_ødio_a˘i⁄_√w
 (c⁄° 
gch¨
 *
«me
,

77 c⁄° 
gch¨
 *
œbñ
,

78 c⁄° 
gch¨
 *
toﬁtù
,

79 c⁄° 
gch¨
 *
°ock_id
,

80 
göt
 
vÆue
);

81 
GSLi°
 *
	`gtk_ødio_a˘i⁄_gë_group
 (
GtkRadioA˘i⁄
 *
a˘i⁄
);

82 
	`gtk_ødio_a˘i⁄_£t_group
 (
GtkRadioA˘i⁄
 *
a˘i⁄
,

83 
GSLi°
 *
group
);

84 
göt
 
	`gtk_ødio_a˘i⁄_gë_cuºít_vÆue
 (
GtkRadioA˘i⁄
 *
a˘i⁄
);

85 
	`gtk_ødio_a˘i⁄_£t_cuºít_vÆue
 (
GtkRadioA˘i⁄
 *
a˘i⁄
,

86 
göt
 
cuºít_vÆue
);

88 
G_END_DECLS


	@/usr/include/gtk/gtkradiobutton.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_RADIO_BUTTON_H__


32 
	#__GTK_RADIO_BUTTON_H__


	)

35 
	~<gtk/gtkcheckbuâ⁄.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_RADIO_BUTTON
 (
	`gtk_ødio_buâ⁄_gë_ty≥
 ())

	)

41 
	#GTK_RADIO_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RADIO_BUTTON
, 
GtkRadioBuâ⁄
))

	)

42 
	#GTK_RADIO_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RADIO_BUTTON
, 
GtkRadioBuâ⁄Cœss
))

	)

43 
	#GTK_IS_RADIO_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RADIO_BUTTON
))

	)

44 
	#GTK_IS_RADIO_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RADIO_BUTTON
))

	)

45 
	#GTK_RADIO_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RADIO_BUTTON
, 
GtkRadioBuâ⁄Cœss
))

	)

48 
_GtkRadioBuâ⁄
 
	tGtkRadioBuâ⁄
;

49 
_GtkRadioBuâ⁄Cœss
 
	tGtkRadioBuâ⁄Cœss
;

51 
	s_GtkRadioBuâ⁄


53 
GtkCheckBuâ⁄
 
	mcheck_buâ⁄
;

55 
GSLi°
 *
GSEAL
 (
group
);

58 
	s_GtkRadioBuâ⁄Cœss


60 
GtkCheckBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

63 (*
	mgroup_ch™ged
Ë(
GtkRadioBuâ⁄
 *
	mødio_buâ⁄
);

66 (*
	m_gtk_ª£rved2
) ();

67 (*
	m_gtk_ª£rved3
) ();

68 (*
	m_gtk_ª£rved4
) ();

72 
GTy≥
 
	$gtk_ødio_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

74 
GtkWidgë
* 
	`gtk_ødio_buâ⁄_√w
 (
GSLi°
 *
group
);

75 
GtkWidgë
* 
	`gtk_ødio_buâ⁄_√w_‰om_widgë
 (
GtkRadioBuâ⁄
 *
ødio_group_membî
);

76 
GtkWidgë
* 
	`gtk_ødio_buâ⁄_√w_wôh_œbñ
 (
GSLi°
 *
group
,

77 c⁄° 
gch¨
 *
œbñ
);

78 
GtkWidgë
* 
	`gtk_ødio_buâ⁄_√w_wôh_œbñ_‰om_widgë
 (
GtkRadioBuâ⁄
 *
ødio_group_membî
,

79 c⁄° 
gch¨
 *
œbñ
);

80 
GtkWidgë
* 
	`gtk_ødio_buâ⁄_√w_wôh_m√m⁄ic
 (
GSLi°
 *
group
,

81 c⁄° 
gch¨
 *
œbñ
);

82 
GtkWidgë
* 
	`gtk_ødio_buâ⁄_√w_wôh_m√m⁄ic_‰om_widgë
 (
GtkRadioBuâ⁄
 *
ødio_group_membî
,

83 c⁄° 
gch¨
 *
œbñ
);

84 
GSLi°
* 
	`gtk_ødio_buâ⁄_gë_group
 (
GtkRadioBuâ⁄
 *
ødio_buâ⁄
);

85 
	`gtk_ødio_buâ⁄_£t_group
 (
GtkRadioBuâ⁄
 *
ødio_buâ⁄
,

86 
GSLi°
 *
group
);

88 #i‚de‡
GTK_DISABLE_DEPRECATED


89 
	#gtk_ødio_buâ⁄_group
 
gtk_ødio_buâ⁄_gë_group


	)

92 
G_END_DECLS


	@/usr/include/gtk/gtkradiomenuitem.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_RADIO_MENU_ITEM_H__


32 
	#__GTK_RADIO_MENU_ITEM_H__


	)

35 
	~<gtk/gtkcheckmíuôem.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_RADIO_MENU_ITEM
 (
	`gtk_ødio_míu_ôem_gë_ty≥
 ())

	)

41 
	#GTK_RADIO_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RADIO_MENU_ITEM
, 
GtkRadioMíuIãm
))

	)

42 
	#GTK_RADIO_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RADIO_MENU_ITEM
, 
GtkRadioMíuIãmCœss
))

	)

43 
	#GTK_IS_RADIO_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RADIO_MENU_ITEM
))

	)

44 
	#GTK_IS_RADIO_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RADIO_MENU_ITEM
))

	)

45 
	#GTK_RADIO_MENU_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RADIO_MENU_ITEM
, 
GtkRadioMíuIãmCœss
))

	)

48 
_GtkRadioMíuIãm
 
	tGtkRadioMíuIãm
;

49 
_GtkRadioMíuIãmCœss
 
	tGtkRadioMíuIãmCœss
;

51 
	s_GtkRadioMíuIãm


53 
GtkCheckMíuIãm
 
	mcheck_míu_ôem
;

55 
GSLi°
 *
GSEAL
 (
group
);

58 
	s_GtkRadioMíuIãmCœss


60 
GtkCheckMíuIãmCœss
 
	m∑ª¡_˛ass
;

63 (*
	mgroup_ch™ged
Ë(
GtkRadioMíuIãm
 *
	mødio_míu_ôem
);

66 (*
	m_gtk_ª£rved2
) ();

67 (*
	m_gtk_ª£rved3
) ();

68 (*
	m_gtk_ª£rved4
) ();

72 
GTy≥
 
	$gtk_ødio_míu_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

74 
GtkWidgë
* 
	`gtk_ødio_míu_ôem_√w
 (
GSLi°
 *
group
);

75 
GtkWidgë
* 
	`gtk_ødio_míu_ôem_√w_wôh_œbñ
 (
GSLi°
 *
group
,

76 c⁄° 
gch¨
 *
œbñ
);

77 
GtkWidgë
* 
	`gtk_ødio_míu_ôem_√w_wôh_m√m⁄ic
 (
GSLi°
 *
group
,

78 c⁄° 
gch¨
 *
œbñ
);

79 
GtkWidgë
* 
	`gtk_ødio_míu_ôem_√w_‰om_widgë
 (
GtkRadioMíuIãm
 *
group
);

80 
GtkWidgë
 *
	`gtk_ødio_míu_ôem_√w_wôh_m√m⁄ic_‰om_widgë
 (
GtkRadioMíuIãm
 *
group
,

81 c⁄° 
gch¨
 *
œbñ
);

82 
GtkWidgë
 *
	`gtk_ødio_míu_ôem_√w_wôh_œbñ_‰om_widgë
 (
GtkRadioMíuIãm
 *
group
,

83 c⁄° 
gch¨
 *
œbñ
);

84 
GSLi°
* 
	`gtk_ødio_míu_ôem_gë_group
 (
GtkRadioMíuIãm
 *
ødio_míu_ôem
);

85 
	`gtk_ødio_míu_ôem_£t_group
 (
GtkRadioMíuIãm
 *
ødio_míu_ôem
,

86 
GSLi°
 *
group
);

88 #i‚de‡
GTK_DISABLE_DEPRECATED


89 
	#gtk_ødio_míu_ôem_group
 
gtk_ødio_míu_ôem_gë_group


	)

92 
G_END_DECLS


	@/usr/include/gtk/gtkradiotoolbutton.h

23 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

27 #i‚de‡
__GTK_RADIO_TOOL_BUTTON_H__


28 
	#__GTK_RADIO_TOOL_BUTTON_H__


	)

30 
	~<gtk/gtktoggÀtoﬁbuâ⁄.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_RADIO_TOOL_BUTTON
 (
	`gtk_ødio_toﬁ_buâ⁄_gë_ty≥
 ())

	)

35 
	#GTK_RADIO_TOOL_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RADIO_TOOL_BUTTON
, 
GtkRadioToﬁBuâ⁄
))

	)

36 
	#GTK_RADIO_TOOL_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RADIO_TOOL_BUTTON
, 
GtkRadioToﬁBuâ⁄Cœss
))

	)

37 
	#GTK_IS_RADIO_TOOL_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RADIO_TOOL_BUTTON
))

	)

38 
	#GTK_IS_RADIO_TOOL_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RADIO_TOOL_BUTTON
))

	)

39 
	#GTK_RADIO_TOOL_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_RADIO_TOOL_BUTTON
, 
GtkRadioToﬁBuâ⁄Cœss
))

	)

41 
_GtkRadioToﬁBuâ⁄
 
	tGtkRadioToﬁBuâ⁄
;

42 
_GtkRadioToﬁBuâ⁄Cœss
 
	tGtkRadioToﬁBuâ⁄Cœss
;

44 
	s_GtkRadioToﬁBuâ⁄


46 
GtkToggÀToﬁBuâ⁄
 
	m∑ª¡
;

49 
	s_GtkRadioToﬁBuâ⁄Cœss


51 
GtkToggÀToﬁBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

54 (* 
	m_gtk_ª£rved1
) ();

55 (* 
	m_gtk_ª£rved2
) ();

56 (* 
	m_gtk_ª£rved3
) ();

57 (* 
	m_gtk_ª£rved4
) ();

60 
GTy≥
 
	$gtk_ødio_toﬁ_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

62 
GtkToﬁIãm
 *
	`gtk_ødio_toﬁ_buâ⁄_√w
 (
GSLi°
 *
group
);

63 
GtkToﬁIãm
 *
	`gtk_ødio_toﬁ_buâ⁄_√w_‰om_°ock
 (
GSLi°
 *
group
,

64 c⁄° 
gch¨
 *
°ock_id
);

65 
GtkToﬁIãm
 *
	`gtk_ødio_toﬁ_buâ⁄_√w_‰om_widgë
 (
GtkRadioToﬁBuâ⁄
 *
group
);

66 
GtkToﬁIãm
 *
	`gtk_ødio_toﬁ_buâ⁄_√w_wôh_°ock_‰om_widgë
 (
GtkRadioToﬁBuâ⁄
 *
group
,

67 c⁄° 
gch¨
 *
°ock_id
);

68 
GSLi°
 * 
	`gtk_ødio_toﬁ_buâ⁄_gë_group
 (
GtkRadioToﬁBuâ⁄
 *
buâ⁄
);

69 
	`gtk_ødio_toﬁ_buâ⁄_£t_group
 (
GtkRadioToﬁBuâ⁄
 *
buâ⁄
,

70 
GSLi°
 *
group
);

72 
G_END_DECLS


	@/usr/include/gtk/gtkrange.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_RANGE_H__


32 
	#__GTK_RANGE_H__


	)

35 
	~<gtk/gtkadju°mít.h
>

36 
	~<gtk/gtkwidgë.h
>

39 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_RANGE
 (
	`gtk_ønge_gë_ty≥
 ())

	)

43 
	#GTK_RANGE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RANGE
, 
GtkR™ge
))

	)

44 
	#GTK_RANGE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RANGE
, 
GtkR™geCœss
))

	)

45 
	#GTK_IS_RANGE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RANGE
))

	)

46 
	#GTK_IS_RANGE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RANGE
))

	)

47 
	#GTK_RANGE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RANGE
, 
GtkR™geCœss
))

	)

50 
_GtkR™geLayout
 
	tGtkR™geLayout
;

51 
_GtkR™geSãpTimî
 
	tGtkR™geSãpTimî
;

53 
_GtkR™ge
 
	tGtkR™ge
;

54 
_GtkR™geCœss
 
	tGtkR™geCœss
;

56 
	s_GtkR™ge


58 
GtkWidgë
 
	mwidgë
;

60 
GtkAdju°mít
 *
GSEAL
 (
adju°mít
);

61 
GtkUpd©eTy≥
 
GSEAL
 (
upd©e_pﬁicy
);

62 
guöt
 
GSEAL
 (
övîãd
) : 1;

66 
guöt
 
GSEAL
 (
Êù∑bÀ
) : 1;

72 
guöt
 
GSEAL
 (
has_°ï≥r_a
) : 1;

73 
guöt
 
GSEAL
 (
has_°ï≥r_b
) : 1;

74 
guöt
 
GSEAL
 (
has_°ï≥r_c
) : 1;

75 
guöt
 
GSEAL
 (
has_°ï≥r_d
) : 1;

77 
guöt
 
GSEAL
 (
√ed_ªˇlc
) : 1;

79 
guöt
 
GSEAL
 (
¶idî_size_fixed
) : 1;

81 
göt
 
GSEAL
 (
mö_¶idî_size
);

83 
GtkOrõ¡©i⁄
 
GSEAL
 (
‹õ¡©i⁄
);

86 
GdkRe˘™gÀ
 
GSEAL
 (
ønge_ª˘
);

88 
göt
 
GSEAL
 (
¶idî_°¨t
);

89 
göt
 
GSEAL
 (
¶idî_íd
);

92 
göt
 
GSEAL
 (
round_digôs
);

95 
guöt
 
GSEAL
 (
åough_˛ick_f‹w¨d
) : 1;

96 
guöt
 
GSEAL
 (
upd©e_≥ndög
) : 1;

97 
GtkR™geLayout
 *
GSEAL
 (
œyout
);

98 
GtkR™geSãpTimî
 *
GSEAL
 (
timî
);

99 
göt
 
GSEAL
 (
¶ide_öôül_¶idî_posôi⁄
);

100 
göt
 
GSEAL
 (
¶ide_öôül_co‹dö©e
);

101 
guöt
 
GSEAL
 (
upd©e_timeout_id
);

102 
GdkWödow
 *
GSEAL
 (
evít_wödow
);

105 
	s_GtkR™geCœss


107 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

110 
gch¨
 *
	m¶idî_dëaû
;

111 
gch¨
 *
	m°ï≥r_dëaû
;

113 (* 
	mvÆue_ch™ged
Ë(
GtkR™ge
 *
	mønge
);

114 (* 
	madju°_bounds
Ë(
GtkR™ge
 *
	mønge
,

115 
gdoubÀ
 
	m√w_vÆue
);

118 (* 
	mmove_¶idî
Ë(
GtkR™ge
 *
	mønge
,

119 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl
);

122 (* 
	mgë_ønge_b‹dî
Ë(
GtkR™ge
 *
	mønge
,

123 
GtkB‹dî
 *
	mb‹dî_
);

125 
gboﬁón
 (* 
ch™ge_vÆue
Ë(
GtkR™ge
 *
	mønge
,

126 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl
,

127 
gdoubÀ
 
	m√w_vÆue
);

130 (*
	m_gtk_ª£rved1
) ();

131 (*
	m_gtk_ª£rved2
) ();

132 (*
	m_gtk_ª£rved3
) ();

136 
GTy≥
 
	$gtk_ønge_gë_ty≥
 (Ë
G_GNUC_CONST
;

138 
	`gtk_ønge_£t_upd©e_pﬁicy
 (
GtkR™ge
 *
ønge
,

139 
GtkUpd©eTy≥
 
pﬁicy
);

140 
GtkUpd©eTy≥
 
	`gtk_ønge_gë_upd©e_pﬁicy
 (
GtkR™ge
 *
ønge
);

142 
	`gtk_ønge_£t_adju°mít
 (
GtkR™ge
 *
ønge
,

143 
GtkAdju°mít
 *
adju°mít
);

144 
GtkAdju°mít
* 
	`gtk_ønge_gë_adju°mít
 (
GtkR™ge
 *
ønge
);

146 
	`gtk_ønge_£t_övîãd
 (
GtkR™ge
 *
ønge
,

147 
gboﬁón
 
£âög
);

148 
gboﬁón
 
	`gtk_ønge_gë_övîãd
 (
GtkR™ge
 *
ønge
);

150 
	`gtk_ønge_£t_Êù∑bÀ
 (
GtkR™ge
 *
ønge
,

151 
gboﬁón
 
Êù∑bÀ
);

152 
gboﬁón
 
	`gtk_ønge_gë_Êù∑bÀ
 (
GtkR™ge
 *
ønge
);

154 
	`gtk_ønge_£t_¶idî_size_fixed
 (
GtkR™ge
 *
ønge
,

155 
gboﬁón
 
size_fixed
);

156 
gboﬁón
 
	`gtk_ønge_gë_¶idî_size_fixed
 (
GtkR™ge
 *
ønge
);

158 
	`gtk_ønge_£t_mö_¶idî_size
 (
GtkR™ge
 *
ønge
,

159 
gboﬁón
 
mö_size
);

160 
göt
 
	`gtk_ønge_gë_mö_¶idî_size
 (
GtkR™ge
 *
ønge
);

162 
	`gtk_ønge_gë_ønge_ª˘
 (
GtkR™ge
 *
ønge
,

163 
GdkRe˘™gÀ
 *
ønge_ª˘
);

164 
	`gtk_ønge_gë_¶idî_ønge
 (
GtkR™ge
 *
ønge
,

165 
göt
 *
¶idî_°¨t
,

166 
göt
 *
¶idî_íd
);

168 
	`gtk_ønge_£t_lowî_°ï≥r_£nsôivôy
 (
GtkR™ge
 *
ønge
,

169 
GtkSísôivôyTy≥
 
£nsôivôy
);

170 
GtkSísôivôyTy≥
 
	`gtk_ønge_gë_lowî_°ï≥r_£nsôivôy
 (
GtkR™ge
 *
ønge
);

171 
	`gtk_ønge_£t_uµî_°ï≥r_£nsôivôy
 (
GtkR™ge
 *
ønge
,

172 
GtkSísôivôyTy≥
 
£nsôivôy
);

173 
GtkSísôivôyTy≥
 
	`gtk_ønge_gë_uµî_°ï≥r_£nsôivôy
 (
GtkR™ge
 *
ønge
);

175 
	`gtk_ønge_£t_ö¸emíts
 (
GtkR™ge
 *
ønge
,

176 
gdoubÀ
 
°ï
,

177 
gdoubÀ
 
∑ge
);

178 
	`gtk_ønge_£t_ønge
 (
GtkR™ge
 *
ønge
,

179 
gdoubÀ
 
mö
,

180 
gdoubÀ
 
max
);

181 
	`gtk_ønge_£t_vÆue
 (
GtkR™ge
 *
ønge
,

182 
gdoubÀ
 
vÆue
);

183 
gdoubÀ
 
	`gtk_ønge_gë_vÆue
 (
GtkR™ge
 *
ønge
);

185 
	`gtk_ønge_£t_show_fûl_Àvñ
 (
GtkR™ge
 *
ønge
,

186 
gboﬁón
 
show_fûl_Àvñ
);

187 
gboﬁón
 
	`gtk_ønge_gë_show_fûl_Àvñ
 (
GtkR™ge
 *
ønge
);

188 
	`gtk_ønge_£t_ª°ri˘_to_fûl_Àvñ
 (
GtkR™ge
 *
ønge
,

189 
gboﬁón
 
ª°ri˘_to_fûl_Àvñ
);

190 
gboﬁón
 
	`gtk_ønge_gë_ª°ri˘_to_fûl_Àvñ
 (
GtkR™ge
 *
ønge
);

191 
	`gtk_ønge_£t_fûl_Àvñ
 (
GtkR™ge
 *
ønge
,

192 
gdoubÀ
 
fûl_Àvñ
);

193 
gdoubÀ
 
	`gtk_ønge_gë_fûl_Àvñ
 (
GtkR™ge
 *
ønge
);

196 
gdoubÀ
 
	`_gtk_ønge_gë_whìl_dñè
 (
GtkR™ge
 *
ønge
,

197 
GdkS¸ﬁlDúe˘i⁄
 
dúe˘i⁄
);

199 
	`_gtk_ønge_£t_°›_vÆues
 (
GtkR™ge
 *
ønge
,

200 
gdoubÀ
 *
vÆues
,

201 
göt
 
n_vÆues
);

202 
göt
 
	`_gtk_ønge_gë_°›_posôi⁄s
 (
GtkR™ge
 *
ønge
,

203 
göt
 **
vÆues
);

206 
G_END_DECLS


	@/usr/include/gtk/gtkrc.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_RC_H__


32 
	#__GTK_RC_H__


	)

35 
	~<gtk/gtk°yÀ.h
>

37 
G_BEGIN_DECLS


40 
_GtkIc⁄Fa˘‹y
 
	tGtkIc⁄Fa˘‹y
;

41 
_GtkRcC⁄ãxt
 
	tGtkRcC⁄ãxt
;

43 
_GtkRcStyÀCœss
 
	tGtkRcStyÀCœss
;

45 
	#GTK_TYPE_RC_STYLE
 (
	`gtk_rc_°yÀ_gë_ty≥
 ())

	)

46 
	#GTK_RC_STYLE
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_RC_STYLE
, 
GtkRcStyÀ
))

	)

47 
	#GTK_RC_STYLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RC_STYLE
, 
GtkRcStyÀCœss
))

	)

48 
	#GTK_IS_RC_STYLE
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_RC_STYLE
))

	)

49 
	#GTK_IS_RC_STYLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RC_STYLE
))

	)

50 
	#GTK_RC_STYLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RC_STYLE
, 
GtkRcStyÀCœss
))

	)

54 
	mGTK_RC_FG
 = 1 << 0,

55 
	mGTK_RC_BG
 = 1 << 1,

56 
	mGTK_RC_TEXT
 = 1 << 2,

57 
	mGTK_RC_BASE
 = 1 << 3

58 } 
	tGtkRcFœgs
;

60 
	s_GtkRcStyÀ


62 
GObje˘
 
	m∑ª¡_ö°™˚
;

66 
gch¨
 *
	m«me
;

67 
gch¨
 *
	mbg_pixm≠_«me
[5];

68 
P™goF⁄tDes¸ùti⁄
 *
	mf⁄t_desc
;

70 
GtkRcFœgs
 
	mcﬁ‹_Êags
[5];

71 
GdkCﬁ‹
 
	mfg
[5];

72 
GdkCﬁ‹
 
	mbg
[5];

73 
GdkCﬁ‹
 
	mãxt
[5];

74 
GdkCﬁ‹
 
	mba£
[5];

76 
göt
 
	mxthick√ss
;

77 
göt
 
	mythick√ss
;

80 
GAºay
 *
	mrc_¥›îtõs
;

83 
GSLi°
 *
	mrc_°yÀ_li°s
;

85 
GSLi°
 *
	mic⁄_Á˘‹õs
;

87 
guöt
 
	mígöe_•ecifõd
 : 1;

90 
	s_GtkRcStyÀCœss


92 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

99 
	mGtkRcStyÀ
 * (*
	m¸óã_rc_°yÀ
Ë(
GtkRcStyÀ
 *
	mrc_°yÀ
);

105 
guöt
 (*
∑r£
Ë(
GtkRcStyÀ
 *
	mrc_°yÀ
,

106 
GtkSëtögs
 *
	m£âögs
,

107 
GSˇ¬î
 *
	msˇ¬î
);

112 (*
	mmîge
Ë(
GtkRcStyÀ
 *
	mde°
,

113 
GtkRcStyÀ
 *
	m§c
);

117 
	mGtkStyÀ
 * (*
	m¸óã_°yÀ
Ë(
GtkRcStyÀ
 *
	mrc_°yÀ
);

120 (*
	m_gtk_ª£rved1
) ();

121 (*
	m_gtk_ª£rved2
) ();

122 (*
	m_gtk_ª£rved3
) ();

123 (*
	m_gtk_ª£rved4
) ();

126 #ifde‡
G_OS_WIN32


128 
	#gtk_rc_add_deÁu…_fûe
 
gtk_rc_add_deÁu…_fûe_utf8


	)

129 
	#gtk_rc_£t_deÁu…_fûes
 
gtk_rc_£t_deÁu…_fûes_utf8


	)

130 
	#gtk_rc_∑r£
 
gtk_rc_∑r£_utf8


	)

133 
_gtk_rc_öô
 ();

134 
GSLi°
* 
_gtk_rc_∑r£_widgë_˛ass_∑th
 (c⁄° 
gch¨
 *
∑âîn
);

135 
_gtk_rc_‰ì_widgë_˛ass_∑th
 (
GSLi°
 *
li°
);

136 
gboﬁón
 
_gtk_rc_m©ch_widgë_˛ass
 (
GSLi°
 *
li°
,

137 
göt
 
Àngth
,

138 
gch¨
 *
∑th
,

139 
gch¨
 *
∑th_ªvî£d
);

141 
gtk_rc_add_deÁu…_fûe
 (c⁄° 
gch¨
 *
fûíame
);

142 
gtk_rc_£t_deÁu…_fûes
 (
gch¨
 **
fûíames
);

143 
gch¨
** 
gtk_rc_gë_deÁu…_fûes
 ();

144 
GtkStyÀ
* 
gtk_rc_gë_°yÀ
 (
GtkWidgë
 *
widgë
);

145 
GtkStyÀ
* 
gtk_rc_gë_°yÀ_by_∑ths
 (
GtkSëtögs
 *
£âögs
,

146 c⁄° *
widgë_∑th
,

147 c⁄° *
˛ass_∑th
,

148 
GTy≥
 
ty≥
);

150 
gboﬁón
 
gtk_rc_ª∑r£_Æl_f‹_£âögs
 (
GtkSëtögs
 *
£âögs
,

151 
gboﬁón
 
f‹˚_lﬂd
);

152 
gtk_rc_ª£t_°yÀs
 (
GtkSëtögs
 *
£âögs
);

154 
gch¨
* 
gtk_rc_föd_pixm≠_ö_∑th
 (
GtkSëtögs
 *
£âögs
,

155 
GSˇ¬î
 *
sˇ¬î
,

156 c⁄° 
gch¨
 *
pixm≠_fûe
);

158 
gtk_rc_∑r£
 (c⁄° 
gch¨
 *
fûíame
);

159 
gtk_rc_∑r£_°rög
 (c⁄° 
gch¨
 *
rc_°rög
);

160 
gboﬁón
 
gtk_rc_ª∑r£_Æl
 ();

162 #i‚de‡
GTK_DISABLE_DEPRECATED


163 
gtk_rc_add_widgë_«me_°yÀ
 (
GtkRcStyÀ
 *
rc_°yÀ
,

164 c⁄° 
gch¨
 *
∑âîn
);

165 
gtk_rc_add_widgë_˛ass_°yÀ
 (
GtkRcStyÀ
 *
rc_°yÀ
,

166 c⁄° 
gch¨
 *
∑âîn
);

167 
gtk_rc_add_˛ass_°yÀ
 (
GtkRcStyÀ
 *
rc_°yÀ
,

168 c⁄° 
gch¨
 *
∑âîn
);

172 
GTy≥
 
	$gtk_rc_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

173 
GtkRcStyÀ
* 
	`gtk_rc_°yÀ_√w
 ();

174 
GtkRcStyÀ
* 
	`gtk_rc_°yÀ_c›y
 (GtkRcStyÀ *
‹ig
);

176 #i‚de‡
GTK_DISABLE_DEPRECATED


177 
	`gtk_rc_°yÀ_ªf
 (
GtkRcStyÀ
 *
rc_°yÀ
);

178 
	`gtk_rc_°yÀ_uƒef
 (
GtkRcStyÀ
 *
rc_°yÀ
);

181 
gch¨
* 
	`gtk_rc_föd_moduÀ_ö_∑th
 (c⁄° gch¨ *
moduÀ_fûe
);

182 
gch¨
* 
	`gtk_rc_gë_theme_dú
 ();

183 
gch¨
* 
	`gtk_rc_gë_moduÀ_dú
 ();

184 
gch¨
* 
	`gtk_rc_gë_im_moduÀ_∑th
 ();

185 
gch¨
* 
	`gtk_rc_gë_im_moduÀ_fûe
 ();

189 
GTK_RC_TOKEN_INVALID
 = 
G_TOKEN_LAST
,

190 
GTK_RC_TOKEN_INCLUDE
,

191 
GTK_RC_TOKEN_NORMAL
,

192 
GTK_RC_TOKEN_ACTIVE
,

193 
GTK_RC_TOKEN_PRELIGHT
,

194 
GTK_RC_TOKEN_SELECTED
,

195 
GTK_RC_TOKEN_INSENSITIVE
,

196 
GTK_RC_TOKEN_FG
,

197 
GTK_RC_TOKEN_BG
,

198 
GTK_RC_TOKEN_TEXT
,

199 
GTK_RC_TOKEN_BASE
,

200 
GTK_RC_TOKEN_XTHICKNESS
,

201 
GTK_RC_TOKEN_YTHICKNESS
,

202 
GTK_RC_TOKEN_FONT
,

203 
GTK_RC_TOKEN_FONTSET
,

204 
GTK_RC_TOKEN_FONT_NAME
,

205 
GTK_RC_TOKEN_BG_PIXMAP
,

206 
GTK_RC_TOKEN_PIXMAP_PATH
,

207 
GTK_RC_TOKEN_STYLE
,

208 
GTK_RC_TOKEN_BINDING
,

209 
GTK_RC_TOKEN_BIND
,

210 
GTK_RC_TOKEN_WIDGET
,

211 
GTK_RC_TOKEN_WIDGET_CLASS
,

212 
GTK_RC_TOKEN_CLASS
,

213 
GTK_RC_TOKEN_LOWEST
,

214 
GTK_RC_TOKEN_GTK
,

215 
GTK_RC_TOKEN_APPLICATION
,

216 
GTK_RC_TOKEN_THEME
,

217 
GTK_RC_TOKEN_RC
,

218 
GTK_RC_TOKEN_HIGHEST
,

219 
GTK_RC_TOKEN_ENGINE
,

220 
GTK_RC_TOKEN_MODULE_PATH
,

221 
GTK_RC_TOKEN_IM_MODULE_PATH
,

222 
GTK_RC_TOKEN_IM_MODULE_FILE
,

223 
GTK_RC_TOKEN_STOCK
,

224 
GTK_RC_TOKEN_LTR
,

225 
GTK_RC_TOKEN_RTL
,

226 
GTK_RC_TOKEN_COLOR
,

227 
GTK_RC_TOKEN_UNBIND
,

228 
GTK_RC_TOKEN_LAST


229 } 
	tGtkRcTokíTy≥
;

231 
GSˇ¬î
* 
	`gtk_rc_sˇ¬î_√w
 ();

232 
guöt
 
	`gtk_rc_∑r£_cﬁ‹
 (
GSˇ¬î
 *
sˇ¬î
,

233 
GdkCﬁ‹
 *
cﬁ‹
);

234 
guöt
 
	`gtk_rc_∑r£_cﬁ‹_fuŒ
 (
GSˇ¬î
 *
sˇ¬î
,

235 
GtkRcStyÀ
 *
°yÀ
,

236 
GdkCﬁ‹
 *
cﬁ‹
);

237 
guöt
 
	`gtk_rc_∑r£_°©e
 (
GSˇ¬î
 *
sˇ¬î
,

238 
GtkSèãTy≥
 *
°©e
);

239 
guöt
 
	`gtk_rc_∑r£_¥i‹ôy
 (
GSˇ¬î
 *
sˇ¬î
,

240 
GtkP©hPri‹ôyTy≥
 *
¥i‹ôy
);

245 
	s_GtkRcPr›îty


248 
GQu¨k
 
ty≥_«me
;

249 
GQu¨k
 
¥›îty_«me
;

252 
gch¨
 *
‹igö
;

253 
GVÆue
 
vÆue
;

255 c⁄° 
GtkRcPr›îty
* 
	`_gtk_rc_°yÀ_lookup_rc_¥›îty
 (
GtkRcStyÀ
 *
rc_°yÀ
,

256 
GQu¨k
 
ty≥_«me
,

257 
GQu¨k
 
¥›îty_«me
);

258 
	`_gtk_rc_°yÀ_£t_rc_¥›îty
 (
GtkRcStyÀ
 *
rc_°yÀ
,

259 
GtkRcPr›îty
 *
¥›îty
);

260 
	`_gtk_rc_°yÀ_un£t_rc_¥›îty
 (
GtkRcStyÀ
 *
rc_°yÀ
,

261 
GQu¨k
 
ty≥_«me
,

262 
GQu¨k
 
¥›îty_«me
);

264 
GSLi°
 * 
	`_gtk_rc_°yÀ_gë_cﬁ‹_hashes
 (
GtkRcStyÀ
 *
rc_°yÀ
);

266 c⁄° 
gch¨
* 
	`_gtk_rc_c⁄ãxt_gë_deÁu…_f⁄t_«me
 (
GtkSëtögs
 *
£âögs
);

267 
	`_gtk_rc_c⁄ãxt_de°roy
 (
GtkSëtögs
 *
£âögs
);

269 
G_END_DECLS


	@/usr/include/gtk/gtkrecentaction.h

22 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_RECENT_ACTION_H__


27 
	#__GTK_RECENT_ACTION_H__


	)

29 
	~<gtk/gtka˘i⁄.h
>

30 
	~<gtk/gtkª˚¡m™agî.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_RECENT_ACTION
 (
	`gtk_ª˚¡_a˘i⁄_gë_ty≥
 ())

	)

35 
	#GTK_RECENT_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RECENT_ACTION
, 
GtkRe˚¡A˘i⁄
))

	)

36 
	#GTK_IS_RECENT_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RECENT_ACTION
))

	)

37 
	#GTK_RECENT_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RECENT_ACTION
, 
GtkRe˚¡A˘i⁄Cœss
))

	)

38 
	#GTK_IS_RECENT_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RECENT_ACTION
))

	)

39 
	#GTK_RECENT_ACTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RECENT_ACTION
, 
GtkRe˚¡A˘i⁄Cœss
))

	)

41 
_GtkRe˚¡A˘i⁄
 
	tGtkRe˚¡A˘i⁄
;

42 
_GtkRe˚¡A˘i⁄Priv©e
 
	tGtkRe˚¡A˘i⁄Priv©e
;

43 
_GtkRe˚¡A˘i⁄Cœss
 
	tGtkRe˚¡A˘i⁄Cœss
;

45 
	s_GtkRe˚¡A˘i⁄


47 
GtkA˘i⁄
 
	m∑ª¡_ö°™˚
;

50 
GtkRe˚¡A˘i⁄Priv©e
 *
GSEAL
 (
¥iv
);

53 
	s_GtkRe˚¡A˘i⁄Cœss


55 
GtkA˘i⁄Cœss
 
	m∑ª¡_˛ass
;

58 
GTy≥
 
	$gtk_ª˚¡_a˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

59 
GtkA˘i⁄
 *
	`gtk_ª˚¡_a˘i⁄_√w
 (c⁄° 
gch¨
 *
«me
,

60 c⁄° 
gch¨
 *
œbñ
,

61 c⁄° 
gch¨
 *
toﬁtù
,

62 c⁄° 
gch¨
 *
°ock_id
);

63 
GtkA˘i⁄
 *
	`gtk_ª˚¡_a˘i⁄_√w_f‹_m™agî
 (c⁄° 
gch¨
 *
«me
,

64 c⁄° 
gch¨
 *
œbñ
,

65 c⁄° 
gch¨
 *
toﬁtù
,

66 c⁄° 
gch¨
 *
°ock_id
,

67 
GtkRe˚¡M™agî
 *
m™agî
);

68 
gboﬁón
 
	`gtk_ª˚¡_a˘i⁄_gë_show_numbîs
 (
GtkRe˚¡A˘i⁄
 *
a˘i⁄
);

69 
	`gtk_ª˚¡_a˘i⁄_£t_show_numbîs
 (
GtkRe˚¡A˘i⁄
 *
a˘i⁄
,

70 
gboﬁón
 
show_numbîs
);

72 
G_END_DECLS


	@/usr/include/gtk/gtkrecentchooser.h

22 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_RECENT_CHOOSER_H__


27 
	#__GTK_RECENT_CHOOSER_H__


	)

29 
	~<gtk/gtkwidgë.h
>

30 
	~<gtk/gtkª˚¡m™agî.h
>

31 
	~<gtk/gtkª˚¡fûãr.h
>

33 
	gG_BEGIN_DECLS


35 
	#GTK_TYPE_RECENT_CHOOSER
 (
	`gtk_ª˚¡_choo£r_gë_ty≥
 ())

	)

36 
	#GTK_RECENT_CHOOSER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RECENT_CHOOSER
, 
GtkRe˚¡Choo£r
))

	)

37 
	#GTK_IS_RECENT_CHOOSER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RECENT_CHOOSER
))

	)

38 
	#GTK_RECENT_CHOOSER_GET_IFACE
(
ö°
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((ö°), 
GTK_TYPE_RECENT_CHOOSER
, 
GtkRe˚¡Choo£rIÁ˚
))

	)

56 
	mGTK_RECENT_SORT_NONE
 = 0,

57 
	mGTK_RECENT_SORT_MRU
,

58 
	mGTK_RECENT_SORT_LRU
,

59 
	mGTK_RECENT_SORT_CUSTOM


60 } 
	tGtkRe˚¡S‹tTy≥
;

62 
	$göt
 (*
	tGtkRe˚¡S‹tFunc
Ë(
	tGtkRe˚¡Info
 *
	ta
,

63 
	tGtkRe˚¡Info
 *
	tb
,

64 
	tgpoöãr
 
	tu£r_d©a
);

67 
_GtkRe˚¡Choo£r
 
	tGtkRe˚¡Choo£r
;

68 
_GtkRe˚¡Choo£rIÁ˚
 
	tGtkRe˚¡Choo£rIÁ˚
;

70 
	#GTK_RECENT_CHOOSER_ERROR
 (
	`gtk_ª˚¡_choo£r_îr‹_qu¨k
 ())

	)

74 
GTK_RECENT_CHOOSER_ERROR_NOT_FOUND
,

75 
GTK_RECENT_CHOOSER_ERROR_INVALID_URI


76 } 
	tGtkRe˚¡Choo£rEº‹
;

78 
GQu¨k
 
	`gtk_ª˚¡_choo£r_îr‹_qu¨k
 ();

81 
	s_GtkRe˚¡Choo£rIÁ˚


83 
GTy≥I¡îÁ˚
 
ba£_iÁ˚
;

88 
	`gboﬁón
 (* 
£t_cuºít_uri
Ë(
GtkRe˚¡Choo£r
 *
choo£r
,

89 c⁄° 
gch¨
 *
uri
,

90 
GEº‹
 **
îr‹
);

91 
gch¨
 * (* 
gë_cuºít_uri
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

92 
	`gboﬁón
 (* 
£À˘_uri
Ë(
GtkRe˚¡Choo£r
 *
choo£r
,

93 c⁄° 
gch¨
 *
uri
,

94 
GEº‹
 **
îr‹
);

95 (* 
un£À˘_uri
Ë(
GtkRe˚¡Choo£r
 *
choo£r
,

96 c⁄° 
gch¨
 *
uri
);

97 (* 
£À˘_Æl
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

98 (* 
un£À˘_Æl
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

99 
GLi°
 * (* 
gë_ôems
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

100 
GtkRe˚¡M™agî
 *(* 
gë_ª˚¡_m™agî
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

101 (* 
add_fûãr
Ë(
GtkRe˚¡Choo£r
 *
choo£r
,

102 
GtkRe˚¡Fûãr
 *
fûãr
);

103 (* 
ªmove_fûãr
Ë(
GtkRe˚¡Choo£r
 *
choo£r
,

104 
GtkRe˚¡Fûãr
 *
fûãr
);

105 
GSLi°
 * (* 
li°_fûãrs
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

106 (* 
£t_s‹t_func
Ë(
GtkRe˚¡Choo£r
 *
choo£r
,

107 
GtkRe˚¡S‹tFunc
 
s‹t_func
,

108 
gpoöãr
 
d©a
,

109 
GDe°royNŸify
 
de°roy
);

114 (* 
ôem_a˘iv©ed
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

115 (* 
£À˘i⁄_ch™ged
Ë(
GtkRe˚¡Choo£r
 *
choo£r
);

118 
GTy≥
 
	$gtk_ª˚¡_choo£r_gë_ty≥
 (Ë
G_GNUC_CONST
;

123 
	`gtk_ª˚¡_choo£r_£t_show_¥iv©e
 (
GtkRe˚¡Choo£r
 *
choo£r
,

124 
gboﬁón
 
show_¥iv©e
);

125 
gboﬁón
 
	`gtk_ª˚¡_choo£r_gë_show_¥iv©e
 (
GtkRe˚¡Choo£r
 *
choo£r
);

126 
	`gtk_ª˚¡_choo£r_£t_show_nŸ_found
 (
GtkRe˚¡Choo£r
 *
choo£r
,

127 
gboﬁón
 
show_nŸ_found
);

128 
gboﬁón
 
	`gtk_ª˚¡_choo£r_gë_show_nŸ_found
 (
GtkRe˚¡Choo£r
 *
choo£r
);

129 
	`gtk_ª˚¡_choo£r_£t_£À˘_mu…ùÀ
 (
GtkRe˚¡Choo£r
 *
choo£r
,

130 
gboﬁón
 
£À˘_mu…ùÀ
);

131 
gboﬁón
 
	`gtk_ª˚¡_choo£r_gë_£À˘_mu…ùÀ
 (
GtkRe˚¡Choo£r
 *
choo£r
);

132 
	`gtk_ª˚¡_choo£r_£t_limô
 (
GtkRe˚¡Choo£r
 *
choo£r
,

133 
göt
 
limô
);

134 
göt
 
	`gtk_ª˚¡_choo£r_gë_limô
 (
GtkRe˚¡Choo£r
 *
choo£r
);

135 
	`gtk_ª˚¡_choo£r_£t_loˇl_⁄ly
 (
GtkRe˚¡Choo£r
 *
choo£r
,

136 
gboﬁón
 
loˇl_⁄ly
);

137 
gboﬁón
 
	`gtk_ª˚¡_choo£r_gë_loˇl_⁄ly
 (
GtkRe˚¡Choo£r
 *
choo£r
);

138 
	`gtk_ª˚¡_choo£r_£t_show_tùs
 (
GtkRe˚¡Choo£r
 *
choo£r
,

139 
gboﬁón
 
show_tùs
);

140 
gboﬁón
 
	`gtk_ª˚¡_choo£r_gë_show_tùs
 (
GtkRe˚¡Choo£r
 *
choo£r
);

141 #i‚de‡
GTK_DISABLE_DEPRECATED


142 
	`gtk_ª˚¡_choo£r_£t_show_numbîs
 (
GtkRe˚¡Choo£r
 *
choo£r
,

143 
gboﬁón
 
show_numbîs
);

144 
gboﬁón
 
	`gtk_ª˚¡_choo£r_gë_show_numbîs
 (
GtkRe˚¡Choo£r
 *
choo£r
);

146 
	`gtk_ª˚¡_choo£r_£t_show_ic⁄s
 (
GtkRe˚¡Choo£r
 *
choo£r
,

147 
gboﬁón
 
show_ic⁄s
);

148 
gboﬁón
 
	`gtk_ª˚¡_choo£r_gë_show_ic⁄s
 (
GtkRe˚¡Choo£r
 *
choo£r
);

149 
	`gtk_ª˚¡_choo£r_£t_s‹t_ty≥
 (
GtkRe˚¡Choo£r
 *
choo£r
,

150 
GtkRe˚¡S‹tTy≥
 
s‹t_ty≥
);

151 
GtkRe˚¡S‹tTy≥
 
	`gtk_ª˚¡_choo£r_gë_s‹t_ty≥
 (
GtkRe˚¡Choo£r
 *
choo£r
);

152 
	`gtk_ª˚¡_choo£r_£t_s‹t_func
 (
GtkRe˚¡Choo£r
 *
choo£r
,

153 
GtkRe˚¡S‹tFunc
 
s‹t_func
,

154 
gpoöãr
 
s‹t_d©a
,

155 
GDe°royNŸify
 
d©a_de°roy
);

160 
gboﬁón
 
	`gtk_ª˚¡_choo£r_£t_cuºít_uri
 (
GtkRe˚¡Choo£r
 *
choo£r
,

161 c⁄° 
gch¨
 *
uri
,

162 
GEº‹
 **
îr‹
);

163 
gch¨
 * 
	`gtk_ª˚¡_choo£r_gë_cuºít_uri
 (
GtkRe˚¡Choo£r
 *
choo£r
);

164 
GtkRe˚¡Info
 *
	`gtk_ª˚¡_choo£r_gë_cuºít_ôem
 (
GtkRe˚¡Choo£r
 *
choo£r
);

165 
gboﬁón
 
	`gtk_ª˚¡_choo£r_£À˘_uri
 (
GtkRe˚¡Choo£r
 *
choo£r
,

166 c⁄° 
gch¨
 *
uri
,

167 
GEº‹
 **
îr‹
);

168 
	`gtk_ª˚¡_choo£r_un£À˘_uri
 (
GtkRe˚¡Choo£r
 *
choo£r
,

169 c⁄° 
gch¨
 *
uri
);

170 
	`gtk_ª˚¡_choo£r_£À˘_Æl
 (
GtkRe˚¡Choo£r
 *
choo£r
);

171 
	`gtk_ª˚¡_choo£r_un£À˘_Æl
 (
GtkRe˚¡Choo£r
 *
choo£r
);

172 
GLi°
 * 
	`gtk_ª˚¡_choo£r_gë_ôems
 (
GtkRe˚¡Choo£r
 *
choo£r
);

173 
gch¨
 ** 
	`gtk_ª˚¡_choo£r_gë_uris
 (
GtkRe˚¡Choo£r
 *
choo£r
,

174 
gsize
 *
Àngth
);

179 
	`gtk_ª˚¡_choo£r_add_fûãr
 (
GtkRe˚¡Choo£r
 *
choo£r
,

180 
GtkRe˚¡Fûãr
 *
fûãr
);

181 
	`gtk_ª˚¡_choo£r_ªmove_fûãr
 (
GtkRe˚¡Choo£r
 *
choo£r
,

182 
GtkRe˚¡Fûãr
 *
fûãr
);

183 
GSLi°
 * 
	`gtk_ª˚¡_choo£r_li°_fûãrs
 (
GtkRe˚¡Choo£r
 *
choo£r
);

184 
	`gtk_ª˚¡_choo£r_£t_fûãr
 (
GtkRe˚¡Choo£r
 *
choo£r
,

185 
GtkRe˚¡Fûãr
 *
fûãr
);

186 
GtkRe˚¡Fûãr
 *
	`gtk_ª˚¡_choo£r_gë_fûãr
 (
GtkRe˚¡Choo£r
 *
choo£r
);

189 
G_END_DECLS


	@/usr/include/gtk/gtkrecentchooserdialog.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_RECENT_CHOOSER_DIALOG_H__


26 
	#__GTK_RECENT_CHOOSER_DIALOG_H__


	)

28 
	~<gtk/gtkdülog.h
>

29 
	~<gtk/gtkª˚¡choo£r.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_RECENT_CHOOSER_DIALOG
 (
	`gtk_ª˚¡_choo£r_dülog_gë_ty≥
 ())

	)

34 
	#GTK_RECENT_CHOOSER_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_DIALOG
, 
GtkRe˚¡Choo£rDülog
))

	)

35 
	#GTK_IS_RECENT_CHOOSER_DIALOG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_DIALOG
))

	)

36 
	#GTK_RECENT_CHOOSER_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RECENT_CHOOSER_DIALOG
, 
GtkRe˚¡Choo£rDülogCœss
))

	)

37 
	#GTK_IS_RECENT_CHOOSER_DIALOG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RECENT_CHOOSER_DIALOG
))

	)

38 
	#GTK_RECENT_CHOOSER_DIALOG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_DIALOG
, 
GtkRe˚¡Choo£rDülogCœss
))

	)

40 
_GtkRe˚¡Choo£rDülog
 
	tGtkRe˚¡Choo£rDülog
;

41 
_GtkRe˚¡Choo£rDülogCœss
 
	tGtkRe˚¡Choo£rDülogCœss
;

43 
_GtkRe˚¡Choo£rDülogPriv©e
 
	tGtkRe˚¡Choo£rDülogPriv©e
;

46 
	s_GtkRe˚¡Choo£rDülog


49 
GtkDülog
 
	m∑ª¡_ö°™˚
;

51 
GtkRe˚¡Choo£rDülogPriv©e
 *
GSEAL
 (
¥iv
);

54 
	s_GtkRe˚¡Choo£rDülogCœss


56 
GtkDülogCœss
 
	m∑ª¡_˛ass
;

60 
GTy≥
 
	$gtk_ª˚¡_choo£r_dülog_gë_ty≥
 (Ë
G_GNUC_CONST
;

62 
GtkWidgë
 *
	$gtk_ª˚¡_choo£r_dülog_√w
 (c⁄° 
gch¨
 *
tôÀ
,

63 
GtkWödow
 *
∑ª¡
,

64 c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

65 ...Ë
G_GNUC_NULL_TERMINATED
;

66 
GtkWidgë
 *
	$gtk_ª˚¡_choo£r_dülog_√w_f‹_m™agî
 (c⁄° 
gch¨
 *
tôÀ
,

67 
GtkWödow
 *
∑ª¡
,

68 
GtkRe˚¡M™agî
 *
m™agî
,

69 c⁄° 
gch¨
 *
fú°_buâ⁄_ãxt
,

70 ...Ë
G_GNUC_NULL_TERMINATED
;

72 
G_END_DECLS


	@/usr/include/gtk/gtkrecentchoosermenu.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_RECENT_CHOOSER_MENU_H__


26 
	#__GTK_RECENT_CHOOSER_MENU_H__


	)

28 
	~<gtk/gtkmíu.h
>

29 
	~<gtk/gtkª˚¡choo£r.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_RECENT_CHOOSER_MENU
 (
	`gtk_ª˚¡_choo£r_míu_gë_ty≥
 ())

	)

34 
	#GTK_RECENT_CHOOSER_MENU
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_MENU
, 
GtkRe˚¡Choo£rMíu
))

	)

35 
	#GTK_IS_RECENT_CHOOSER_MENU
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_MENU
))

	)

36 
	#GTK_RECENT_CHOOSER_MENU_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RECENT_CHOOSER_MENU
, 
GtkRe˚¡Choo£rMíuCœss
))

	)

37 
	#GTK_IS_RECENT_CHOOSER_MENU_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RECENT_CHOOSER_MENU
))

	)

38 
	#GTK_RECENT_CHOOSER_MENU_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_MENU
, 
GtkRe˚¡Choo£rMíuCœss
))

	)

40 
_GtkRe˚¡Choo£rMíu
 
	tGtkRe˚¡Choo£rMíu
;

41 
_GtkRe˚¡Choo£rMíuCœss
 
	tGtkRe˚¡Choo£rMíuCœss
;

42 
_GtkRe˚¡Choo£rMíuPriv©e
 
	tGtkRe˚¡Choo£rMíuPriv©e
;

44 
	s_GtkRe˚¡Choo£rMíu


47 
GtkMíu
 
	m∑ª¡_ö°™˚
;

49 
GtkRe˚¡Choo£rMíuPriv©e
 *
GSEAL
 (
¥iv
);

52 
	s_GtkRe˚¡Choo£rMíuCœss


54 
GtkMíuCœss
 
	m∑ª¡_˛ass
;

57 (* 
	mgtk_ª˚¡1
) ();

58 (* 
	mgtk_ª˚¡2
) ();

59 (* 
	mgtk_ª˚¡3
) ();

60 (* 
	mgtk_ª˚¡4
) ();

63 
GTy≥
 
	$gtk_ª˚¡_choo£r_míu_gë_ty≥
 (Ë
G_GNUC_CONST
;

65 
GtkWidgë
 *
	`gtk_ª˚¡_choo£r_míu_√w
 ();

66 
GtkWidgë
 *
	`gtk_ª˚¡_choo£r_míu_√w_f‹_m™agî
 (
GtkRe˚¡M™agî
 *
m™agî
);

68 
gboﬁón
 
	`gtk_ª˚¡_choo£r_míu_gë_show_numbîs
 (
GtkRe˚¡Choo£rMíu
 *
míu
);

69 
	`gtk_ª˚¡_choo£r_míu_£t_show_numbîs
 (
GtkRe˚¡Choo£rMíu
 *
míu
,

70 
gboﬁón
 
show_numbîs
);

72 
G_END_DECLS


	@/usr/include/gtk/gtkrecentchooserwidget.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_RECENT_CHOOSER_WIDGET_H__


26 
	#__GTK_RECENT_CHOOSER_WIDGET_H__


	)

28 
	~<gtk/gtkª˚¡choo£r.h
>

29 
	~<gtk/gtkvbox.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_RECENT_CHOOSER_WIDGET
 (
	`gtk_ª˚¡_choo£r_widgë_gë_ty≥
 ())

	)

34 
	#GTK_RECENT_CHOOSER_WIDGET
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_WIDGET
, 
GtkRe˚¡Choo£rWidgë
))

	)

35 
	#GTK_IS_RECENT_CHOOSER_WIDGET
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_WIDGET
))

	)

36 
	#GTK_RECENT_CHOOSER_WIDGET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RECENT_CHOOSER_WIDGET
, 
GtkRe˚¡Choo£rWidgëCœss
))

	)

37 
	#GTK_IS_RECENT_CHOOSER_WIDGET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RECENT_CHOOSER_WIDGET
))

	)

38 
	#GTK_RECENT_CHOOSER_WIDGET_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RECENT_CHOOSER_WIDGET
, 
GtkRe˚¡Choo£rWidgëCœss
))

	)

40 
_GtkRe˚¡Choo£rWidgë
 
	tGtkRe˚¡Choo£rWidgë
;

41 
_GtkRe˚¡Choo£rWidgëCœss
 
	tGtkRe˚¡Choo£rWidgëCœss
;

43 
_GtkRe˚¡Choo£rWidgëPriv©e
 
	tGtkRe˚¡Choo£rWidgëPriv©e
;

45 
	s_GtkRe˚¡Choo£rWidgë


48 
GtkVBox
 
	m∑ª¡_ö°™˚
;

50 
GtkRe˚¡Choo£rWidgëPriv©e
 *
GSEAL
 (
¥iv
);

53 
	s_GtkRe˚¡Choo£rWidgëCœss


55 
GtkVBoxCœss
 
	m∑ª¡_˛ass
;

58 
GTy≥
 
	$gtk_ª˚¡_choo£r_widgë_gë_ty≥
 (Ë
G_GNUC_CONST
;

59 
GtkWidgë
 *
	`gtk_ª˚¡_choo£r_widgë_√w
 ();

60 
GtkWidgë
 *
	`gtk_ª˚¡_choo£r_widgë_√w_f‹_m™agî
 (
GtkRe˚¡M™agî
 *
m™agî
);

62 
G_END_DECLS


	@/usr/include/gtk/gtkrecentfilter.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_RECENT_FILTER_H__


26 
	#__GTK_RECENT_FILTER_H__


	)

28 
	~<glib-obje˘.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_RECENT_FILTER
 (
	`gtk_ª˚¡_fûãr_gë_ty≥
 ())

	)

33 
	#GTK_RECENT_FILTER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RECENT_FILTER
, 
GtkRe˚¡Fûãr
))

	)

34 
	#GTK_IS_RECENT_FILTER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RECENT_FILTER
))

	)

36 
_GtkRe˚¡Fûãr
 
	tGtkRe˚¡Fûãr
;

37 
_GtkRe˚¡FûãrInfo
 
	tGtkRe˚¡FûãrInfo
;

40 
	mGTK_RECENT_FILTER_URI
 = 1 << 0,

41 
	mGTK_RECENT_FILTER_DISPLAY_NAME
 = 1 << 1,

42 
	mGTK_RECENT_FILTER_MIME_TYPE
 = 1 << 2,

43 
	mGTK_RECENT_FILTER_APPLICATION
 = 1 << 3,

44 
	mGTK_RECENT_FILTER_GROUP
 = 1 << 4,

45 
	mGTK_RECENT_FILTER_AGE
 = 1 << 5

46 } 
	tGtkRe˚¡FûãrFœgs
;

48 
	$gboﬁón
 (*
	tGtkRe˚¡FûãrFunc
Ë(c⁄° 
	tGtkRe˚¡FûãrInfo
 *
	tfûãr_öfo
,

49 
	tgpoöãr
 
	tu£r_d©a
);

51 
	s_GtkRe˚¡FûãrInfo


53 
GtkRe˚¡FûãrFœgs
 
c⁄èös
;

55 c⁄° 
gch¨
 *
uri
;

56 c⁄° 
gch¨
 *
di•œy_«me
;

57 c⁄° 
gch¨
 *
mime_ty≥
;

58 c⁄° 
gch¨
 **
≠∂iˇti⁄s
;

59 c⁄° 
gch¨
 **
groups
;

61 
göt
 
age
;

64 
GTy≥
 
	$gtk_ª˚¡_fûãr_gë_ty≥
 (Ë
G_GNUC_CONST
;

66 
GtkRe˚¡Fûãr
 * 
	`gtk_ª˚¡_fûãr_√w
 ();

67 
	`gtk_ª˚¡_fûãr_£t_«me
 (
GtkRe˚¡Fûãr
 *
fûãr
,

68 c⁄° 
gch¨
 *
«me
);

69 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ª˚¡_fûãr_gë_«me
 (
GtkRe˚¡Fûãr
 *
fûãr
);

71 
	`gtk_ª˚¡_fûãr_add_mime_ty≥
 (
GtkRe˚¡Fûãr
 *
fûãr
,

72 c⁄° 
gch¨
 *
mime_ty≥
);

73 
	`gtk_ª˚¡_fûãr_add_∑âîn
 (
GtkRe˚¡Fûãr
 *
fûãr
,

74 c⁄° 
gch¨
 *
∑âîn
);

75 
	`gtk_ª˚¡_fûãr_add_pixbuf_f‹m©s
 (
GtkRe˚¡Fûãr
 *
fûãr
);

76 
	`gtk_ª˚¡_fûãr_add_≠∂iˇti⁄
 (
GtkRe˚¡Fûãr
 *
fûãr
,

77 c⁄° 
gch¨
 *
≠∂iˇti⁄
);

78 
	`gtk_ª˚¡_fûãr_add_group
 (
GtkRe˚¡Fûãr
 *
fûãr
,

79 c⁄° 
gch¨
 *
group
);

80 
	`gtk_ª˚¡_fûãr_add_age
 (
GtkRe˚¡Fûãr
 *
fûãr
,

81 
göt
 
days
);

82 
	`gtk_ª˚¡_fûãr_add_cu°om
 (
GtkRe˚¡Fûãr
 *
fûãr
,

83 
GtkRe˚¡FûãrFœgs
 
√eded
,

84 
GtkRe˚¡FûãrFunc
 
func
,

85 
gpoöãr
 
d©a
,

86 
GDe°royNŸify
 
d©a_de°roy
);

88 
GtkRe˚¡FûãrFœgs
 
	`gtk_ª˚¡_fûãr_gë_√eded
 (
GtkRe˚¡Fûãr
 *
fûãr
);

89 
gboﬁón
 
	`gtk_ª˚¡_fûãr_fûãr
 (
GtkRe˚¡Fûãr
 *
fûãr
,

90 c⁄° 
GtkRe˚¡FûãrInfo
 *
fûãr_öfo
);

92 
G_END_DECLS


	@/usr/include/gtk/gtkrecentmanager.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_RECENT_MANAGER_H__


26 
	#__GTK_RECENT_MANAGER_H__


	)

28 
	~<gdk-pixbuf/gdk-pixbuf.h
>

29 
	~<gdk/gdk.h
>

30 
	~<time.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_RECENT_INFO
 (
	`gtk_ª˚¡_öfo_gë_ty≥
 ())

	)

36 
	#GTK_TYPE_RECENT_MANAGER
 (
	`gtk_ª˚¡_m™agî_gë_ty≥
 ())

	)

37 
	#GTK_RECENT_MANAGER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RECENT_MANAGER
, 
GtkRe˚¡M™agî
))

	)

38 
	#GTK_IS_RECENT_MANAGER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RECENT_MANAGER
))

	)

39 
	#GTK_RECENT_MANAGER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RECENT_MANAGER
, 
GtkRe˚¡M™agîCœss
))

	)

40 
	#GTK_IS_RECENT_MANAGER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RECENT_MANAGER
))

	)

41 
	#GTK_RECENT_MANAGER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RECENT_MANAGER
, 
GtkRe˚¡M™agîCœss
))

	)

43 
_GtkRe˚¡Info
 
	tGtkRe˚¡Info
;

44 
_GtkRe˚¡D©a
 
	tGtkRe˚¡D©a
;

45 
_GtkRe˚¡M™agî
 
	tGtkRe˚¡M™agî
;

46 
_GtkRe˚¡M™agîCœss
 
	tGtkRe˚¡M™agîCœss
;

47 
_GtkRe˚¡M™agîPriv©e
 
	tGtkRe˚¡M™agîPriv©e
;

69 
	s_GtkRe˚¡D©a


71 
gch¨
 *
	mdi•œy_«me
;

72 
gch¨
 *
	mdes¸ùti⁄
;

74 
gch¨
 *
	mmime_ty≥
;

76 
gch¨
 *
	m≠p_«me
;

77 
gch¨
 *
	m≠p_exec
;

79 
gch¨
 **
	mgroups
;

81 
gboﬁón
 
	mis_¥iv©e
;

84 
	s_GtkRe˚¡M™agî


87 
GObje˘
 
	m∑ª¡_ö°™˚
;

89 
GtkRe˚¡M™agîPriv©e
 *
GSEAL
 (
¥iv
);

92 
	s_GtkRe˚¡M™agîCœss


95 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

97 (*
	mch™ged
Ë(
GtkRe˚¡M™agî
 *
	mm™agî
);

100 (*
	m_gtk_ª˚¡1
) ();

101 (*
	m_gtk_ª˚¡2
) ();

102 (*
	m_gtk_ª˚¡3
) ();

103 (*
	m_gtk_ª˚¡4
) ();

125 
	mGTK_RECENT_MANAGER_ERROR_NOT_FOUND
,

126 
	mGTK_RECENT_MANAGER_ERROR_INVALID_URI
,

127 
	mGTK_RECENT_MANAGER_ERROR_INVALID_ENCODING
,

128 
	mGTK_RECENT_MANAGER_ERROR_NOT_REGISTERED
,

129 
	mGTK_RECENT_MANAGER_ERROR_READ
,

130 
	mGTK_RECENT_MANAGER_ERROR_WRITE
,

131 
	mGTK_RECENT_MANAGER_ERROR_UNKNOWN


132 } 
	tGtkRe˚¡M™agîEº‹
;

134 
	#GTK_RECENT_MANAGER_ERROR
 (
	`gtk_ª˚¡_m™agî_îr‹_qu¨k
 ())

	)

135 
GQu¨k
 
gtk_ª˚¡_m™agî_îr‹_qu¨k
 ();

138 
GTy≥
 
	$gtk_ª˚¡_m™agî_gë_ty≥
 (Ë
G_GNUC_CONST
;

140 
GtkRe˚¡M™agî
 *
	`gtk_ª˚¡_m™agî_√w
 ();

141 
GtkRe˚¡M™agî
 *
	`gtk_ª˚¡_m™agî_gë_deÁu…
 ();

143 #i‚de‡
GTK_DISABLE_DEPRECATED


144 
GtkRe˚¡M™agî
 *
	`gtk_ª˚¡_m™agî_gë_f‹_s¸ìn
 (
GdkS¸ìn
 *
s¸ìn
);

145 
	`gtk_ª˚¡_m™agî_£t_s¸ìn
 (
GtkRe˚¡M™agî
 *
m™agî
,

146 
GdkS¸ìn
 *
s¸ìn
);

149 
gboﬁón
 
	`gtk_ª˚¡_m™agî_add_ôem
 (
GtkRe˚¡M™agî
 *
m™agî
,

150 c⁄° 
gch¨
 *
uri
);

151 
gboﬁón
 
	`gtk_ª˚¡_m™agî_add_fuŒ
 (
GtkRe˚¡M™agî
 *
m™agî
,

152 c⁄° 
gch¨
 *
uri
,

153 c⁄° 
GtkRe˚¡D©a
 *
ª˚¡_d©a
);

154 
gboﬁón
 
	`gtk_ª˚¡_m™agî_ªmove_ôem
 (
GtkRe˚¡M™agî
 *
m™agî
,

155 c⁄° 
gch¨
 *
uri
,

156 
GEº‹
 **
îr‹
);

157 
GtkRe˚¡Info
 * 
	`gtk_ª˚¡_m™agî_lookup_ôem
 (
GtkRe˚¡M™agî
 *
m™agî
,

158 c⁄° 
gch¨
 *
uri
,

159 
GEº‹
 **
îr‹
);

160 
gboﬁón
 
	`gtk_ª˚¡_m™agî_has_ôem
 (
GtkRe˚¡M™agî
 *
m™agî
,

161 c⁄° 
gch¨
 *
uri
);

162 
gboﬁón
 
	`gtk_ª˚¡_m™agî_move_ôem
 (
GtkRe˚¡M™agî
 *
m™agî
,

163 c⁄° 
gch¨
 *
uri
,

164 c⁄° 
gch¨
 *
√w_uri
,

165 
GEº‹
 **
îr‹
);

166 
	`gtk_ª˚¡_m™agî_£t_limô
 (
GtkRe˚¡M™agî
 *
m™agî
,

167 
göt
 
limô
);

168 
göt
 
	`gtk_ª˚¡_m™agî_gë_limô
 (
GtkRe˚¡M™agî
 *
m™agî
);

169 
GLi°
 * 
	`gtk_ª˚¡_m™agî_gë_ôems
 (
GtkRe˚¡M™agî
 *
m™agî
);

170 
göt
 
	`gtk_ª˚¡_m™agî_purge_ôems
 (
GtkRe˚¡M™agî
 *
m™agî
,

171 
GEº‹
 **
îr‹
);

174 
GTy≥
 
	$gtk_ª˚¡_öfo_gë_ty≥
 (Ë
G_GNUC_CONST
;

176 
GtkRe˚¡Info
 * 
	`gtk_ª˚¡_öfo_ªf
 (GtkRe˚¡Infÿ*
öfo
);

177 
	`gtk_ª˚¡_öfo_uƒef
 (
GtkRe˚¡Info
 *
öfo
);

179 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ª˚¡_öfo_gë_uri
 (
GtkRe˚¡Info
 *
öfo
);

180 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ª˚¡_öfo_gë_di•œy_«me
 (
GtkRe˚¡Info
 *
öfo
);

181 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ª˚¡_öfo_gë_des¸ùti⁄
 (
GtkRe˚¡Info
 *
öfo
);

182 
G_CONST_RETURN
 
gch¨
 *
	`gtk_ª˚¡_öfo_gë_mime_ty≥
 (
GtkRe˚¡Info
 *
öfo
);

183 
time_t
 
	`gtk_ª˚¡_öfo_gë_added
 (
GtkRe˚¡Info
 *
öfo
);

184 
time_t
 
	`gtk_ª˚¡_öfo_gë_modifõd
 (
GtkRe˚¡Info
 *
öfo
);

185 
time_t
 
	`gtk_ª˚¡_öfo_gë_visôed
 (
GtkRe˚¡Info
 *
öfo
);

186 
gboﬁón
 
	`gtk_ª˚¡_öfo_gë_¥iv©e_höt
 (
GtkRe˚¡Info
 *
öfo
);

187 
gboﬁón
 
	`gtk_ª˚¡_öfo_gë_≠∂iˇti⁄_öfo
 (
GtkRe˚¡Info
 *
öfo
,

188 c⁄° 
gch¨
 *
≠p_«me
,

189 c⁄° 
gch¨
 **
≠p_exec
,

190 
guöt
 *
cou¡
,

191 
time_t
 *
time_
);

192 
gch¨
 ** 
	$gtk_ª˚¡_öfo_gë_≠∂iˇti⁄s
 (
GtkRe˚¡Info
 *
öfo
,

193 
gsize
 *
Àngth
Ë
G_GNUC_MALLOC
;

194 
gch¨
 * 
	$gtk_ª˚¡_öfo_œ°_≠∂iˇti⁄
 (
GtkRe˚¡Info
 *
öfo
Ë
G_GNUC_MALLOC
;

195 
gboﬁón
 
	`gtk_ª˚¡_öfo_has_≠∂iˇti⁄
 (
GtkRe˚¡Info
 *
öfo
,

196 c⁄° 
gch¨
 *
≠p_«me
);

197 
gch¨
 ** 
	$gtk_ª˚¡_öfo_gë_groups
 (
GtkRe˚¡Info
 *
öfo
,

198 
gsize
 *
Àngth
Ë
G_GNUC_MALLOC
;

199 
gboﬁón
 
	`gtk_ª˚¡_öfo_has_group
 (
GtkRe˚¡Info
 *
öfo
,

200 c⁄° 
gch¨
 *
group_«me
);

201 
GdkPixbuf
 * 
	`gtk_ª˚¡_öfo_gë_ic⁄
 (
GtkRe˚¡Info
 *
öfo
,

202 
göt
 
size
);

203 
gch¨
 * 
	$gtk_ª˚¡_öfo_gë_sh‹t_«me
 (
GtkRe˚¡Info
 *
öfo
Ë
G_GNUC_MALLOC
;

204 
gch¨
 * 
	$gtk_ª˚¡_öfo_gë_uri_di•œy
 (
GtkRe˚¡Info
 *
öfo
Ë
G_GNUC_MALLOC
;

205 
göt
 
	`gtk_ª˚¡_öfo_gë_age
 (
GtkRe˚¡Info
 *
öfo
);

206 
gboﬁón
 
	`gtk_ª˚¡_öfo_is_loˇl
 (
GtkRe˚¡Info
 *
öfo
);

207 
gboﬁón
 
	`gtk_ª˚¡_öfo_exi°s
 (
GtkRe˚¡Info
 *
öfo
);

208 
gboﬁón
 
	`gtk_ª˚¡_öfo_m©ch
 (
GtkRe˚¡Info
 *
öfo_a
,

209 
GtkRe˚¡Info
 *
öfo_b
);

212 
	`_gtk_ª˚¡_m™agî_sync
 ();

214 
G_END_DECLS


	@/usr/include/gtk/gtkruler.h

37 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

41 #i‚de‡
__GTK_RULER_H__


42 
	#__GTK_RULER_H__


	)

45 
	~<gtk/gtkwidgë.h
>

48 
	gG_BEGIN_DECLS


50 
	#GTK_TYPE_RULER
 (
	`gtk_ruÀr_gë_ty≥
 ())

	)

51 
	#GTK_RULER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_RULER
, 
GtkRuÀr
))

	)

52 
	#GTK_RULER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_RULER
, 
GtkRuÀrCœss
))

	)

53 
	#GTK_IS_RULER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_RULER
))

	)

54 
	#GTK_IS_RULER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_RULER
))

	)

55 
	#GTK_RULER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_RULER
, 
GtkRuÀrCœss
))

	)

58 
_GtkRuÀr
 
	tGtkRuÀr
;

59 
_GtkRuÀrCœss
 
	tGtkRuÀrCœss
;

60 
_GtkRuÀrMëric
 
	tGtkRuÀrMëric
;

65 
	s_GtkRuÀr


67 
GtkWidgë
 
	mwidgë
;

69 
GdkPixm≠
 *
GSEAL
 (
backög_°‹e
);

70 
GdkGC
 *
GSEAL
 (
n⁄_gr_exp_gc
);

71 
GtkRuÀrMëric
 *
GSEAL
 (
mëric
);

72 
göt
 
GSEAL
 (
x§c
);

73 
göt
 
GSEAL
 (
y§c
);

74 
göt
 
GSEAL
 (
¶idî_size
);

77 
gdoubÀ
 
GSEAL
 (
lowî
);

79 
gdoubÀ
 
GSEAL
 (
uµî
);

81 
gdoubÀ
 
GSEAL
 (
posôi⁄
);

83 
gdoubÀ
 
GSEAL
 (
max_size
);

86 
	s_GtkRuÀrCœss


88 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

90 (* 
	mdøw_ticks
Ë(
GtkRuÀr
 *
	mruÀr
);

91 (* 
	mdøw_pos
Ë(
GtkRuÀr
 *
	mruÀr
);

94 (*
	m_gtk_ª£rved1
) ();

95 (*
	m_gtk_ª£rved2
) ();

96 (*
	m_gtk_ª£rved3
) ();

97 (*
	m_gtk_ª£rved4
) ();

100 
	s_GtkRuÀrMëric


102 
gch¨
 *
	mmëric_«me
;

103 
gch¨
 *
	mabbªv
;

106 
gdoubÀ
 
	mpixñs_≥r_unô
;

107 
gdoubÀ
 
	mruÀr_sˇÀ
[10];

108 
göt
 
	msubdivide
[5];

112 
GTy≥
 
	$gtk_ruÀr_gë_ty≥
 (Ë
G_GNUC_CONST
;

113 
	`gtk_ruÀr_£t_mëric
 (
GtkRuÀr
 *
ruÀr
,

114 
GtkMëricTy≥
 
mëric
);

115 
GtkMëricTy≥
 
	`gtk_ruÀr_gë_mëric
 (
GtkRuÀr
 *
ruÀr
);

116 
	`gtk_ruÀr_£t_ønge
 (
GtkRuÀr
 *
ruÀr
,

117 
gdoubÀ
 
lowî
,

118 
gdoubÀ
 
uµî
,

119 
gdoubÀ
 
posôi⁄
,

120 
gdoubÀ
 
max_size
);

121 
	`gtk_ruÀr_gë_ønge
 (
GtkRuÀr
 *
ruÀr
,

122 
gdoubÀ
 *
lowî
,

123 
gdoubÀ
 *
uµî
,

124 
gdoubÀ
 *
posôi⁄
,

125 
gdoubÀ
 *
max_size
);

127 
	`gtk_ruÀr_døw_ticks
 (
GtkRuÀr
 *
ruÀr
);

128 
	`gtk_ruÀr_døw_pos
 (
GtkRuÀr
 *
ruÀr
);

130 
G_END_DECLS


	@/usr/include/gtk/gtkscale.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_SCALE_H__


32 
	#__GTK_SCALE_H__


	)

35 
	~<gtk/gtkønge.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_SCALE
 (
	`gtk_sˇÀ_gë_ty≥
 ())

	)

41 
	#GTK_SCALE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SCALE
, 
GtkSˇÀ
))

	)

42 
	#GTK_SCALE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SCALE
, 
GtkSˇÀCœss
))

	)

43 
	#GTK_IS_SCALE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SCALE
))

	)

44 
	#GTK_IS_SCALE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SCALE
))

	)

45 
	#GTK_SCALE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SCALE
, 
GtkSˇÀCœss
))

	)

48 
_GtkSˇÀ
 
	tGtkSˇÀ
;

49 
_GtkSˇÀCœss
 
	tGtkSˇÀCœss
;

51 
	s_GtkSˇÀ


53 
GtkR™ge
 
	mønge
;

55 
göt
 
GSEAL
 (
digôs
);

56 
guöt
 
GSEAL
 (
døw_vÆue
) : 1;

57 
guöt
 
GSEAL
 (
vÆue_pos
) : 2;

60 
	s_GtkSˇÀCœss


62 
GtkR™geCœss
 
	m∑ª¡_˛ass
;

64 
	mgch¨
* (* 
	mf‹m©_vÆue
Ë(
GtkSˇÀ
 *
	msˇÀ
,

65 
gdoubÀ
 
	mvÆue
);

67 (* 
	mdøw_vÆue
Ë(
GtkSˇÀ
 *
	msˇÀ
);

69 (* 
	mgë_œyout_off£ts
Ë(
GtkSˇÀ
 *
	msˇÀ
,

70 
göt
 *
	mx
,

71 
göt
 *
	my
);

74 (*
	m_gtk_ª£rved1
) ();

75 (*
	m_gtk_ª£rved2
) ();

76 (*
	m_gtk_ª£rved3
) ();

79 
GTy≥
 
	$gtk_sˇÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

80 
	`gtk_sˇÀ_£t_digôs
 (
GtkSˇÀ
 *
sˇÀ
,

81 
göt
 
digôs
);

82 
göt
 
	`gtk_sˇÀ_gë_digôs
 (
GtkSˇÀ
 *
sˇÀ
);

83 
	`gtk_sˇÀ_£t_døw_vÆue
 (
GtkSˇÀ
 *
sˇÀ
,

84 
gboﬁón
 
døw_vÆue
);

85 
gboﬁón
 
	`gtk_sˇÀ_gë_døw_vÆue
 (
GtkSˇÀ
 *
sˇÀ
);

86 
	`gtk_sˇÀ_£t_vÆue_pos
 (
GtkSˇÀ
 *
sˇÀ
,

87 
GtkPosôi⁄Ty≥
 
pos
);

88 
GtkPosôi⁄Ty≥
 
	`gtk_sˇÀ_gë_vÆue_pos
 (
GtkSˇÀ
 *
sˇÀ
);

90 
P™goLayout
 * 
	`gtk_sˇÀ_gë_œyout
 (
GtkSˇÀ
 *
sˇÀ
);

91 
	`gtk_sˇÀ_gë_œyout_off£ts
 (
GtkSˇÀ
 *
sˇÀ
,

92 
göt
 *
x
,

93 
göt
 *
y
);

95 
	`gtk_sˇÀ_add_m¨k
 (
GtkSˇÀ
 *
sˇÀ
,

96 
gdoubÀ
 
vÆue
,

97 
GtkPosôi⁄Ty≥
 
posôi⁄
,

98 c⁄° 
gch¨
 *
m¨kup
);

99 
	`gtk_sˇÀ_˛ór_m¨ks
 (
GtkSˇÀ
 *
sˇÀ
);

102 
	`_gtk_sˇÀ_˛ór_œyout
 (
GtkSˇÀ
 *
sˇÀ
);

103 
	`_gtk_sˇÀ_gë_vÆue_size
 (
GtkSˇÀ
 *
sˇÀ
,

104 
göt
 *
width
,

105 
göt
 *
height
);

106 
gch¨
 * 
	`_gtk_sˇÀ_f‹m©_vÆue
 (
GtkSˇÀ
 *
sˇÀ
,

107 
gdoubÀ
 
vÆue
);

109 
G_END_DECLS


	@/usr/include/gtk/gtkscalebutton.h

36 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

40 #i‚de‡
__GTK_SCALE_BUTTON_H__


41 
	#__GTK_SCALE_BUTTON_H__


	)

43 
	~<gtk/gtkbuâ⁄.h
>

45 
	gG_BEGIN_DECLS


47 
	#GTK_TYPE_SCALE_BUTTON
 (
	`gtk_sˇÀ_buâ⁄_gë_ty≥
 ())

	)

48 
	#GTK_SCALE_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SCALE_BUTTON
, 
GtkSˇÀBuâ⁄
))

	)

49 
	#GTK_SCALE_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SCALE_BUTTON
, 
GtkSˇÀBuâ⁄Cœss
))

	)

50 
	#GTK_IS_SCALE_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SCALE_BUTTON
))

	)

51 
	#GTK_IS_SCALE_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SCALE_BUTTON
))

	)

52 
	#GTK_SCALE_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SCALE_BUTTON
, 
GtkSˇÀBuâ⁄Cœss
))

	)

54 
_GtkSˇÀBuâ⁄
 
	tGtkSˇÀBuâ⁄
;

55 
_GtkSˇÀBuâ⁄Cœss
 
	tGtkSˇÀBuâ⁄Cœss
;

56 
_GtkSˇÀBuâ⁄Priv©e
 
	tGtkSˇÀBuâ⁄Priv©e
;

58 
	s_GtkSˇÀBuâ⁄


60 
GtkBuâ⁄
 
	m∑ª¡
;

62 
GtkWidgë
 *
GSEAL
 (
∂us_buâ⁄
);

63 
GtkWidgë
 *
GSEAL
 (
möus_buâ⁄
);

66 
GtkSˇÀBuâ⁄Priv©e
 *
GSEAL
 (
¥iv
);

69 
	s_GtkSˇÀBuâ⁄Cœss


71 
GtkBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

74 (* 
	mvÆue_ch™ged
Ë(
GtkSˇÀBuâ⁄
 *
	mbuâ⁄
,

75 
gdoubÀ
 
	mvÆue
);

78 (*
	m_gtk_ª£rved1
) ();

79 (*
	m_gtk_ª£rved2
) ();

80 (*
	m_gtk_ª£rved3
) ();

81 (*
	m_gtk_ª£rved4
) ();

84 
GTy≥
 
	$gtk_sˇÀ_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

85 
GtkWidgë
 * 
	`gtk_sˇÀ_buâ⁄_√w
 (
GtkIc⁄Size
 
size
,

86 
gdoubÀ
 
mö
,

87 
gdoubÀ
 
max
,

88 
gdoubÀ
 
°ï
,

89 c⁄° 
gch¨
 **
ic⁄s
);

90 
	`gtk_sˇÀ_buâ⁄_£t_ic⁄s
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
,

91 c⁄° 
gch¨
 **
ic⁄s
);

92 
gdoubÀ
 
	`gtk_sˇÀ_buâ⁄_gë_vÆue
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
);

93 
	`gtk_sˇÀ_buâ⁄_£t_vÆue
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
,

94 
gdoubÀ
 
vÆue
);

95 
GtkAdju°mít
 * 
	`gtk_sˇÀ_buâ⁄_gë_adju°mít
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
);

96 
	`gtk_sˇÀ_buâ⁄_£t_adju°mít
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
,

97 
GtkAdju°mít
 *
adju°mít
);

98 
GtkWidgë
 * 
	`gtk_sˇÀ_buâ⁄_gë_∂us_buâ⁄
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
);

99 
GtkWidgë
 * 
	`gtk_sˇÀ_buâ⁄_gë_möus_buâ⁄
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
);

100 
GtkWidgë
 * 
	`gtk_sˇÀ_buâ⁄_gë_p›up
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
);

102 #i‚de‡
GTK_DISABLE_DEPRECATED


104 
GtkOrõ¡©i⁄
 
	`gtk_sˇÀ_buâ⁄_gë_‹õ¡©i⁄
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
);

105 
	`gtk_sˇÀ_buâ⁄_£t_‹õ¡©i⁄
 (
GtkSˇÀBuâ⁄
 *
buâ⁄
,

106 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

110 
G_END_DECLS


	@/usr/include/gtk/gtkscrollbar.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_SCROLLBAR_H__


32 
	#__GTK_SCROLLBAR_H__


	)

35 
	~<gtk/gtkønge.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_SCROLLBAR
 (
	`gtk_s¸ﬁlb¨_gë_ty≥
 ())

	)

41 
	#GTK_SCROLLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SCROLLBAR
, 
GtkS¸ﬁlb¨
))

	)

42 
	#GTK_SCROLLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SCROLLBAR
, 
GtkS¸ﬁlb¨Cœss
))

	)

43 
	#GTK_IS_SCROLLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SCROLLBAR
))

	)

44 
	#GTK_IS_SCROLLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SCROLLBAR
))

	)

45 
	#GTK_SCROLLBAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SCROLLBAR
, 
GtkS¸ﬁlb¨Cœss
))

	)

48 
_GtkS¸ﬁlb¨
 
	tGtkS¸ﬁlb¨
;

49 
_GtkS¸ﬁlb¨Cœss
 
	tGtkS¸ﬁlb¨Cœss
;

51 
	s_GtkS¸ﬁlb¨


53 
GtkR™ge
 
	mønge
;

56 
	s_GtkS¸ﬁlb¨Cœss


58 
GtkR™geCœss
 
	m∑ª¡_˛ass
;

61 (*
	m_gtk_ª£rved1
) ();

62 (*
	m_gtk_ª£rved2
) ();

63 (*
	m_gtk_ª£rved3
) ();

64 (*
	m_gtk_ª£rved4
) ();

68 
GTy≥
 
	$gtk_s¸ﬁlb¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
G_END_DECLS


	@/usr/include/gtk/gtkscrolledwindow.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_SCROLLED_WINDOW_H__


32 
	#__GTK_SCROLLED_WINDOW_H__


	)

35 
	~<gtk/gtkhs¸ﬁlb¨.h
>

36 
	~<gtk/gtkvs¸ﬁlb¨.h
>

37 
	~<gtk/gtkvõwp‹t.h
>

40 
	gG_BEGIN_DECLS


43 
	#GTK_TYPE_SCROLLED_WINDOW
 (
	`gtk_s¸ﬁÀd_wödow_gë_ty≥
 ())

	)

44 
	#GTK_SCROLLED_WINDOW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SCROLLED_WINDOW
, 
GtkS¸ﬁÀdWödow
))

	)

45 
	#GTK_SCROLLED_WINDOW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SCROLLED_WINDOW
, 
GtkS¸ﬁÀdWödowCœss
))

	)

46 
	#GTK_IS_SCROLLED_WINDOW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SCROLLED_WINDOW
))

	)

47 
	#GTK_IS_SCROLLED_WINDOW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SCROLLED_WINDOW
))

	)

48 
	#GTK_SCROLLED_WINDOW_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SCROLLED_WINDOW
, 
GtkS¸ﬁÀdWödowCœss
))

	)

52 
_GtkS¸ﬁÀdWödow
 
	tGtkS¸ﬁÀdWödow
;

53 
_GtkS¸ﬁÀdWödowCœss
 
	tGtkS¸ﬁÀdWödowCœss
;

55 
	s_GtkS¸ﬁÀdWödow


57 
GtkBö
 
	mc⁄èöî
;

60 
GtkWidgë
 *
GSEAL
 (
hs¸ﬁlb¨
);

61 
GtkWidgë
 *
GSEAL
 (
vs¸ﬁlb¨
);

64 
guöt
 
GSEAL
 (
hs¸ﬁlb¨_pﬁicy
) : 2;

65 
guöt
 
GSEAL
 (
vs¸ﬁlb¨_pﬁicy
) : 2;

66 
guöt
 
GSEAL
 (
hs¸ﬁlb¨_visibÀ
) : 1;

67 
guöt
 
GSEAL
 (
vs¸ﬁlb¨_visibÀ
) : 1;

68 
guöt
 
GSEAL
 (
wödow_∂a˚mít
) : 2;

69 
guöt
 
GSEAL
 (
focus_out
) : 1;

71 
guöt16
 
GSEAL
 (
shadow_ty≥
);

74 
	s_GtkS¸ﬁÀdWödowCœss


76 
GtkBöCœss
 
	m∑ª¡_˛ass
;

78 
göt
 
	ms¸ﬁlb¨_•acög
;

87 
gboﬁón
 (*
s¸ﬁl_chûd
Ë(
GtkS¸ﬁÀdWödow
 *
	ms¸ﬁÀd_wödow
,

88 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl
,

89 
gboﬁón
 
	mh‹iz⁄èl
);

91 (* 
	mmove_focus_out
Ë(
GtkS¸ﬁÀdWödow
 *
	ms¸ﬁÀd_wödow
,

92 
GtkDúe˘i⁄Ty≥
 
	mdúe˘i⁄
);

95 (*
	m_gtk_ª£rved1
) ();

96 (*
	m_gtk_ª£rved2
) ();

97 (*
	m_gtk_ª£rved3
) ();

98 (*
	m_gtk_ª£rved4
) ();

102 
GTy≥
 
	$gtk_s¸ﬁÀd_wödow_gë_ty≥
 (Ë
G_GNUC_CONST
;

103 
GtkWidgë
* 
	`gtk_s¸ﬁÀd_wödow_√w
 (
GtkAdju°mít
 *
hadju°mít
,

104 
GtkAdju°mít
 *
vadju°mít
);

105 
	`gtk_s¸ﬁÀd_wödow_£t_hadju°mít
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
,

106 
GtkAdju°mít
 *
hadju°mít
);

107 
	`gtk_s¸ﬁÀd_wödow_£t_vadju°mít
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
,

108 
GtkAdju°mít
 *
vadju°mít
);

109 
GtkAdju°mít
* 
	`gtk_s¸ﬁÀd_wödow_gë_hadju°mít
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

110 
GtkAdju°mít
* 
	`gtk_s¸ﬁÀd_wödow_gë_vadju°mít
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

111 
GtkWidgë
* 
	`gtk_s¸ﬁÀd_wödow_gë_hs¸ﬁlb¨
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

112 
GtkWidgë
* 
	`gtk_s¸ﬁÀd_wödow_gë_vs¸ﬁlb¨
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

113 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
,

114 
GtkPﬁicyTy≥
 
hs¸ﬁlb¨_pﬁicy
,

115 
GtkPﬁicyTy≥
 
vs¸ﬁlb¨_pﬁicy
);

116 
	`gtk_s¸ﬁÀd_wödow_gë_pﬁicy
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
,

117 
GtkPﬁicyTy≥
 *
hs¸ﬁlb¨_pﬁicy
,

118 
GtkPﬁicyTy≥
 *
vs¸ﬁlb¨_pﬁicy
);

119 
	`gtk_s¸ﬁÀd_wödow_£t_∂a˚mít
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
,

120 
GtkC‹√rTy≥
 
wödow_∂a˚mít
);

121 
	`gtk_s¸ﬁÀd_wödow_un£t_∂a˚mít
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

123 
GtkC‹√rTy≥
 
	`gtk_s¸ﬁÀd_wödow_gë_∂a˚mít
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

124 
	`gtk_s¸ﬁÀd_wödow_£t_shadow_ty≥
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
,

125 
GtkShadowTy≥
 
ty≥
);

126 
GtkShadowTy≥
 
	`gtk_s¸ﬁÀd_wödow_gë_shadow_ty≥
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

127 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
,

128 
GtkWidgë
 *
chûd
);

130 
göt
 
	`_gtk_s¸ﬁÀd_wödow_gë_s¸ﬁlb¨_•acög
 (
GtkS¸ﬁÀdWödow
 *
s¸ﬁÀd_wödow
);

133 
G_END_DECLS


	@/usr/include/gtk/gtkselection.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_SELECTION_H__


32 
	#__GTK_SELECTION_H__


	)

35 
	~<gtk/gtkwidgë.h
>

36 
	~<gtk/gtkãxtôî.h
>

39 
G_BEGIN_DECLS


41 
_GtkT¨gëLi°
 
	tGtkT¨gëLi°
;

42 
_GtkT¨gëE¡ry
 
	tGtkT¨gëE¡ry
;

44 
	#GTK_TYPE_SELECTION_DATA
 (
	`gtk_£À˘i⁄_d©a_gë_ty≥
 ())

	)

45 
	#GTK_TYPE_TARGET_LIST
 (
	`gtk_èrgë_li°_gë_ty≥
 ())

	)

58 
	s_GtkSñe˘i⁄D©a


60 
GdkAtom
 
GSEAL
 (
£À˘i⁄
);

61 
GdkAtom
 
GSEAL
 (
èrgë
);

62 
GdkAtom
 
GSEAL
 (
ty≥
);

63 
göt
 
GSEAL
 (
f‹m©
);

64 
guch¨
 *
GSEAL
 (
d©a
);

65 
göt
 
GSEAL
 (
Àngth
);

66 
GdkDi•œy
 *
GSEAL
 (
di•œy
);

69 
	s_GtkT¨gëE¡ry
 {

70 
gch¨
 *
	mèrgë
;

71 
guöt
 
	mÊags
;

72 
guöt
 
	möfo
;

79 
_GtkT¨gëPaú
 
	tGtkT¨gëPaú
;

82 
	s_GtkT¨gëLi°
 {

83 
GLi°
 *
	mli°
;

84 
guöt
 
	mªf_cou¡
;

87 
	s_GtkT¨gëPaú
 {

88 
GdkAtom
 
	mèrgë
;

89 
guöt
 
	mÊags
;

90 
guöt
 
	möfo
;

93 
GtkT¨gëLi°
 *
gtk_èrgë_li°_√w
 (c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

94 
guöt
 
¡¨gës
);

95 
GtkT¨gëLi°
 *
gtk_èrgë_li°_ªf
 (GtkT¨gëLi° *
li°
);

96 
gtk_èrgë_li°_uƒef
 (
GtkT¨gëLi°
 *
li°
);

97 
gtk_èrgë_li°_add
 (
GtkT¨gëLi°
 *
li°
,

98 
GdkAtom
 
èrgë
,

99 
guöt
 
Êags
,

100 
guöt
 
öfo
);

101 
gtk_èrgë_li°_add_ãxt_èrgës
 (
GtkT¨gëLi°
 *
li°
,

102 
guöt
 
öfo
);

103 
gtk_èrgë_li°_add_rich_ãxt_èrgës
 (
GtkT¨gëLi°
 *
li°
,

104 
guöt
 
öfo
,

105 
gboﬁón
 
de£rülizabÀ
,

106 
GtkTextBuf„r
 *
buf„r
);

107 
gtk_èrgë_li°_add_image_èrgës
 (
GtkT¨gëLi°
 *
li°
,

108 
guöt
 
öfo
,

109 
gboﬁón
 
wrôabÀ
);

110 
gtk_èrgë_li°_add_uri_èrgës
 (
GtkT¨gëLi°
 *
li°
,

111 
guöt
 
öfo
);

112 
gtk_èrgë_li°_add_èbÀ
 (
GtkT¨gëLi°
 *
li°
,

113 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

114 
guöt
 
¡¨gës
);

115 
gtk_èrgë_li°_ªmove
 (
GtkT¨gëLi°
 *
li°
,

116 
GdkAtom
 
èrgë
);

117 
gboﬁón
 
gtk_èrgë_li°_föd
 (
GtkT¨gëLi°
 *
li°
,

118 
GdkAtom
 
èrgë
,

119 
guöt
 *
öfo
);

121 
GtkT¨gëE¡ry
 * 
gtk_èrgë_èbÀ_√w_‰om_li°
 (
GtkT¨gëLi°
 *
li°
,

122 
göt
 *
n_èrgës
);

123 
gtk_èrgë_èbÀ_‰ì
 (
GtkT¨gëE¡ry
 *
èrgës
,

124 
göt
 
n_èrgës
);

128 
gboﬁón
 
gtk_£À˘i⁄_ow√r_£t
 (
GtkWidgë
 *
widgë
,

129 
GdkAtom
 
£À˘i⁄
,

130 
guöt32
 
time_
);

131 
gboﬁón
 
gtk_£À˘i⁄_ow√r_£t_f‹_di•œy
 (
GdkDi•œy
 *
di•œy
,

132 
GtkWidgë
 *
widgë
,

133 
GdkAtom
 
£À˘i⁄
,

134 
guöt32
 
time_
);

136 
gtk_£À˘i⁄_add_èrgë
 (
GtkWidgë
 *
widgë
,

137 
GdkAtom
 
£À˘i⁄
,

138 
GdkAtom
 
èrgë
,

139 
guöt
 
öfo
);

140 
gtk_£À˘i⁄_add_èrgës
 (
GtkWidgë
 *
widgë
,

141 
GdkAtom
 
£À˘i⁄
,

142 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

143 
guöt
 
¡¨gës
);

144 
gtk_£À˘i⁄_˛ór_èrgës
 (
GtkWidgë
 *
widgë
,

145 
GdkAtom
 
£À˘i⁄
);

146 
gboﬁón
 
gtk_£À˘i⁄_c⁄vît
 (
GtkWidgë
 *
widgë
,

147 
GdkAtom
 
£À˘i⁄
,

148 
GdkAtom
 
èrgë
,

149 
guöt32
 
time_
);

151 
GdkAtom
 
gtk_£À˘i⁄_d©a_gë_£À˘i⁄
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

152 
GdkAtom
 
gtk_£À˘i⁄_d©a_gë_èrgë
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

153 
GdkAtom
 
gtk_£À˘i⁄_d©a_gë_d©a_ty≥
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

154 
göt
 
gtk_£À˘i⁄_d©a_gë_f‹m©
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

155 c⁄° 
guch¨
 *
gtk_£À˘i⁄_d©a_gë_d©a
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

156 
göt
 
gtk_£À˘i⁄_d©a_gë_Àngth
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

157 
GdkDi•œy
 *
gtk_£À˘i⁄_d©a_gë_di•œy
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

159 
gtk_£À˘i⁄_d©a_£t
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

160 
GdkAtom
 
ty≥
,

161 
göt
 
f‹m©
,

162 c⁄° 
guch¨
 *
d©a
,

163 
göt
 
Àngth
);

164 
gboﬁón
 
gtk_£À˘i⁄_d©a_£t_ãxt
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

165 c⁄° 
gch¨
 *
°r
,

166 
göt
 
Àn
);

167 
guch¨
 * 
gtk_£À˘i⁄_d©a_gë_ãxt
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

168 
gboﬁón
 
gtk_£À˘i⁄_d©a_£t_pixbuf
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

169 
GdkPixbuf
 *
pixbuf
);

170 
GdkPixbuf
 *
gtk_£À˘i⁄_d©a_gë_pixbuf
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

171 
gboﬁón
 
gtk_£À˘i⁄_d©a_£t_uris
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

172 
gch¨
 **
uris
);

173 
gch¨
 **
gtk_£À˘i⁄_d©a_gë_uris
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

175 
gboﬁón
 
gtk_£À˘i⁄_d©a_gë_èrgës
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

176 
GdkAtom
 **
èrgës
,

177 
göt
 *
n_©oms
);

178 
gboﬁón
 
gtk_£À˘i⁄_d©a_èrgës_ö˛ude_ãxt
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

179 
gboﬁón
 
gtk_£À˘i⁄_d©a_èrgës_ö˛ude_rich_ãxt
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

180 
GtkTextBuf„r
 *
buf„r
);

181 
gboﬁón
 
gtk_£À˘i⁄_d©a_èrgës_ö˛ude_image
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

182 
gboﬁón
 
wrôabÀ
);

183 
gboﬁón
 
gtk_£À˘i⁄_d©a_èrgës_ö˛ude_uri
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

184 
gboﬁón
 
gtk_èrgës_ö˛ude_ãxt
 (
GdkAtom
 *
èrgës
,

185 
göt
 
n_èrgës
);

186 
gboﬁón
 
gtk_èrgës_ö˛ude_rich_ãxt
 (
GdkAtom
 *
èrgës
,

187 
göt
 
n_èrgës
,

188 
GtkTextBuf„r
 *
buf„r
);

189 
gboﬁón
 
gtk_èrgës_ö˛ude_image
 (
GdkAtom
 *
èrgës
,

190 
göt
 
n_èrgës
,

191 
gboﬁón
 
wrôabÀ
);

192 
gboﬁón
 
gtk_èrgës_ö˛ude_uri
 (
GdkAtom
 *
èrgës
,

193 
göt
 
n_èrgës
);

197 
gtk_£À˘i⁄_ªmove_Æl
 (
GtkWidgë
 *
widgë
);

200 #i‡!
deföed
(
GTK_DISABLE_DEPRECATED
Ë|| deföed (
GTK_COMPILATION
)

201 
gboﬁón
 
gtk_£À˘i⁄_˛ór
 (
GtkWidgë
 *
widgë
,

202 
GdkEvítSñe˘i⁄
 *
evít
);

204 
gboﬁón
 
_gtk_£À˘i⁄_ªque°
 (
GtkWidgë
 *
widgë
,

205 
GdkEvítSñe˘i⁄
 *
evít
);

206 
gboﬁón
 
_gtk_£À˘i⁄_ö¸_evít
 (
GdkWödow
 *
wödow
,

207 
GdkEvítPr›îty
 *
evít
);

208 
gboﬁón
 
_gtk_£À˘i⁄_nŸify
 (
GtkWidgë
 *
widgë
,

209 
GdkEvítSñe˘i⁄
 *
evít
);

210 
gboﬁón
 
_gtk_£À˘i⁄_¥›îty_nŸify
 (
GtkWidgë
 *
widgë
,

211 
GdkEvítPr›îty
 *
evít
);

213 
GTy≥
 
	$gtk_£À˘i⁄_d©a_gë_ty≥
 (Ë
G_GNUC_CONST
;

214 
GtkSñe˘i⁄D©a
 *
	`gtk_£À˘i⁄_d©a_c›y
 (GtkSñe˘i⁄D©®*
d©a
);

215 
	`gtk_£À˘i⁄_d©a_‰ì
 (
GtkSñe˘i⁄D©a
 *
d©a
);

217 
GTy≥
 
	$gtk_èrgë_li°_gë_ty≥
 (Ë
G_GNUC_CONST
;

219 
G_END_DECLS


	@/usr/include/gtk/gtkseparator.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_SEPARATOR_H__


32 
	#__GTK_SEPARATOR_H__


	)

35 
	~<gtk/gtkwidgë.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_SEPARATOR
 (
	`gtk_£∑øt‹_gë_ty≥
 ())

	)

41 
	#GTK_SEPARATOR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SEPARATOR
, 
GtkSï¨©‹
))

	)

42 
	#GTK_SEPARATOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SEPARATOR
, 
GtkSï¨©‹Cœss
))

	)

43 
	#GTK_IS_SEPARATOR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SEPARATOR
))

	)

44 
	#GTK_IS_SEPARATOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SEPARATOR
))

	)

45 
	#GTK_SEPARATOR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SEPARATOR
, 
GtkSï¨©‹Cœss
))

	)

48 
_GtkSï¨©‹
 
	tGtkSï¨©‹
;

49 
_GtkSï¨©‹Cœss
 
	tGtkSï¨©‹Cœss
;

51 
	s_GtkSï¨©‹


53 
GtkWidgë
 
	mwidgë
;

56 
	s_GtkSï¨©‹Cœss


58 
GtkWidgëCœss
 
	m∑ª¡_˛ass
;

62 
GTy≥
 
	$gtk_£∑øt‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

64 
G_END_DECLS


	@/usr/include/gtk/gtkseparatormenuitem.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_SEPARATOR_MENU_ITEM_H__


32 
	#__GTK_SEPARATOR_MENU_ITEM_H__


	)

35 
	~<gtk/gtkmíuôem.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_SEPARATOR_MENU_ITEM
 (
	`gtk_£∑øt‹_míu_ôem_gë_ty≥
 ())

	)

41 
	#GTK_SEPARATOR_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SEPARATOR_MENU_ITEM
, 
GtkSï¨©‹MíuIãm
))

	)

42 
	#GTK_SEPARATOR_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SEPARATOR_MENU_ITEM
, 
GtkSï¨©‹MíuIãmCœss
))

	)

43 
	#GTK_IS_SEPARATOR_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SEPARATOR_MENU_ITEM
))

	)

44 
	#GTK_IS_SEPARATOR_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SEPARATOR_MENU_ITEM
))

	)

45 
	#GTK_SEPARATOR_MENU_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SEPARATOR_MENU_ITEM
, 
GtkSï¨©‹MíuIãmCœss
))

	)

48 
_GtkSï¨©‹MíuIãm
 
	tGtkSï¨©‹MíuIãm
;

49 
_GtkSï¨©‹MíuIãmCœss
 
	tGtkSï¨©‹MíuIãmCœss
;

51 
	s_GtkSï¨©‹MíuIãm


53 
GtkMíuIãm
 
	mmíu_ôem
;

56 
	s_GtkSï¨©‹MíuIãmCœss


58 
GtkMíuIãmCœss
 
	m∑ª¡_˛ass
;

62 
GTy≥
 
	$gtk_£∑øt‹_míu_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
GtkWidgë
* 
	`gtk_£∑øt‹_míu_ôem_√w
 ();

66 
G_END_DECLS


	@/usr/include/gtk/gtkseparatortoolitem.h

22 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_SEPARATOR_TOOL_ITEM_H__


27 
	#__GTK_SEPARATOR_TOOL_ITEM_H__


	)

29 
	~<gtk/gtktoﬁôem.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_SEPARATOR_TOOL_ITEM
 (
	`gtk_£∑øt‹_toﬁ_ôem_gë_ty≥
 ())

	)

34 
	#GTK_SEPARATOR_TOOL_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SEPARATOR_TOOL_ITEM
, 
GtkSï¨©‹ToﬁIãm
))

	)

35 
	#GTK_SEPARATOR_TOOL_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SEPARATOR_TOOL_ITEM
, 
GtkSï¨©‹ToﬁIãmCœss
))

	)

36 
	#GTK_IS_SEPARATOR_TOOL_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SEPARATOR_TOOL_ITEM
))

	)

37 
	#GTK_IS_SEPARATOR_TOOL_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SEPARATOR_TOOL_ITEM
))

	)

38 
	#GTK_SEPARATOR_TOOL_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_SEPARATOR_TOOL_ITEM
, 
GtkSï¨©‹ToﬁIãmCœss
))

	)

40 
_GtkSï¨©‹ToﬁIãm
 
	tGtkSï¨©‹ToﬁIãm
;

41 
_GtkSï¨©‹ToﬁIãmCœss
 
	tGtkSï¨©‹ToﬁIãmCœss
;

42 
_GtkSï¨©‹ToﬁIãmPriv©e
 
	tGtkSï¨©‹ToﬁIãmPriv©e
;

44 
	s_GtkSï¨©‹ToﬁIãm


46 
GtkToﬁIãm
 
	m∑ª¡
;

49 
GtkSï¨©‹ToﬁIãmPriv©e
 *
GSEAL
 (
¥iv
);

52 
	s_GtkSï¨©‹ToﬁIãmCœss


54 
GtkToﬁIãmCœss
 
	m∑ª¡_˛ass
;

57 (* 
	m_gtk_ª£rved1
) ();

58 (* 
	m_gtk_ª£rved2
) ();

59 (* 
	m_gtk_ª£rved3
) ();

60 (* 
	m_gtk_ª£rved4
) ();

63 
GTy≥
 
	$gtk_£∑øt‹_toﬁ_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

64 
GtkToﬁIãm
 *
	`gtk_£∑øt‹_toﬁ_ôem_√w
 ();

66 
gboﬁón
 
	`gtk_£∑øt‹_toﬁ_ôem_gë_døw
 (
GtkSï¨©‹ToﬁIãm
 *
ôem
);

67 
	`gtk_£∑øt‹_toﬁ_ôem_£t_døw
 (
GtkSï¨©‹ToﬁIãm
 *
ôem
,

68 
gboﬁón
 
døw
);

70 
G_END_DECLS


	@/usr/include/gtk/gtksettings.h

19 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

23 #i‚de‡
__GTK_SETTINGS_H__


24 
	#__GTK_SETTINGS_H__


	)

26 
	~<gtk/gtkrc.h
>

28 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_SETTINGS
 (
	`gtk_£âögs_gë_ty≥
 ())

	)

33 
	#GTK_SETTINGS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SETTINGS
, 
GtkSëtögs
))

	)

34 
	#GTK_SETTINGS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SETTINGS
, 
GtkSëtögsCœss
))

	)

35 
	#GTK_IS_SETTINGS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SETTINGS
))

	)

36 
	#GTK_IS_SETTINGS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SETTINGS
))

	)

37 
	#GTK_SETTINGS_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SETTINGS
, 
GtkSëtögsCœss
))

	)

41 
_GtkSëtögsCœss
 
	tGtkSëtögsCœss
;

42 
_GtkSëtögsVÆue
 
	tGtkSëtögsVÆue
;

43 
_GtkSëtögsPr›îtyVÆue
 
	tGtkSëtögsPr›îtyVÆue
;

47 
	s_GtkSëtögs


49 
GObje˘
 
	m∑ª¡_ö°™˚
;

51 
GD©a
 *
GSEAL
 (
queued_£âögs
);

52 
GtkSëtögsPr›îtyVÆue
 *
GSEAL
 (
¥›îty_vÆues
);

54 
GtkRcC⁄ãxt
 *
GSEAL
 (
rc_c⁄ãxt
);

55 
GdkS¸ìn
 *
GSEAL
 (
s¸ìn
);

58 
	s_GtkSëtögsCœss


60 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

63 
	s_GtkSëtögsVÆue


68 
gch¨
 *
	m‹igö
;

73 
GVÆue
 
	mvÆue
;

78 
GTy≥
 
	$gtk_£âögs_gë_ty≥
 (Ë
G_GNUC_CONST
;

79 #i‚de‡
GDK_MULTIHEAD_SAFE


80 
GtkSëtögs
* 
	`gtk_£âögs_gë_deÁu…
 ();

82 
GtkSëtögs
* 
	`gtk_£âögs_gë_f‹_s¸ìn
 (
GdkS¸ìn
 *
s¸ìn
);

84 
	`gtk_£âögs_ö°Æl_¥›îty
 (
GP¨amS≥c
 *
p•ec
);

85 
	`gtk_£âögs_ö°Æl_¥›îty_∑r£r
 (
GP¨amS≥c
 *
p•ec
,

86 
GtkRcPr›îtyP¨£r
 
∑r£r
);

89 
gboﬁón
 
	`gtk_rc_¥›îty_∑r£_cﬁ‹
 (c⁄° 
GP¨amS≥c
 *
p•ec
,

90 c⁄° 
GSåög
 *
g°rög
,

91 
GVÆue
 *
¥›îty_vÆue
);

92 
gboﬁón
 
	`gtk_rc_¥›îty_∑r£_íum
 (c⁄° 
GP¨amS≥c
 *
p•ec
,

93 c⁄° 
GSåög
 *
g°rög
,

94 
GVÆue
 *
¥›îty_vÆue
);

95 
gboﬁón
 
	`gtk_rc_¥›îty_∑r£_Êags
 (c⁄° 
GP¨amS≥c
 *
p•ec
,

96 c⁄° 
GSåög
 *
g°rög
,

97 
GVÆue
 *
¥›îty_vÆue
);

98 
gboﬁón
 
	`gtk_rc_¥›îty_∑r£_ªquisôi⁄
 (c⁄° 
GP¨amS≥c
 *
p•ec
,

99 c⁄° 
GSåög
 *
g°rög
,

100 
GVÆue
 *
¥›îty_vÆue
);

101 
gboﬁón
 
	`gtk_rc_¥›îty_∑r£_b‹dî
 (c⁄° 
GP¨amS≥c
 *
p•ec
,

102 c⁄° 
GSåög
 *
g°rög
,

103 
GVÆue
 *
¥›îty_vÆue
);

106 
	`gtk_£âögs_£t_¥›îty_vÆue
 (
GtkSëtögs
 *
£âögs
,

107 c⁄° 
gch¨
 *
«me
,

108 c⁄° 
GtkSëtögsVÆue
 *
svÆue
);

109 
	`gtk_£âögs_£t_°rög_¥›îty
 (
GtkSëtögs
 *
£âögs
,

110 c⁄° 
gch¨
 *
«me
,

111 c⁄° 
gch¨
 *
v_°rög
,

112 c⁄° 
gch¨
 *
‹igö
);

113 
	`gtk_£âögs_£t_l⁄g_¥›îty
 (
GtkSëtögs
 *
£âögs
,

114 c⁄° 
gch¨
 *
«me
,

115 
gl⁄g
 
v_l⁄g
,

116 c⁄° 
gch¨
 *
‹igö
);

117 
	`gtk_£âögs_£t_doubÀ_¥›îty
 (
GtkSëtögs
 *
£âögs
,

118 c⁄° 
gch¨
 *
«me
,

119 
gdoubÀ
 
v_doubÀ
,

120 c⁄° 
gch¨
 *
‹igö
);

124 
	`_gtk_£âögs_£t_¥›îty_vÆue_‰om_rc
 (
GtkSëtögs
 *
£âögs
,

125 c⁄° 
gch¨
 *
«me
,

126 c⁄° 
GtkSëtögsVÆue
 *
svÆue
);

127 
	`_gtk_£âögs_ª£t_rc_vÆues
 (
GtkSëtögs
 *
£âögs
);

129 
	`_gtk_£âögs_h™dÀ_evít
 (
GdkEvítSëtög
 *
evít
);

130 
GtkRcPr›îtyP¨£r
 
	`_gtk_rc_¥›îty_∑r£r_‰om_ty≥
 (
GTy≥
 
ty≥
);

131 
gboﬁón
 
	`_gtk_£âögs_∑r£_c⁄vît
 (
GtkRcPr›îtyP¨£r
 
∑r£r
,

132 c⁄° 
GVÆue
 *
§c_vÆue
,

133 
GP¨amS≥c
 *
p•ec
,

134 
GVÆue
 *
de°_vÆue
);

137 
G_END_DECLS


	@/usr/include/gtk/gtkshow.h

23 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

27 #i‚de‡
__GTK_SHOW_H__


28 
	#__GTK_SHOW_H__


	)

30 
G_BEGIN_DECLS


32 
gboﬁón
 
gtk_show_uri
 (
GdkS¸ìn
 *
s¸ìn
,

33 c⁄° 
gch¨
 *
uri
,

34 
guöt32
 
time°amp
,

35 
GEº‹
 **
îr‹
);

37 
	gG_END_DECLS


	@/usr/include/gtk/gtksignal.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_SIGNAL_H__


30 
	#__GTK_SIGNAL_H__


	)

32 
	~<gtk/gtk.h
>

33 
	~<gtk/gtkm¨shÆ.h
>

35 
	gG_BEGIN_DECLS


37 
	#gtk_sig«l_deÁu…_m¨shÆÀr
 
g_c˛osuª_m¨shÆ_VOID__VOID


	)

41 
	#GTK_SIGNAL_OFFSET
 
G_STRUCT_OFFSET


	)

42 
	#gtk_sig«l_lookup
(
«me
,
obje˘_ty≥
) \

43 
	`g_sig«l_lookup
 ((
«me
), (
obje˘_ty≥
))

	)

44 
	#gtk_sig«l_«me
(
sig«l_id
) \

45 
	`g_sig«l_«me
 (
sig«l_id
)

	)

46 
	#gtk_sig«l_emô_°›
(
obje˘
,
sig«l_id
) \

47 
	`g_sig«l_°›_emissi⁄
 ((
obje˘
), (
sig«l_id
), 0)

	)

48 
	#gtk_sig«l_c⁄√˘
(
obje˘
,
«me
,
func
,
func_d©a
) \

49 
	`gtk_sig«l_c⁄√˘_fuŒ
 ((
obje˘
), (
«me
), (
func
), 
NULL
, (
func_d©a
), NULL, 0, 0)

	)

50 
	#gtk_sig«l_c⁄√˘_a·î
(
obje˘
,
«me
,
func
,
func_d©a
) \

51 
	`gtk_sig«l_c⁄√˘_fuŒ
 ((
obje˘
), (
«me
), (
func
), 
NULL
, (
func_d©a
), NULL, 0, 1)

	)

52 
	#gtk_sig«l_c⁄√˘_obje˘
(
obje˘
,
«me
,
func
,
¶Ÿ_obje˘
) \

53 
	`gtk_sig«l_c⁄√˘_fuŒ
 ((
obje˘
), (
«me
), (
func
), 
NULL
, (
¶Ÿ_obje˘
), NULL, 1, 0)

	)

54 
	#gtk_sig«l_c⁄√˘_obje˘_a·î
(
obje˘
,
«me
,
func
,
¶Ÿ_obje˘
) \

55 
	`gtk_sig«l_c⁄√˘_fuŒ
 ((
obje˘
), (
«me
), (
func
), 
NULL
, (
¶Ÿ_obje˘
), NULL, 1, 1)

	)

56 
	#gtk_sig«l_disc⁄√˘
(
obje˘
,
h™dÀr_id
) \

57 
	`g_sig«l_h™dÀr_disc⁄√˘
 ((
obje˘
), (
h™dÀr_id
))

	)

58 
	#gtk_sig«l_h™dÀr_block
(
obje˘
,
h™dÀr_id
) \

59 
	`g_sig«l_h™dÀr_block
 ((
obje˘
), (
h™dÀr_id
))

	)

60 
	#gtk_sig«l_h™dÀr_unblock
(
obje˘
,
h™dÀr_id
) \

61 
	`g_sig«l_h™dÀr_unblock
 ((
obje˘
), (
h™dÀr_id
))

	)

62 
	#gtk_sig«l_disc⁄√˘_by_func
(
obje˘
,
func
,
d©a
) \

63 
	`gtk_sig«l_com∑t_m©ched
 ((
obje˘
), (
func
), (
d©a
), \

64 (
GSig«lM©chTy≥
)(
G_SIGNAL_MATCH_FUNC
 | \

65 
G_SIGNAL_MATCH_DATA
), 0)

	)

66 
	#gtk_sig«l_disc⁄√˘_by_d©a
(
obje˘
,
d©a
) \

67 
	`gtk_sig«l_com∑t_m©ched
 ((
obje˘
), 0, (
d©a
), 
G_SIGNAL_MATCH_DATA
, 0)

	)

68 
	#gtk_sig«l_h™dÀr_block_by_func
(
obje˘
,
func
,
d©a
) \

69 
	`gtk_sig«l_com∑t_m©ched
 ((
obje˘
), (
func
), (
d©a
), \

70 (
GSig«lM©chTy≥
)(
G_SIGNAL_MATCH_FUNC
 | \

71 
G_SIGNAL_MATCH_DATA
), 1)

	)

72 
	#gtk_sig«l_h™dÀr_block_by_d©a
(
obje˘
,
d©a
) \

73 
	`gtk_sig«l_com∑t_m©ched
 ((
obje˘
), 0, (
d©a
), 
G_SIGNAL_MATCH_DATA
, 1)

	)

74 
	#gtk_sig«l_h™dÀr_unblock_by_func
(
obje˘
,
func
,
d©a
) \

75 
	`gtk_sig«l_com∑t_m©ched
 ((
obje˘
), (
func
), (
d©a
), \

76 (
GSig«lM©chTy≥
)(
G_SIGNAL_MATCH_FUNC
 | \

77 
G_SIGNAL_MATCH_DATA
), 2)

	)

78 
	#gtk_sig«l_h™dÀr_unblock_by_d©a
(
obje˘
,
d©a
) \

79 
	`gtk_sig«l_com∑t_m©ched
 ((
obje˘
), 0, (
d©a
), 
G_SIGNAL_MATCH_DATA
, 2)

	)

80 
	#gtk_sig«l_h™dÀr_≥ndög
(
obje˘
,
sig«l_id
,
may_be_blocked
) \

81 
	`g_sig«l_has_h™dÀr_≥ndög
 ((
obje˘
), (
sig«l_id
), 0, (
may_be_blocked
))

	)

82 
	#gtk_sig«l_h™dÀr_≥ndög_by_func
(
obje˘
,
sig«l_id
,
may_be_blocked
,
func
,
d©a
) \

83 (
	`g_sig«l_h™dÀr_föd
 ((
obje˘
), \

84 (
GSig«lM©chTy≥
)(
G_SIGNAL_MATCH_ID
 | \

85 
G_SIGNAL_MATCH_FUNC
 | \

86 
G_SIGNAL_MATCH_DATA
 | \

87 ((
may_be_blocked
Ë? 0 : 
G_SIGNAL_MATCH_UNBLOCKED
)),\

88 (
sig«l_id
), 0, 0, (
func
), (
d©a
)Ë!0)

	)

92 
guöt
 
gtk_sig«l_√wv
 (c⁄° 
gch¨
 *
«me
,

93 
GtkSig«lRunTy≥
 
sig«l_Êags
,

94 
GTy≥
 
obje˘_ty≥
,

95 
guöt
 
fun˘i⁄_off£t
,

96 
GSig«lCM¨shÆÀr
 
m¨shÆÀr
,

97 
GTy≥
 
ªtu∫_vÆ
,

98 
guöt
 
n_¨gs
,

99 
GTy≥
 *
¨gs
);

100 
guöt
 
gtk_sig«l_√w
 (c⁄° 
gch¨
 *
«me
,

101 
GtkSig«lRunTy≥
 
sig«l_Êags
,

102 
GTy≥
 
obje˘_ty≥
,

103 
guöt
 
fun˘i⁄_off£t
,

104 
GSig«lCM¨shÆÀr
 
m¨shÆÀr
,

105 
GTy≥
 
ªtu∫_vÆ
,

106 
guöt
 
n_¨gs
,

108 
gtk_sig«l_emô_°›_by_«me
 (
GtkObje˘
 *
obje˘
,

109 c⁄° 
gch¨
 *
«me
);

110 
gtk_sig«l_c⁄√˘_obje˘_whûe_Æive
 (
GtkObje˘
 *
obje˘
,

111 c⁄° 
gch¨
 *
«me
,

112 
GCÆlback
 
func
,

113 
GtkObje˘
 *
Æive_obje˘
);

114 
gtk_sig«l_c⁄√˘_whûe_Æive
 (
GtkObje˘
 *
obje˘
,

115 c⁄° 
gch¨
 *
«me
,

116 
GCÆlback
 
func
,

117 
gpoöãr
 
func_d©a
,

118 
GtkObje˘
 *
Æive_obje˘
);

119 
gul⁄g
 
gtk_sig«l_c⁄√˘_fuŒ
 (
GtkObje˘
 *
obje˘
,

120 c⁄° 
gch¨
 *
«me
,

121 
GCÆlback
 
func
,

122 
GtkCÆlbackM¨shÆ
 
unsuµ‹ãd
,

123 
gpoöãr
 
d©a
,

124 
GDe°royNŸify
 
de°roy_func
,

125 
göt
 
obje˘_sig«l
,

126 
göt
 
a·î
);

127 
gtk_sig«l_emôv
 (
GtkObje˘
 *
obje˘
,

128 
guöt
 
sig«l_id
,

129 
GtkArg
 *
¨gs
);

130 
gtk_sig«l_emô
 (
GtkObje˘
 *
obje˘
,

131 
guöt
 
sig«l_id
,

133 
gtk_sig«l_emô_by_«me
 (
GtkObje˘
 *
obje˘
,

134 c⁄° 
gch¨
 *
«me
,

136 
gtk_sig«l_emôv_by_«me
 (
GtkObje˘
 *
obje˘
,

137 c⁄° 
gch¨
 *
«me
,

138 
GtkArg
 *
¨gs
);

139 
gtk_sig«l_com∑t_m©ched
 (
GtkObje˘
 *
obje˘
,

140 
GCÆlback
 
func
,

141 
gpoöãr
 
d©a
,

142 
GSig«lM©chTy≥
 
m©ch
,

143 
guöt
 
a˘i⁄
);

145 
	gG_END_DECLS


	@/usr/include/gtk/gtksizegroup.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_SIZE_GROUP_H__


26 
	#__GTK_SIZE_GROUP_H__


	)

28 
	~<gtk/gtkwidgë.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_SIZE_GROUP
 (
	`gtk_size_group_gë_ty≥
 ())

	)

33 
	#GTK_SIZE_GROUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SIZE_GROUP
, 
GtkSizeGroup
))

	)

34 
	#GTK_SIZE_GROUP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SIZE_GROUP
, 
GtkSizeGroupCœss
))

	)

35 
	#GTK_IS_SIZE_GROUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SIZE_GROUP
))

	)

36 
	#GTK_IS_SIZE_GROUP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SIZE_GROUP
))

	)

37 
	#GTK_SIZE_GROUP_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SIZE_GROUP
, 
GtkSizeGroupCœss
))

	)

40 
_GtkSizeGroup
 
	tGtkSizeGroup
;

41 
_GtkSizeGroupCœss
 
	tGtkSizeGroupCœss
;

43 
	s_GtkSizeGroup


45 
GObje˘
 
	m∑ª¡_ö°™˚
;

48 
GSLi°
 *
GSEAL
 (
widgës
);

50 
guöt8
 
GSEAL
 (
mode
);

52 
guöt
 
GSEAL
 (
have_width
) : 1;

53 
guöt
 
GSEAL
 (
have_height
) : 1;

54 
guöt
 
GSEAL
 (
ign‹e_hiddí
) : 1;

56 
GtkRequisôi⁄
 
GSEAL
 (
ªquisôi⁄
);

59 
	s_GtkSizeGroupCœss


61 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

64 (*
	m_gtk_ª£rved1
) ();

65 (*
	m_gtk_ª£rved2
) ();

66 (*
	m_gtk_ª£rved3
) ();

67 (*
	m_gtk_ª£rved4
) ();

81 
	mGTK_SIZE_GROUP_NONE
,

82 
	mGTK_SIZE_GROUP_HORIZONTAL
,

83 
	mGTK_SIZE_GROUP_VERTICAL
,

84 
	mGTK_SIZE_GROUP_BOTH


85 } 
	tGtkSizeGroupMode
;

87 
GTy≥
 
	$gtk_size_group_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
GtkSizeGroup
 * 
	`gtk_size_group_√w
 (
GtkSizeGroupMode
 
mode
);

90 
	`gtk_size_group_£t_mode
 (
GtkSizeGroup
 *
size_group
,

91 
GtkSizeGroupMode
 
mode
);

92 
GtkSizeGroupMode
 
	`gtk_size_group_gë_mode
 (
GtkSizeGroup
 *
size_group
);

93 
	`gtk_size_group_£t_ign‹e_hiddí
 (
GtkSizeGroup
 *
size_group
,

94 
gboﬁón
 
ign‹e_hiddí
);

95 
gboﬁón
 
	`gtk_size_group_gë_ign‹e_hiddí
 (
GtkSizeGroup
 *
size_group
);

96 
	`gtk_size_group_add_widgë
 (
GtkSizeGroup
 *
size_group
,

97 
GtkWidgë
 *
widgë
);

98 
	`gtk_size_group_ªmove_widgë
 (
GtkSizeGroup
 *
size_group
,

99 
GtkWidgë
 *
widgë
);

100 
GSLi°
 * 
	`gtk_size_group_gë_widgës
 (
GtkSizeGroup
 *
size_group
);

103 
	`_gtk_size_group_gë_chûd_ªquisôi⁄
 (
GtkWidgë
 *
widgë
,

104 
GtkRequisôi⁄
 *
ªquisôi⁄
);

105 
	`_gtk_size_group_compuã_ªquisôi⁄
 (
GtkWidgë
 *
widgë
,

106 
GtkRequisôi⁄
 *
ªquisôi⁄
);

107 
	`_gtk_size_group_queue_ªsize
 (
GtkWidgë
 *
widgë
);

109 
G_END_DECLS


	@/usr/include/gtk/gtksocket.h

26 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

30 #i‚de‡
__GTK_SOCKET_H__


31 
	#__GTK_SOCKET_H__


	)

33 
	~<gtk/gtkc⁄èöî.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_SOCKET
 (
	`gtk_sockë_gë_ty≥
 ())

	)

38 
	#GTK_SOCKET
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SOCKET
, 
GtkSockë
))

	)

39 
	#GTK_SOCKET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SOCKET
, 
GtkSockëCœss
))

	)

40 
	#GTK_IS_SOCKET
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SOCKET
))

	)

41 
	#GTK_IS_SOCKET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SOCKET
))

	)

42 
	#GTK_SOCKET_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SOCKET
, 
GtkSockëCœss
))

	)

45 
_GtkSockë
 
	tGtkSockë
;

46 
_GtkSockëCœss
 
	tGtkSockëCœss
;

48 
	s_GtkSockë


50 
GtkC⁄èöî
 
	mc⁄èöî
;

52 
guöt16
 
GSEAL
 (
ªque°_width
);

53 
guöt16
 
GSEAL
 (
ªque°_height
);

54 
guöt16
 
GSEAL
 (
cuºít_width
);

55 
guöt16
 
GSEAL
 (
cuºít_height
);

57 
GdkWödow
 *
GSEAL
 (
∂ug_wödow
);

58 
GtkWidgë
 *
GSEAL
 (
∂ug_widgë
);

60 
gsh‹t
 
GSEAL
 (
xembed_vîsi⁄
);

61 
guöt
 
GSEAL
 (
ßme_≠p
) : 1;

62 
guöt
 
GSEAL
 (
focus_ö
) : 1;

63 
guöt
 
GSEAL
 (
have_size
) : 1;

64 
guöt
 
GSEAL
 (
√ed_m≠
) : 1;

65 
guöt
 
GSEAL
 (
is_m≠≥d
) : 1;

66 
guöt
 
GSEAL
 (
a˘ive
) : 1;

68 
GtkAc˚lGroup
 *
GSEAL
 (
ac˚l_group
);

69 
GtkWidgë
 *
GSEAL
 (
t›Àvñ
);

72 
	s_GtkSockëCœss


74 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

76 (*
	m∂ug_added
Ë(
GtkSockë
 *
	msockë_
);

77 
gboﬁón
 (*
∂ug_ªmoved
Ë(
GtkSockë
 *
	msockë_
);

80 (*
	m_gtk_ª£rved1
) ();

81 (*
	m_gtk_ª£rved2
) ();

82 (*
	m_gtk_ª£rved3
) ();

83 (*
	m_gtk_ª£rved4
) ();

87 
GTy≥
 
	$gtk_sockë_gë_ty≥
 (Ë
G_GNUC_CONST
;

88 
GtkWidgë
* 
	`gtk_sockë_√w
 ();

90 
	`gtk_sockë_add_id
 (
GtkSockë
 *
sockë_
,

91 
GdkN©iveWödow
 
wödow_id
);

92 
GdkN©iveWödow
 
	`gtk_sockë_gë_id
 (
GtkSockë
 *
sockë_
);

93 
GdkWödow
* 
	`gtk_sockë_gë_∂ug_wödow
 (
GtkSockë
 *
sockë_
);

95 #i‚de‡
GTK_DISABLE_DEPRECATED


96 
	`gtk_sockë_°ól
 (
GtkSockë
 *
sockë_
,

97 
GdkN©iveWödow
 
wid
);

100 
G_END_DECLS


	@/usr/include/gtk/gtkspinbutton.h

30 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

34 #i‚de‡
__GTK_SPIN_BUTTON_H__


35 
	#__GTK_SPIN_BUTTON_H__


	)

38 
	~<gtk/gtkíåy.h
>

39 
	~<gtk/gtkadju°mít.h
>

42 
	gG_BEGIN_DECLS


44 
	#GTK_TYPE_SPIN_BUTTON
 (
	`gtk_•ö_buâ⁄_gë_ty≥
 ())

	)

45 
	#GTK_SPIN_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SPIN_BUTTON
, 
GtkSpöBuâ⁄
))

	)

46 
	#GTK_SPIN_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_SPIN_BUTTON
, 
GtkSpöBuâ⁄Cœss
))

	)

47 
	#GTK_IS_SPIN_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SPIN_BUTTON
))

	)

48 
	#GTK_IS_SPIN_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_SPIN_BUTTON
))

	)

49 
	#GTK_SPIN_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_SPIN_BUTTON
, 
GtkSpöBuâ⁄Cœss
))

	)

51 
	#GTK_INPUT_ERROR
 -1

	)

55 
	mGTK_UPDATE_ALWAYS
,

56 
	mGTK_UPDATE_IF_VALID


57 } 
	tGtkSpöBuâ⁄Upd©ePﬁicy
;

61 
	mGTK_SPIN_STEP_FORWARD
,

62 
	mGTK_SPIN_STEP_BACKWARD
,

63 
	mGTK_SPIN_PAGE_FORWARD
,

64 
	mGTK_SPIN_PAGE_BACKWARD
,

65 
	mGTK_SPIN_HOME
,

66 
	mGTK_SPIN_END
,

67 
	mGTK_SPIN_USER_DEFINED


68 } 
	tGtkSpöTy≥
;

71 
_GtkSpöBuâ⁄
 
	tGtkSpöBuâ⁄
;

72 
_GtkSpöBuâ⁄Cœss
 
	tGtkSpöBuâ⁄Cœss
;

75 
	s_GtkSpöBuâ⁄


77 
GtkE¡ry
 
	míåy
;

79 
GtkAdju°mít
 *
GSEAL
 (
adju°mít
);

81 
GdkWödow
 *
GSEAL
 (
∑√l
);

83 
guöt32
 
GSEAL
 (
timî
);

85 
gdoubÀ
 
GSEAL
 (
˛imb_øã
);

86 
gdoubÀ
 
GSEAL
 (
timî_°ï
);

88 
GtkSpöBuâ⁄Upd©ePﬁicy
 
GSEAL
 (
upd©e_pﬁicy
);

90 
guöt
 
GSEAL
 (
ö_chûd
) : 2;

91 
guöt
 
GSEAL
 (
˛ick_chûd
) : 2;

92 
guöt
 
GSEAL
 (
buâ⁄
) : 2;

93 
guöt
 
GSEAL
 (
√ed_timî
) : 1;

94 
guöt
 
GSEAL
 (
timî_ˇŒs
) : 3;

95 
guöt
 
GSEAL
 (
digôs
) : 10;

96 
guöt
 
GSEAL
 (
numîic
) : 1;

97 
guöt
 
GSEAL
 (
wøp
) : 1;

98 
guöt
 
GSEAL
 (
¢≠_to_ticks
) : 1;

101 
	s_GtkSpöBuâ⁄Cœss


103 
GtkE¡ryCœss
 
	m∑ª¡_˛ass
;

105 
göt
 (*
öput
Ë(
GtkSpöBuâ⁄
 *
	m•ö_buâ⁄
,

106 
gdoubÀ
 *
	m√w_vÆue
);

107 
göt
 (*
ouçut
Ë(
GtkSpöBuâ⁄
 *
	m•ö_buâ⁄
);

108 (*
	mvÆue_ch™ged
Ë(
GtkSpöBuâ⁄
 *
	m•ö_buâ⁄
);

111 (*
	mch™ge_vÆue
Ë(
GtkSpöBuâ⁄
 *
	m•ö_buâ⁄
,

112 
GtkS¸ﬁlTy≥
 
	ms¸ﬁl
);

114 (*
	mwøµed
Ë(
GtkSpöBuâ⁄
 *
	m•ö_buâ⁄
);

117 (*
	m_gtk_ª£rved1
) ();

118 (*
	m_gtk_ª£rved2
) ();

119 (*
	m_gtk_ª£rved3
) ();

123 
GTy≥
 
	$gtk_•ö_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

125 
	`gtk_•ö_buâ⁄_c⁄figuª
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

126 
GtkAdju°mít
 *
adju°mít
,

127 
gdoubÀ
 
˛imb_øã
,

128 
guöt
 
digôs
);

130 
GtkWidgë
* 
	`gtk_•ö_buâ⁄_√w
 (
GtkAdju°mít
 *
adju°mít
,

131 
gdoubÀ
 
˛imb_øã
,

132 
guöt
 
digôs
);

134 
GtkWidgë
* 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
 (
gdoubÀ
 
mö
,

135 
gdoubÀ
 
max
,

136 
gdoubÀ
 
°ï
);

138 
	`gtk_•ö_buâ⁄_£t_adju°mít
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

139 
GtkAdju°mít
 *
adju°mít
);

141 
GtkAdju°mít
* 
	`gtk_•ö_buâ⁄_gë_adju°mít
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

143 
	`gtk_•ö_buâ⁄_£t_digôs
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

144 
guöt
 
digôs
);

145 
guöt
 
	`gtk_•ö_buâ⁄_gë_digôs
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

147 
	`gtk_•ö_buâ⁄_£t_ö¸emíts
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

148 
gdoubÀ
 
°ï
,

149 
gdoubÀ
 
∑ge
);

150 
	`gtk_•ö_buâ⁄_gë_ö¸emíts
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

151 
gdoubÀ
 *
°ï
,

152 
gdoubÀ
 *
∑ge
);

154 
	`gtk_•ö_buâ⁄_£t_ønge
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

155 
gdoubÀ
 
mö
,

156 
gdoubÀ
 
max
);

157 
	`gtk_•ö_buâ⁄_gë_ønge
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

158 
gdoubÀ
 *
mö
,

159 
gdoubÀ
 *
max
);

161 
gdoubÀ
 
	`gtk_•ö_buâ⁄_gë_vÆue
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

163 
göt
 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

165 
	`gtk_•ö_buâ⁄_£t_vÆue
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

166 
gdoubÀ
 
vÆue
);

168 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

169 
GtkSpöBuâ⁄Upd©ePﬁicy
 
pﬁicy
);

170 
GtkSpöBuâ⁄Upd©ePﬁicy
 
	`gtk_•ö_buâ⁄_gë_upd©e_pﬁicy
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

172 
	`gtk_•ö_buâ⁄_£t_numîic
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

173 
gboﬁón
 
numîic
);

174 
gboﬁón
 
	`gtk_•ö_buâ⁄_gë_numîic
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

176 
	`gtk_•ö_buâ⁄_•ö
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

177 
GtkSpöTy≥
 
dúe˘i⁄
,

178 
gdoubÀ
 
ö¸emít
);

180 
	`gtk_•ö_buâ⁄_£t_wøp
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

181 
gboﬁón
 
wøp
);

182 
gboﬁón
 
	`gtk_•ö_buâ⁄_gë_wøp
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

184 
	`gtk_•ö_buâ⁄_£t_¢≠_to_ticks
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
,

185 
gboﬁón
 
¢≠_to_ticks
);

186 
gboﬁón
 
	`gtk_•ö_buâ⁄_gë_¢≠_to_ticks
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

187 
	`gtk_•ö_buâ⁄_upd©e
 (
GtkSpöBuâ⁄
 *
•ö_buâ⁄
);

190 #i‚de‡
GTK_DISABLE_DEPRECATED


191 
	#gtk_•ö_buâ⁄_gë_vÆue_as_Êﬂt
 
gtk_•ö_buâ⁄_gë_vÆue


	)

194 
G_END_DECLS


	@/usr/include/gtk/gtkspinner.h

25 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

29 #i‚de‡
__GTK_SPINNER_H__


30 
	#__GTK_SPINNER_H__


	)

32 
	~<gtk/gtkdøwög¨ó.h
>

34 
	gG_BEGIN_DECLS


36 
	#GTK_TYPE_SPINNER
 (
	`gtk_•ö√r_gë_ty≥
 ())

	)

37 
	#GTK_SPINNER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_SPINNER
, 
GtkSpö√r
))

	)

38 
	#GTK_SPINNER_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((obj), 
GTK_SPINNER
, 
GtkSpö√rCœss
))

	)

39 
	#GTK_IS_SPINNER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_SPINNER
))

	)

40 
	#GTK_IS_SPINNER_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((obj), 
GTK_TYPE_SPINNER
))

	)

41 
	#GTK_SPINNER_GET_CLASS
 (
	`G_TYPE_INSTANCE_GET_CLASS
 ((
obj
), 
GTK_TYPE_SPINNER
, 
GtkSpö√rCœss
))

	)

43 
_GtkSpö√r
 
	tGtkSpö√r
;

44 
_GtkSpö√rCœss
 
	tGtkSpö√rCœss
;

45 
_GtkSpö√rPriv©e
 
	tGtkSpö√rPriv©e
;

47 
	s_GtkSpö√r


49 
GtkDøwögAªa
 
	m∑ª¡
;

50 
GtkSpö√rPriv©e
 *
	m¥iv
;

53 
	s_GtkSpö√rCœss


55 
GtkDøwögAªaCœss
 
	m∑ª¡_˛ass
;

58 
GTy≥
 
	$gtk_•ö√r_gë_ty≥
 (Ë
G_GNUC_CONST
;

59 
GtkWidgë
 *
	`gtk_•ö√r_√w
 ();

60 
	`gtk_•ö√r_°¨t
 (
GtkSpö√r
 *
•ö√r
);

61 
	`gtk_•ö√r_°›
 (
GtkSpö√r
 *
•ö√r
);

63 
G_END_DECLS


	@/usr/include/gtk/gtkstatusbar.h

28 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

32 #i‚de‡
__GTK_STATUSBAR_H__


33 
	#__GTK_STATUSBAR_H__


	)

35 
	~<gtk/gtkhbox.h
>

37 
	gG_BEGIN_DECLS


39 
	#GTK_TYPE_STATUSBAR
 (
	`gtk_°©usb¨_gë_ty≥
 ())

	)

40 
	#GTK_STATUSBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_STATUSBAR
, 
GtkSètusb¨
))

	)

41 
	#GTK_STATUSBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_STATUSBAR
, 
GtkSètusb¨Cœss
))

	)

42 
	#GTK_IS_STATUSBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_STATUSBAR
))

	)

43 
	#GTK_IS_STATUSBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_STATUSBAR
))

	)

44 
	#GTK_STATUSBAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_STATUSBAR
, 
GtkSètusb¨Cœss
))

	)

47 
_GtkSètusb¨
 
	tGtkSètusb¨
;

48 
_GtkSètusb¨Cœss
 
	tGtkSètusb¨Cœss
;

50 
	s_GtkSètusb¨


52 
GtkHBox
 
	m∑ª¡_widgë
;

54 
GtkWidgë
 *
GSEAL
 (
‰ame
);

55 
GtkWidgë
 *
GSEAL
 (
œbñ
);

57 
GSLi°
 *
GSEAL
 (
mesßges
);

58 
GSLi°
 *
GSEAL
 (
keys
);

60 
guöt
 
GSEAL
 (
£q_c⁄ãxt_id
);

61 
guöt
 
GSEAL
 (
£q_mesßge_id
);

63 
GdkWödow
 *
GSEAL
 (
grù_wödow
);

65 
guöt
 
GSEAL
 (
has_ªsize_grù
) : 1;

68 
	s_GtkSètusb¨Cœss


70 
GtkHBoxCœss
 
	m∑ª¡_˛ass
;

72 
gpoöãr
 
	mª£rved
;

74 (*
	mãxt_pushed
Ë(
GtkSètusb¨
 *
	m°©usb¨
,

75 
guöt
 
	mc⁄ãxt_id
,

76 c⁄° 
gch¨
 *
	mãxt
);

77 (*
	mãxt_p›≥d
Ë(
GtkSètusb¨
 *
	m°©usb¨
,

78 
guöt
 
	mc⁄ãxt_id
,

79 c⁄° 
gch¨
 *
	mãxt
);

82 (*
	m_gtk_ª£rved1
) ();

83 (*
	m_gtk_ª£rved2
) ();

84 (*
	m_gtk_ª£rved3
) ();

85 (*
	m_gtk_ª£rved4
) ();

89 
GTy≥
 
	$gtk_°©usb¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

90 
GtkWidgë
* 
	`gtk_°©usb¨_√w
 ();

94 
guöt
 
	`gtk_°©usb¨_gë_c⁄ãxt_id
 (
GtkSètusb¨
 *
°©usb¨
,

95 c⁄° 
gch¨
 *
c⁄ãxt_des¸ùti⁄
);

97 
guöt
 
	`gtk_°©usb¨_push
 (
GtkSètusb¨
 *
°©usb¨
,

98 
guöt
 
c⁄ãxt_id
,

99 c⁄° 
gch¨
 *
ãxt
);

100 
	`gtk_°©usb¨_p›
 (
GtkSètusb¨
 *
°©usb¨
,

101 
guöt
 
c⁄ãxt_id
);

102 
	`gtk_°©usb¨_ªmove
 (
GtkSètusb¨
 *
°©usb¨
,

103 
guöt
 
c⁄ãxt_id
,

104 
guöt
 
mesßge_id
);

106 
	`gtk_°©usb¨_£t_has_ªsize_grù
 (
GtkSètusb¨
 *
°©usb¨
,

107 
gboﬁón
 
£âög
);

108 
gboﬁón
 
	`gtk_°©usb¨_gë_has_ªsize_grù
 (
GtkSètusb¨
 *
°©usb¨
);

110 
GtkWidgë
* 
	`gtk_°©usb¨_gë_mesßge_¨ó
 (
GtkSètusb¨
 *
°©usb¨
);

112 
G_END_DECLS


	@/usr/include/gtk/gtkstatusicon.h

24 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

28 #i‚de‡
__GTK_STATUS_ICON_H__


29 
	#__GTK_STATUS_ICON_H__


	)

31 
	~<gtk/gtkimage.h
>

32 
	~<gtk/gtkmíu.h
>

34 
	gG_BEGIN_DECLS


36 
	#GTK_TYPE_STATUS_ICON
 (
	`gtk_°©us_ic⁄_gë_ty≥
 ())

	)

37 
	#GTK_STATUS_ICON
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((o), 
GTK_TYPE_STATUS_ICON
, 
GtkSètusIc⁄
))

	)

38 
	#GTK_STATUS_ICON_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((k), 
GTK_TYPE_STATUS_ICON
, 
GtkSètusIc⁄Cœss
))

	)

39 
	#GTK_IS_STATUS_ICON
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((o), 
GTK_TYPE_STATUS_ICON
))

	)

40 
	#GTK_IS_STATUS_ICON_CLASS
(
k
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((k), 
GTK_TYPE_STATUS_ICON
))

	)

41 
	#GTK_STATUS_ICON_GET_CLASS
(
o
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((o), 
GTK_TYPE_STATUS_ICON
, 
GtkSètusIc⁄Cœss
))

	)

43 
_GtkSètusIc⁄
 
	tGtkSètusIc⁄
;

44 
_GtkSètusIc⁄Cœss
 
	tGtkSètusIc⁄Cœss
;

45 
_GtkSètusIc⁄Priv©e
 
	tGtkSètusIc⁄Priv©e
;

47 
	s_GtkSètusIc⁄


49 
GObje˘
 
	m∑ª¡_ö°™˚
;

51 
GtkSètusIc⁄Priv©e
 *
GSEAL
 (
¥iv
);

54 
	s_GtkSètusIc⁄Cœss


56 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

58 (* 
	ma˘iv©e
Ë(
GtkSètusIc⁄
 *
	m°©us_ic⁄
);

59 (* 
	mp›up_míu
Ë(
GtkSètusIc⁄
 *
	m°©us_ic⁄
,

60 
guöt
 
	mbuâ⁄
,

61 
guöt32
 
	ma˘iv©e_time
);

62 
gboﬁón
 (* 
size_ch™ged
Ë(
GtkSètusIc⁄
 *
	m°©us_ic⁄
,

63 
göt
 
	msize
);

64 
gboﬁón
 (* 
buâ⁄_¥ess_evít
Ë(
GtkSètusIc⁄
 *
	m°©us_ic⁄
,

65 
GdkEvítBuâ⁄
 *
	mevít
);

66 
gboﬁón
 (* 
buâ⁄_ªÀa£_evít
Ë(
GtkSètusIc⁄
 *
	m°©us_ic⁄
,

67 
GdkEvítBuâ⁄
 *
	mevít
);

68 
gboﬁón
 (* 
s¸ﬁl_evít
Ë(
GtkSètusIc⁄
 *
	m°©us_ic⁄
,

69 
GdkEvítS¸ﬁl
 *
	mevít
);

70 
gboﬁón
 (* 
quîy_toﬁtù
Ë(
GtkSètusIc⁄
 *
	m°©us_ic⁄
,

71 
göt
 
	mx
,

72 
göt
 
	my
,

73 
gboﬁón
 
	mkeybﬂrd_mode
,

74 
GtkToﬁtù
 *
	mtoﬁtù
);

76 (*
	m__gtk_ª£rved1
);

77 (*
	m__gtk_ª£rved2
);

80 
GTy≥
 
	$gtk_°©us_ic⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

82 
GtkSètusIc⁄
 *
	`gtk_°©us_ic⁄_√w
 ();

83 
GtkSètusIc⁄
 *
	`gtk_°©us_ic⁄_√w_‰om_pixbuf
 (
GdkPixbuf
 *
pixbuf
);

84 
GtkSètusIc⁄
 *
	`gtk_°©us_ic⁄_√w_‰om_fûe
 (c⁄° 
gch¨
 *
fûíame
);

85 
GtkSètusIc⁄
 *
	`gtk_°©us_ic⁄_√w_‰om_°ock
 (c⁄° 
gch¨
 *
°ock_id
);

86 
GtkSètusIc⁄
 *
	`gtk_°©us_ic⁄_√w_‰om_ic⁄_«me
 (c⁄° 
gch¨
 *
ic⁄_«me
);

87 
GtkSètusIc⁄
 *
	`gtk_°©us_ic⁄_√w_‰om_gic⁄
 (
GIc⁄
 *
ic⁄
);

89 
	`gtk_°©us_ic⁄_£t_‰om_pixbuf
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

90 
GdkPixbuf
 *
pixbuf
);

91 
	`gtk_°©us_ic⁄_£t_‰om_fûe
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

92 c⁄° 
gch¨
 *
fûíame
);

93 
	`gtk_°©us_ic⁄_£t_‰om_°ock
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

94 c⁄° 
gch¨
 *
°ock_id
);

95 
	`gtk_°©us_ic⁄_£t_‰om_ic⁄_«me
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

96 c⁄° 
gch¨
 *
ic⁄_«me
);

97 
	`gtk_°©us_ic⁄_£t_‰om_gic⁄
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

98 
GIc⁄
 *
ic⁄
);

100 
GtkImageTy≥
 
	`gtk_°©us_ic⁄_gë_°‹age_ty≥
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

102 
GdkPixbuf
 *
	`gtk_°©us_ic⁄_gë_pixbuf
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

103 
G_CONST_RETURN
 
gch¨
 *
	`gtk_°©us_ic⁄_gë_°ock
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

104 
G_CONST_RETURN
 
gch¨
 *
	`gtk_°©us_ic⁄_gë_ic⁄_«me
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

105 
GIc⁄
 *
	`gtk_°©us_ic⁄_gë_gic⁄
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

107 
göt
 
	`gtk_°©us_ic⁄_gë_size
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

109 
	`gtk_°©us_ic⁄_£t_s¸ìn
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

110 
GdkS¸ìn
 *
s¸ìn
);

111 
GdkS¸ìn
 *
	`gtk_°©us_ic⁄_gë_s¸ìn
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

113 #i‚de‡
GTK_DISABLE_DEPRECATED


114 
	`gtk_°©us_ic⁄_£t_toﬁtù
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

115 c⁄° 
gch¨
 *
toﬁtù_ãxt
);

117 
	`gtk_°©us_ic⁄_£t_has_toﬁtù
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

118 
gboﬁón
 
has_toﬁtù
);

119 
	`gtk_°©us_ic⁄_£t_toﬁtù_ãxt
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

120 c⁄° 
gch¨
 *
ãxt
);

121 
	`gtk_°©us_ic⁄_£t_toﬁtù_m¨kup
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

122 c⁄° 
gch¨
 *
m¨kup
);

123 
	`gtk_°©us_ic⁄_£t_tôÀ
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

124 c⁄° 
gch¨
 *
tôÀ
);

125 
G_CONST_RETURN
 
gch¨
 *
	`gtk_°©us_ic⁄_gë_tôÀ
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

126 
	`gtk_°©us_ic⁄_£t_«me
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

127 c⁄° 
gch¨
 *
«me
);

128 
	`gtk_°©us_ic⁄_£t_visibÀ
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

129 
gboﬁón
 
visibÀ
);

130 
gboﬁón
 
	`gtk_°©us_ic⁄_gë_visibÀ
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

132 
	`gtk_°©us_ic⁄_£t_blökög
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

133 
gboﬁón
 
blökög
);

134 
gboﬁón
 
	`gtk_°©us_ic⁄_gë_blökög
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

136 
gboﬁón
 
	`gtk_°©us_ic⁄_is_embedded
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

138 
	`gtk_°©us_ic⁄_posôi⁄_míu
 (
GtkMíu
 *
míu
,

139 
göt
 *
x
,

140 
göt
 *
y
,

141 
gboﬁón
 *
push_ö
,

142 
gpoöãr
 
u£r_d©a
);

143 
gboﬁón
 
	`gtk_°©us_ic⁄_gë_geomëry
 (
GtkSètusIc⁄
 *
°©us_ic⁄
,

144 
GdkS¸ìn
 **
s¸ìn
,

145 
GdkRe˘™gÀ
 *
¨ó
,

146 
GtkOrõ¡©i⁄
 *
‹õ¡©i⁄
);

147 
gboﬁón
 
	`gtk_°©us_ic⁄_gë_has_toﬁtù
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

148 
gch¨
 *
	`gtk_°©us_ic⁄_gë_toﬁtù_ãxt
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

149 
gch¨
 *
	`gtk_°©us_ic⁄_gë_toﬁtù_m¨kup
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

151 
guöt32
 
	`gtk_°©us_ic⁄_gë_x11_wödow_id
 (
GtkSètusIc⁄
 *
°©us_ic⁄
);

153 
G_END_DECLS


	@/usr/include/gtk/gtkstock.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_STOCK_H__


32 
	#__GTK_STOCK_H__


	)

35 
	~<gdk/gdk.h
>

36 
	~<gtk/gtkty≥utûs.h
>

38 
G_BEGIN_DECLS


40 
_GtkStockIãm
 
	tGtkStockIãm
;

42 
	s_GtkStockIãm


44 
gch¨
 *
	m°ock_id
;

45 
gch¨
 *
	mœbñ
;

46 
GdkModifõrTy≥
 
	mmodifõr
;

47 
guöt
 
	mkeyvÆ
;

48 
gch¨
 *
	må™¶©i⁄_domaö
;

51 
gtk_°ock_add
 (c⁄° 
GtkStockIãm
 *
ôems
,

52 
guöt
 
n_ôems
);

53 
gtk_°ock_add_°©ic
 (c⁄° 
GtkStockIãm
 *
ôems
,

54 
guöt
 
n_ôems
);

55 
gboﬁón
 
gtk_°ock_lookup
 (c⁄° 
gch¨
 *
°ock_id
,

56 
GtkStockIãm
 *
ôem
);

61 
GSLi°
* 
gtk_°ock_li°_ids
 ();

63 
GtkStockIãm
 *
gtk_°ock_ôem_c›y
 (c⁄° GtkStockIãm *
ôem
);

64 
gtk_°ock_ôem_‰ì
 (
GtkStockIãm
 *
ôem
);

66 
gtk_°ock_£t_å™¶©e_func
 (c⁄° 
gch¨
 *
domaö
,

67 
GtkTøn¶©eFunc
 
func
,

68 
gpoöãr
 
d©a
,

69 
GDe°royNŸify
 
nŸify
);

80 
	#GTK_STOCK_ABOUT
 "gtk-about"

	)

88 
	#GTK_STOCK_ADD
 "gtk-add"

	)

96 
	#GTK_STOCK_APPLY
 "gtk-≠∂y"

	)

104 
	#GTK_STOCK_BOLD
 "gtk-bﬁd"

	)

112 
	#GTK_STOCK_CANCEL
 "gtk-ˇn˚l"

	)

122 
	#GTK_STOCK_CAPS_LOCK_WARNING
 "gtk-ˇps-lock-w¨nög"

	)

130 
	#GTK_STOCK_CDROM
 "gtk-cdrom"

	)

138 
	#GTK_STOCK_CLEAR
 "gtk-˛ór"

	)

146 
	#GTK_STOCK_CLOSE
 "gtk-˛o£"

	)

156 
	#GTK_STOCK_COLOR_PICKER
 "gtk-cﬁ‹-pickî"

	)

166 
	#GTK_STOCK_CONNECT
 "gtk-c⁄√˘"

	)

174 
	#GTK_STOCK_CONVERT
 "gtk-c⁄vît"

	)

182 
	#GTK_STOCK_COPY
 "gtk-c›y"

	)

190 
	#GTK_STOCK_CUT
 "gtk-cut"

	)

198 
	#GTK_STOCK_DELETE
 "gtk-dñëe"

	)

208 
	#GTK_STOCK_DIALOG_AUTHENTICATION
 "gtk-dülog-authítiˇti⁄"

	)

216 
	#GTK_STOCK_DIALOG_INFO
 "gtk-dülog-öfo"

	)

224 
	#GTK_STOCK_DIALOG_WARNING
 "gtk-dülog-w¨nög"

	)

232 
	#GTK_STOCK_DIALOG_ERROR
 "gtk-dülog-îr‹"

	)

240 
	#GTK_STOCK_DIALOG_QUESTION
 "gtk-dülog-que°i⁄"

	)

250 
	#GTK_STOCK_DIRECTORY
 "gtk-dúe˘‹y"

	)

259 
	#GTK_STOCK_DISCARD
 "gtk-disˇrd"

	)

269 
	#GTK_STOCK_DISCONNECT
 "gtk-disc⁄√˘"

	)

277 
	#GTK_STOCK_DND
 "gtk-dnd"

	)

285 
	#GTK_STOCK_DND_MULTIPLE
 "gtk-dnd-mu…ùÀ"

	)

295 
	#GTK_STOCK_EDIT
 "gtk-edô"

	)

303 
	#GTK_STOCK_EXECUTE
 "gtk-execuã"

	)

313 
	#GTK_STOCK_FILE
 "gtk-fûe"

	)

321 
	#GTK_STOCK_FIND
 "gtk-föd"

	)

329 
	#GTK_STOCK_FIND_AND_REPLACE
 "gtk-föd-™d-ª∂a˚"

	)

337 
	#GTK_STOCK_FLOPPY
 "gtk-Ê›py"

	)

347 
	#GTK_STOCK_FULLSCREEN
 "gtk-fuŒs¸ìn"

	)

355 
	#GTK_STOCK_GOTO_BOTTOM
 "gtk-gŸo-bŸtom"

	)

365 
	#GTK_STOCK_GOTO_FIRST
 "gtk-gŸo-fú°"

	)

375 
	#GTK_STOCK_GOTO_LAST
 "gtk-gŸo-œ°"

	)

383 
	#GTK_STOCK_GOTO_TOP
 "gtk-gŸo-t›"

	)

393 
	#GTK_STOCK_GO_BACK
 "gtk-go-back"

	)

401 
	#GTK_STOCK_GO_DOWN
 "gtk-go-down"

	)

411 
	#GTK_STOCK_GO_FORWARD
 "gtk-go-f‹w¨d"

	)

419 
	#GTK_STOCK_GO_UP
 "gtk-go-up"

	)

429 
	#GTK_STOCK_HARDDISK
 "gtk-h¨ddisk"

	)

437 
	#GTK_STOCK_HELP
 "gtk-hñp"

	)

445 
	#GTK_STOCK_HOME
 "gtk-home"

	)

453 
	#GTK_STOCK_INDEX
 "gtk-ödex"

	)

465 
	#GTK_STOCK_INDENT
 "gtk-ödít"

	)

475 
	#GTK_STOCK_INFO
 "gtk-öfo"

	)

483 
	#GTK_STOCK_ITALIC
 "gtk-ôÆic"

	)

493 
	#GTK_STOCK_JUMP_TO
 "gtk-jump-to"

	)

501 
	#GTK_STOCK_JUSTIFY_CENTER
 "gtk-ju°ify-˚¡î"

	)

509 
	#GTK_STOCK_JUSTIFY_FILL
 "gtk-ju°ify-fûl"

	)

517 
	#GTK_STOCK_JUSTIFY_LEFT
 "gtk-ju°ify-À·"

	)

525 
	#GTK_STOCK_JUSTIFY_RIGHT
 "gtk-ju°ify-right"

	)

535 
	#GTK_STOCK_LEAVE_FULLSCREEN
 "gtk-Àave-fuŒs¸ìn"

	)

543 
	#GTK_STOCK_MISSING_IMAGE
 "gtk-missög-image"

	)

555 
	#GTK_STOCK_MEDIA_FORWARD
 "gtk-medü-f‹w¨d"

	)

567 
	#GTK_STOCK_MEDIA_NEXT
 "gtk-medü-√xt"

	)

577 
	#GTK_STOCK_MEDIA_PAUSE
 "gtk-medü-∑u£"

	)

589 
	#GTK_STOCK_MEDIA_PLAY
 "gtk-medü-∂ay"

	)

601 
	#GTK_STOCK_MEDIA_PREVIOUS
 "gtk-medü-¥evious"

	)

611 
	#GTK_STOCK_MEDIA_RECORD
 "gtk-medü-ªc‹d"

	)

623 
	#GTK_STOCK_MEDIA_REWIND
 "gtk-medü-ªwöd"

	)

633 
	#GTK_STOCK_MEDIA_STOP
 "gtk-medü-°›"

	)

643 
	#GTK_STOCK_NETWORK
 "gtk-√tw‹k"

	)

651 
	#GTK_STOCK_NEW
 "gtk-√w"

	)

659 
	#GTK_STOCK_NO
 "gtk-no"

	)

667 
	#GTK_STOCK_OK
 "gtk-ok"

	)

675 
	#GTK_STOCK_OPEN
 "gtk-›í"

	)

685 
	#GTK_STOCK_ORIENTATION_PORTRAIT
 "gtk-‹õ¡©i⁄-p‹åaô"

	)

695 
	#GTK_STOCK_ORIENTATION_LANDSCAPE
 "gtk-‹õ¡©i⁄-œndsˇ≥"

	)

705 
	#GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
 "gtk-‹õ¡©i⁄-ªvî£-œndsˇ≥"

	)

715 
	#GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
 "gtk-‹õ¡©i⁄-ªvî£-p‹åaô"

	)

725 
	#GTK_STOCK_PAGE_SETUP
 "gtk-∑ge-£tup"

	)

733 
	#GTK_STOCK_PASTE
 "gtk-∑°e"

	)

741 
	#GTK_STOCK_PREFERENCES
 "gtk-¥e„ªn˚s"

	)

749 
	#GTK_STOCK_PRINT
 "gtk-¥öt"

	)

759 
	#GTK_STOCK_PRINT_ERROR
 "gtk-¥öt-îr‹"

	)

769 
	#GTK_STOCK_PRINT_PAUSED
 "gtk-¥öt-∑u£d"

	)

777 
	#GTK_STOCK_PRINT_PREVIEW
 "gtk-¥öt-¥evõw"

	)

787 
	#GTK_STOCK_PRINT_REPORT
 "gtk-¥öt-ªp‹t"

	)

798 
	#GTK_STOCK_PRINT_WARNING
 "gtk-¥öt-w¨nög"

	)

806 
	#GTK_STOCK_PROPERTIES
 "gtk-¥›îtõs"

	)

814 
	#GTK_STOCK_QUIT
 "gtk-quô"

	)

824 
	#GTK_STOCK_REDO
 "gtk-ªdo"

	)

832 
	#GTK_STOCK_REFRESH
 "gtk-ª‰esh"

	)

840 
	#GTK_STOCK_REMOVE
 "gtk-ªmove"

	)

850 
	#GTK_STOCK_REVERT_TO_SAVED
 "gtk-ªvît-to-ßved"

	)

858 
	#GTK_STOCK_SAVE
 "gtk-ßve"

	)

866 
	#GTK_STOCK_SAVE_AS
 "gtk-ßve-as"

	)

876 
	#GTK_STOCK_SELECT_ALL
 "gtk-£À˘-Æl"

	)

884 
	#GTK_STOCK_SELECT_COLOR
 "gtk-£À˘-cﬁ‹"

	)

892 
	#GTK_STOCK_SELECT_FONT
 "gtk-£À˘-f⁄t"

	)

900 
	#GTK_STOCK_SORT_ASCENDING
 "gtk-s‹t-as˚ndög"

	)

908 
	#GTK_STOCK_SORT_DESCENDING
 "gtk-s‹t-des˚ndög"

	)

916 
	#GTK_STOCK_SPELL_CHECK
 "gtk-•ñl-check"

	)

924 
	#GTK_STOCK_STOP
 "gtk-°›"

	)

932 
	#GTK_STOCK_STRIKETHROUGH
 "gtk-°rikëhrough"

	)

942 
	#GTK_STOCK_UNDELETE
 "gtk-undñëe"

	)

950 
	#GTK_STOCK_UNDERLINE
 "gtk-undîlöe"

	)

960 
	#GTK_STOCK_UNDO
 "gtk-undo"

	)

972 
	#GTK_STOCK_UNINDENT
 "gtk-unödít"

	)

980 
	#GTK_STOCK_YES
 "gtk-yes"

	)

988 
	#GTK_STOCK_ZOOM_100
 "gtk-zoom-100"

	)

996 
	#GTK_STOCK_ZOOM_FIT
 "gtk-zoom-fô"

	)

1004 
	#GTK_STOCK_ZOOM_IN
 "gtk-zoom-ö"

	)

1012 
	#GTK_STOCK_ZOOM_OUT
 "gtk-zoom-out"

	)

1014 
	gG_END_DECLS


	@/usr/include/gtk/gtkstyle.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_STYLE_H__


32 
	#__GTK_STYLE_H__


	)

35 
	~<gdk/gdk.h
>

36 
	~<gtk/gtkíums.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_STYLE
 (
	`gtk_°yÀ_gë_ty≥
 ())

	)

42 
	#GTK_STYLE
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_STYLE
, 
GtkStyÀ
))

	)

43 
	#GTK_STYLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_STYLE
, 
GtkStyÀCœss
))

	)

44 
	#GTK_IS_STYLE
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_STYLE
))

	)

45 
	#GTK_IS_STYLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_STYLE
))

	)

46 
	#GTK_STYLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_STYLE
, 
GtkStyÀCœss
))

	)

48 
	#GTK_TYPE_BORDER
 (
	`gtk_b‹dî_gë_ty≥
 ())

	)

53 
_GtkB‹dî
 
	tGtkB‹dî
;

54 
_GtkStyÀ
 
	tGtkStyÀ
;

55 
_GtkStyÀCœss
 
	tGtkStyÀCœss
;

56 
_GtkThemeEngöe
 
	tGtkThemeEngöe
;

57 
_GtkRcStyÀ
 
	tGtkRcStyÀ
;

58 
_GtkIc⁄Së
 
	tGtkIc⁄Së
;

59 
_GtkIc⁄Sour˚
 
	tGtkIc⁄Sour˚
;

60 
_GtkRcPr›îty
 
	tGtkRcPr›îty
;

61 
_GtkSëtögs
 
	tGtkSëtögs
;

62 
	$gboﬁón
 (*
	tGtkRcPr›îtyP¨£r
Ë(c⁄° 
	tGP¨amS≥c
 *
	tp•ec
,

63 c⁄° 
	tGSåög
 *
	trc_°rög
,

64 
	tGVÆue
 *
	t¥›îty_vÆue
);

69 
_GtkWidgë
 
	tGtkWidgë
;

71 
	#GTK_STYLE_ATTACHED
(
°yÀ
Ë(
	`GTK_STYLE
 (°yÀ)->
©èch_cou¡
 > 0)

	)

73 
	s_GtkStyÀ


75 
GObje˘
 
∑ª¡_ö°™˚
;

79 
GdkCﬁ‹
 
fg
[5];

80 
GdkCﬁ‹
 
bg
[5];

81 
GdkCﬁ‹
 
light
[5];

82 
GdkCﬁ‹
 
d¨k
[5];

83 
GdkCﬁ‹
 
mid
[5];

84 
GdkCﬁ‹
 
ãxt
[5];

85 
GdkCﬁ‹
 
ba£
[5];

86 
GdkCﬁ‹
 
ãxt_Ø
[5];

88 
GdkCﬁ‹
 
bœck
;

89 
GdkCﬁ‹
 
whôe
;

90 
P™goF⁄tDes¸ùti⁄
 *
f⁄t_desc
;

92 
göt
 
xthick√ss
;

93 
göt
 
ythick√ss
;

95 
GdkGC
 *
fg_gc
[5];

96 
GdkGC
 *
bg_gc
[5];

97 
GdkGC
 *
light_gc
[5];

98 
GdkGC
 *
d¨k_gc
[5];

99 
GdkGC
 *
mid_gc
[5];

100 
GdkGC
 *
ãxt_gc
[5];

101 
GdkGC
 *
ba£_gc
[5];

102 
GdkGC
 *
ãxt_Ø_gc
[5];

103 
GdkGC
 *
bœck_gc
;

104 
GdkGC
 *
whôe_gc
;

106 
GdkPixm≠
 *
bg_pixm≠
[5];

110 
göt
 
©èch_cou¡
;

112 
göt
 
dïth
;

113 
GdkCﬁ‹m≠
 *
cﬁ‹m≠
;

114 
GdkF⁄t
 *
¥iv©e_f⁄t
;

115 
P™goF⁄tDes¸ùti⁄
 *
¥iv©e_f⁄t_desc
;

118 
GtkRcStyÀ
 *
rc_°yÀ
;

120 
GSLi°
 *
°yÀs
;

121 
GAºay
 *
¥›îty_ˇche
;

122 
GSLi°
 *
ic⁄_Á˘‹õs
;

125 
	s_GtkStyÀCœss


127 
GObje˘Cœss
 
∑ª¡_˛ass
;

133 (*
ªÆize
Ë(
GtkStyÀ
 *
°yÀ
);

138 (*
uƒólize
Ë(
GtkStyÀ
 *
°yÀ
);

142 (*
c›y
Ë(
GtkStyÀ
 *
°yÀ
,

143 
GtkStyÀ
 *
§c
);

150 
GtkStyÀ
 *(*
˛⁄e
Ë(GtkStyÀ *
°yÀ
);

155 (*
öô_‰om_rc
Ë(
GtkStyÀ
 *
°yÀ
,

156 
GtkRcStyÀ
 *
rc_°yÀ
);

158 (*
£t_background
Ë(
GtkStyÀ
 *
°yÀ
,

159 
GdkWödow
 *
wödow
,

160 
GtkSèãTy≥
 
°©e_ty≥
);

163 
GdkPixbuf
 * (* 
ªndî_ic⁄
Ë(
GtkStyÀ
 *
°yÀ
,

164 c⁄° 
GtkIc⁄Sour˚
 *
sour˚
,

165 
GtkTextDúe˘i⁄
 
dúe˘i⁄
,

166 
GtkSèãTy≥
 
°©e
,

167 
GtkIc⁄Size
 
size
,

168 
GtkWidgë
 *
widgë
,

169 c⁄° 
gch¨
 *
dëaû
);

174 (*
døw_hlöe
Ë(
GtkStyÀ
 *
°yÀ
,

175 
GdkWödow
 *
wödow
,

176 
GtkSèãTy≥
 
°©e_ty≥
,

177 
GdkRe˘™gÀ
 *
¨ó
,

178 
GtkWidgë
 *
widgë
,

179 c⁄° 
gch¨
 *
dëaû
,

180 
göt
 
x1
,

181 
göt
 
x2
,

182 
göt
 
y
);

183 (*
døw_vlöe
Ë(
GtkStyÀ
 *
°yÀ
,

184 
GdkWödow
 *
wödow
,

185 
GtkSèãTy≥
 
°©e_ty≥
,

186 
GdkRe˘™gÀ
 *
¨ó
,

187 
GtkWidgë
 *
widgë
,

188 c⁄° 
gch¨
 *
dëaû
,

189 
göt
 
y1_
,

190 
göt
 
y2_
,

191 
göt
 
x
);

192 (*
døw_shadow
Ë(
GtkStyÀ
 *
°yÀ
,

193 
GdkWödow
 *
wödow
,

194 
GtkSèãTy≥
 
°©e_ty≥
,

195 
GtkShadowTy≥
 
shadow_ty≥
,

196 
GdkRe˘™gÀ
 *
¨ó
,

197 
GtkWidgë
 *
widgë
,

198 c⁄° 
gch¨
 *
dëaû
,

199 
göt
 
x
,

200 
göt
 
y
,

201 
göt
 
width
,

202 
göt
 
height
);

203 (*
døw_pﬁyg⁄
Ë(
GtkStyÀ
 *
°yÀ
,

204 
GdkWödow
 *
wödow
,

205 
GtkSèãTy≥
 
°©e_ty≥
,

206 
GtkShadowTy≥
 
shadow_ty≥
,

207 
GdkRe˘™gÀ
 *
¨ó
,

208 
GtkWidgë
 *
widgë
,

209 c⁄° 
gch¨
 *
dëaû
,

210 
GdkPoöt
 *
poöt
,

211 
göt
 
≈oöts
,

212 
gboﬁón
 
fûl
);

213 (*
døw_¨row
Ë(
GtkStyÀ
 *
°yÀ
,

214 
GdkWödow
 *
wödow
,

215 
GtkSèãTy≥
 
°©e_ty≥
,

216 
GtkShadowTy≥
 
shadow_ty≥
,

217 
GdkRe˘™gÀ
 *
¨ó
,

218 
GtkWidgë
 *
widgë
,

219 c⁄° 
gch¨
 *
dëaû
,

220 
GtkAºowTy≥
 
¨row_ty≥
,

221 
gboﬁón
 
fûl
,

222 
göt
 
x
,

223 
göt
 
y
,

224 
göt
 
width
,

225 
göt
 
height
);

226 (*
døw_düm⁄d
Ë(
GtkStyÀ
 *
°yÀ
,

227 
GdkWödow
 *
wödow
,

228 
GtkSèãTy≥
 
°©e_ty≥
,

229 
GtkShadowTy≥
 
shadow_ty≥
,

230 
GdkRe˘™gÀ
 *
¨ó
,

231 
GtkWidgë
 *
widgë
,

232 c⁄° 
gch¨
 *
dëaû
,

233 
göt
 
x
,

234 
göt
 
y
,

235 
göt
 
width
,

236 
göt
 
height
);

237 (*
døw_°rög
Ë(
GtkStyÀ
 *
°yÀ
,

238 
GdkWödow
 *
wödow
,

239 
GtkSèãTy≥
 
°©e_ty≥
,

240 
GdkRe˘™gÀ
 *
¨ó
,

241 
GtkWidgë
 *
widgë
,

242 c⁄° 
gch¨
 *
dëaû
,

243 
göt
 
x
,

244 
göt
 
y
,

245 c⁄° 
gch¨
 *
°rög
);

246 (*
døw_box
Ë(
GtkStyÀ
 *
°yÀ
,

247 
GdkWödow
 *
wödow
,

248 
GtkSèãTy≥
 
°©e_ty≥
,

249 
GtkShadowTy≥
 
shadow_ty≥
,

250 
GdkRe˘™gÀ
 *
¨ó
,

251 
GtkWidgë
 *
widgë
,

252 c⁄° 
gch¨
 *
dëaû
,

253 
göt
 
x
,

254 
göt
 
y
,

255 
göt
 
width
,

256 
göt
 
height
);

257 (*
døw_Ê©_box
Ë(
GtkStyÀ
 *
°yÀ
,

258 
GdkWödow
 *
wödow
,

259 
GtkSèãTy≥
 
°©e_ty≥
,

260 
GtkShadowTy≥
 
shadow_ty≥
,

261 
GdkRe˘™gÀ
 *
¨ó
,

262 
GtkWidgë
 *
widgë
,

263 c⁄° 
gch¨
 *
dëaû
,

264 
göt
 
x
,

265 
göt
 
y
,

266 
göt
 
width
,

267 
göt
 
height
);

268 (*
døw_check
Ë(
GtkStyÀ
 *
°yÀ
,

269 
GdkWödow
 *
wödow
,

270 
GtkSèãTy≥
 
°©e_ty≥
,

271 
GtkShadowTy≥
 
shadow_ty≥
,

272 
GdkRe˘™gÀ
 *
¨ó
,

273 
GtkWidgë
 *
widgë
,

274 c⁄° 
gch¨
 *
dëaû
,

275 
göt
 
x
,

276 
göt
 
y
,

277 
göt
 
width
,

278 
göt
 
height
);

279 (*
døw_›ti⁄
Ë(
GtkStyÀ
 *
°yÀ
,

280 
GdkWödow
 *
wödow
,

281 
GtkSèãTy≥
 
°©e_ty≥
,

282 
GtkShadowTy≥
 
shadow_ty≥
,

283 
GdkRe˘™gÀ
 *
¨ó
,

284 
GtkWidgë
 *
widgë
,

285 c⁄° 
gch¨
 *
dëaû
,

286 
göt
 
x
,

287 
göt
 
y
,

288 
göt
 
width
,

289 
göt
 
height
);

290 (*
døw_èb
Ë(
GtkStyÀ
 *
°yÀ
,

291 
GdkWödow
 *
wödow
,

292 
GtkSèãTy≥
 
°©e_ty≥
,

293 
GtkShadowTy≥
 
shadow_ty≥
,

294 
GdkRe˘™gÀ
 *
¨ó
,

295 
GtkWidgë
 *
widgë
,

296 c⁄° 
gch¨
 *
dëaû
,

297 
göt
 
x
,

298 
göt
 
y
,

299 
göt
 
width
,

300 
göt
 
height
);

301 (*
døw_shadow_g≠
Ë(
GtkStyÀ
 *
°yÀ
,

302 
GdkWödow
 *
wödow
,

303 
GtkSèãTy≥
 
°©e_ty≥
,

304 
GtkShadowTy≥
 
shadow_ty≥
,

305 
GdkRe˘™gÀ
 *
¨ó
,

306 
GtkWidgë
 *
widgë
,

307 c⁄° 
gch¨
 *
dëaû
,

308 
göt
 
x
,

309 
göt
 
y
,

310 
göt
 
width
,

311 
göt
 
height
,

312 
GtkPosôi⁄Ty≥
 
g≠_side
,

313 
göt
 
g≠_x
,

314 
göt
 
g≠_width
);

315 (*
døw_box_g≠
Ë(
GtkStyÀ
 *
°yÀ
,

316 
GdkWödow
 *
wödow
,

317 
GtkSèãTy≥
 
°©e_ty≥
,

318 
GtkShadowTy≥
 
shadow_ty≥
,

319 
GdkRe˘™gÀ
 *
¨ó
,

320 
GtkWidgë
 *
widgë
,

321 c⁄° 
gch¨
 *
dëaû
,

322 
göt
 
x
,

323 
göt
 
y
,

324 
göt
 
width
,

325 
göt
 
height
,

326 
GtkPosôi⁄Ty≥
 
g≠_side
,

327 
göt
 
g≠_x
,

328 
göt
 
g≠_width
);

329 (*
døw_exãnsi⁄
Ë(
GtkStyÀ
 *
°yÀ
,

330 
GdkWödow
 *
wödow
,

331 
GtkSèãTy≥
 
°©e_ty≥
,

332 
GtkShadowTy≥
 
shadow_ty≥
,

333 
GdkRe˘™gÀ
 *
¨ó
,

334 
GtkWidgë
 *
widgë
,

335 c⁄° 
gch¨
 *
dëaû
,

336 
göt
 
x
,

337 
göt
 
y
,

338 
göt
 
width
,

339 
göt
 
height
,

340 
GtkPosôi⁄Ty≥
 
g≠_side
);

341 (*
døw_focus
Ë(
GtkStyÀ
 *
°yÀ
,

342 
GdkWödow
 *
wödow
,

343 
GtkSèãTy≥
 
°©e_ty≥
,

344 
GdkRe˘™gÀ
 *
¨ó
,

345 
GtkWidgë
 *
widgë
,

346 c⁄° 
gch¨
 *
dëaû
,

347 
göt
 
x
,

348 
göt
 
y
,

349 
göt
 
width
,

350 
göt
 
height
);

351 (*
døw_¶idî
Ë(
GtkStyÀ
 *
°yÀ
,

352 
GdkWödow
 *
wödow
,

353 
GtkSèãTy≥
 
°©e_ty≥
,

354 
GtkShadowTy≥
 
shadow_ty≥
,

355 
GdkRe˘™gÀ
 *
¨ó
,

356 
GtkWidgë
 *
widgë
,

357 c⁄° 
gch¨
 *
dëaû
,

358 
göt
 
x
,

359 
göt
 
y
,

360 
göt
 
width
,

361 
göt
 
height
,

362 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

363 (*
døw_h™dÀ
Ë(
GtkStyÀ
 *
°yÀ
,

364 
GdkWödow
 *
wödow
,

365 
GtkSèãTy≥
 
°©e_ty≥
,

366 
GtkShadowTy≥
 
shadow_ty≥
,

367 
GdkRe˘™gÀ
 *
¨ó
,

368 
GtkWidgë
 *
widgë
,

369 c⁄° 
gch¨
 *
dëaû
,

370 
göt
 
x
,

371 
göt
 
y
,

372 
göt
 
width
,

373 
göt
 
height
,

374 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

376 (*
døw_ex∑ndî
Ë(
GtkStyÀ
 *
°yÀ
,

377 
GdkWödow
 *
wödow
,

378 
GtkSèãTy≥
 
°©e_ty≥
,

379 
GdkRe˘™gÀ
 *
¨ó
,

380 
GtkWidgë
 *
widgë
,

381 c⁄° 
gch¨
 *
dëaû
,

382 
göt
 
x
,

383 
göt
 
y
,

384 
GtkEx∑ndîStyÀ
 
ex∑ndî_°yÀ
);

385 (*
døw_œyout
Ë(
GtkStyÀ
 *
°yÀ
,

386 
GdkWödow
 *
wödow
,

387 
GtkSèãTy≥
 
°©e_ty≥
,

388 
gboﬁón
 
u£_ãxt
,

389 
GdkRe˘™gÀ
 *
¨ó
,

390 
GtkWidgë
 *
widgë
,

391 c⁄° 
gch¨
 *
dëaû
,

392 
göt
 
x
,

393 
göt
 
y
,

394 
P™goLayout
 *
œyout
);

395 (*
døw_ªsize_grù
Ë(
GtkStyÀ
 *
°yÀ
,

396 
GdkWödow
 *
wödow
,

397 
GtkSèãTy≥
 
°©e_ty≥
,

398 
GdkRe˘™gÀ
 *
¨ó
,

399 
GtkWidgë
 *
widgë
,

400 c⁄° 
gch¨
 *
dëaû
,

401 
GdkWödowEdge
 
edge
,

402 
göt
 
x
,

403 
göt
 
y
,

404 
göt
 
width
,

405 
göt
 
height
);

406 (*
døw_•ö√r
Ë(
GtkStyÀ
 *
°yÀ
,

407 
GdkWödow
 *
wödow
,

408 
GtkSèãTy≥
 
°©e_ty≥
,

409 
GdkRe˘™gÀ
 *
¨ó
,

410 
GtkWidgë
 *
widgë
,

411 c⁄° 
gch¨
 *
dëaû
,

412 
guöt
 
°ï
,

413 
göt
 
x
,

414 
göt
 
y
,

415 
göt
 
width
,

416 
göt
 
height
);

419 (*
_gtk_ª£rved1
) ();

420 (*
_gtk_ª£rved2
) ();

421 (*
_gtk_ª£rved3
) ();

422 (*
_gtk_ª£rved4
) ();

423 (*
_gtk_ª£rved5
) ();

424 (*
_gtk_ª£rved6
) ();

425 (*
_gtk_ª£rved7
) ();

426 (*
_gtk_ª£rved8
) ();

427 (*
_gtk_ª£rved9
) ();

428 (*
_gtk_ª£rved10
) ();

429 (*
_gtk_ª£rved11
) ();

432 
	s_GtkB‹dî


434 
göt
 
À·
;

435 
göt
 
right
;

436 
göt
 
t›
;

437 
göt
 
bŸtom
;

440 
GTy≥
 
	$gtk_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

441 
GtkStyÀ
* 
	`gtk_°yÀ_√w
 ();

442 
GtkStyÀ
* 
	`gtk_°yÀ_c›y
 (GtkStyÀ *
°yÀ
);

443 
GtkStyÀ
* 
	$gtk_°yÀ_©èch
 (
GtkStyÀ
 *
°yÀ
,

444 
GdkWödow
 *
wödow
Ë
G_GNUC_WARN_UNUSED_RESULT
;

445 
	`gtk_°yÀ_dëach
 (
GtkStyÀ
 *
°yÀ
);

447 #i‚de‡
GTK_DISABLE_DEPRECATED


448 
GtkStyÀ
* 
	`gtk_°yÀ_ªf
 (GtkStyÀ *
°yÀ
);

449 
	`gtk_°yÀ_uƒef
 (
GtkStyÀ
 *
°yÀ
);

451 
GdkF⁄t
 * 
	`gtk_°yÀ_gë_f⁄t
 (
GtkStyÀ
 *
°yÀ
);

452 
	`gtk_°yÀ_£t_f⁄t
 (
GtkStyÀ
 *
°yÀ
,

453 
GdkF⁄t
 *
f⁄t
);

456 
	`gtk_°yÀ_£t_background
 (
GtkStyÀ
 *
°yÀ
,

457 
GdkWödow
 *
wödow
,

458 
GtkSèãTy≥
 
°©e_ty≥
);

459 
	`gtk_°yÀ_≠∂y_deÁu…_background
 (
GtkStyÀ
 *
°yÀ
,

460 
GdkWödow
 *
wödow
,

461 
gboﬁón
 
£t_bg
,

462 
GtkSèãTy≥
 
°©e_ty≥
,

463 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

464 
göt
 
x
,

465 
göt
 
y
,

466 
göt
 
width
,

467 
göt
 
height
);

469 
GtkIc⁄Së
* 
	`gtk_°yÀ_lookup_ic⁄_£t
 (
GtkStyÀ
 *
°yÀ
,

470 c⁄° 
gch¨
 *
°ock_id
);

471 
gboﬁón
 
	`gtk_°yÀ_lookup_cﬁ‹
 (
GtkStyÀ
 *
°yÀ
,

472 c⁄° 
gch¨
 *
cﬁ‹_«me
,

473 
GdkCﬁ‹
 *
cﬁ‹
);

475 
GdkPixbuf
* 
	`gtk_°yÀ_ªndî_ic⁄
 (
GtkStyÀ
 *
°yÀ
,

476 c⁄° 
GtkIc⁄Sour˚
 *
sour˚
,

477 
GtkTextDúe˘i⁄
 
dúe˘i⁄
,

478 
GtkSèãTy≥
 
°©e
,

479 
GtkIc⁄Size
 
size
,

480 
GtkWidgë
 *
widgë
,

481 c⁄° 
gch¨
 *
dëaû
);

483 #i‚de‡
GTK_DISABLE_DEPRECATED


484 
	`gtk_døw_hlöe
 (
GtkStyÀ
 *
°yÀ
,

485 
GdkWödow
 *
wödow
,

486 
GtkSèãTy≥
 
°©e_ty≥
,

487 
göt
 
x1
,

488 
göt
 
x2
,

489 
göt
 
y
);

490 
	`gtk_døw_vlöe
 (
GtkStyÀ
 *
°yÀ
,

491 
GdkWödow
 *
wödow
,

492 
GtkSèãTy≥
 
°©e_ty≥
,

493 
göt
 
y1_
,

494 
göt
 
y2_
,

495 
göt
 
x
);

496 
	`gtk_døw_shadow
 (
GtkStyÀ
 *
°yÀ
,

497 
GdkWödow
 *
wödow
,

498 
GtkSèãTy≥
 
°©e_ty≥
,

499 
GtkShadowTy≥
 
shadow_ty≥
,

500 
göt
 
x
,

501 
göt
 
y
,

502 
göt
 
width
,

503 
göt
 
height
);

504 
	`gtk_døw_pﬁyg⁄
 (
GtkStyÀ
 *
°yÀ
,

505 
GdkWödow
 *
wödow
,

506 
GtkSèãTy≥
 
°©e_ty≥
,

507 
GtkShadowTy≥
 
shadow_ty≥
,

508 
GdkPoöt
 *
poöts
,

509 
göt
 
≈oöts
,

510 
gboﬁón
 
fûl
);

511 
	`gtk_døw_¨row
 (
GtkStyÀ
 *
°yÀ
,

512 
GdkWödow
 *
wödow
,

513 
GtkSèãTy≥
 
°©e_ty≥
,

514 
GtkShadowTy≥
 
shadow_ty≥
,

515 
GtkAºowTy≥
 
¨row_ty≥
,

516 
gboﬁón
 
fûl
,

517 
göt
 
x
,

518 
göt
 
y
,

519 
göt
 
width
,

520 
göt
 
height
);

521 
	`gtk_døw_düm⁄d
 (
GtkStyÀ
 *
°yÀ
,

522 
GdkWödow
 *
wödow
,

523 
GtkSèãTy≥
 
°©e_ty≥
,

524 
GtkShadowTy≥
 
shadow_ty≥
,

525 
göt
 
x
,

526 
göt
 
y
,

527 
göt
 
width
,

528 
göt
 
height
);

529 
	`gtk_døw_box
 (
GtkStyÀ
 *
°yÀ
,

530 
GdkWödow
 *
wödow
,

531 
GtkSèãTy≥
 
°©e_ty≥
,

532 
GtkShadowTy≥
 
shadow_ty≥
,

533 
göt
 
x
,

534 
göt
 
y
,

535 
göt
 
width
,

536 
göt
 
height
);

537 
	`gtk_døw_Ê©_box
 (
GtkStyÀ
 *
°yÀ
,

538 
GdkWödow
 *
wödow
,

539 
GtkSèãTy≥
 
°©e_ty≥
,

540 
GtkShadowTy≥
 
shadow_ty≥
,

541 
göt
 
x
,

542 
göt
 
y
,

543 
göt
 
width
,

544 
göt
 
height
);

545 
	`gtk_døw_check
 (
GtkStyÀ
 *
°yÀ
,

546 
GdkWödow
 *
wödow
,

547 
GtkSèãTy≥
 
°©e_ty≥
,

548 
GtkShadowTy≥
 
shadow_ty≥
,

549 
göt
 
x
,

550 
göt
 
y
,

551 
göt
 
width
,

552 
göt
 
height
);

553 
	`gtk_døw_›ti⁄
 (
GtkStyÀ
 *
°yÀ
,

554 
GdkWödow
 *
wödow
,

555 
GtkSèãTy≥
 
°©e_ty≥
,

556 
GtkShadowTy≥
 
shadow_ty≥
,

557 
göt
 
x
,

558 
göt
 
y
,

559 
göt
 
width
,

560 
göt
 
height
);

561 
	`gtk_døw_èb
 (
GtkStyÀ
 *
°yÀ
,

562 
GdkWödow
 *
wödow
,

563 
GtkSèãTy≥
 
°©e_ty≥
,

564 
GtkShadowTy≥
 
shadow_ty≥
,

565 
göt
 
x
,

566 
göt
 
y
,

567 
göt
 
width
,

568 
göt
 
height
);

569 
	`gtk_døw_shadow_g≠
 (
GtkStyÀ
 *
°yÀ
,

570 
GdkWödow
 *
wödow
,

571 
GtkSèãTy≥
 
°©e_ty≥
,

572 
GtkShadowTy≥
 
shadow_ty≥
,

573 
göt
 
x
,

574 
göt
 
y
,

575 
göt
 
width
,

576 
göt
 
height
,

577 
GtkPosôi⁄Ty≥
 
g≠_side
,

578 
göt
 
g≠_x
,

579 
göt
 
g≠_width
);

580 
	`gtk_døw_box_g≠
 (
GtkStyÀ
 *
°yÀ
,

581 
GdkWödow
 *
wödow
,

582 
GtkSèãTy≥
 
°©e_ty≥
,

583 
GtkShadowTy≥
 
shadow_ty≥
,

584 
göt
 
x
,

585 
göt
 
y
,

586 
göt
 
width
,

587 
göt
 
height
,

588 
GtkPosôi⁄Ty≥
 
g≠_side
,

589 
göt
 
g≠_x
,

590 
göt
 
g≠_width
);

591 
	`gtk_døw_exãnsi⁄
 (
GtkStyÀ
 *
°yÀ
,

592 
GdkWödow
 *
wödow
,

593 
GtkSèãTy≥
 
°©e_ty≥
,

594 
GtkShadowTy≥
 
shadow_ty≥
,

595 
göt
 
x
,

596 
göt
 
y
,

597 
göt
 
width
,

598 
göt
 
height
,

599 
GtkPosôi⁄Ty≥
 
g≠_side
);

600 
	`gtk_døw_focus
 (
GtkStyÀ
 *
°yÀ
,

601 
GdkWödow
 *
wödow
,

602 
göt
 
x
,

603 
göt
 
y
,

604 
göt
 
width
,

605 
göt
 
height
);

606 
	`gtk_døw_¶idî
 (
GtkStyÀ
 *
°yÀ
,

607 
GdkWödow
 *
wödow
,

608 
GtkSèãTy≥
 
°©e_ty≥
,

609 
GtkShadowTy≥
 
shadow_ty≥
,

610 
göt
 
x
,

611 
göt
 
y
,

612 
göt
 
width
,

613 
göt
 
height
,

614 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

615 
	`gtk_døw_h™dÀ
 (
GtkStyÀ
 *
°yÀ
,

616 
GdkWödow
 *
wödow
,

617 
GtkSèãTy≥
 
°©e_ty≥
,

618 
GtkShadowTy≥
 
shadow_ty≥
,

619 
göt
 
x
,

620 
göt
 
y
,

621 
göt
 
width
,

622 
göt
 
height
,

623 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

624 
	`gtk_døw_ex∑ndî
 (
GtkStyÀ
 *
°yÀ
,

625 
GdkWödow
 *
wödow
,

626 
GtkSèãTy≥
 
°©e_ty≥
,

627 
göt
 
x
,

628 
göt
 
y
,

629 
GtkEx∑ndîStyÀ
 
ex∑ndî_°yÀ
);

630 
	`gtk_døw_œyout
 (
GtkStyÀ
 *
°yÀ
,

631 
GdkWödow
 *
wödow
,

632 
GtkSèãTy≥
 
°©e_ty≥
,

633 
gboﬁón
 
u£_ãxt
,

634 
göt
 
x
,

635 
göt
 
y
,

636 
P™goLayout
 *
œyout
);

637 
	`gtk_døw_ªsize_grù
 (
GtkStyÀ
 *
°yÀ
,

638 
GdkWödow
 *
wödow
,

639 
GtkSèãTy≥
 
°©e_ty≥
,

640 
GdkWödowEdge
 
edge
,

641 
göt
 
x
,

642 
göt
 
y
,

643 
göt
 
width
,

644 
göt
 
height
);

647 
	`gtk_∑öt_hlöe
 (
GtkStyÀ
 *
°yÀ
,

648 
GdkWödow
 *
wödow
,

649 
GtkSèãTy≥
 
°©e_ty≥
,

650 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

651 
GtkWidgë
 *
widgë
,

652 c⁄° 
gch¨
 *
dëaû
,

653 
göt
 
x1
,

654 
göt
 
x2
,

655 
göt
 
y
);

656 
	`gtk_∑öt_vlöe
 (
GtkStyÀ
 *
°yÀ
,

657 
GdkWödow
 *
wödow
,

658 
GtkSèãTy≥
 
°©e_ty≥
,

659 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

660 
GtkWidgë
 *
widgë
,

661 c⁄° 
gch¨
 *
dëaû
,

662 
göt
 
y1_
,

663 
göt
 
y2_
,

664 
göt
 
x
);

665 
	`gtk_∑öt_shadow
 (
GtkStyÀ
 *
°yÀ
,

666 
GdkWödow
 *
wödow
,

667 
GtkSèãTy≥
 
°©e_ty≥
,

668 
GtkShadowTy≥
 
shadow_ty≥
,

669 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

670 
GtkWidgë
 *
widgë
,

671 c⁄° 
gch¨
 *
dëaû
,

672 
göt
 
x
,

673 
göt
 
y
,

674 
göt
 
width
,

675 
göt
 
height
);

676 
	`gtk_∑öt_pﬁyg⁄
 (
GtkStyÀ
 *
°yÀ
,

677 
GdkWödow
 *
wödow
,

678 
GtkSèãTy≥
 
°©e_ty≥
,

679 
GtkShadowTy≥
 
shadow_ty≥
,

680 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

681 
GtkWidgë
 *
widgë
,

682 c⁄° 
gch¨
 *
dëaû
,

683 c⁄° 
GdkPoöt
 *
poöts
,

684 
göt
 
n_poöts
,

685 
gboﬁón
 
fûl
);

686 
	`gtk_∑öt_¨row
 (
GtkStyÀ
 *
°yÀ
,

687 
GdkWödow
 *
wödow
,

688 
GtkSèãTy≥
 
°©e_ty≥
,

689 
GtkShadowTy≥
 
shadow_ty≥
,

690 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

691 
GtkWidgë
 *
widgë
,

692 c⁄° 
gch¨
 *
dëaû
,

693 
GtkAºowTy≥
 
¨row_ty≥
,

694 
gboﬁón
 
fûl
,

695 
göt
 
x
,

696 
göt
 
y
,

697 
göt
 
width
,

698 
göt
 
height
);

699 
	`gtk_∑öt_düm⁄d
 (
GtkStyÀ
 *
°yÀ
,

700 
GdkWödow
 *
wödow
,

701 
GtkSèãTy≥
 
°©e_ty≥
,

702 
GtkShadowTy≥
 
shadow_ty≥
,

703 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

704 
GtkWidgë
 *
widgë
,

705 c⁄° 
gch¨
 *
dëaû
,

706 
göt
 
x
,

707 
göt
 
y
,

708 
göt
 
width
,

709 
göt
 
height
);

710 
	`gtk_∑öt_box
 (
GtkStyÀ
 *
°yÀ
,

711 
GdkWödow
 *
wödow
,

712 
GtkSèãTy≥
 
°©e_ty≥
,

713 
GtkShadowTy≥
 
shadow_ty≥
,

714 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

715 
GtkWidgë
 *
widgë
,

716 c⁄° 
gch¨
 *
dëaû
,

717 
göt
 
x
,

718 
göt
 
y
,

719 
göt
 
width
,

720 
göt
 
height
);

721 
	`gtk_∑öt_Ê©_box
 (
GtkStyÀ
 *
°yÀ
,

722 
GdkWödow
 *
wödow
,

723 
GtkSèãTy≥
 
°©e_ty≥
,

724 
GtkShadowTy≥
 
shadow_ty≥
,

725 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

726 
GtkWidgë
 *
widgë
,

727 c⁄° 
gch¨
 *
dëaû
,

728 
göt
 
x
,

729 
göt
 
y
,

730 
göt
 
width
,

731 
göt
 
height
);

732 
	`gtk_∑öt_check
 (
GtkStyÀ
 *
°yÀ
,

733 
GdkWödow
 *
wödow
,

734 
GtkSèãTy≥
 
°©e_ty≥
,

735 
GtkShadowTy≥
 
shadow_ty≥
,

736 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

737 
GtkWidgë
 *
widgë
,

738 c⁄° 
gch¨
 *
dëaû
,

739 
göt
 
x
,

740 
göt
 
y
,

741 
göt
 
width
,

742 
göt
 
height
);

743 
	`gtk_∑öt_›ti⁄
 (
GtkStyÀ
 *
°yÀ
,

744 
GdkWödow
 *
wödow
,

745 
GtkSèãTy≥
 
°©e_ty≥
,

746 
GtkShadowTy≥
 
shadow_ty≥
,

747 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

748 
GtkWidgë
 *
widgë
,

749 c⁄° 
gch¨
 *
dëaû
,

750 
göt
 
x
,

751 
göt
 
y
,

752 
göt
 
width
,

753 
göt
 
height
);

754 
	`gtk_∑öt_èb
 (
GtkStyÀ
 *
°yÀ
,

755 
GdkWödow
 *
wödow
,

756 
GtkSèãTy≥
 
°©e_ty≥
,

757 
GtkShadowTy≥
 
shadow_ty≥
,

758 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

759 
GtkWidgë
 *
widgë
,

760 c⁄° 
gch¨
 *
dëaû
,

761 
göt
 
x
,

762 
göt
 
y
,

763 
göt
 
width
,

764 
göt
 
height
);

765 
	`gtk_∑öt_shadow_g≠
 (
GtkStyÀ
 *
°yÀ
,

766 
GdkWödow
 *
wödow
,

767 
GtkSèãTy≥
 
°©e_ty≥
,

768 
GtkShadowTy≥
 
shadow_ty≥
,

769 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

770 
GtkWidgë
 *
widgë
,

771 c⁄° 
gch¨
 *
dëaû
,

772 
göt
 
x
,

773 
göt
 
y
,

774 
göt
 
width
,

775 
göt
 
height
,

776 
GtkPosôi⁄Ty≥
 
g≠_side
,

777 
göt
 
g≠_x
,

778 
göt
 
g≠_width
);

779 
	`gtk_∑öt_box_g≠
 (
GtkStyÀ
 *
°yÀ
,

780 
GdkWödow
 *
wödow
,

781 
GtkSèãTy≥
 
°©e_ty≥
,

782 
GtkShadowTy≥
 
shadow_ty≥
,

783 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

784 
GtkWidgë
 *
widgë
,

785 c⁄° 
gch¨
 *
dëaû
,

786 
göt
 
x
,

787 
göt
 
y
,

788 
göt
 
width
,

789 
göt
 
height
,

790 
GtkPosôi⁄Ty≥
 
g≠_side
,

791 
göt
 
g≠_x
,

792 
göt
 
g≠_width
);

793 
	`gtk_∑öt_exãnsi⁄
 (
GtkStyÀ
 *
°yÀ
,

794 
GdkWödow
 *
wödow
,

795 
GtkSèãTy≥
 
°©e_ty≥
,

796 
GtkShadowTy≥
 
shadow_ty≥
,

797 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

798 
GtkWidgë
 *
widgë
,

799 c⁄° 
gch¨
 *
dëaû
,

800 
göt
 
x
,

801 
göt
 
y
,

802 
göt
 
width
,

803 
göt
 
height
,

804 
GtkPosôi⁄Ty≥
 
g≠_side
);

805 
	`gtk_∑öt_focus
 (
GtkStyÀ
 *
°yÀ
,

806 
GdkWödow
 *
wödow
,

807 
GtkSèãTy≥
 
°©e_ty≥
,

808 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

809 
GtkWidgë
 *
widgë
,

810 c⁄° 
gch¨
 *
dëaû
,

811 
göt
 
x
,

812 
göt
 
y
,

813 
göt
 
width
,

814 
göt
 
height
);

815 
	`gtk_∑öt_¶idî
 (
GtkStyÀ
 *
°yÀ
,

816 
GdkWödow
 *
wödow
,

817 
GtkSèãTy≥
 
°©e_ty≥
,

818 
GtkShadowTy≥
 
shadow_ty≥
,

819 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

820 
GtkWidgë
 *
widgë
,

821 c⁄° 
gch¨
 *
dëaû
,

822 
göt
 
x
,

823 
göt
 
y
,

824 
göt
 
width
,

825 
göt
 
height
,

826 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

827 
	`gtk_∑öt_h™dÀ
 (
GtkStyÀ
 *
°yÀ
,

828 
GdkWödow
 *
wödow
,

829 
GtkSèãTy≥
 
°©e_ty≥
,

830 
GtkShadowTy≥
 
shadow_ty≥
,

831 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

832 
GtkWidgë
 *
widgë
,

833 c⁄° 
gch¨
 *
dëaû
,

834 
göt
 
x
,

835 
göt
 
y
,

836 
göt
 
width
,

837 
göt
 
height
,

838 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

839 
	`gtk_∑öt_ex∑ndî
 (
GtkStyÀ
 *
°yÀ
,

840 
GdkWödow
 *
wödow
,

841 
GtkSèãTy≥
 
°©e_ty≥
,

842 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

843 
GtkWidgë
 *
widgë
,

844 c⁄° 
gch¨
 *
dëaû
,

845 
göt
 
x
,

846 
göt
 
y
,

847 
GtkEx∑ndîStyÀ
 
ex∑ndî_°yÀ
);

848 
	`gtk_∑öt_œyout
 (
GtkStyÀ
 *
°yÀ
,

849 
GdkWödow
 *
wödow
,

850 
GtkSèãTy≥
 
°©e_ty≥
,

851 
gboﬁón
 
u£_ãxt
,

852 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

853 
GtkWidgë
 *
widgë
,

854 c⁄° 
gch¨
 *
dëaû
,

855 
göt
 
x
,

856 
göt
 
y
,

857 
P™goLayout
 *
œyout
);

858 
	`gtk_∑öt_ªsize_grù
 (
GtkStyÀ
 *
°yÀ
,

859 
GdkWödow
 *
wödow
,

860 
GtkSèãTy≥
 
°©e_ty≥
,

861 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

862 
GtkWidgë
 *
widgë
,

863 c⁄° 
gch¨
 *
dëaû
,

864 
GdkWödowEdge
 
edge
,

865 
göt
 
x
,

866 
göt
 
y
,

867 
göt
 
width
,

868 
göt
 
height
);

869 
	`gtk_∑öt_•ö√r
 (
GtkStyÀ
 *
°yÀ
,

870 
GdkWödow
 *
wödow
,

871 
GtkSèãTy≥
 
°©e_ty≥
,

872 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

873 
GtkWidgë
 *
widgë
,

874 c⁄° 
gch¨
 *
dëaû
,

875 
guöt
 
°ï
,

876 
göt
 
x
,

877 
göt
 
y
,

878 
göt
 
width
,

879 
göt
 
height
);

881 
GTy≥
 
	$gtk_b‹dî_gë_ty≥
 (Ë
G_GNUC_CONST
;

882 
GtkB‹dî
 *
	$gtk_b‹dî_√w
 (Ë
G_GNUC_MALLOC
;

883 
GtkB‹dî
 *
	`gtk_b‹dî_c›y
 (c⁄° GtkB‹dî *
b‹dî_
);

884 
	`gtk_b‹dî_‰ì
 (
GtkB‹dî
 *
b‹dî_
);

886 
	`gtk_°yÀ_gë_°yÀ_¥›îty
 (
GtkStyÀ
 *
°yÀ
,

887 
GTy≥
 
widgë_ty≥
,

888 c⁄° 
gch¨
 *
¥›îty_«me
,

889 
GVÆue
 *
vÆue
);

890 
	`gtk_°yÀ_gë_vÆi°
 (
GtkStyÀ
 *
°yÀ
,

891 
GTy≥
 
widgë_ty≥
,

892 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

893 
va_li°
 
v¨_¨gs
);

894 
	$gtk_°yÀ_gë
 (
GtkStyÀ
 *
°yÀ
,

895 
GTy≥
 
widgë_ty≥
,

896 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

897 ...Ë
G_GNUC_NULL_TERMINATED
;

900 c⁄° 
GVÆue
* 
	`_gtk_°yÀ_≥ek_¥›îty_vÆue
 (
GtkStyÀ
 *
°yÀ
,

901 
GTy≥
 
widgë_ty≥
,

902 
GP¨amS≥c
 *
p•ec
,

903 
GtkRcPr›îtyP¨£r
 
∑r£r
);

905 
	`_gtk_°yÀ_öô_f‹_£âögs
 (
GtkStyÀ
 *
°yÀ
,

906 
GtkSëtögs
 *
£âögs
);

908 
	`_gtk_°yÀ_shade
 (c⁄° 
GdkCﬁ‹
 *
a
,

909 
GdkCﬁ‹
 *
b
,

910 
gdoubÀ
 
k
);

913 #i‚de‡
GTK_DISABLE_DEPRECATED


914 
	#gtk_°yÀ_≠∂y_deÁu…_pixm≠
(
s
,
gw
,
°
,
a
,
x
,
y
,
w
,
h
Ë
	`gtk_°yÀ_≠∂y_deÁu…_background
 (s,gw,1,°,a,x,y,w,h)

	)

915 
	`gtk_døw_°rög
 (
GtkStyÀ
 *
°yÀ
,

916 
GdkWödow
 *
wödow
,

917 
GtkSèãTy≥
 
°©e_ty≥
,

918 
göt
 
x
,

919 
göt
 
y
,

920 c⁄° 
gch¨
 *
°rög
);

921 
	`gtk_∑öt_°rög
 (
GtkStyÀ
 *
°yÀ
,

922 
GdkWödow
 *
wödow
,

923 
GtkSèãTy≥
 
°©e_ty≥
,

924 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

925 
GtkWidgë
 *
widgë
,

926 c⁄° 
gch¨
 *
dëaû
,

927 
göt
 
x
,

928 
göt
 
y
,

929 c⁄° 
gch¨
 *
°rög
);

932 
	`gtk_døw_ö£πi⁄_curs‹
 (
GtkWidgë
 *
widgë
,

933 
GdkDøwabÀ
 *
døwabÀ
,

934 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

935 c⁄° 
GdkRe˘™gÀ
 *
loˇti⁄
,

936 
gboﬁón
 
is_¥im¨y
,

937 
GtkTextDúe˘i⁄
 
dúe˘i⁄
,

938 
gboﬁón
 
døw_¨row
);

939 
GdkGC
 *
	`_gtk_widgë_gë_curs‹_gc
 (
GtkWidgë
 *
widgë
);

940 
	`_gtk_widgë_gë_curs‹_cﬁ‹
 (
GtkWidgë
 *
widgë
,

941 
GdkCﬁ‹
 *
cﬁ‹
);

943 
G_END_DECLS


	@/usr/include/gtk/gtktable.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TABLE_H__


32 
	#__GTK_TABLE_H__


	)

35 
	~<gtk/gtkc⁄èöî.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_TABLE
 (
	`gtk_èbÀ_gë_ty≥
 ())

	)

41 
	#GTK_TABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TABLE
, 
GtkTabÀ
))

	)

42 
	#GTK_TABLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TABLE
, 
GtkTabÀCœss
))

	)

43 
	#GTK_IS_TABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TABLE
))

	)

44 
	#GTK_IS_TABLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TABLE
))

	)

45 
	#GTK_TABLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TABLE
, 
GtkTabÀCœss
))

	)

48 
_GtkTabÀ
 
	tGtkTabÀ
;

49 
_GtkTabÀCœss
 
	tGtkTabÀCœss
;

50 
_GtkTabÀChûd
 
	tGtkTabÀChûd
;

51 
_GtkTabÀRowCﬁ
 
	tGtkTabÀRowCﬁ
;

53 
	s_GtkTabÀ


55 
GtkC⁄èöî
 
	mc⁄èöî
;

57 
GLi°
 *
GSEAL
 (
chûdªn
);

58 
GtkTabÀRowCﬁ
 *
GSEAL
 (
rows
);

59 
GtkTabÀRowCﬁ
 *
GSEAL
 (
cﬁs
);

60 
guöt16
 
GSEAL
 (
ƒows
);

61 
guöt16
 
GSEAL
 (
ncﬁs
);

62 
guöt16
 
GSEAL
 (
cﬁumn_•acög
);

63 
guöt16
 
GSEAL
 (
row_•acög
);

64 
guöt
 
GSEAL
 (
homogíeous
) : 1;

67 
	s_GtkTabÀCœss


69 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

72 
	s_GtkTabÀChûd


74 
GtkWidgë
 *
	mwidgë
;

75 
guöt16
 
	mÀ·_©èch
;

76 
guöt16
 
	mright_©èch
;

77 
guöt16
 
	mt›_©èch
;

78 
guöt16
 
	mbŸtom_©èch
;

79 
guöt16
 
	mx∑ddög
;

80 
guöt16
 
	my∑ddög
;

81 
guöt
 
	mxex∑nd
 : 1;

82 
guöt
 
	myex∑nd
 : 1;

83 
guöt
 
	mxshrök
 : 1;

84 
guöt
 
	myshrök
 : 1;

85 
guöt
 
	mxfûl
 : 1;

86 
guöt
 
	myfûl
 : 1;

89 
	s_GtkTabÀRowCﬁ


91 
guöt16
 
	mªquisôi⁄
;

92 
guöt16
 
	mÆloˇti⁄
;

93 
guöt16
 
	m•acög
;

94 
guöt
 
	m√ed_ex∑nd
 : 1;

95 
guöt
 
	m√ed_shrök
 : 1;

96 
guöt
 
	mex∑nd
 : 1;

97 
guöt
 
	mshrök
 : 1;

98 
guöt
 
	mem±y
 : 1;

102 
GTy≥
 
	$gtk_èbÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

103 
GtkWidgë
* 
	`gtk_èbÀ_√w
 (
guöt
 
rows
,

104 
guöt
 
cﬁumns
,

105 
gboﬁón
 
homogíeous
);

106 
	`gtk_èbÀ_ªsize
 (
GtkTabÀ
 *
èbÀ
,

107 
guöt
 
rows
,

108 
guöt
 
cﬁumns
);

109 
	`gtk_èbÀ_©èch
 (
GtkTabÀ
 *
èbÀ
,

110 
GtkWidgë
 *
chûd
,

111 
guöt
 
À·_©èch
,

112 
guöt
 
right_©èch
,

113 
guöt
 
t›_©èch
,

114 
guöt
 
bŸtom_©èch
,

115 
GtkAâachO±i⁄s
 
x›ti⁄s
,

116 
GtkAâachO±i⁄s
 
y›ti⁄s
,

117 
guöt
 
x∑ddög
,

118 
guöt
 
y∑ddög
);

119 
	`gtk_èbÀ_©èch_deÁu…s
 (
GtkTabÀ
 *
èbÀ
,

120 
GtkWidgë
 *
widgë
,

121 
guöt
 
À·_©èch
,

122 
guöt
 
right_©èch
,

123 
guöt
 
t›_©èch
,

124 
guöt
 
bŸtom_©èch
);

125 
	`gtk_èbÀ_£t_row_•acög
 (
GtkTabÀ
 *
èbÀ
,

126 
guöt
 
row
,

127 
guöt
 
•acög
);

128 
guöt
 
	`gtk_èbÀ_gë_row_•acög
 (
GtkTabÀ
 *
èbÀ
,

129 
guöt
 
row
);

130 
	`gtk_èbÀ_£t_cﬁ_•acög
 (
GtkTabÀ
 *
èbÀ
,

131 
guöt
 
cﬁumn
,

132 
guöt
 
•acög
);

133 
guöt
 
	`gtk_èbÀ_gë_cﬁ_•acög
 (
GtkTabÀ
 *
èbÀ
,

134 
guöt
 
cﬁumn
);

135 
	`gtk_èbÀ_£t_row_•acögs
 (
GtkTabÀ
 *
èbÀ
,

136 
guöt
 
•acög
);

137 
guöt
 
	`gtk_èbÀ_gë_deÁu…_row_•acög
 (
GtkTabÀ
 *
èbÀ
);

138 
	`gtk_èbÀ_£t_cﬁ_•acögs
 (
GtkTabÀ
 *
èbÀ
,

139 
guöt
 
•acög
);

140 
guöt
 
	`gtk_èbÀ_gë_deÁu…_cﬁ_•acög
 (
GtkTabÀ
 *
èbÀ
);

141 
	`gtk_èbÀ_£t_homogíeous
 (
GtkTabÀ
 *
èbÀ
,

142 
gboﬁón
 
homogíeous
);

143 
gboﬁón
 
	`gtk_èbÀ_gë_homogíeous
 (
GtkTabÀ
 *
èbÀ
);

146 
G_END_DECLS


	@/usr/include/gtk/gtktearoffmenuitem.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TEAROFF_MENU_ITEM_H__


32 
	#__GTK_TEAROFF_MENU_ITEM_H__


	)

35 
	~<gtk/gtkmíuôem.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_TEAROFF_MENU_ITEM
 (
	`gtk_ã¨off_míu_ôem_gë_ty≥
 ())

	)

41 
	#GTK_TEAROFF_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TEAROFF_MENU_ITEM
, 
GtkTóroffMíuIãm
))

	)

42 
	#GTK_TEAROFF_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEAROFF_MENU_ITEM
, 
GtkTóroffMíuIãmCœss
))

	)

43 
	#GTK_IS_TEAROFF_MENU_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TEAROFF_MENU_ITEM
))

	)

44 
	#GTK_IS_TEAROFF_MENU_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEAROFF_MENU_ITEM
))

	)

45 
	#GTK_TEAROFF_MENU_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEAROFF_MENU_ITEM
, 
GtkTóroffMíuIãmCœss
))

	)

48 
_GtkTóroffMíuIãm
 
	tGtkTóroffMíuIãm
;

49 
_GtkTóroffMíuIãmCœss
 
	tGtkTóroffMíuIãmCœss
;

51 
	s_GtkTóroffMíuIãm


53 
GtkMíuIãm
 
	mmíu_ôem
;

55 
guöt
 
GSEAL
 (
t‹n_off
) : 1;

58 
	s_GtkTóroffMíuIãmCœss


60 
GtkMíuIãmCœss
 
	m∑ª¡_˛ass
;

63 (*
	m_gtk_ª£rved1
) ();

64 (*
	m_gtk_ª£rved2
) ();

65 (*
	m_gtk_ª£rved3
) ();

66 (*
	m_gtk_ª£rved4
) ();

70 
GTy≥
 
	$gtk_ã¨off_míu_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

71 
GtkWidgë
* 
	`gtk_ã¨off_míu_ôem_√w
 ();

73 
G_END_DECLS


	@/usr/include/gtk/gtktestutils.h

21 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_TEST_UTILS_H__


26 
	#__GTK_TEST_UTILS_H__


	)

28 
G_BEGIN_DECLS


31 
gtk_ã°_öô
 (*
¨g˝
,

32 ***
¨gvp
,

34 
gtk_ã°_ªgi°î_Æl_ty≥s
 ();

35 c⁄° 
GTy≥
* 
gtk_ã°_li°_Æl_ty≥s
 (
guöt
 *
n_ty≥s
);

36 
GtkWidgë
* 
gtk_ã°_föd_widgë
 (GtkWidgë *
widgë
,

37 c⁄° 
gch¨
 *
œbñ_∑âîn
,

38 
GTy≥
 
widgë_ty≥
);

39 
GtkWidgë
* 
gtk_ã°_¸óã_widgë
 (
GTy≥
 
widgë_ty≥
,

40 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

42 
GtkWidgë
* 
gtk_ã°_¸óã_sim∂e_wödow
 (c⁄° 
gch¨
 *
wödow_tôÀ
,

43 c⁄° 
gch¨
 *
dülog_ãxt
);

44 
GtkWidgë
* 
gtk_ã°_di•œy_buâ⁄_wödow
 (c⁄° 
gch¨
 *
wödow_tôÀ
,

45 c⁄° 
gch¨
 *
dülog_ãxt
,

47 
gtk_ã°_¶idî_£t_≥rc
 (
GtkWidgë
 *
widgë
,

48 
≥r˚¡age
);

49 
gtk_ã°_¶idî_gë_vÆue
 (
GtkWidgë
 *
widgë
);

50 
gboﬁón
 
gtk_ã°_•ö_buâ⁄_˛ick
 (
GtkSpöBuâ⁄
 *
•ö√r
,

51 
guöt
 
buâ⁄
,

52 
gboﬁón
 
upw¨ds
);

53 
gboﬁón
 
gtk_ã°_widgë_˛ick
 (
GtkWidgë
 *
widgë
,

54 
guöt
 
buâ⁄
,

55 
GdkModifõrTy≥
 
modifõrs
);

56 
gboﬁón
 
gtk_ã°_widgë_£nd_key
 (
GtkWidgë
 *
widgë
,

57 
guöt
 
keyvÆ
,

58 
GdkModifõrTy≥
 
modifõrs
);

60 
gtk_ã°_ãxt_£t
 (
GtkWidgë
 *
widgë
,

61 c⁄° 
gch¨
 *
°rög
);

62 
gch¨
* 
gtk_ã°_ãxt_gë
 (
GtkWidgë
 *
widgë
);

65 
GtkWidgë
* 
gtk_ã°_föd_siblög
 (GtkWidgë *
ba£_widgë
,

66 
GTy≥
 
widgë_ty≥
);

67 
GtkWidgë
* 
gtk_ã°_föd_œbñ
 (GtkWidgë *
widgë
,

68 c⁄° 
gch¨
 *
œbñ_∑âîn
);

69 
	gG_END_DECLS


	@/usr/include/gtk/gtktext.h

27 #ifde‡
GTK_ENABLE_BROKEN


29 #i‚de‡
__GTK_TEXT_H__


30 
	#__GTK_TEXT_H__


	)

33 
	~<gtk/gtkﬁdedôabÀ.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_TEXT
 (
	`gtk_ãxt_gë_ty≥
 ())

	)

39 
	#GTK_TEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TEXT
, 
GtkText
))

	)

40 
	#GTK_TEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEXT
, 
GtkTextCœss
))

	)

41 
	#GTK_IS_TEXT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TEXT
))

	)

42 
	#GTK_IS_TEXT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEXT
))

	)

43 
	#GTK_TEXT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEXT
, 
GtkTextCœss
))

	)

46 
_GtkTextF⁄t
 
	tGtkTextF⁄t
;

47 
_GtkPr›îtyM¨k
 
	tGtkPr›îtyM¨k
;

48 
_GtkText
 
	tGtkText
;

49 
_GtkTextCœss
 
	tGtkTextCœss
;

51 
	s_GtkPr›îtyM¨k


54 
GLi°
* 
	m¥›îty
;

57 
guöt
 
	moff£t
;

60 
guöt
 
	mödex
;

63 
	s_GtkText


65 
GtkOldEdôabÀ
 
	mﬁd_edôabÀ
;

67 
GdkWödow
 *
	mãxt_¨ó
;

69 
GtkAdju°mít
 *
	mhadj
;

70 
GtkAdju°mít
 *
	mvadj
;

72 
GdkGC
 *
	mgc
;

74 
GdkPixm≠
* 
	mlöe_wøp_bôm≠
;

75 
GdkPixm≠
* 
	mlöe_¨row_bôm≠
;

81 uni⁄ { 
GdkWCh¨
 *
	mwc
; 
guch¨
 *
	mch
; } 
	mãxt
;

83 
guöt
 
	mãxt_Àn
;

86 
guöt
 
	mg≠_posôi⁄
;

89 
guöt
 
	mg≠_size
;

93 
guöt
 
	mãxt_íd
;

97 
GLi°
 *
	mlöe_°¨t_ˇche
;

99 
guöt
 
	mfú°_löe_°¨t_ödex
;

101 
guöt
 
	mfú°_cut_pixñs
;

103 
guöt
 
	mfú°_⁄s¸ìn_h‹_pixñ
;

105 
guöt
 
	mfú°_⁄s¸ìn_vî_pixñ
;

111 
guöt
 
	mlöe_wøp
 : 1;

112 
guöt
 
	mw‹d_wøp
 : 1;

115 
guöt
 
	mu£_wch¨
 : 1;

118 
guöt
 
	m‰ìze_cou¡
;

122 
GLi°
 *
	mãxt_¥›îtõs
;

124 
GLi°
 *
	mãxt_¥›îtõs_íd
;

129 
GtkPr›îtyM¨k
 
	mpoöt
;

133 uni⁄ { 
GdkWCh¨
 *
	mwc
; 
guch¨
 *
	mch
; } 
	ms¸©ch_buf„r
;

134 
guöt
 
	ms¸©ch_buf„r_Àn
;

138 
göt
 
	mœ°_vî_vÆue
;

142 
göt
 
	mcurs‹_pos_x
;

143 
göt
 
	mcurs‹_pos_y
;

144 
GtkPr›îtyM¨k
 
	mcurs‹_m¨k
;

145 
GdkWCh¨
 
	mcurs‹_ch¨
;

146 
gch¨
 
	mcurs‹_ch¨_off£t
;

147 
göt
 
	mcurs‹_vútuÆ_x
;

148 
göt
 
	mcurs‹_døwn_Àvñ
;

152 
GLi°
 *
	mcuºít_löe
;

156 
GLi°
 *
	mèb_°›s
;

157 
göt
 
	mdeÁu…_èb_width
;

159 
GtkTextF⁄t
 *
	mcuºít_f⁄t
;

162 
göt
 
	mtimî
;

164 
guöt
 
	mbuâ⁄
;

165 
GdkGC
 *
	mbg_gc
;

168 
	s_GtkTextCœss


170 
GtkOldEdôabÀCœss
 
	m∑ª¡_˛ass
;

172 (*
	m£t_s¸ﬁl_adju°míts
Ë(
GtkText
 *
	mãxt
,

173 
GtkAdju°mít
 *
	mhadju°mít
,

174 
GtkAdju°mít
 *
	mvadju°mít
);

178 
GTy≥
 
	$gtk_ãxt_gë_ty≥
 (Ë
G_GNUC_CONST
;

179 
GtkWidgë
* 
	`gtk_ãxt_√w
 (
GtkAdju°mít
 *
hadj
,

180 
GtkAdju°mít
 *
vadj
);

181 
	`gtk_ãxt_£t_edôabÀ
 (
GtkText
 *
ãxt
,

182 
gboﬁón
 
edôabÀ
);

183 
	`gtk_ãxt_£t_w‹d_wøp
 (
GtkText
 *
ãxt
,

184 
gboﬁón
 
w‹d_wøp
);

185 
	`gtk_ãxt_£t_löe_wøp
 (
GtkText
 *
ãxt
,

186 
gboﬁón
 
löe_wøp
);

187 
	`gtk_ãxt_£t_adju°míts
 (
GtkText
 *
ãxt
,

188 
GtkAdju°mít
 *
hadj
,

189 
GtkAdju°mít
 *
vadj
);

190 
	`gtk_ãxt_£t_poöt
 (
GtkText
 *
ãxt
,

191 
guöt
 
ödex
);

192 
guöt
 
	`gtk_ãxt_gë_poöt
 (
GtkText
 *
ãxt
);

193 
guöt
 
	`gtk_ãxt_gë_Àngth
 (
GtkText
 *
ãxt
);

194 
	`gtk_ãxt_‰ìze
 (
GtkText
 *
ãxt
);

195 
	`gtk_ãxt_thaw
 (
GtkText
 *
ãxt
);

196 
	`gtk_ãxt_ö£π
 (
GtkText
 *
ãxt
,

197 
GdkF⁄t
 *
f⁄t
,

198 c⁄° 
GdkCﬁ‹
 *
f‹e
,

199 c⁄° 
GdkCﬁ‹
 *
back
,

200 c⁄° *
ch¨s
,

201 
göt
 
Àngth
);

202 
gboﬁón
 
	`gtk_ãxt_backw¨d_dñëe
 (
GtkText
 *
ãxt
,

203 
guöt
 
nch¨s
);

204 
gboﬁón
 
	`gtk_ãxt_f‹w¨d_dñëe
 (
GtkText
 *
ãxt
,

205 
guöt
 
nch¨s
);

207 
	#GTK_TEXT_INDEX
(
t
, 
ödex
Ë((—)->
u£_wch¨
) \

208 ? ((
ödex
Ë< (
t
)->
g≠_posôi⁄
 ? (t)->
ãxt
.
wc
[index] : \

209 (
t
)->
ãxt
.
wc
[(
ödex
)+—)->
g≠_size
]) \

210 : ((
ödex
Ë< (
t
)->
g≠_posôi⁄
 ? (t)->
ãxt
.
ch
[index] : \

211 (
t
)->
ãxt
.
ch
[(
ödex
)+—)->
g≠_size
]))

	)

213 
G_END_DECLS


	@/usr/include/gtk/gtktextbuffer.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TEXT_BUFFER_H__


32 
	#__GTK_TEXT_BUFFER_H__


	)

34 
	~<gtk/gtkwidgë.h
>

35 
	~<gtk/gtk˛ùbﬂrd.h
>

36 
	~<gtk/gtkãxâagèbÀ.h
>

37 
	~<gtk/gtkãxtôî.h
>

38 
	~<gtk/gtkãxtm¨k.h
>

39 
	~<gtk/gtkãxtchûd.h
>

41 
G_BEGIN_DECLS


56 
	mGTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS
 = - 1,

57 
	mGTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT
 = - 2,

58 
	mGTK_TEXT_BUFFER_TARGET_INFO_TEXT
 = - 3

59 } 
	tGtkTextBuf„rT¨gëInfo
;

61 
_GtkTextBTªe
 
	tGtkTextBTªe
;

63 
_GtkTextLogAârCache
 
	tGtkTextLogAârCache
;

65 
	#GTK_TYPE_TEXT_BUFFER
 (
	`gtk_ãxt_buf„r_gë_ty≥
 ())

	)

66 
	#GTK_TEXT_BUFFER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TEXT_BUFFER
, 
GtkTextBuf„r
))

	)

67 
	#GTK_TEXT_BUFFER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEXT_BUFFER
, 
GtkTextBuf„rCœss
))

	)

68 
	#GTK_IS_TEXT_BUFFER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TEXT_BUFFER
))

	)

69 
	#GTK_IS_TEXT_BUFFER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEXT_BUFFER
))

	)

70 
	#GTK_TEXT_BUFFER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEXT_BUFFER
, 
GtkTextBuf„rCœss
))

	)

72 
_GtkTextBuf„rCœss
 
	tGtkTextBuf„rCœss
;

74 
	s_GtkTextBuf„r


76 
GObje˘
 
	m∑ª¡_ö°™˚
;

78 
GtkTextTagTabÀ
 *
GSEAL
 (
èg_èbÀ
);

79 
GtkTextBTªe
 *
GSEAL
 (
båì
);

81 
GSLi°
 *
GSEAL
 (
˛ùbﬂrd_c⁄ã¡s_buf„rs
);

82 
GSLi°
 *
GSEAL
 (
£À˘i⁄_˛ùbﬂrds
);

84 
GtkTextLogAârCache
 *
GSEAL
 (
log_©å_ˇche
);

86 
guöt
 
GSEAL
 (
u£r_a˘i⁄_cou¡
);

89 
guöt
 
GSEAL
 (
modifõd
) : 1;

91 
guöt
 
GSEAL
 (
has_£À˘i⁄
) : 1;

94 
	s_GtkTextBuf„rCœss


96 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

98 (* 
	mö£π_ãxt
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

99 
GtkTextIãr
 *
	mpos
,

100 c⁄° 
gch¨
 *
	mãxt
,

101 
göt
 
	mÀngth
);

103 (* 
	mö£π_pixbuf
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

104 
GtkTextIãr
 *
	mpos
,

105 
GdkPixbuf
 *
	mpixbuf
);

107 (* 
	mö£π_chûd_™ch‹
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

108 
GtkTextIãr
 *
	mpos
,

109 
GtkTextChûdAnch‹
 *
	m™ch‹
);

111 (* 
	mdñëe_ønge
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

112 
GtkTextIãr
 *
	m°¨t
,

113 
GtkTextIãr
 *
	míd
);

118 (* 
	mch™ged
Ë(
GtkTextBuf„r
 *
	mbuf„r
);

122 (* 
	mmodifõd_ch™ged
Ë(
GtkTextBuf„r
 *
	mbuf„r
);

125 (* 
	mm¨k_£t
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

126 c⁄° 
GtkTextIãr
 *
	mloˇti⁄
,

127 
GtkTextM¨k
 *
	mm¨k
);

129 (* 
	mm¨k_dñëed
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

130 
GtkTextM¨k
 *
	mm¨k
);

132 (* 
	m≠∂y_èg
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

133 
GtkTextTag
 *
	mèg
,

134 c⁄° 
GtkTextIãr
 *
	m°¨t_ch¨
,

135 c⁄° 
GtkTextIãr
 *
	míd_ch¨
);

137 (* 
	mªmove_èg
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

138 
GtkTextTag
 *
	mèg
,

139 c⁄° 
GtkTextIãr
 *
	m°¨t_ch¨
,

140 c⁄° 
GtkTextIãr
 *
	míd_ch¨
);

143 (* 
	mbegö_u£r_a˘i⁄
Ë(
GtkTextBuf„r
 *
	mbuf„r
);

144 (* 
	míd_u£r_a˘i⁄
Ë(
GtkTextBuf„r
 *
	mbuf„r
);

146 (* 
	m∑°e_d⁄e
Ë(
GtkTextBuf„r
 *
	mbuf„r
,

147 
GtkClùbﬂrd
 *
	m˛ùbﬂrd
);

150 (*
	m_gtk_ª£rved1
) ();

151 (*
	m_gtk_ª£rved2
) ();

152 (*
	m_gtk_ª£rved3
) ();

153 (*
	m_gtk_ª£rved4
) ();

154 (*
	m_gtk_ª£rved5
) ();

157 
GTy≥
 
	$gtk_ãxt_buf„r_gë_ty≥
 (Ë
G_GNUC_CONST
;

162 
GtkTextBuf„r
 *
	`gtk_ãxt_buf„r_√w
 (
GtkTextTagTabÀ
 *
èbÀ
);

163 
göt
 
	`gtk_ãxt_buf„r_gë_löe_cou¡
 (
GtkTextBuf„r
 *
buf„r
);

164 
göt
 
	`gtk_ãxt_buf„r_gë_ch¨_cou¡
 (
GtkTextBuf„r
 *
buf„r
);

167 
GtkTextTagTabÀ
* 
	`gtk_ãxt_buf„r_gë_èg_èbÀ
 (
GtkTextBuf„r
 *
buf„r
);

170 
	`gtk_ãxt_buf„r_£t_ãxt
 (
GtkTextBuf„r
 *
buf„r
,

171 c⁄° 
gch¨
 *
ãxt
,

172 
göt
 
Àn
);

175 
	`gtk_ãxt_buf„r_ö£π
 (
GtkTextBuf„r
 *
buf„r
,

176 
GtkTextIãr
 *
ôî
,

177 c⁄° 
gch¨
 *
ãxt
,

178 
göt
 
Àn
);

179 
	`gtk_ãxt_buf„r_ö£π_©_curs‹
 (
GtkTextBuf„r
 *
buf„r
,

180 c⁄° 
gch¨
 *
ãxt
,

181 
göt
 
Àn
);

183 
gboﬁón
 
	`gtk_ãxt_buf„r_ö£π_öãø˘ive
 (
GtkTextBuf„r
 *
buf„r
,

184 
GtkTextIãr
 *
ôî
,

185 c⁄° 
gch¨
 *
ãxt
,

186 
göt
 
Àn
,

187 
gboﬁón
 
deÁu…_edôabÀ
);

188 
gboﬁón
 
	`gtk_ãxt_buf„r_ö£π_öãø˘ive_©_curs‹
 (
GtkTextBuf„r
 *
buf„r
,

189 c⁄° 
gch¨
 *
ãxt
,

190 
göt
 
Àn
,

191 
gboﬁón
 
deÁu…_edôabÀ
);

193 
	`gtk_ãxt_buf„r_ö£π_ønge
 (
GtkTextBuf„r
 *
buf„r
,

194 
GtkTextIãr
 *
ôî
,

195 c⁄° 
GtkTextIãr
 *
°¨t
,

196 c⁄° 
GtkTextIãr
 *
íd
);

197 
gboﬁón
 
	`gtk_ãxt_buf„r_ö£π_ønge_öãø˘ive
 (
GtkTextBuf„r
 *
buf„r
,

198 
GtkTextIãr
 *
ôî
,

199 c⁄° 
GtkTextIãr
 *
°¨t
,

200 c⁄° 
GtkTextIãr
 *
íd
,

201 
gboﬁón
 
deÁu…_edôabÀ
);

203 
	$gtk_ãxt_buf„r_ö£π_wôh_ègs
 (
GtkTextBuf„r
 *
buf„r
,

204 
GtkTextIãr
 *
ôî
,

205 c⁄° 
gch¨
 *
ãxt
,

206 
göt
 
Àn
,

207 
GtkTextTag
 *
fú°_èg
,

208 ...Ë
G_GNUC_NULL_TERMINATED
;

210 
	$gtk_ãxt_buf„r_ö£π_wôh_ègs_by_«me
 (
GtkTextBuf„r
 *
buf„r
,

211 
GtkTextIãr
 *
ôî
,

212 c⁄° 
gch¨
 *
ãxt
,

213 
göt
 
Àn
,

214 c⁄° 
gch¨
 *
fú°_èg_«me
,

215 ...Ë
G_GNUC_NULL_TERMINATED
;

218 
	`gtk_ãxt_buf„r_dñëe
 (
GtkTextBuf„r
 *
buf„r
,

219 
GtkTextIãr
 *
°¨t
,

220 
GtkTextIãr
 *
íd
);

221 
gboﬁón
 
	`gtk_ãxt_buf„r_dñëe_öãø˘ive
 (
GtkTextBuf„r
 *
buf„r
,

222 
GtkTextIãr
 *
°¨t_ôî
,

223 
GtkTextIãr
 *
íd_ôî
,

224 
gboﬁón
 
deÁu…_edôabÀ
);

225 
gboﬁón
 
	`gtk_ãxt_buf„r_back•a˚
 (
GtkTextBuf„r
 *
buf„r
,

226 
GtkTextIãr
 *
ôî
,

227 
gboﬁón
 
öãø˘ive
,

228 
gboﬁón
 
deÁu…_edôabÀ
);

231 
gch¨
 *
	`gtk_ãxt_buf„r_gë_ãxt
 (
GtkTextBuf„r
 *
buf„r
,

232 c⁄° 
GtkTextIãr
 *
°¨t
,

233 c⁄° 
GtkTextIãr
 *
íd
,

234 
gboﬁón
 
ö˛ude_hiddí_ch¨s
);

236 
gch¨
 *
	`gtk_ãxt_buf„r_gë_¶i˚
 (
GtkTextBuf„r
 *
buf„r
,

237 c⁄° 
GtkTextIãr
 *
°¨t
,

238 c⁄° 
GtkTextIãr
 *
íd
,

239 
gboﬁón
 
ö˛ude_hiddí_ch¨s
);

242 
	`gtk_ãxt_buf„r_ö£π_pixbuf
 (
GtkTextBuf„r
 *
buf„r
,

243 
GtkTextIãr
 *
ôî
,

244 
GdkPixbuf
 *
pixbuf
);

247 
	`gtk_ãxt_buf„r_ö£π_chûd_™ch‹
 (
GtkTextBuf„r
 *
buf„r
,

248 
GtkTextIãr
 *
ôî
,

249 
GtkTextChûdAnch‹
 *
™ch‹
);

252 
GtkTextChûdAnch‹
 *
	`gtk_ãxt_buf„r_¸óã_chûd_™ch‹
 (
GtkTextBuf„r
 *
buf„r
,

253 
GtkTextIãr
 *
ôî
);

256 
	`gtk_ãxt_buf„r_add_m¨k
 (
GtkTextBuf„r
 *
buf„r
,

257 
GtkTextM¨k
 *
m¨k
,

258 c⁄° 
GtkTextIãr
 *
whîe
);

259 
GtkTextM¨k
 *
	`gtk_ãxt_buf„r_¸óã_m¨k
 (
GtkTextBuf„r
 *
buf„r
,

260 c⁄° 
gch¨
 *
m¨k_«me
,

261 c⁄° 
GtkTextIãr
 *
whîe
,

262 
gboﬁón
 
À·_gøvôy
);

263 
	`gtk_ãxt_buf„r_move_m¨k
 (
GtkTextBuf„r
 *
buf„r
,

264 
GtkTextM¨k
 *
m¨k
,

265 c⁄° 
GtkTextIãr
 *
whîe
);

266 
	`gtk_ãxt_buf„r_dñëe_m¨k
 (
GtkTextBuf„r
 *
buf„r
,

267 
GtkTextM¨k
 *
m¨k
);

268 
GtkTextM¨k
* 
	`gtk_ãxt_buf„r_gë_m¨k
 (
GtkTextBuf„r
 *
buf„r
,

269 c⁄° 
gch¨
 *
«me
);

271 
	`gtk_ãxt_buf„r_move_m¨k_by_«me
 (
GtkTextBuf„r
 *
buf„r
,

272 c⁄° 
gch¨
 *
«me
,

273 c⁄° 
GtkTextIãr
 *
whîe
);

274 
	`gtk_ãxt_buf„r_dñëe_m¨k_by_«me
 (
GtkTextBuf„r
 *
buf„r
,

275 c⁄° 
gch¨
 *
«me
);

277 
GtkTextM¨k
* 
	`gtk_ãxt_buf„r_gë_ö£π
 (
GtkTextBuf„r
 *
buf„r
);

278 
GtkTextM¨k
* 
	`gtk_ãxt_buf„r_gë_£À˘i⁄_bound
 (
GtkTextBuf„r
 *
buf„r
);

281 
	`gtk_ãxt_buf„r_∂a˚_curs‹
 (
GtkTextBuf„r
 *
buf„r
,

282 c⁄° 
GtkTextIãr
 *
whîe
);

283 
	`gtk_ãxt_buf„r_£À˘_ønge
 (
GtkTextBuf„r
 *
buf„r
,

284 c⁄° 
GtkTextIãr
 *
ös
,

285 c⁄° 
GtkTextIãr
 *
bound
);

290 
	`gtk_ãxt_buf„r_≠∂y_èg
 (
GtkTextBuf„r
 *
buf„r
,

291 
GtkTextTag
 *
èg
,

292 c⁄° 
GtkTextIãr
 *
°¨t
,

293 c⁄° 
GtkTextIãr
 *
íd
);

294 
	`gtk_ãxt_buf„r_ªmove_èg
 (
GtkTextBuf„r
 *
buf„r
,

295 
GtkTextTag
 *
èg
,

296 c⁄° 
GtkTextIãr
 *
°¨t
,

297 c⁄° 
GtkTextIãr
 *
íd
);

298 
	`gtk_ãxt_buf„r_≠∂y_èg_by_«me
 (
GtkTextBuf„r
 *
buf„r
,

299 c⁄° 
gch¨
 *
«me
,

300 c⁄° 
GtkTextIãr
 *
°¨t
,

301 c⁄° 
GtkTextIãr
 *
íd
);

302 
	`gtk_ãxt_buf„r_ªmove_èg_by_«me
 (
GtkTextBuf„r
 *
buf„r
,

303 c⁄° 
gch¨
 *
«me
,

304 c⁄° 
GtkTextIãr
 *
°¨t
,

305 c⁄° 
GtkTextIãr
 *
íd
);

306 
	`gtk_ãxt_buf„r_ªmove_Æl_ègs
 (
GtkTextBuf„r
 *
buf„r
,

307 c⁄° 
GtkTextIãr
 *
°¨t
,

308 c⁄° 
GtkTextIãr
 *
íd
);

314 
GtkTextTag
 *
	`gtk_ãxt_buf„r_¸óã_èg
 (
GtkTextBuf„r
 *
buf„r
,

315 c⁄° 
gch¨
 *
èg_«me
,

316 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

322 
	`gtk_ãxt_buf„r_gë_ôî_©_löe_off£t
 (
GtkTextBuf„r
 *
buf„r
,

323 
GtkTextIãr
 *
ôî
,

324 
göt
 
löe_numbî
,

325 
göt
 
ch¨_off£t
);

326 
	`gtk_ãxt_buf„r_gë_ôî_©_löe_ödex
 (
GtkTextBuf„r
 *
buf„r
,

327 
GtkTextIãr
 *
ôî
,

328 
göt
 
löe_numbî
,

329 
göt
 
byã_ödex
);

330 
	`gtk_ãxt_buf„r_gë_ôî_©_off£t
 (
GtkTextBuf„r
 *
buf„r
,

331 
GtkTextIãr
 *
ôî
,

332 
göt
 
ch¨_off£t
);

333 
	`gtk_ãxt_buf„r_gë_ôî_©_löe
 (
GtkTextBuf„r
 *
buf„r
,

334 
GtkTextIãr
 *
ôî
,

335 
göt
 
löe_numbî
);

336 
	`gtk_ãxt_buf„r_gë_°¨t_ôî
 (
GtkTextBuf„r
 *
buf„r
,

337 
GtkTextIãr
 *
ôî
);

338 
	`gtk_ãxt_buf„r_gë_íd_ôî
 (
GtkTextBuf„r
 *
buf„r
,

339 
GtkTextIãr
 *
ôî
);

340 
	`gtk_ãxt_buf„r_gë_bounds
 (
GtkTextBuf„r
 *
buf„r
,

341 
GtkTextIãr
 *
°¨t
,

342 
GtkTextIãr
 *
íd
);

343 
	`gtk_ãxt_buf„r_gë_ôî_©_m¨k
 (
GtkTextBuf„r
 *
buf„r
,

344 
GtkTextIãr
 *
ôî
,

345 
GtkTextM¨k
 *
m¨k
);

347 
	`gtk_ãxt_buf„r_gë_ôî_©_chûd_™ch‹
 (
GtkTextBuf„r
 *
buf„r
,

348 
GtkTextIãr
 *
ôî
,

349 
GtkTextChûdAnch‹
 *
™ch‹
);

360 
gboﬁón
 
	`gtk_ãxt_buf„r_gë_modifõd
 (
GtkTextBuf„r
 *
buf„r
);

361 
	`gtk_ãxt_buf„r_£t_modifõd
 (
GtkTextBuf„r
 *
buf„r
,

362 
gboﬁón
 
£âög
);

364 
gboﬁón
 
	`gtk_ãxt_buf„r_gë_has_£À˘i⁄
 (
GtkTextBuf„r
 *
buf„r
);

366 
	`gtk_ãxt_buf„r_add_£À˘i⁄_˛ùbﬂrd
 (
GtkTextBuf„r
 *
buf„r
,

367 
GtkClùbﬂrd
 *
˛ùbﬂrd
);

368 
	`gtk_ãxt_buf„r_ªmove_£À˘i⁄_˛ùbﬂrd
 (
GtkTextBuf„r
 *
buf„r
,

369 
GtkClùbﬂrd
 *
˛ùbﬂrd
);

371 
	`gtk_ãxt_buf„r_cut_˛ùbﬂrd
 (
GtkTextBuf„r
 *
buf„r
,

372 
GtkClùbﬂrd
 *
˛ùbﬂrd
,

373 
gboﬁón
 
deÁu…_edôabÀ
);

374 
	`gtk_ãxt_buf„r_c›y_˛ùbﬂrd
 (
GtkTextBuf„r
 *
buf„r
,

375 
GtkClùbﬂrd
 *
˛ùbﬂrd
);

376 
	`gtk_ãxt_buf„r_∑°e_˛ùbﬂrd
 (
GtkTextBuf„r
 *
buf„r
,

377 
GtkClùbﬂrd
 *
˛ùbﬂrd
,

378 
GtkTextIãr
 *
ovîride_loˇti⁄
,

379 
gboﬁón
 
deÁu…_edôabÀ
);

381 
gboﬁón
 
	`gtk_ãxt_buf„r_gë_£À˘i⁄_bounds
 (
GtkTextBuf„r
 *
buf„r
,

382 
GtkTextIãr
 *
°¨t
,

383 
GtkTextIãr
 *
íd
);

384 
gboﬁón
 
	`gtk_ãxt_buf„r_dñëe_£À˘i⁄
 (
GtkTextBuf„r
 *
buf„r
,

385 
gboﬁón
 
öãø˘ive
,

386 
gboﬁón
 
deÁu…_edôabÀ
);

389 
	`gtk_ãxt_buf„r_begö_u£r_a˘i⁄
 (
GtkTextBuf„r
 *
buf„r
);

390 
	`gtk_ãxt_buf„r_íd_u£r_a˘i⁄
 (
GtkTextBuf„r
 *
buf„r
);

392 
GtkT¨gëLi°
 * 
	`gtk_ãxt_buf„r_gë_c›y_èrgë_li°
 (
GtkTextBuf„r
 *
buf„r
);

393 
GtkT¨gëLi°
 * 
	`gtk_ãxt_buf„r_gë_∑°e_èrgë_li°
 (
GtkTextBuf„r
 *
buf„r
);

396 
	`_gtk_ãxt_buf„r_•ew
 (
GtkTextBuf„r
 *
buf„r
);

398 
GtkTextBTªe
* 
	`_gtk_ãxt_buf„r_gë_båì
 (
GtkTextBuf„r
 *
buf„r
);

400 c⁄° 
P™goLogAâr
* 
	`_gtk_ãxt_buf„r_gë_löe_log_©ås
 (
GtkTextBuf„r
 *
buf„r
,

401 c⁄° 
GtkTextIãr
 *
™ywhîe_ö_löe
,

402 
göt
 *
ch¨_Àn
);

404 
	`_gtk_ãxt_buf„r_nŸify_wûl_ªmove_èg
 (
GtkTextBuf„r
 *
buf„r
,

405 
GtkTextTag
 *
èg
);

407 
G_END_DECLS


	@/usr/include/gtk/gtktextbufferrichtext.h

22 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_TEXT_BUFFER_RICH_TEXT_H__


27 
	#__GTK_TEXT_BUFFER_RICH_TEXT_H__


	)

29 
	~<gtk/gtkãxtbuf„r.h
>

31 
G_BEGIN_DECLS


33 
	gguöt8
 * (* 
	tGtkTextBuf„rSîülizeFunc
Ë(
	tGtkTextBuf„r
 *
	tªgi°î_buf„r
,

34 
	tGtkTextBuf„r
 *
	tc⁄ã¡_buf„r
,

35 c⁄° 
	tGtkTextIãr
 *
	t°¨t
,

36 c⁄° 
	tGtkTextIãr
 *
	tíd
,

37 
	tgsize
 *
	tÀngth
,

38 
	tgpoöãr
 
	tu£r_d©a
);

39 
	$gboﬁón
 (* 
	tGtkTextBuf„rDe£rülizeFunc
Ë(
	tGtkTextBuf„r
 *
	tªgi°î_buf„r
,

40 
	tGtkTextBuf„r
 *
	tc⁄ã¡_buf„r
,

41 
	tGtkTextIãr
 *
	tôî
,

42 c⁄° 
	tguöt8
 *
	td©a
,

43 
	tgsize
 
	tÀngth
,

44 
	tgboﬁón
 
	t¸óã_ègs
,

45 
	tgpoöãr
 
	tu£r_d©a
,

46 
	tGEº‹
 **
	tîr‹
);

48 
GdkAtom
 
	`gtk_ãxt_buf„r_ªgi°î_£rülize_f‹m©
 (
GtkTextBuf„r
 *
buf„r
,

49 c⁄° 
gch¨
 *
mime_ty≥
,

50 
GtkTextBuf„rSîülizeFunc
 
fun˘i⁄
,

51 
gpoöãr
 
u£r_d©a
,

52 
GDe°royNŸify
 
u£r_d©a_de°roy
);

53 
GdkAtom
 
	`gtk_ãxt_buf„r_ªgi°î_£rülize_èg£t
 (
GtkTextBuf„r
 *
buf„r
,

54 c⁄° 
gch¨
 *
èg£t_«me
);

56 
GdkAtom
 
	`gtk_ãxt_buf„r_ªgi°î_de£rülize_f‹m©
 (
GtkTextBuf„r
 *
buf„r
,

57 c⁄° 
gch¨
 *
mime_ty≥
,

58 
GtkTextBuf„rDe£rülizeFunc
 
fun˘i⁄
,

59 
gpoöãr
 
u£r_d©a
,

60 
GDe°royNŸify
 
u£r_d©a_de°roy
);

61 
GdkAtom
 
	`gtk_ãxt_buf„r_ªgi°î_de£rülize_èg£t
 (
GtkTextBuf„r
 *
buf„r
,

62 c⁄° 
gch¨
 *
èg£t_«me
);

64 
	`gtk_ãxt_buf„r_uƒegi°î_£rülize_f‹m©
 (
GtkTextBuf„r
 *
buf„r
,

65 
GdkAtom
 
f‹m©
);

66 
	`gtk_ãxt_buf„r_uƒegi°î_de£rülize_f‹m©
 (
GtkTextBuf„r
 *
buf„r
,

67 
GdkAtom
 
f‹m©
);

69 
	`gtk_ãxt_buf„r_de£rülize_£t_ˇn_¸óã_ègs
 (
GtkTextBuf„r
 *
buf„r
,

70 
GdkAtom
 
f‹m©
,

71 
gboﬁón
 
ˇn_¸óã_ègs
);

72 
gboﬁón
 
	`gtk_ãxt_buf„r_de£rülize_gë_ˇn_¸óã_ègs
 (
GtkTextBuf„r
 *
buf„r
,

73 
GdkAtom
 
f‹m©
);

75 
GdkAtom
 * 
	`gtk_ãxt_buf„r_gë_£rülize_f‹m©s
 (
GtkTextBuf„r
 *
buf„r
,

76 
göt
 *
n_f‹m©s
);

77 
GdkAtom
 * 
	`gtk_ãxt_buf„r_gë_de£rülize_f‹m©s
 (
GtkTextBuf„r
 *
buf„r
,

78 
göt
 *
n_f‹m©s
);

80 
guöt8
 * 
	`gtk_ãxt_buf„r_£rülize
 (
GtkTextBuf„r
 *
ªgi°î_buf„r
,

81 
GtkTextBuf„r
 *
c⁄ã¡_buf„r
,

82 
GdkAtom
 
f‹m©
,

83 c⁄° 
GtkTextIãr
 *
°¨t
,

84 c⁄° 
GtkTextIãr
 *
íd
,

85 
gsize
 *
Àngth
);

86 
gboﬁón
 
	`gtk_ãxt_buf„r_de£rülize
 (
GtkTextBuf„r
 *
ªgi°î_buf„r
,

87 
GtkTextBuf„r
 *
c⁄ã¡_buf„r
,

88 
GdkAtom
 
f‹m©
,

89 
GtkTextIãr
 *
ôî
,

90 c⁄° 
guöt8
 *
d©a
,

91 
gsize
 
Àngth
,

92 
GEº‹
 **
îr‹
);

94 
G_END_DECLS


	@/usr/include/gtk/gtktextchild.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TEXT_CHILD_H__


32 
	#__GTK_TEXT_CHILD_H__


	)

34 
	~<gdkc⁄fig.h
>

35 
	~<glib-obje˘.h
>

37 
G_BEGIN_DECLS


45 
_GtkTextChûdAnch‹
 
	tGtkTextChûdAnch‹
;

46 
_GtkTextChûdAnch‹Cœss
 
	tGtkTextChûdAnch‹Cœss
;

48 
	#GTK_TYPE_TEXT_CHILD_ANCHOR
 (
	`gtk_ãxt_chûd_™ch‹_gë_ty≥
 ())

	)

49 
	#GTK_TEXT_CHILD_ANCHOR
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_TEXT_CHILD_ANCHOR
, 
GtkTextChûdAnch‹
))

	)

50 
	#GTK_TEXT_CHILD_ANCHOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEXT_CHILD_ANCHOR
, 
GtkTextChûdAnch‹Cœss
))

	)

51 
	#GTK_IS_TEXT_CHILD_ANCHOR
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_TEXT_CHILD_ANCHOR
))

	)

52 
	#GTK_IS_TEXT_CHILD_ANCHOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEXT_CHILD_ANCHOR
))

	)

53 
	#GTK_TEXT_CHILD_ANCHOR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEXT_CHILD_ANCHOR
, 
GtkTextChûdAnch‹Cœss
))

	)

55 
	s_GtkTextChûdAnch‹


57 
GObje˘
 
	m∑ª¡_ö°™˚
;

59 
gpoöãr
 
GSEAL
 (
£gmít
);

62 
	s_GtkTextChûdAnch‹Cœss


64 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

67 (*
	m_gtk_ª£rved1
) ();

68 (*
	m_gtk_ª£rved2
) ();

69 (*
	m_gtk_ª£rved3
) ();

70 (*
	m_gtk_ª£rved4
) ();

73 
GTy≥
 
	$gtk_ãxt_chûd_™ch‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

75 
GtkTextChûdAnch‹
* 
	`gtk_ãxt_chûd_™ch‹_√w
 ();

77 
GLi°
* 
	`gtk_ãxt_chûd_™ch‹_gë_widgës
 (
GtkTextChûdAnch‹
 *
™ch‹
);

78 
gboﬁón
 
	`gtk_ãxt_chûd_™ch‹_gë_dñëed
 (
GtkTextChûdAnch‹
 *
™ch‹
);

80 
G_END_DECLS


	@/usr/include/gtk/gtktextiter.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TEXT_ITER_H__


32 
	#__GTK_TEXT_ITER_H__


	)

34 
	~<gtk/gtkãxâag.h
>

35 
	~<gtk/gtkãxtchûd.h
>

37 
G_BEGIN_DECLS


40 
	mGTK_TEXT_SEARCH_VISIBLE_ONLY
 = 1 << 0,

41 
	mGTK_TEXT_SEARCH_TEXT_ONLY
 = 1 << 1

43 } 
	tGtkTextSórchFœgs
;

51 
_GtkTextBuf„r
 
	tGtkTextBuf„r
;

53 
	#GTK_TYPE_TEXT_ITER
 (
	`gtk_ãxt_ôî_gë_ty≥
 ())

	)

55 
	s_GtkTextIãr
 {

61 
gpoöãr
 
	mdummy1
;

62 
gpoöãr
 
	mdummy2
;

63 
göt
 
	mdummy3
;

64 
göt
 
	mdummy4
;

65 
göt
 
	mdummy5
;

66 
göt
 
	mdummy6
;

67 
göt
 
	mdummy7
;

68 
göt
 
	mdummy8
;

69 
gpoöãr
 
	mdummy9
;

70 
gpoöãr
 
	mdummy10
;

71 
göt
 
	mdummy11
;

72 
göt
 
	mdummy12
;

74 
göt
 
	mdummy13
;

75 
gpoöãr
 
	mdummy14
;

81 
GtkTextBuf„r
 *
gtk_ãxt_ôî_gë_buf„r
 (c⁄° 
GtkTextIãr
 *
ôî
);

87 
GtkTextIãr
 *
gtk_ãxt_ôî_c›y
 (c⁄° GtkTextIã∏*
ôî
);

88 
gtk_ãxt_ôî_‰ì
 (
GtkTextIãr
 *
ôî
);

90 
GTy≥
 
	$gtk_ãxt_ôî_gë_ty≥
 (Ë
G_GNUC_CONST
;

96 
göt
 
	`gtk_ãxt_ôî_gë_off£t
 (c⁄° 
GtkTextIãr
 *
ôî
);

97 
göt
 
	`gtk_ãxt_ôî_gë_löe
 (c⁄° 
GtkTextIãr
 *
ôî
);

98 
göt
 
	`gtk_ãxt_ôî_gë_löe_off£t
 (c⁄° 
GtkTextIãr
 *
ôî
);

99 
göt
 
	`gtk_ãxt_ôî_gë_löe_ödex
 (c⁄° 
GtkTextIãr
 *
ôî
);

101 
göt
 
	`gtk_ãxt_ôî_gë_visibÀ_löe_off£t
 (c⁄° 
GtkTextIãr
 *
ôî
);

102 
göt
 
	`gtk_ãxt_ôî_gë_visibÀ_löe_ödex
 (c⁄° 
GtkTextIãr
 *
ôî
);

108 
gunich¨
 
	`gtk_ãxt_ôî_gë_ch¨
 (c⁄° 
GtkTextIãr
 *
ôî
);

113 
gch¨
 *
	`gtk_ãxt_ôî_gë_¶i˚
 (c⁄° 
GtkTextIãr
 *
°¨t
,

114 c⁄° 
GtkTextIãr
 *
íd
);

117 
gch¨
 *
	`gtk_ãxt_ôî_gë_ãxt
 (c⁄° 
GtkTextIãr
 *
°¨t
,

118 c⁄° 
GtkTextIãr
 *
íd
);

120 
gch¨
 *
	`gtk_ãxt_ôî_gë_visibÀ_¶i˚
 (c⁄° 
GtkTextIãr
 *
°¨t
,

121 c⁄° 
GtkTextIãr
 *
íd
);

122 
gch¨
 *
	`gtk_ãxt_ôî_gë_visibÀ_ãxt
 (c⁄° 
GtkTextIãr
 *
°¨t
,

123 c⁄° 
GtkTextIãr
 *
íd
);

125 
GdkPixbuf
* 
	`gtk_ãxt_ôî_gë_pixbuf
 (c⁄° 
GtkTextIãr
 *
ôî
);

126 
GSLi°
 * 
	`gtk_ãxt_ôî_gë_m¨ks
 (c⁄° 
GtkTextIãr
 *
ôî
);

128 
GtkTextChûdAnch‹
* 
	`gtk_ãxt_ôî_gë_chûd_™ch‹
 (c⁄° 
GtkTextIãr
 *
ôî
);

133 
GSLi°
 *
	`gtk_ãxt_ôî_gë_toggÀd_ègs
 (c⁄° 
GtkTextIãr
 *
ôî
,

134 
gboﬁón
 
toggÀd_⁄
);

136 
gboﬁón
 
	`gtk_ãxt_ôî_begös_èg
 (c⁄° 
GtkTextIãr
 *
ôî
,

137 
GtkTextTag
 *
èg
);

139 
gboﬁón
 
	`gtk_ãxt_ôî_íds_èg
 (c⁄° 
GtkTextIãr
 *
ôî
,

140 
GtkTextTag
 *
èg
);

142 
gboﬁón
 
	`gtk_ãxt_ôî_toggÀs_èg
 (c⁄° 
GtkTextIãr
 *
ôî
,

143 
GtkTextTag
 *
èg
);

145 
gboﬁón
 
	`gtk_ãxt_ôî_has_èg
 (c⁄° 
GtkTextIãr
 *
ôî
,

146 
GtkTextTag
 *
èg
);

147 
GSLi°
 *
	`gtk_ãxt_ôî_gë_ègs
 (c⁄° 
GtkTextIãr
 *
ôî
);

149 
gboﬁón
 
	`gtk_ãxt_ôî_edôabÀ
 (c⁄° 
GtkTextIãr
 *
ôî
,

150 
gboﬁón
 
deÁu…_£âög
);

151 
gboﬁón
 
	`gtk_ãxt_ôî_ˇn_ö£π
 (c⁄° 
GtkTextIãr
 *
ôî
,

152 
gboﬁón
 
deÁu…_edôabûôy
);

154 
gboﬁón
 
	`gtk_ãxt_ôî_°¨ts_w‹d
 (c⁄° 
GtkTextIãr
 *
ôî
);

155 
gboﬁón
 
	`gtk_ãxt_ôî_íds_w‹d
 (c⁄° 
GtkTextIãr
 *
ôî
);

156 
gboﬁón
 
	`gtk_ãxt_ôî_öside_w‹d
 (c⁄° 
GtkTextIãr
 *
ôî
);

157 
gboﬁón
 
	`gtk_ãxt_ôî_°¨ts_£¡í˚
 (c⁄° 
GtkTextIãr
 *
ôî
);

158 
gboﬁón
 
	`gtk_ãxt_ôî_íds_£¡í˚
 (c⁄° 
GtkTextIãr
 *
ôî
);

159 
gboﬁón
 
	`gtk_ãxt_ôî_öside_£¡í˚
 (c⁄° 
GtkTextIãr
 *
ôî
);

160 
gboﬁón
 
	`gtk_ãxt_ôî_°¨ts_löe
 (c⁄° 
GtkTextIãr
 *
ôî
);

161 
gboﬁón
 
	`gtk_ãxt_ôî_íds_löe
 (c⁄° 
GtkTextIãr
 *
ôî
);

162 
gboﬁón
 
	`gtk_ãxt_ôî_is_curs‹_posôi⁄
 (c⁄° 
GtkTextIãr
 *
ôî
);

164 
göt
 
	`gtk_ãxt_ôî_gë_ch¨s_ö_löe
 (c⁄° 
GtkTextIãr
 *
ôî
);

165 
göt
 
	`gtk_ãxt_ôî_gë_byãs_ö_löe
 (c⁄° 
GtkTextIãr
 *
ôî
);

167 
gboﬁón
 
	`gtk_ãxt_ôî_gë_©åibuãs
 (c⁄° 
GtkTextIãr
 *
ôî
,

168 
GtkTextAâribuãs
 *
vÆues
);

169 
P™goL™guage
* 
	`gtk_ãxt_ôî_gë_œnguage
 (c⁄° 
GtkTextIãr
 *
ôî
);

170 
gboﬁón
 
	`gtk_ãxt_ôî_is_íd
 (c⁄° 
GtkTextIãr
 *
ôî
);

171 
gboﬁón
 
	`gtk_ãxt_ôî_is_°¨t
 (c⁄° 
GtkTextIãr
 *
ôî
);

177 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_ch¨
 (
GtkTextIãr
 *
ôî
);

178 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_ch¨
 (
GtkTextIãr
 *
ôî
);

179 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_ch¨s
 (
GtkTextIãr
 *
ôî
,

180 
göt
 
cou¡
);

181 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_ch¨s
 (
GtkTextIãr
 *
ôî
,

182 
göt
 
cou¡
);

183 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_löe
 (
GtkTextIãr
 *
ôî
);

184 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_löe
 (
GtkTextIãr
 *
ôî
);

185 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_löes
 (
GtkTextIãr
 *
ôî
,

186 
göt
 
cou¡
);

187 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_löes
 (
GtkTextIãr
 *
ôî
,

188 
göt
 
cou¡
);

189 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_w‹d_íd
 (
GtkTextIãr
 *
ôî
);

190 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_w‹d_°¨t
 (
GtkTextIãr
 *
ôî
);

191 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_w‹d_íds
 (
GtkTextIãr
 *
ôî
,

192 
göt
 
cou¡
);

193 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_w‹d_°¨ts
 (
GtkTextIãr
 *
ôî
,

194 
göt
 
cou¡
);

196 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_visibÀ_löe
 (
GtkTextIãr
 *
ôî
);

197 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_visibÀ_löe
 (
GtkTextIãr
 *
ôî
);

198 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_visibÀ_löes
 (
GtkTextIãr
 *
ôî
,

199 
göt
 
cou¡
);

200 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_visibÀ_löes
 (
GtkTextIãr
 *
ôî
,

201 
göt
 
cou¡
);

203 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_visibÀ_w‹d_íd
 (
GtkTextIãr
 *
ôî
);

204 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_visibÀ_w‹d_°¨t
 (
GtkTextIãr
 *
ôî
);

205 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_visibÀ_w‹d_íds
 (
GtkTextIãr
 *
ôî
,

206 
göt
 
cou¡
);

207 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_visibÀ_w‹d_°¨ts
 (
GtkTextIãr
 *
ôî
,

208 
göt
 
cou¡
);

210 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_£¡í˚_íd
 (
GtkTextIãr
 *
ôî
);

211 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_£¡í˚_°¨t
 (
GtkTextIãr
 *
ôî
);

212 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_£¡í˚_íds
 (
GtkTextIãr
 *
ôî
,

213 
göt
 
cou¡
);

214 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_£¡í˚_°¨ts
 (
GtkTextIãr
 *
ôî
,

215 
göt
 
cou¡
);

221 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_curs‹_posôi⁄
 (
GtkTextIãr
 *
ôî
);

222 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_curs‹_posôi⁄
 (
GtkTextIãr
 *
ôî
);

223 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_curs‹_posôi⁄s
 (
GtkTextIãr
 *
ôî
,

224 
göt
 
cou¡
);

225 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_curs‹_posôi⁄s
 (
GtkTextIãr
 *
ôî
,

226 
göt
 
cou¡
);

228 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_visibÀ_curs‹_posôi⁄
 (
GtkTextIãr
 *
ôî
);

229 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_visibÀ_curs‹_posôi⁄
 (
GtkTextIãr
 *
ôî
);

230 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_visibÀ_curs‹_posôi⁄s
 (
GtkTextIãr
 *
ôî
,

231 
göt
 
cou¡
);

232 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_visibÀ_curs‹_posôi⁄s
 (
GtkTextIãr
 *
ôî
,

233 
göt
 
cou¡
);

236 
	`gtk_ãxt_ôî_£t_off£t
 (
GtkTextIãr
 *
ôî
,

237 
göt
 
ch¨_off£t
);

238 
	`gtk_ãxt_ôî_£t_löe
 (
GtkTextIãr
 *
ôî
,

239 
göt
 
löe_numbî
);

240 
	`gtk_ãxt_ôî_£t_löe_off£t
 (
GtkTextIãr
 *
ôî
,

241 
göt
 
ch¨_⁄_löe
);

242 
	`gtk_ãxt_ôî_£t_löe_ödex
 (
GtkTextIãr
 *
ôî
,

243 
göt
 
byã_⁄_löe
);

244 
	`gtk_ãxt_ôî_f‹w¨d_to_íd
 (
GtkTextIãr
 *
ôî
);

245 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_to_löe_íd
 (
GtkTextIãr
 *
ôî
);

247 
	`gtk_ãxt_ôî_£t_visibÀ_löe_off£t
 (
GtkTextIãr
 *
ôî
,

248 
göt
 
ch¨_⁄_löe
);

249 
	`gtk_ãxt_ôî_£t_visibÀ_löe_ödex
 (
GtkTextIãr
 *
ôî
,

250 
göt
 
byã_⁄_löe
);

256 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_to_èg_toggÀ
 (
GtkTextIãr
 *
ôî
,

257 
GtkTextTag
 *
èg
);

259 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_to_èg_toggÀ
 (
GtkTextIãr
 *
ôî
,

260 
GtkTextTag
 *
èg
);

262 
	$gboﬁón
 (* 
	tGtkTextCh¨Pªdiˇã
Ë(
	tgunich¨
 
	tch
, 
	tgpoöãr
 
	tu£r_d©a
);

264 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_föd_ch¨
 (
GtkTextIãr
 *
ôî
,

265 
GtkTextCh¨Pªdiˇã
 
¥ed
,

266 
gpoöãr
 
u£r_d©a
,

267 c⁄° 
GtkTextIãr
 *
limô
);

268 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_föd_ch¨
 (
GtkTextIãr
 *
ôî
,

269 
GtkTextCh¨Pªdiˇã
 
¥ed
,

270 
gpoöãr
 
u£r_d©a
,

271 c⁄° 
GtkTextIãr
 *
limô
);

273 
gboﬁón
 
	`gtk_ãxt_ôî_f‹w¨d_£¨ch
 (c⁄° 
GtkTextIãr
 *
ôî
,

274 c⁄° 
gch¨
 *
°r
,

275 
GtkTextSórchFœgs
 
Êags
,

276 
GtkTextIãr
 *
m©ch_°¨t
,

277 
GtkTextIãr
 *
m©ch_íd
,

278 c⁄° 
GtkTextIãr
 *
limô
);

280 
gboﬁón
 
	`gtk_ãxt_ôî_backw¨d_£¨ch
 (c⁄° 
GtkTextIãr
 *
ôî
,

281 c⁄° 
gch¨
 *
°r
,

282 
GtkTextSórchFœgs
 
Êags
,

283 
GtkTextIãr
 *
m©ch_°¨t
,

284 
GtkTextIãr
 *
m©ch_íd
,

285 c⁄° 
GtkTextIãr
 *
limô
);

291 
gboﬁón
 
	`gtk_ãxt_ôî_equÆ
 (c⁄° 
GtkTextIãr
 *
lhs
,

292 c⁄° 
GtkTextIãr
 *
rhs
);

293 
göt
 
	`gtk_ãxt_ôî_com∑ª
 (c⁄° 
GtkTextIãr
 *
lhs
,

294 c⁄° 
GtkTextIãr
 *
rhs
);

295 
gboﬁón
 
	`gtk_ãxt_ôî_ö_ønge
 (c⁄° 
GtkTextIãr
 *
ôî
,

296 c⁄° 
GtkTextIãr
 *
°¨t
,

297 c⁄° 
GtkTextIãr
 *
íd
);

300 
	`gtk_ãxt_ôî_‹dî
 (
GtkTextIãr
 *
fú°
,

301 
GtkTextIãr
 *
£c⁄d
);

303 
G_END_DECLS


	@/usr/include/gtk/gtktextmark.h

50 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

54 #i‚de‡
__GTK_TEXT_MARK_H__


55 
	#__GTK_TEXT_MARK_H__


	)

57 
G_BEGIN_DECLS


61 
_GtkTextM¨k
 
	tGtkTextM¨k
;

62 
_GtkTextM¨kCœss
 
	tGtkTextM¨kCœss
;

64 
	#GTK_TYPE_TEXT_MARK
 (
	`gtk_ãxt_m¨k_gë_ty≥
 ())

	)

65 
	#GTK_TEXT_MARK
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_TEXT_MARK
, 
GtkTextM¨k
))

	)

66 
	#GTK_TEXT_MARK_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEXT_MARK
, 
GtkTextM¨kCœss
))

	)

67 
	#GTK_IS_TEXT_MARK
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_TEXT_MARK
))

	)

68 
	#GTK_IS_TEXT_MARK_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEXT_MARK
))

	)

69 
	#GTK_TEXT_MARK_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEXT_MARK
, 
GtkTextM¨kCœss
))

	)

71 
	s_GtkTextM¨k


73 
GObje˘
 
	m∑ª¡_ö°™˚
;

75 
gpoöãr
 
GSEAL
 (
£gmít
);

78 
	s_GtkTextM¨kCœss


80 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

83 (*
	m_gtk_ª£rved1
) ();

84 (*
	m_gtk_ª£rved2
) ();

85 (*
	m_gtk_ª£rved3
) ();

86 (*
	m_gtk_ª£rved4
) ();

89 
GTy≥
 
	$gtk_ãxt_m¨k_gë_ty≥
 (Ë
G_GNUC_CONST
;

91 
	`gtk_ãxt_m¨k_£t_visibÀ
 (
GtkTextM¨k
 *
m¨k
,

92 
gboﬁón
 
£âög
);

93 
gboﬁón
 
	`gtk_ãxt_m¨k_gë_visibÀ
 (
GtkTextM¨k
 *
m¨k
);

95 
GtkTextM¨k
 *
	`gtk_ãxt_m¨k_√w
 (c⁄° 
gch¨
 *
«me
,

96 
gboﬁón
 
À·_gøvôy
);

97 
G_CONST_RETURN
 
gch¨
* 
	`gtk_ãxt_m¨k_gë_«me
 (
GtkTextM¨k
 *
m¨k
);

98 
gboﬁón
 
	`gtk_ãxt_m¨k_gë_dñëed
 (
GtkTextM¨k
 *
m¨k
);

99 
GtkTextBuf„r
* 
	`gtk_ãxt_m¨k_gë_buf„r
 (
GtkTextM¨k
 *
m¨k
);

100 
gboﬁón
 
	`gtk_ãxt_m¨k_gë_À·_gøvôy
 (
GtkTextM¨k
 *
m¨k
);

102 
G_END_DECLS


	@/usr/include/gtk/gtktexttag.h

50 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

54 #i‚de‡
__GTK_TEXT_TAG_H__


55 
	#__GTK_TEXT_TAG_H__


	)

58 
	~<gdk/gdk.h
>

59 
	~<gtk/gtkíums.h
>

62 
	~<gtk/gtkobje˘.h
>

65 
G_BEGIN_DECLS


67 
_GtkTextIãr
 
	tGtkTextIãr
;

68 
_GtkTextTagTabÀ
 
	tGtkTextTagTabÀ
;

70 
_GtkTextAâribuãs
 
	tGtkTextAâribuãs
;

72 
	#GTK_TYPE_TEXT_TAG
 (
	`gtk_ãxt_èg_gë_ty≥
 ())

	)

73 
	#GTK_TEXT_TAG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TEXT_TAG
, 
GtkTextTag
))

	)

74 
	#GTK_TEXT_TAG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEXT_TAG
, 
GtkTextTagCœss
))

	)

75 
	#GTK_IS_TEXT_TAG
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TEXT_TAG
))

	)

76 
	#GTK_IS_TEXT_TAG_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEXT_TAG
))

	)

77 
	#GTK_TEXT_TAG_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEXT_TAG
, 
GtkTextTagCœss
))

	)

79 
	#GTK_TYPE_TEXT_ATTRIBUTES
 (
	`gtk_ãxt_©åibuãs_gë_ty≥
 ())

	)

81 
_GtkTextTag
 
	tGtkTextTag
;

82 
_GtkTextTagCœss
 
	tGtkTextTagCœss
;

84 
	s_GtkTextTag


86 
GObje˘
 
	m∑ª¡_ö°™˚
;

88 
GtkTextTagTabÀ
 *
GSEAL
 (
èbÀ
);

90 *
GSEAL
 (
«me
);

94 
GSEAL
 (
¥i‹ôy
);

106 
GtkTextAâribuãs
 *
GSEAL
 (
vÆues
);

111 
guöt
 
GSEAL
 (
bg_cﬁ‹_£t
) : 1;

112 
guöt
 
GSEAL
 (
bg_°ù∂e_£t
) : 1;

113 
guöt
 
GSEAL
 (
fg_cﬁ‹_£t
) : 1;

114 
guöt
 
GSEAL
 (
sˇÀ_£t
) : 1;

115 
guöt
 
GSEAL
 (
fg_°ù∂e_£t
) : 1;

116 
guöt
 
GSEAL
 (
ju°ifiˇti⁄_£t
) : 1;

117 
guöt
 
GSEAL
 (
À·_m¨gö_£t
) : 1;

118 
guöt
 
GSEAL
 (
ödít_£t
) : 1;

119 
guöt
 
GSEAL
 (
ri£_£t
) : 1;

120 
guöt
 
GSEAL
 (
°rikëhrough_£t
) : 1;

121 
guöt
 
GSEAL
 (
right_m¨gö_£t
) : 1;

122 
guöt
 
GSEAL
 (
pixñs_above_löes_£t
) : 1;

123 
guöt
 
GSEAL
 (
pixñs_bñow_löes_£t
) : 1;

124 
guöt
 
GSEAL
 (
pixñs_öside_wøp_£t
) : 1;

125 
guöt
 
GSEAL
 (
èbs_£t
) : 1;

126 
guöt
 
GSEAL
 (
undîlöe_£t
) : 1;

127 
guöt
 
GSEAL
 (
wøp_mode_£t
) : 1;

128 
guöt
 
GSEAL
 (
bg_fuŒ_height_£t
) : 1;

129 
guöt
 
GSEAL
 (
övisibÀ_£t
) : 1;

130 
guöt
 
GSEAL
 (
edôabÀ_£t
) : 1;

131 
guöt
 
GSEAL
 (
œnguage_£t
) : 1;

132 
guöt
 
GSEAL
 (
pg_bg_cﬁ‹_£t
) : 1;

135 
guöt
 
GSEAL
 (
accumuœtive_m¨gö
) : 1;

137 
guöt
 
GSEAL
 (
∑d1
) : 1;

140 
	s_GtkTextTagCœss


142 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

144 
gboﬁón
 (* 
evít
Ë(
GtkTextTag
 *
	mèg
,

145 
GObje˘
 *
	mevít_obje˘
,

146 
GdkEvít
 *
	mevít
,

147 c⁄° 
GtkTextIãr
 *
	môî
);

150 (*
	m_gtk_ª£rved1
) ();

151 (*
	m_gtk_ª£rved2
) ();

152 (*
	m_gtk_ª£rved3
) ();

153 (*
	m_gtk_ª£rved4
) ();

156 
GTy≥
 
	$gtk_ãxt_èg_gë_ty≥
 (Ë
G_GNUC_CONST
;

157 
GtkTextTag
 *
	`gtk_ãxt_èg_√w
 (c⁄° 
gch¨
 *
«me
);

158 
göt
 
	`gtk_ãxt_èg_gë_¥i‹ôy
 (
GtkTextTag
 *
èg
);

159 
	`gtk_ãxt_èg_£t_¥i‹ôy
 (
GtkTextTag
 *
èg
,

160 
göt
 
¥i‹ôy
);

161 
gboﬁón
 
	`gtk_ãxt_èg_evít
 (
GtkTextTag
 *
èg
,

162 
GObje˘
 *
evít_obje˘
,

163 
GdkEvít
 *
evít
,

164 c⁄° 
GtkTextIãr
 *
ôî
);

170 
_GtkTextAµóøn˚
 
	tGtkTextAµóøn˚
;

172 
	s_GtkTextAµóøn˚


175 
GdkCﬁ‹
 
bg_cﬁ‹
;

176 
GdkCﬁ‹
 
fg_cﬁ‹
;

177 
GdkBôm≠
 *
bg_°ù∂e
;

178 
GdkBôm≠
 *
fg_°ù∂e
;

181 
göt
 
ri£
;

187 
gpoöãr
 
∑ddög1
;

190 
guöt
 
undîlöe
 : 4;

191 
guöt
 
°rikëhrough
 : 1;

198 
guöt
 
døw_bg
 : 1;

204 
guöt
 
öside_£À˘i⁄
 : 1;

205 
guöt
 
is_ãxt
 : 1;

208 
guöt
 
∑d1
 : 1;

209 
guöt
 
∑d2
 : 1;

210 
guöt
 
∑d3
 : 1;

211 
guöt
 
∑d4
 : 1;

214 
	s_GtkTextAâribuãs


217 
guöt
 
ªfcou¡
;

220 
GtkTextAµóøn˚
 
≠≥¨™˚
;

222 
GtkJu°ifiˇti⁄
 
ju°ifiˇti⁄
;

223 
GtkTextDúe˘i⁄
 
dúe˘i⁄
;

226 
P™goF⁄tDes¸ùti⁄
 *
f⁄t
;

228 
gdoubÀ
 
f⁄t_sˇÀ
;

230 
göt
 
À·_m¨gö
;

232 
göt
 
ödít
;

234 
göt
 
right_m¨gö
;

236 
göt
 
pixñs_above_löes
;

238 
göt
 
pixñs_bñow_löes
;

240 
göt
 
pixñs_öside_wøp
;

242 
P™goTabAºay
 *
èbs
;

244 
GtkWøpMode
 
wøp_mode
;

249 
P™goL™guage
 *
œnguage
;

252 
GdkCﬁ‹
 *
pg_bg_cﬁ‹
;

256 
guöt
 
övisibÀ
 : 1;

261 
guöt
 
bg_fuŒ_height
 : 1;

264 
guöt
 
edôabÀ
 : 1;

267 
guöt
 
ªÆized
 : 1;

270 
guöt
 
∑d1
 : 1;

271 
guöt
 
∑d2
 : 1;

272 
guöt
 
∑d3
 : 1;

273 
guöt
 
∑d4
 : 1;

276 
GtkTextAâribuãs
* 
	`gtk_ãxt_©åibuãs_√w
 ();

277 
GtkTextAâribuãs
* 
	`gtk_ãxt_©åibuãs_c›y
 (GtkTextAâribuã†*
§c
);

278 
	`gtk_ãxt_©åibuãs_c›y_vÆues
 (
GtkTextAâribuãs
 *
§c
,

279 
GtkTextAâribuãs
 *
de°
);

280 
	`gtk_ãxt_©åibuãs_uƒef
 (
GtkTextAâribuãs
 *
vÆues
);

281 
GtkTextAâribuãs
 *
	`gtk_ãxt_©åibuãs_ªf
 (GtkTextAâribuã†*
vÆues
);

283 
GTy≥
 
	$gtk_ãxt_©åibuãs_gë_ty≥
 (Ë
G_GNUC_CONST
;

286 
G_END_DECLS


	@/usr/include/gtk/gtktexttagtable.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TEXT_TAG_TABLE_H__


32 
	#__GTK_TEXT_TAG_TABLE_H__


	)

34 
	~<gtk/gtkãxâag.h
>

36 
G_BEGIN_DECLS


38 (* 
	tGtkTextTagTabÀF‹óch
Ë(
	tGtkTextTag
 *
	tèg
, 
	tgpoöãr
 
	td©a
);

40 
	#GTK_TYPE_TEXT_TAG_TABLE
 (
	`gtk_ãxt_èg_èbÀ_gë_ty≥
 ())

	)

41 
	#GTK_TEXT_TAG_TABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TEXT_TAG_TABLE
, 
GtkTextTagTabÀ
))

	)

42 
	#GTK_TEXT_TAG_TABLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEXT_TAG_TABLE
, 
GtkTextTagTabÀCœss
))

	)

43 
	#GTK_IS_TEXT_TAG_TABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TEXT_TAG_TABLE
))

	)

44 
	#GTK_IS_TEXT_TAG_TABLE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEXT_TAG_TABLE
))

	)

45 
	#GTK_TEXT_TAG_TABLE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEXT_TAG_TABLE
, 
GtkTextTagTabÀCœss
))

	)

47 
_GtkTextTagTabÀCœss
 
	tGtkTextTagTabÀCœss
;

49 
	s_GtkTextTagTabÀ


51 
GObje˘
 
∑ª¡_ö°™˚
;

53 
GHashTabÀ
 *
	`GSEAL
 (
hash
);

54 
GSLi°
 *
	`GSEAL
 (
™⁄ymous
);

55 
göt
 
	`GSEAL
 (
™⁄_cou¡
);

57 
GSLi°
 *
	`GSEAL
 (
buf„rs
);

60 
	s_GtkTextTagTabÀCœss


62 
GObje˘Cœss
 
∑ª¡_˛ass
;

64 (* 
èg_ch™ged
Ë(
GtkTextTagTabÀ
 *
èbÀ
, 
GtkTextTag
 *
èg
, 
gboﬁón
 
size_ch™ged
);

65 (* 
èg_added
Ë(
GtkTextTagTabÀ
 *
èbÀ
, 
GtkTextTag
 *
èg
);

66 (* 
èg_ªmoved
Ë(
GtkTextTagTabÀ
 *
èbÀ
, 
GtkTextTag
 *
èg
);

69 (*
_gtk_ª£rved1
) ();

70 (*
_gtk_ª£rved2
) ();

71 (*
_gtk_ª£rved3
) ();

72 (*
_gtk_ª£rved4
) ();

75 
GTy≥
 
	$gtk_ãxt_èg_èbÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

77 
GtkTextTagTabÀ
 *
	`gtk_ãxt_èg_èbÀ_√w
 ();

78 
	`gtk_ãxt_èg_èbÀ_add
 (
GtkTextTagTabÀ
 *
èbÀ
,

79 
GtkTextTag
 *
èg
);

80 
	`gtk_ãxt_èg_èbÀ_ªmove
 (
GtkTextTagTabÀ
 *
èbÀ
,

81 
GtkTextTag
 *
èg
);

82 
GtkTextTag
 *
	`gtk_ãxt_èg_èbÀ_lookup
 (
GtkTextTagTabÀ
 *
èbÀ
,

83 c⁄° 
gch¨
 *
«me
);

84 
	`gtk_ãxt_èg_èbÀ_f‹óch
 (
GtkTextTagTabÀ
 *
èbÀ
,

85 
GtkTextTagTabÀF‹óch
 
func
,

86 
gpoöãr
 
d©a
);

87 
göt
 
	`gtk_ãxt_èg_èbÀ_gë_size
 (
GtkTextTagTabÀ
 *
èbÀ
);

93 
	`_gtk_ãxt_èg_èbÀ_add_buf„r
 (
GtkTextTagTabÀ
 *
èbÀ
,

94 
gpoöãr
 
buf„r
);

95 
	`_gtk_ãxt_èg_èbÀ_ªmove_buf„r
 (
GtkTextTagTabÀ
 *
èbÀ
,

96 
gpoöãr
 
buf„r
);

98 
G_END_DECLS


	@/usr/include/gtk/gtktextview.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TEXT_VIEW_H__


32 
	#__GTK_TEXT_VIEW_H__


	)

34 
	~<gtk/gtkc⁄èöî.h
>

35 
	~<gtk/gtkimc⁄ãxt.h
>

36 
	~<gtk/gtkãxtbuf„r.h
>

37 
	~<gtk/gtkmíu.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_TEXT_VIEW
 (
	`gtk_ãxt_võw_gë_ty≥
 ())

	)

42 
	#GTK_TEXT_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TEXT_VIEW
, 
GtkTextVõw
))

	)

43 
	#GTK_TEXT_VIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TEXT_VIEW
, 
GtkTextVõwCœss
))

	)

44 
	#GTK_IS_TEXT_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TEXT_VIEW
))

	)

45 
	#GTK_IS_TEXT_VIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TEXT_VIEW
))

	)

46 
	#GTK_TEXT_VIEW_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TEXT_VIEW
, 
GtkTextVõwCœss
))

	)

50 
	mGTK_TEXT_WINDOW_PRIVATE
,

51 
	mGTK_TEXT_WINDOW_WIDGET
,

52 
	mGTK_TEXT_WINDOW_TEXT
,

53 
	mGTK_TEXT_WINDOW_LEFT
,

54 
	mGTK_TEXT_WINDOW_RIGHT
,

55 
	mGTK_TEXT_WINDOW_TOP
,

56 
	mGTK_TEXT_WINDOW_BOTTOM


57 } 
	tGtkTextWödowTy≥
;

59 
	#GTK_TEXT_VIEW_PRIORITY_VALIDATE
 (
GDK_PRIORITY_REDRAW
 + 5)

	)

61 
_GtkTextVõw
 
	tGtkTextVõw
;

62 
_GtkTextVõwCœss
 
	tGtkTextVõwCœss
;

65 
_GtkTextWödow
 
	tGtkTextWödow
;

66 
_GtkTextPídögS¸ﬁl
 
	tGtkTextPídögS¸ﬁl
;

68 
	s_GtkTextVõw


70 
GtkC⁄èöî
 
	m∑ª¡_ö°™˚
;

72 
_GtkTextLayout
 *
GSEAL
 (
œyout
);

73 
GtkTextBuf„r
 *
GSEAL
 (
buf„r
);

75 
guöt
 
GSEAL
 (
£À˘i⁄_døg_h™dÀr
);

76 
guöt
 
GSEAL
 (
s¸ﬁl_timeout
);

79 
göt
 
GSEAL
 (
pixñs_above_löes
);

80 
göt
 
GSEAL
 (
pixñs_bñow_löes
);

81 
göt
 
GSEAL
 (
pixñs_öside_wøp
);

82 
GtkWøpMode
 
GSEAL
 (
wøp_mode
);

83 
GtkJu°ifiˇti⁄
 
GSEAL
 (
ju°ify
);

84 
göt
 
GSEAL
 (
À·_m¨gö
);

85 
göt
 
GSEAL
 (
right_m¨gö
);

86 
göt
 
GSEAL
 (
ödít
);

87 
P™goTabAºay
 *
GSEAL
 (
èbs
);

88 
guöt
 
GSEAL
 (
edôabÀ
) : 1;

90 
guöt
 
GSEAL
 (
ovîwrôe_mode
) : 1;

91 
guöt
 
GSEAL
 (
curs‹_visibÀ
) : 1;

94 
guöt
 
GSEAL
 (
√ed_im_ª£t
) : 1;

96 
guöt
 
GSEAL
 (
ac˚±s_èb
) : 1;

98 
guöt
 
GSEAL
 (
width_ch™ged
) : 1;

103 
guöt
 
GSEAL
 (
⁄s¸ìn_vÆid©ed
) : 1;

105 
guöt
 
GSEAL
 (
mou£_curs‹_obscuªd
) : 1;

107 
GtkTextWödow
 *
GSEAL
 (
ãxt_wödow
);

108 
GtkTextWödow
 *
GSEAL
 (
À·_wödow
);

109 
GtkTextWödow
 *
GSEAL
 (
right_wödow
);

110 
GtkTextWödow
 *
GSEAL
 (
t›_wödow
);

111 
GtkTextWödow
 *
GSEAL
 (
bŸtom_wödow
);

113 
GtkAdju°mít
 *
GSEAL
 (
hadju°mít
);

114 
GtkAdju°mít
 *
GSEAL
 (
vadju°mít
);

116 
göt
 
GSEAL
 (
xoff£t
);

117 
göt
 
GSEAL
 (
yoff£t
);

118 
göt
 
GSEAL
 (
width
);

119 
göt
 
GSEAL
 (
height
);

130 
göt
 
GSEAL
 (
vútuÆ_curs‹_x
);

131 
göt
 
GSEAL
 (
vútuÆ_curs‹_y
);

133 
GtkTextM¨k
 *
GSEAL
 (
fú°_∑ø_m¨k
);

134 
göt
 
GSEAL
 (
fú°_∑ø_pixñs
);

136 
GtkTextM¨k
 *
GSEAL
 (
dnd_m¨k
);

137 
guöt
 
GSEAL
 (
blök_timeout
);

139 
guöt
 
GSEAL
 (
fú°_vÆid©e_idÀ
);

140 
guöt
 
GSEAL
 (
ö¸emíèl_vÆid©e_idÀ
);

142 
GtkIMC⁄ãxt
 *
GSEAL
 (
im_c⁄ãxt
);

143 
GtkWidgë
 *
GSEAL
 (
p›up_míu
);

145 
göt
 
GSEAL
 (
døg_°¨t_x
);

146 
göt
 
GSEAL
 (
døg_°¨t_y
);

148 
GSLi°
 *
GSEAL
 (
chûdªn
);

150 
GtkTextPídögS¸ﬁl
 *
GSEAL
 (
≥ndög_s¸ﬁl
);

152 
göt
 
GSEAL
 (
≥ndög_∂a˚_curs‹_buâ⁄
);

155 
	s_GtkTextVõwCœss


157 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

159 (* 
	m£t_s¸ﬁl_adju°míts
Ë(
GtkTextVõw
 *
	mãxt_võw
,

160 
GtkAdju°mít
 *
	mhadju°mít
,

161 
GtkAdju°mít
 *
	mvadju°mít
);

163 (* 
	mp›uœã_p›up
Ë(
GtkTextVõw
 *
	mãxt_võw
,

164 
GtkMíu
 *
	mmíu
);

169 (* 
	mmove_curs‹
Ë(
GtkTextVõw
 *
	mãxt_võw
,

170 
GtkMovemítSãp
 
	m°ï
,

171 
göt
 
	mcou¡
,

172 
gboﬁón
 
	mexãnd_£À˘i⁄
);

178 (* 
	m∑ge_h‹iz⁄èŒy
Ë(
GtkTextVõw
 *
	mãxt_võw
,

179 
göt
 
	mcou¡
,

180 
gboﬁón
 
	mexãnd_£À˘i⁄
);

183 (* 
	m£t_™ch‹
Ë(
GtkTextVõw
 *
	mãxt_võw
);

186 (* 
	mö£π_©_curs‹
Ë(
GtkTextVõw
 *
	mãxt_võw
,

187 c⁄° 
gch¨
 *
	m°r
);

188 (* 
	mdñëe_‰om_curs‹
Ë(
GtkTextVõw
 *
	mãxt_võw
,

189 
GtkDñëeTy≥
 
	mty≥
,

190 
göt
 
	mcou¡
);

191 (* 
	mback•a˚
Ë(
GtkTextVõw
 *
	mãxt_võw
);

194 (* 
	mcut_˛ùbﬂrd
Ë(
GtkTextVõw
 *
	mãxt_võw
);

195 (* 
	mc›y_˛ùbﬂrd
Ë(
GtkTextVõw
 *
	mãxt_võw
);

196 (* 
	m∑°e_˛ùbﬂrd
Ë(
GtkTextVõw
 *
	mãxt_võw
);

198 (* 
	mtoggÀ_ovîwrôe
Ë(
GtkTextVõw
 *
	mãxt_võw
);

204 (* 
	mmove_focus
Ë(
GtkTextVõw
 *
	mãxt_võw
,

205 
GtkDúe˘i⁄Ty≥
 
	mdúe˘i⁄
);

208 (*
	m_gtk_ª£rved1
) ();

209 (*
	m_gtk_ª£rved2
) ();

210 (*
	m_gtk_ª£rved3
) ();

211 (*
	m_gtk_ª£rved4
) ();

212 (*
	m_gtk_ª£rved5
) ();

213 (*
	m_gtk_ª£rved6
) ();

214 (*
	m_gtk_ª£rved7
) ();

217 
GTy≥
 
	$gtk_ãxt_võw_gë_ty≥
 (Ë
G_GNUC_CONST
;

218 
GtkWidgë
 * 
	`gtk_ãxt_võw_√w
 ();

219 
GtkWidgë
 * 
	`gtk_ãxt_võw_√w_wôh_buf„r
 (
GtkTextBuf„r
 *
buf„r
);

220 
	`gtk_ãxt_võw_£t_buf„r
 (
GtkTextVõw
 *
ãxt_võw
,

221 
GtkTextBuf„r
 *
buf„r
);

222 
GtkTextBuf„r
 *
	`gtk_ãxt_võw_gë_buf„r
 (
GtkTextVõw
 *
ãxt_võw
);

223 
gboﬁón
 
	`gtk_ãxt_võw_s¸ﬁl_to_ôî
 (
GtkTextVõw
 *
ãxt_võw
,

224 
GtkTextIãr
 *
ôî
,

225 
gdoubÀ
 
wôhö_m¨gö
,

226 
gboﬁón
 
u£_Æign
,

227 
gdoubÀ
 
xÆign
,

228 
gdoubÀ
 
yÆign
);

229 
	`gtk_ãxt_võw_s¸ﬁl_to_m¨k
 (
GtkTextVõw
 *
ãxt_võw
,

230 
GtkTextM¨k
 *
m¨k
,

231 
gdoubÀ
 
wôhö_m¨gö
,

232 
gboﬁón
 
u£_Æign
,

233 
gdoubÀ
 
xÆign
,

234 
gdoubÀ
 
yÆign
);

235 
	`gtk_ãxt_võw_s¸ﬁl_m¨k_⁄s¸ìn
 (
GtkTextVõw
 *
ãxt_võw
,

236 
GtkTextM¨k
 *
m¨k
);

237 
gboﬁón
 
	`gtk_ãxt_võw_move_m¨k_⁄s¸ìn
 (
GtkTextVõw
 *
ãxt_võw
,

238 
GtkTextM¨k
 *
m¨k
);

239 
gboﬁón
 
	`gtk_ãxt_võw_∂a˚_curs‹_⁄s¸ìn
 (
GtkTextVõw
 *
ãxt_võw
);

241 
	`gtk_ãxt_võw_gë_visibÀ_ª˘
 (
GtkTextVõw
 *
ãxt_võw
,

242 
GdkRe˘™gÀ
 *
visibÀ_ª˘
);

243 
	`gtk_ãxt_võw_£t_curs‹_visibÀ
 (
GtkTextVõw
 *
ãxt_võw
,

244 
gboﬁón
 
£âög
);

245 
gboﬁón
 
	`gtk_ãxt_võw_gë_curs‹_visibÀ
 (
GtkTextVõw
 *
ãxt_võw
);

247 
	`gtk_ãxt_võw_gë_ôî_loˇti⁄
 (
GtkTextVõw
 *
ãxt_võw
,

248 c⁄° 
GtkTextIãr
 *
ôî
,

249 
GdkRe˘™gÀ
 *
loˇti⁄
);

250 
	`gtk_ãxt_võw_gë_ôî_©_loˇti⁄
 (
GtkTextVõw
 *
ãxt_võw
,

251 
GtkTextIãr
 *
ôî
,

252 
göt
 
x
,

253 
göt
 
y
);

254 
	`gtk_ãxt_võw_gë_ôî_©_posôi⁄
 (
GtkTextVõw
 *
ãxt_võw
,

255 
GtkTextIãr
 *
ôî
,

256 
göt
 *
åaûög
,

257 
göt
 
x
,

258 
göt
 
y
);

259 
	`gtk_ãxt_võw_gë_löe_yønge
 (
GtkTextVõw
 *
ãxt_võw
,

260 c⁄° 
GtkTextIãr
 *
ôî
,

261 
göt
 *
y
,

262 
göt
 *
height
);

264 
	`gtk_ãxt_võw_gë_löe_©_y
 (
GtkTextVõw
 *
ãxt_võw
,

265 
GtkTextIãr
 *
èrgë_ôî
,

266 
göt
 
y
,

267 
göt
 *
löe_t›
);

269 
	`gtk_ãxt_võw_buf„r_to_wödow_co‹ds
 (
GtkTextVõw
 *
ãxt_võw
,

270 
GtkTextWödowTy≥
 
wö
,

271 
göt
 
buf„r_x
,

272 
göt
 
buf„r_y
,

273 
göt
 *
wödow_x
,

274 
göt
 *
wödow_y
);

275 
	`gtk_ãxt_võw_wödow_to_buf„r_co‹ds
 (
GtkTextVõw
 *
ãxt_võw
,

276 
GtkTextWödowTy≥
 
wö
,

277 
göt
 
wödow_x
,

278 
göt
 
wödow_y
,

279 
göt
 *
buf„r_x
,

280 
göt
 *
buf„r_y
);

282 
GdkWödow
* 
	`gtk_ãxt_võw_gë_wödow
 (
GtkTextVõw
 *
ãxt_võw
,

283 
GtkTextWödowTy≥
 
wö
);

284 
GtkTextWödowTy≥
 
	`gtk_ãxt_võw_gë_wödow_ty≥
 (
GtkTextVõw
 *
ãxt_võw
,

285 
GdkWödow
 *
wödow
);

287 
	`gtk_ãxt_võw_£t_b‹dî_wödow_size
 (
GtkTextVõw
 *
ãxt_võw
,

288 
GtkTextWödowTy≥
 
ty≥
,

289 
göt
 
size
);

290 
göt
 
	`gtk_ãxt_võw_gë_b‹dî_wödow_size
 (
GtkTextVõw
 *
ãxt_võw
,

291 
GtkTextWödowTy≥
 
ty≥
);

293 
gboﬁón
 
	`gtk_ãxt_võw_f‹w¨d_di•œy_löe
 (
GtkTextVõw
 *
ãxt_võw
,

294 
GtkTextIãr
 *
ôî
);

295 
gboﬁón
 
	`gtk_ãxt_võw_backw¨d_di•œy_löe
 (
GtkTextVõw
 *
ãxt_võw
,

296 
GtkTextIãr
 *
ôî
);

297 
gboﬁón
 
	`gtk_ãxt_võw_f‹w¨d_di•œy_löe_íd
 (
GtkTextVõw
 *
ãxt_võw
,

298 
GtkTextIãr
 *
ôî
);

299 
gboﬁón
 
	`gtk_ãxt_võw_backw¨d_di•œy_löe_°¨t
 (
GtkTextVõw
 *
ãxt_võw
,

300 
GtkTextIãr
 *
ôî
);

301 
gboﬁón
 
	`gtk_ãxt_võw_°¨ts_di•œy_löe
 (
GtkTextVõw
 *
ãxt_võw
,

302 c⁄° 
GtkTextIãr
 *
ôî
);

303 
gboﬁón
 
	`gtk_ãxt_võw_move_visuÆly
 (
GtkTextVõw
 *
ãxt_võw
,

304 
GtkTextIãr
 *
ôî
,

305 
göt
 
cou¡
);

308 
	`gtk_ãxt_võw_add_chûd_©_™ch‹
 (
GtkTextVõw
 *
ãxt_võw
,

309 
GtkWidgë
 *
chûd
,

310 
GtkTextChûdAnch‹
 *
™ch‹
);

312 
	`gtk_ãxt_võw_add_chûd_ö_wödow
 (
GtkTextVõw
 *
ãxt_võw
,

313 
GtkWidgë
 *
chûd
,

314 
GtkTextWödowTy≥
 
which_wödow
,

316 
göt
 
xpos
,

317 
göt
 
ypos
);

319 
	`gtk_ãxt_võw_move_chûd
 (
GtkTextVõw
 *
ãxt_võw
,

320 
GtkWidgë
 *
chûd
,

322 
göt
 
xpos
,

323 
göt
 
ypos
);

327 
	`gtk_ãxt_võw_£t_wøp_mode
 (
GtkTextVõw
 *
ãxt_võw
,

328 
GtkWøpMode
 
wøp_mode
);

329 
GtkWøpMode
 
	`gtk_ãxt_võw_gë_wøp_mode
 (
GtkTextVõw
 *
ãxt_võw
);

330 
	`gtk_ãxt_võw_£t_edôabÀ
 (
GtkTextVõw
 *
ãxt_võw
,

331 
gboﬁón
 
£âög
);

332 
gboﬁón
 
	`gtk_ãxt_võw_gë_edôabÀ
 (
GtkTextVõw
 *
ãxt_võw
);

333 
	`gtk_ãxt_võw_£t_ovîwrôe
 (
GtkTextVõw
 *
ãxt_võw
,

334 
gboﬁón
 
ovîwrôe
);

335 
gboﬁón
 
	`gtk_ãxt_võw_gë_ovîwrôe
 (
GtkTextVõw
 *
ãxt_võw
);

336 
	`gtk_ãxt_võw_£t_ac˚±s_èb
 (
GtkTextVõw
 *
ãxt_võw
,

337 
gboﬁón
 
ac˚±s_èb
);

338 
gboﬁón
 
	`gtk_ãxt_võw_gë_ac˚±s_èb
 (
GtkTextVõw
 *
ãxt_võw
);

339 
	`gtk_ãxt_võw_£t_pixñs_above_löes
 (
GtkTextVõw
 *
ãxt_võw
,

340 
göt
 
pixñs_above_löes
);

341 
göt
 
	`gtk_ãxt_võw_gë_pixñs_above_löes
 (
GtkTextVõw
 *
ãxt_võw
);

342 
	`gtk_ãxt_võw_£t_pixñs_bñow_löes
 (
GtkTextVõw
 *
ãxt_võw
,

343 
göt
 
pixñs_bñow_löes
);

344 
göt
 
	`gtk_ãxt_võw_gë_pixñs_bñow_löes
 (
GtkTextVõw
 *
ãxt_võw
);

345 
	`gtk_ãxt_võw_£t_pixñs_öside_wøp
 (
GtkTextVõw
 *
ãxt_võw
,

346 
göt
 
pixñs_öside_wøp
);

347 
göt
 
	`gtk_ãxt_võw_gë_pixñs_öside_wøp
 (
GtkTextVõw
 *
ãxt_võw
);

348 
	`gtk_ãxt_võw_£t_ju°ifiˇti⁄
 (
GtkTextVõw
 *
ãxt_võw
,

349 
GtkJu°ifiˇti⁄
 
ju°ifiˇti⁄
);

350 
GtkJu°ifiˇti⁄
 
	`gtk_ãxt_võw_gë_ju°ifiˇti⁄
 (
GtkTextVõw
 *
ãxt_võw
);

351 
	`gtk_ãxt_võw_£t_À·_m¨gö
 (
GtkTextVõw
 *
ãxt_võw
,

352 
göt
 
À·_m¨gö
);

353 
göt
 
	`gtk_ãxt_võw_gë_À·_m¨gö
 (
GtkTextVõw
 *
ãxt_võw
);

354 
	`gtk_ãxt_võw_£t_right_m¨gö
 (
GtkTextVõw
 *
ãxt_võw
,

355 
göt
 
right_m¨gö
);

356 
göt
 
	`gtk_ãxt_võw_gë_right_m¨gö
 (
GtkTextVõw
 *
ãxt_võw
);

357 
	`gtk_ãxt_võw_£t_ödít
 (
GtkTextVõw
 *
ãxt_võw
,

358 
göt
 
ödít
);

359 
göt
 
	`gtk_ãxt_võw_gë_ödít
 (
GtkTextVõw
 *
ãxt_võw
);

360 
	`gtk_ãxt_võw_£t_èbs
 (
GtkTextVõw
 *
ãxt_võw
,

361 
P™goTabAºay
 *
èbs
);

362 
P™goTabAºay
* 
	`gtk_ãxt_võw_gë_èbs
 (
GtkTextVõw
 *
ãxt_võw
);

365 
GtkTextAâribuãs
* 
	`gtk_ãxt_võw_gë_deÁu…_©åibuãs
 (
GtkTextVõw
 *
ãxt_võw
);

367 
G_END_DECLS


	@/usr/include/gtk/gtktipsquery.h

30 #i‚de‡
GTK_DISABLE_DEPRECATED


32 #i‚de‡
__GTK_TIPS_QUERY_H__


33 
	#__GTK_TIPS_QUERY_H__


	)

36 
	~<gtk/gtk.h
>

39 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_TIPS_QUERY
 (
	`gtk_tùs_quîy_gë_ty≥
 ())

	)

43 
	#GTK_TIPS_QUERY
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TIPS_QUERY
, 
GtkTùsQuîy
))

	)

44 
	#GTK_TIPS_QUERY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TIPS_QUERY
, 
GtkTùsQuîyCœss
))

	)

45 
	#GTK_IS_TIPS_QUERY
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TIPS_QUERY
))

	)

46 
	#GTK_IS_TIPS_QUERY_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TIPS_QUERY
))

	)

47 
	#GTK_TIPS_QUERY_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TIPS_QUERY
, 
GtkTùsQuîyCœss
))

	)

51 
_GtkTùsQuîy
 
	tGtkTùsQuîy
;

52 
_GtkTùsQuîyCœss
 
	tGtkTùsQuîyCœss
;

56 
	s_GtkTùsQuîy


58 
GtkLabñ
 
	mœbñ
;

60 
guöt
 
	memô_Æways
 : 1;

61 
guöt
 
	mö_quîy
 : 1;

62 
gch¨
 *
	mœbñ_öa˘ive
;

63 
gch¨
 *
	mœbñ_no_tù
;

65 
GtkWidgë
 *
	mˇŒî
;

66 
GtkWidgë
 *
	mœ°_¸os£d
;

68 
GdkCurs‹
 *
	mquîy_curs‹
;

71 
	s_GtkTùsQuîyCœss


73 
GtkLabñCœss
 
	m∑ª¡_˛ass
;

75 (*
	m°¨t_quîy
Ë(
GtkTùsQuîy
 *
	mtùs_quîy
);

76 (*
	m°›_quîy
Ë(
GtkTùsQuîy
 *
	mtùs_quîy
);

77 (*
	mwidgë_íãªd
Ë(
GtkTùsQuîy
 *
	mtùs_quîy
,

78 
GtkWidgë
 *
	mwidgë
,

79 c⁄° 
gch¨
 *
	mtù_ãxt
,

80 c⁄° 
gch¨
 *
	mtù_¥iv©e
);

81 
göt
 (*
widgë_£À˘ed
Ë(
GtkTùsQuîy
 *
	mtùs_quîy
,

82 
GtkWidgë
 *
	mwidgë
,

83 c⁄° 
gch¨
 *
	mtù_ãxt
,

84 c⁄° 
gch¨
 *
	mtù_¥iv©e
,

85 
GdkEvítBuâ⁄
 *
	mevít
);

88 (*
	m_gtk_ª£rved1
) ();

89 (*
	m_gtk_ª£rved2
) ();

90 (*
	m_gtk_ª£rved3
) ();

91 (*
	m_gtk_ª£rved4
) ();

96 
GTy≥
 
	$gtk_tùs_quîy_gë_ty≥
 (Ë
G_GNUC_CONST
;

97 
GtkWidgë
* 
	`gtk_tùs_quîy_√w
 ();

98 
	`gtk_tùs_quîy_°¨t_quîy
 (
GtkTùsQuîy
 *
tùs_quîy
);

99 
	`gtk_tùs_quîy_°›_quîy
 (
GtkTùsQuîy
 *
tùs_quîy
);

100 
	`gtk_tùs_quîy_£t_ˇŒî
 (
GtkTùsQuîy
 *
tùs_quîy
,

101 
GtkWidgë
 *
ˇŒî
);

102 
	`gtk_tùs_quîy_£t_œbñs
 (
GtkTùsQuîy
 *
tùs_quîy
,

103 c⁄° 
gch¨
 *
œbñ_öa˘ive
,

104 c⁄° 
gch¨
 *
œbñ_no_tù
);

106 
G_END_DECLS


	@/usr/include/gtk/gtktoggleaction.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_TOGGLE_ACTION_H__


36 
	#__GTK_TOGGLE_ACTION_H__


	)

38 
	~<gtk/gtka˘i⁄.h
>

40 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_TOGGLE_ACTION
 (
	`gtk_toggÀ_a˘i⁄_gë_ty≥
 ())

	)

43 
	#GTK_TOGGLE_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOGGLE_ACTION
, 
GtkToggÀA˘i⁄
))

	)

44 
	#GTK_TOGGLE_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TOGGLE_ACTION
, 
GtkToggÀA˘i⁄Cœss
))

	)

45 
	#GTK_IS_TOGGLE_ACTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOGGLE_ACTION
))

	)

46 
	#GTK_IS_TOGGLE_ACTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TOGGLE_ACTION
))

	)

47 
	#GTK_TOGGLE_ACTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_TOGGLE_ACTION
, 
GtkToggÀA˘i⁄Cœss
))

	)

49 
_GtkToggÀA˘i⁄
 
	tGtkToggÀA˘i⁄
;

50 
_GtkToggÀA˘i⁄Priv©e
 
	tGtkToggÀA˘i⁄Priv©e
;

51 
_GtkToggÀA˘i⁄Cœss
 
	tGtkToggÀA˘i⁄Cœss
;

53 
	s_GtkToggÀA˘i⁄


55 
GtkA˘i⁄
 
	m∑ª¡
;

59 
GtkToggÀA˘i⁄Priv©e
 *
GSEAL
 (
¥iv©e_d©a
);

62 
	s_GtkToggÀA˘i⁄Cœss


64 
GtkA˘i⁄Cœss
 
	m∑ª¡_˛ass
;

66 (* 
	mtoggÀd
Ë(
GtkToggÀA˘i⁄
 *
	ma˘i⁄
);

69 (*
	m_gtk_ª£rved1
) ();

70 (*
	m_gtk_ª£rved2
) ();

71 (*
	m_gtk_ª£rved3
) ();

72 (*
	m_gtk_ª£rved4
) ();

75 
GTy≥
 
	$gtk_toggÀ_a˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

76 
GtkToggÀA˘i⁄
 *
	`gtk_toggÀ_a˘i⁄_√w
 (c⁄° 
gch¨
 *
«me
,

77 c⁄° 
gch¨
 *
œbñ
,

78 c⁄° 
gch¨
 *
toﬁtù
,

79 c⁄° 
gch¨
 *
°ock_id
);

80 
	`gtk_toggÀ_a˘i⁄_toggÀd
 (
GtkToggÀA˘i⁄
 *
a˘i⁄
);

81 
	`gtk_toggÀ_a˘i⁄_£t_a˘ive
 (
GtkToggÀA˘i⁄
 *
a˘i⁄
,

82 
gboﬁón
 
is_a˘ive
);

83 
gboﬁón
 
	`gtk_toggÀ_a˘i⁄_gë_a˘ive
 (
GtkToggÀA˘i⁄
 *
a˘i⁄
);

84 
	`gtk_toggÀ_a˘i⁄_£t_døw_as_ødio
 (
GtkToggÀA˘i⁄
 *
a˘i⁄
,

85 
gboﬁón
 
døw_as_ødio
);

86 
gboﬁón
 
	`gtk_toggÀ_a˘i⁄_gë_døw_as_ødio
 (
GtkToggÀA˘i⁄
 *
a˘i⁄
);

89 
G_END_DECLS


	@/usr/include/gtk/gtktogglebutton.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TOGGLE_BUTTON_H__


32 
	#__GTK_TOGGLE_BUTTON_H__


	)

35 
	~<gtk/gtkbuâ⁄.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_TOGGLE_BUTTON
 (
	`gtk_toggÀ_buâ⁄_gë_ty≥
 ())

	)

41 
	#GTK_TOGGLE_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOGGLE_BUTTON
, 
GtkToggÀBuâ⁄
))

	)

42 
	#GTK_TOGGLE_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TOGGLE_BUTTON
, 
GtkToggÀBuâ⁄Cœss
))

	)

43 
	#GTK_IS_TOGGLE_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOGGLE_BUTTON
))

	)

44 
	#GTK_IS_TOGGLE_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TOGGLE_BUTTON
))

	)

45 
	#GTK_TOGGLE_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TOGGLE_BUTTON
, 
GtkToggÀBuâ⁄Cœss
))

	)

48 
_GtkToggÀBuâ⁄
 
	tGtkToggÀBuâ⁄
;

49 
_GtkToggÀBuâ⁄Cœss
 
	tGtkToggÀBuâ⁄Cœss
;

51 
	s_GtkToggÀBuâ⁄


53 
GtkBuâ⁄
 
	mbuâ⁄
;

55 
guöt
 
GSEAL
 (
a˘ive
) : 1;

56 
guöt
 
GSEAL
 (
døw_ödiˇt‹
) : 1;

57 
guöt
 
GSEAL
 (
öc⁄si°ít
) : 1;

60 
	s_GtkToggÀBuâ⁄Cœss


62 
GtkBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

64 (* 
	mtoggÀd
Ë(
GtkToggÀBuâ⁄
 *
	mtoggÀ_buâ⁄
);

67 (*
	m_gtk_ª£rved1
) ();

68 (*
	m_gtk_ª£rved2
) ();

69 (*
	m_gtk_ª£rved3
) ();

70 (*
	m_gtk_ª£rved4
) ();

74 
GTy≥
 
	$gtk_toggÀ_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

76 
GtkWidgë
* 
	`gtk_toggÀ_buâ⁄_√w
 ();

77 
GtkWidgë
* 
	`gtk_toggÀ_buâ⁄_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

78 
GtkWidgë
* 
	`gtk_toggÀ_buâ⁄_√w_wôh_m√m⁄ic
 (c⁄° 
gch¨
 *
œbñ
);

79 
	`gtk_toggÀ_buâ⁄_£t_mode
 (
GtkToggÀBuâ⁄
 *
toggÀ_buâ⁄
,

80 
gboﬁón
 
døw_ödiˇt‹
);

81 
gboﬁón
 
	`gtk_toggÀ_buâ⁄_gë_mode
 (
GtkToggÀBuâ⁄
 *
toggÀ_buâ⁄
);

82 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
 (
GtkToggÀBuâ⁄
 *
toggÀ_buâ⁄
,

83 
gboﬁón
 
is_a˘ive
);

84 
gboﬁón
 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
 (
GtkToggÀBuâ⁄
 *
toggÀ_buâ⁄
);

85 
	`gtk_toggÀ_buâ⁄_toggÀd
 (
GtkToggÀBuâ⁄
 *
toggÀ_buâ⁄
);

86 
	`gtk_toggÀ_buâ⁄_£t_öc⁄si°ít
 (
GtkToggÀBuâ⁄
 *
toggÀ_buâ⁄
,

87 
gboﬁón
 
£âög
);

88 
gboﬁón
 
	`gtk_toggÀ_buâ⁄_gë_öc⁄si°ít
 (
GtkToggÀBuâ⁄
 *
toggÀ_buâ⁄
);

91 #i‚de‡
GTK_DISABLE_DEPRECATED


92 
	#gtk_toggÀ_buâ⁄_£t_°©e
 
gtk_toggÀ_buâ⁄_£t_a˘ive


	)

95 
G_END_DECLS


	@/usr/include/gtk/gtktoggletoolbutton.h

23 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

27 #i‚de‡
__GTK_TOGGLE_TOOL_BUTTON_H__


28 
	#__GTK_TOGGLE_TOOL_BUTTON_H__


	)

30 
	~<gtk/gtktoﬁbuâ⁄.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_TOGGLE_TOOL_BUTTON
 (
	`gtk_toggÀ_toﬁ_buâ⁄_gë_ty≥
 ())

	)

35 
	#GTK_TOGGLE_TOOL_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOGGLE_TOOL_BUTTON
, 
GtkToggÀToﬁBuâ⁄
))

	)

36 
	#GTK_TOGGLE_TOOL_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TOGGLE_TOOL_BUTTON
, 
GtkToggÀToﬁBuâ⁄Cœss
))

	)

37 
	#GTK_IS_TOGGLE_TOOL_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOGGLE_TOOL_BUTTON
))

	)

38 
	#GTK_IS_TOGGLE_TOOL_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TOGGLE_TOOL_BUTTON
))

	)

39 
	#GTK_TOGGLE_TOOL_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_TOGGLE_TOOL_BUTTON
, 
GtkToggÀToﬁBuâ⁄Cœss
))

	)

41 
_GtkToggÀToﬁBuâ⁄
 
	tGtkToggÀToﬁBuâ⁄
;

42 
_GtkToggÀToﬁBuâ⁄Cœss
 
	tGtkToggÀToﬁBuâ⁄Cœss
;

43 
_GtkToggÀToﬁBuâ⁄Priv©e
 
	tGtkToggÀToﬁBuâ⁄Priv©e
;

45 
	s_GtkToggÀToﬁBuâ⁄


47 
GtkToﬁBuâ⁄
 
	m∑ª¡
;

50 
GtkToggÀToﬁBuâ⁄Priv©e
 *
GSEAL
 (
¥iv
);

53 
	s_GtkToggÀToﬁBuâ⁄Cœss


55 
GtkToﬁBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

58 (* 
	mtoggÀd
Ë(
GtkToggÀToﬁBuâ⁄
 *
	mbuâ⁄
);

61 (* 
	m_gtk_ª£rved1
) ();

62 (* 
	m_gtk_ª£rved2
) ();

63 (* 
	m_gtk_ª£rved3
) ();

64 (* 
	m_gtk_ª£rved4
) ();

67 
GTy≥
 
	$gtk_toggÀ_toﬁ_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

68 
GtkToﬁIãm
 *
	`gtk_toggÀ_toﬁ_buâ⁄_√w
 ();

69 
GtkToﬁIãm
 *
	`gtk_toggÀ_toﬁ_buâ⁄_√w_‰om_°ock
 (c⁄° 
gch¨
 *
°ock_id
);

71 
	`gtk_toggÀ_toﬁ_buâ⁄_£t_a˘ive
 (
GtkToggÀToﬁBuâ⁄
 *
buâ⁄
,

72 
gboﬁón
 
is_a˘ive
);

73 
gboﬁón
 
	`gtk_toggÀ_toﬁ_buâ⁄_gë_a˘ive
 (
GtkToggÀToﬁBuâ⁄
 *
buâ⁄
);

75 
G_END_DECLS


	@/usr/include/gtk/gtktoolbar.h

32 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

36 #i‚de‡
__GTK_TOOLBAR_H__


37 
	#__GTK_TOOLBAR_H__


	)

40 
	~<gtk/gtkc⁄èöî.h
>

41 
	~<gtk/gtktoﬁtùs.h
>

42 
	~<gtk/gtktoﬁôem.h
>

44 #i‚de‡
GTK_DISABLE_DEPRECATED


47 
	~<gtk/gtkpixm≠.h
>

48 
	~<gtk/gtksig«l.h
>

52 
	gG_BEGIN_DECLS


54 
	#GTK_TYPE_TOOLBAR
 (
	`gtk_toﬁb¨_gë_ty≥
 ())

	)

55 
	#GTK_TOOLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOOLBAR
, 
GtkToﬁb¨
))

	)

56 
	#GTK_TOOLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TOOLBAR
, 
GtkToﬁb¨Cœss
))

	)

57 
	#GTK_IS_TOOLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOOLBAR
))

	)

58 
	#GTK_IS_TOOLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TOOLBAR
))

	)

59 
	#GTK_TOOLBAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TOOLBAR
, 
GtkToﬁb¨Cœss
))

	)

61 #i‚de‡
GTK_DISABLE_DEPRECATED


64 
	mGTK_TOOLBAR_CHILD_SPACE
,

65 
	mGTK_TOOLBAR_CHILD_BUTTON
,

66 
	mGTK_TOOLBAR_CHILD_TOGGLEBUTTON
,

67 
	mGTK_TOOLBAR_CHILD_RADIOBUTTON
,

68 
	mGTK_TOOLBAR_CHILD_WIDGET


69 } 
	tGtkToﬁb¨ChûdTy≥
;

71 
_GtkToﬁb¨Chûd
 
	tGtkToﬁb¨Chûd
;

73 
	s_GtkToﬁb¨Chûd


75 
GtkToﬁb¨ChûdTy≥
 
	mty≥
;

76 
GtkWidgë
 *
	mwidgë
;

77 
GtkWidgë
 *
	mic⁄
;

78 
GtkWidgë
 *
	mœbñ
;

85 
	mGTK_TOOLBAR_SPACE_EMPTY
,

86 
	mGTK_TOOLBAR_SPACE_LINE


87 } 
	tGtkToﬁb¨S∑˚StyÀ
;

89 
_GtkToﬁb¨
 
	tGtkToﬁb¨
;

90 
_GtkToﬁb¨Cœss
 
	tGtkToﬁb¨Cœss
;

91 
_GtkToﬁb¨Priv©e
 
	tGtkToﬁb¨Priv©e
;

93 
	s_GtkToﬁb¨


95 
GtkC⁄èöî
 
	mc⁄èöî
;

98 
göt
 
GSEAL
 (
num_chûdªn
);

99 
GLi°
 *
GSEAL
 (
chûdªn
);

100 
GtkOrõ¡©i⁄
 
GSEAL
 (
‹õ¡©i⁄
);

101 
GtkToﬁb¨StyÀ
 
GSEAL
 (
°yÀ
);

102 
GtkIc⁄Size
 
GSEAL
 (
ic⁄_size
);

104 #i‚de‡
GTK_DISABLE_DEPRECATED


105 
GtkToﬁtùs
 *
GSEAL
 (
toﬁtùs
);

107 
gpoöãr
 
GSEAL
 (
_toﬁtùs
);

111 
göt
 
GSEAL
 (
buâ⁄_maxw
);

112 
göt
 
GSEAL
 (
buâ⁄_maxh
);

114 
guöt
 
	m_gtk_ª£rved1
;

115 
guöt
 
	m_gtk_ª£rved2
;

117 
guöt
 
GSEAL
 (
°yÀ_£t
) : 1;

118 
guöt
 
GSEAL
 (
ic⁄_size_£t
) : 1;

121 
	s_GtkToﬁb¨Cœss


123 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

126 (* 
	m‹õ¡©i⁄_ch™ged
Ë(
GtkToﬁb¨
 *
	mtoﬁb¨
,

127 
GtkOrõ¡©i⁄
 
	m‹õ¡©i⁄
);

128 (* 
	m°yÀ_ch™ged
Ë(
GtkToﬁb¨
 *
	mtoﬁb¨
,

129 
GtkToﬁb¨StyÀ
 
	m°yÀ
);

130 
gboﬁón
 (* 
p›up_c⁄ãxt_míu
Ë(
GtkToﬁb¨
 *
	mtoﬁb¨
,

131 
göt
 
	mx
,

132 
göt
 
	my
,

133 
göt
 
	mbuâ⁄_numbî
);

136 (*
	m_gtk_ª£rved1
) ();

137 (*
	m_gtk_ª£rved2
) ();

138 (*
	m_gtk_ª£rved3
) ();

141 
GTy≥
 
	$gtk_toﬁb¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

142 
GtkWidgë
 * 
	`gtk_toﬁb¨_√w
 ();

144 
	`gtk_toﬁb¨_ö£π
 (
GtkToﬁb¨
 *
toﬁb¨
,

145 
GtkToﬁIãm
 *
ôem
,

146 
göt
 
pos
);

148 
göt
 
	`gtk_toﬁb¨_gë_ôem_ödex
 (
GtkToﬁb¨
 *
toﬁb¨
,

149 
GtkToﬁIãm
 *
ôem
);

150 
göt
 
	`gtk_toﬁb¨_gë_n_ôems
 (
GtkToﬁb¨
 *
toﬁb¨
);

151 
GtkToﬁIãm
 * 
	`gtk_toﬁb¨_gë_¡h_ôem
 (
GtkToﬁb¨
 *
toﬁb¨
,

152 
göt
 
n
);

154 
gboﬁón
 
	`gtk_toﬁb¨_gë_show_¨row
 (
GtkToﬁb¨
 *
toﬁb¨
);

155 
	`gtk_toﬁb¨_£t_show_¨row
 (
GtkToﬁb¨
 *
toﬁb¨
,

156 
gboﬁón
 
show_¨row
);

158 
GtkToﬁb¨StyÀ
 
	`gtk_toﬁb¨_gë_°yÀ
 (
GtkToﬁb¨
 *
toﬁb¨
);

159 
	`gtk_toﬁb¨_£t_°yÀ
 (
GtkToﬁb¨
 *
toﬁb¨
,

160 
GtkToﬁb¨StyÀ
 
°yÀ
);

161 
	`gtk_toﬁb¨_un£t_°yÀ
 (
GtkToﬁb¨
 *
toﬁb¨
);

163 
GtkIc⁄Size
 
	`gtk_toﬁb¨_gë_ic⁄_size
 (
GtkToﬁb¨
 *
toﬁb¨
);

164 
	`gtk_toﬁb¨_£t_ic⁄_size
 (
GtkToﬁb¨
 *
toﬁb¨
,

165 
GtkIc⁄Size
 
ic⁄_size
);

166 
	`gtk_toﬁb¨_un£t_ic⁄_size
 (
GtkToﬁb¨
 *
toﬁb¨
);

168 
GtkRñõfStyÀ
 
	`gtk_toﬁb¨_gë_ªlõf_°yÀ
 (
GtkToﬁb¨
 *
toﬁb¨
);

169 
göt
 
	`gtk_toﬁb¨_gë_dr›_ödex
 (
GtkToﬁb¨
 *
toﬁb¨
,

170 
göt
 
x
,

171 
göt
 
y
);

172 
	`gtk_toﬁb¨_£t_dr›_highlight_ôem
 (
GtkToﬁb¨
 *
toﬁb¨
,

173 
GtkToﬁIãm
 *
toﬁ_ôem
,

174 
göt
 
ödex_
);

178 
gch¨
 * 
	`_gtk_toﬁb¨_ñide_undîsc‹es
 (c⁄° gch¨ *
‹igöÆ
);

179 
	`_gtk_toﬁb¨_∑öt_•a˚_löe
 (
GtkWidgë
 *
widgë
,

180 
GtkToﬁb¨
 *
toﬁb¨
,

181 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

182 c⁄° 
GtkAŒoˇti⁄
 *
Æloˇti⁄
);

183 
göt
 
	`_gtk_toﬁb¨_gë_deÁu…_•a˚_size
 ();

187 #i‚de‡
GTK_DISABLE_DEPRECATED


189 
GtkOrõ¡©i⁄
 
	`gtk_toﬁb¨_gë_‹õ¡©i⁄
 (
GtkToﬁb¨
 *
toﬁb¨
);

190 
	`gtk_toﬁb¨_£t_‹õ¡©i⁄
 (
GtkToﬁb¨
 *
toﬁb¨
,

191 
GtkOrõ¡©i⁄
 
‹õ¡©i⁄
);

192 
gboﬁón
 
	`gtk_toﬁb¨_gë_toﬁtùs
 (
GtkToﬁb¨
 *
toﬁb¨
);

193 
	`gtk_toﬁb¨_£t_toﬁtùs
 (
GtkToﬁb¨
 *
toﬁb¨
,

194 
gboﬁón
 
íabÀ
);

197 
GtkWidgë
* 
	`gtk_toﬁb¨_≠≥nd_ôem
 (
GtkToﬁb¨
 *
toﬁb¨
,

198 c⁄° *
ãxt
,

199 c⁄° *
toﬁtù_ãxt
,

200 c⁄° *
toﬁtù_¥iv©e_ãxt
,

201 
GtkWidgë
 *
ic⁄
,

202 
GCÆlback
 
ˇŒback
,

203 
gpoöãr
 
u£r_d©a
);

204 
GtkWidgë
* 
	`gtk_toﬁb¨_¥ïíd_ôem
 (
GtkToﬁb¨
 *
toﬁb¨
,

205 c⁄° *
ãxt
,

206 c⁄° *
toﬁtù_ãxt
,

207 c⁄° *
toﬁtù_¥iv©e_ãxt
,

208 
GtkWidgë
 *
ic⁄
,

209 
GCÆlback
 
ˇŒback
,

210 
gpoöãr
 
u£r_d©a
);

211 
GtkWidgë
* 
	`gtk_toﬁb¨_ö£π_ôem
 (
GtkToﬁb¨
 *
toﬁb¨
,

212 c⁄° *
ãxt
,

213 c⁄° *
toﬁtù_ãxt
,

214 c⁄° *
toﬁtù_¥iv©e_ãxt
,

215 
GtkWidgë
 *
ic⁄
,

216 
GCÆlback
 
ˇŒback
,

217 
gpoöãr
 
u£r_d©a
,

218 
göt
 
posôi⁄
);

221 
GtkWidgë
* 
	`gtk_toﬁb¨_ö£π_°ock
 (
GtkToﬁb¨
 *
toﬁb¨
,

222 c⁄° 
gch¨
 *
°ock_id
,

223 c⁄° *
toﬁtù_ãxt
,

224 c⁄° *
toﬁtù_¥iv©e_ãxt
,

225 
GCÆlback
 
ˇŒback
,

226 
gpoöãr
 
u£r_d©a
,

227 
göt
 
posôi⁄
);

230 
	`gtk_toﬁb¨_≠≥nd_•a˚
 (
GtkToﬁb¨
 *
toﬁb¨
);

231 
	`gtk_toﬁb¨_¥ïíd_•a˚
 (
GtkToﬁb¨
 *
toﬁb¨
);

232 
	`gtk_toﬁb¨_ö£π_•a˚
 (
GtkToﬁb¨
 *
toﬁb¨
,

233 
göt
 
posôi⁄
);

234 
	`gtk_toﬁb¨_ªmove_•a˚
 (
GtkToﬁb¨
 *
toﬁb¨
,

235 
göt
 
posôi⁄
);

237 
GtkWidgë
* 
	`gtk_toﬁb¨_≠≥nd_ñemít
 (
GtkToﬁb¨
 *
toﬁb¨
,

238 
GtkToﬁb¨ChûdTy≥
 
ty≥
,

239 
GtkWidgë
 *
widgë
,

240 c⁄° *
ãxt
,

241 c⁄° *
toﬁtù_ãxt
,

242 c⁄° *
toﬁtù_¥iv©e_ãxt
,

243 
GtkWidgë
 *
ic⁄
,

244 
GCÆlback
 
ˇŒback
,

245 
gpoöãr
 
u£r_d©a
);

247 
GtkWidgë
* 
	`gtk_toﬁb¨_¥ïíd_ñemít
 (
GtkToﬁb¨
 *
toﬁb¨
,

248 
GtkToﬁb¨ChûdTy≥
 
ty≥
,

249 
GtkWidgë
 *
widgë
,

250 c⁄° *
ãxt
,

251 c⁄° *
toﬁtù_ãxt
,

252 c⁄° *
toﬁtù_¥iv©e_ãxt
,

253 
GtkWidgë
 *
ic⁄
,

254 
GCÆlback
 
ˇŒback
,

255 
gpoöãr
 
u£r_d©a
);

257 
GtkWidgë
* 
	`gtk_toﬁb¨_ö£π_ñemít
 (
GtkToﬁb¨
 *
toﬁb¨
,

258 
GtkToﬁb¨ChûdTy≥
 
ty≥
,

259 
GtkWidgë
 *
widgë
,

260 c⁄° *
ãxt
,

261 c⁄° *
toﬁtù_ãxt
,

262 c⁄° *
toﬁtù_¥iv©e_ãxt
,

263 
GtkWidgë
 *
ic⁄
,

264 
GCÆlback
 
ˇŒback
,

265 
gpoöãr
 
u£r_d©a
,

266 
göt
 
posôi⁄
);

269 
	`gtk_toﬁb¨_≠≥nd_widgë
 (
GtkToﬁb¨
 *
toﬁb¨
,

270 
GtkWidgë
 *
widgë
,

271 c⁄° *
toﬁtù_ãxt
,

272 c⁄° *
toﬁtù_¥iv©e_ãxt
);

273 
	`gtk_toﬁb¨_¥ïíd_widgë
 (
GtkToﬁb¨
 *
toﬁb¨
,

274 
GtkWidgë
 *
widgë
,

275 c⁄° *
toﬁtù_ãxt
,

276 c⁄° *
toﬁtù_¥iv©e_ãxt
);

277 
	`gtk_toﬁb¨_ö£π_widgë
 (
GtkToﬁb¨
 *
toﬁb¨
,

278 
GtkWidgë
 *
widgë
,

279 c⁄° *
toﬁtù_ãxt
,

280 c⁄° *
toﬁtù_¥iv©e_ãxt
,

281 
göt
 
posôi⁄
);

286 
G_END_DECLS


	@/usr/include/gtk/gtktoolbutton.h

23 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

27 #i‚de‡
__GTK_TOOL_BUTTON_H__


28 
	#__GTK_TOOL_BUTTON_H__


	)

30 
	~<gtk/gtktoﬁôem.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_TOOL_BUTTON
 (
	`gtk_toﬁ_buâ⁄_gë_ty≥
 ())

	)

35 
	#GTK_TOOL_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOOL_BUTTON
, 
GtkToﬁBuâ⁄
))

	)

36 
	#GTK_TOOL_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TOOL_BUTTON
, 
GtkToﬁBuâ⁄Cœss
))

	)

37 
	#GTK_IS_TOOL_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOOL_BUTTON
))

	)

38 
	#GTK_IS_TOOL_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TOOL_BUTTON
))

	)

39 
	#GTK_TOOL_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_TOOL_BUTTON
, 
GtkToﬁBuâ⁄Cœss
))

	)

41 
_GtkToﬁBuâ⁄
 
	tGtkToﬁBuâ⁄
;

42 
_GtkToﬁBuâ⁄Cœss
 
	tGtkToﬁBuâ⁄Cœss
;

43 
_GtkToﬁBuâ⁄Priv©e
 
	tGtkToﬁBuâ⁄Priv©e
;

45 
	s_GtkToﬁBuâ⁄


47 
GtkToﬁIãm
 
	m∑ª¡
;

50 
GtkToﬁBuâ⁄Priv©e
 *
GSEAL
 (
¥iv
);

53 
	s_GtkToﬁBuâ⁄Cœss


55 
GtkToﬁIãmCœss
 
	m∑ª¡_˛ass
;

57 
GTy≥
 
	mbuâ⁄_ty≥
;

60 (* 
	m˛icked
Ë(
GtkToﬁBuâ⁄
 *
	mtoﬁ_ôem
);

63 (* 
	m_gtk_ª£rved1
) ();

64 (* 
	m_gtk_ª£rved2
) ();

65 (* 
	m_gtk_ª£rved3
) ();

66 (* 
	m_gtk_ª£rved4
) ();

69 
GTy≥
 
	$gtk_toﬁ_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkToﬁIãm
 *
	`gtk_toﬁ_buâ⁄_√w
 (
GtkWidgë
 *
ic⁄_widgë
,

71 c⁄° 
gch¨
 *
œbñ
);

72 
GtkToﬁIãm
 *
	`gtk_toﬁ_buâ⁄_√w_‰om_°ock
 (c⁄° 
gch¨
 *
°ock_id
);

74 
	`gtk_toﬁ_buâ⁄_£t_œbñ
 (
GtkToﬁBuâ⁄
 *
buâ⁄
,

75 c⁄° 
gch¨
 *
œbñ
);

76 
G_CONST_RETURN
 
gch¨
 *
	`gtk_toﬁ_buâ⁄_gë_œbñ
 (
GtkToﬁBuâ⁄
 *
buâ⁄
);

77 
	`gtk_toﬁ_buâ⁄_£t_u£_undîlöe
 (
GtkToﬁBuâ⁄
 *
buâ⁄
,

78 
gboﬁón
 
u£_undîlöe
);

79 
gboﬁón
 
	`gtk_toﬁ_buâ⁄_gë_u£_undîlöe
 (
GtkToﬁBuâ⁄
 *
buâ⁄
);

80 
	`gtk_toﬁ_buâ⁄_£t_°ock_id
 (
GtkToﬁBuâ⁄
 *
buâ⁄
,

81 c⁄° 
gch¨
 *
°ock_id
);

82 
G_CONST_RETURN
 
gch¨
 *
	`gtk_toﬁ_buâ⁄_gë_°ock_id
 (
GtkToﬁBuâ⁄
 *
buâ⁄
);

83 
	`gtk_toﬁ_buâ⁄_£t_ic⁄_«me
 (
GtkToﬁBuâ⁄
 *
buâ⁄
,

84 c⁄° 
gch¨
 *
ic⁄_«me
);

85 
G_CONST_RETURN
 
gch¨
 *
	`gtk_toﬁ_buâ⁄_gë_ic⁄_«me
 (
GtkToﬁBuâ⁄
 *
buâ⁄
);

86 
	`gtk_toﬁ_buâ⁄_£t_ic⁄_widgë
 (
GtkToﬁBuâ⁄
 *
buâ⁄
,

87 
GtkWidgë
 *
ic⁄_widgë
);

88 
GtkWidgë
 * 
	`gtk_toﬁ_buâ⁄_gë_ic⁄_widgë
 (
GtkToﬁBuâ⁄
 *
buâ⁄
);

89 
	`gtk_toﬁ_buâ⁄_£t_œbñ_widgë
 (
GtkToﬁBuâ⁄
 *
buâ⁄
,

90 
GtkWidgë
 *
œbñ_widgë
);

91 
GtkWidgë
 * 
	`gtk_toﬁ_buâ⁄_gë_œbñ_widgë
 (
GtkToﬁBuâ⁄
 *
buâ⁄
);

95 
GtkWidgë
 *
	`_gtk_toﬁ_buâ⁄_gë_buâ⁄
 (
GtkToﬁBuâ⁄
 *
buâ⁄
);

97 
G_END_DECLS


	@/usr/include/gtk/gtktoolitem.h

23 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

27 #i‚de‡
__GTK_TOOL_ITEM_H__


28 
	#__GTK_TOOL_ITEM_H__


	)

30 
	~<gtk/gtkbö.h
>

31 
	~<gtk/gtktoﬁtùs.h
>

32 
	~<gtk/gtkmíuôem.h
>

33 
	~<gtk/gtksizegroup.h
>

35 
	gG_BEGIN_DECLS


37 
	#GTK_TYPE_TOOL_ITEM
 (
	`gtk_toﬁ_ôem_gë_ty≥
 ())

	)

38 
	#GTK_TOOL_ITEM
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((o), 
GTK_TYPE_TOOL_ITEM
, 
GtkToﬁIãm
))

	)

39 
	#GTK_TOOL_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TOOL_ITEM
, 
GtkToﬁIãmCœss
))

	)

40 
	#GTK_IS_TOOL_ITEM
(
o
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((o), 
GTK_TYPE_TOOL_ITEM
))

	)

41 
	#GTK_IS_TOOL_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TOOL_ITEM
))

	)

42 
	#GTK_TOOL_ITEM_GET_CLASS
(
o
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((o), 
GTK_TYPE_TOOL_ITEM
, 
GtkToﬁIãmCœss
))

	)

44 
_GtkToﬁIãm
 
	tGtkToﬁIãm
;

45 
_GtkToﬁIãmCœss
 
	tGtkToﬁIãmCœss
;

46 
_GtkToﬁIãmPriv©e
 
	tGtkToﬁIãmPriv©e
;

48 
	s_GtkToﬁIãm


50 
GtkBö
 
	m∑ª¡
;

53 
GtkToﬁIãmPriv©e
 *
GSEAL
 (
¥iv
);

56 
	s_GtkToﬁIãmCœss


58 
GtkBöCœss
 
	m∑ª¡_˛ass
;

61 
gboﬁón
 (* 
¸óã_míu_¥oxy
Ë(
GtkToﬁIãm
 *
	mtoﬁ_ôem
);

62 (* 
	mtoﬁb¨_ªc⁄figuªd
Ë(
GtkToﬁIãm
 *
	mtoﬁ_ôem
);

63 #i‚de‡
GTK_DISABLE_DEPRECATED


64 
gboﬁón
 (* 
£t_toﬁtù
Ë(
GtkToﬁIãm
 *
	mtoﬁ_ôem
,

65 
GtkToﬁtùs
 *
	mtoﬁtùs
,

66 c⁄° 
gch¨
 *
	mtù_ãxt
,

67 c⁄° 
gch¨
 *
	mtù_¥iv©e
);

69 
gpoöãr
 
	m_£t_toﬁtù
;

73 (* 
	m_gtk_ª£rved1
) ();

74 (* 
	m_gtk_ª£rved2
) ();

75 (* 
	m_gtk_ª£rved3
) ();

76 (* 
	m_gtk_ª£rved4
) ();

79 
GTy≥
 
	$gtk_toﬁ_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

80 
GtkToﬁIãm
 *
	`gtk_toﬁ_ôem_√w
 ();

82 
	`gtk_toﬁ_ôem_£t_homogíeous
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

83 
gboﬁón
 
homogíeous
);

84 
gboﬁón
 
	`gtk_toﬁ_ôem_gë_homogíeous
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

86 
	`gtk_toﬁ_ôem_£t_ex∑nd
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

87 
gboﬁón
 
ex∑nd
);

88 
gboﬁón
 
	`gtk_toﬁ_ôem_gë_ex∑nd
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

90 #i‚de‡
GTK_DISABLE_DEPRECATED


91 
	`gtk_toﬁ_ôem_£t_toﬁtù
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

92 
GtkToﬁtùs
 *
toﬁtùs
,

93 c⁄° 
gch¨
 *
tù_ãxt
,

94 c⁄° 
gch¨
 *
tù_¥iv©e
);

96 
	`gtk_toﬁ_ôem_£t_toﬁtù_ãxt
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

97 c⁄° 
gch¨
 *
ãxt
);

98 
	`gtk_toﬁ_ôem_£t_toﬁtù_m¨kup
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

99 c⁄° 
gch¨
 *
m¨kup
);

101 
	`gtk_toﬁ_ôem_£t_u£_døg_wödow
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

102 
gboﬁón
 
u£_døg_wödow
);

103 
gboﬁón
 
	`gtk_toﬁ_ôem_gë_u£_døg_wödow
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

105 
	`gtk_toﬁ_ôem_£t_visibÀ_h‹iz⁄èl
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

106 
gboﬁón
 
visibÀ_h‹iz⁄èl
);

107 
gboﬁón
 
	`gtk_toﬁ_ôem_gë_visibÀ_h‹iz⁄èl
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

109 
	`gtk_toﬁ_ôem_£t_visibÀ_vîtiˇl
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

110 
gboﬁón
 
visibÀ_vîtiˇl
);

111 
gboﬁón
 
	`gtk_toﬁ_ôem_gë_visibÀ_vîtiˇl
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

113 
gboﬁón
 
	`gtk_toﬁ_ôem_gë_is_imp‹è¡
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

114 
	`gtk_toﬁ_ôem_£t_is_imp‹è¡
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

115 
gboﬁón
 
is_imp‹è¡
);

117 
P™goEŒùsizeMode
 
	`gtk_toﬁ_ôem_gë_ñlùsize_mode
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

118 
GtkIc⁄Size
 
	`gtk_toﬁ_ôem_gë_ic⁄_size
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

119 
GtkOrõ¡©i⁄
 
	`gtk_toﬁ_ôem_gë_‹õ¡©i⁄
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

120 
GtkToﬁb¨StyÀ
 
	`gtk_toﬁ_ôem_gë_toﬁb¨_°yÀ
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

121 
GtkRñõfStyÀ
 
	`gtk_toﬁ_ôem_gë_ªlõf_°yÀ
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

122 
gÊﬂt
 
	`gtk_toﬁ_ôem_gë_ãxt_Æignmít
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

123 
GtkOrõ¡©i⁄
 
	`gtk_toﬁ_ôem_gë_ãxt_‹õ¡©i⁄
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

124 
GtkSizeGroup
 * 
	`gtk_toﬁ_ôem_gë_ãxt_size_group
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

126 
GtkWidgë
 * 
	`gtk_toﬁ_ôem_ªåõve_¥oxy_míu_ôem
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

127 
GtkWidgë
 * 
	`gtk_toﬁ_ôem_gë_¥oxy_míu_ôem
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

128 c⁄° 
gch¨
 *
míu_ôem_id
);

129 
	`gtk_toﬁ_ôem_£t_¥oxy_míu_ôem
 (
GtkToﬁIãm
 *
toﬁ_ôem
,

130 c⁄° 
gch¨
 *
míu_ôem_id
,

131 
GtkWidgë
 *
míu_ôem
);

132 
	`gtk_toﬁ_ôem_ªbuûd_míu
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

134 
	`gtk_toﬁ_ôem_toﬁb¨_ªc⁄figuªd
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

138 
gboﬁón
 
	`_gtk_toﬁ_ôem_¸óã_míu_¥oxy
 (
GtkToﬁIãm
 *
toﬁ_ôem
);

140 
G_END_DECLS


	@/usr/include/gtk/gtktoolitemgroup.h

22 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_TOOL_ITEM_GROUP_H__


27 
	#__GTK_TOOL_ITEM_GROUP_H__


	)

29 
	~<gtk/gtkc⁄èöî.h
>

30 
	~<gtk/gtktoﬁôem.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_TOOL_ITEM_GROUP
 (
	`gtk_toﬁ_ôem_group_gë_ty≥
 ())

	)

35 
	#GTK_TOOL_ITEM_GROUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 (obj, 
GTK_TYPE_TOOL_ITEM_GROUP
, 
GtkToﬁIãmGroup
))

	)

36 
	#GTK_TOOL_ITEM_GROUP_CLASS
(
˛s
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 (˛s, 
GTK_TYPE_TOOL_ITEM_GROUP
, 
GtkToﬁIãmGroupCœss
))

	)

37 
	#GTK_IS_TOOL_ITEM_GROUP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 (obj, 
GTK_TYPE_TOOL_ITEM_GROUP
))

	)

38 
	#GTK_IS_TOOL_ITEM_GROUP_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 (obj, 
GTK_TYPE_TOOL_ITEM_GROUP
))

	)

39 
	#GTK_TOOL_ITEM_GROUP_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TOOL_ITEM_GROUP
, 
GtkToﬁIãmGroupCœss
))

	)

41 
_GtkToﬁIãmGroup
 
	tGtkToﬁIãmGroup
;

42 
_GtkToﬁIãmGroupCœss
 
	tGtkToﬁIãmGroupCœss
;

43 
_GtkToﬁIãmGroupPriv©e
 
	tGtkToﬁIãmGroupPriv©e
;

50 
	s_GtkToﬁIãmGroup


52 
GtkC⁄èöî
 
	m∑ª¡_ö°™˚
;

53 
GtkToﬁIãmGroupPriv©e
 *
	m¥iv
;

56 
	s_GtkToﬁIãmGroupCœss


58 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

61 
GTy≥
 
	$gtk_toﬁ_ôem_group_gë_ty≥
 (Ë
G_GNUC_CONST
;

62 
GtkWidgë
* 
	`gtk_toﬁ_ôem_group_√w
 (c⁄° 
gch¨
 *
œbñ
);

64 
	`gtk_toﬁ_ôem_group_£t_œbñ
 (
GtkToﬁIãmGroup
 *
group
,

65 c⁄° 
gch¨
 *
œbñ
);

66 
	`gtk_toﬁ_ôem_group_£t_œbñ_widgë
 (
GtkToﬁIãmGroup
 *
group
,

67 
GtkWidgë
 *
œbñ_widgë
);

68 
	`gtk_toﬁ_ôem_group_£t_cﬁœp£d
 (
GtkToﬁIãmGroup
 *
group
,

69 
gboﬁón
 
cﬁœp£d
);

70 
	`gtk_toﬁ_ôem_group_£t_ñlùsize
 (
GtkToﬁIãmGroup
 *
group
,

71 
P™goEŒùsizeMode
 
ñlùsize
);

72 
	`gtk_toﬁ_ôem_group_£t_hódî_ªlõf
 (
GtkToﬁIãmGroup
 *
group
,

73 
GtkRñõfStyÀ
 
°yÀ
);

75 
G_CONST_RETURN
 
gch¨
* 
	`gtk_toﬁ_ôem_group_gë_œbñ
 (
GtkToﬁIãmGroup
 *
group
);

76 
GtkWidgë
 *
	`gtk_toﬁ_ôem_group_gë_œbñ_widgë
 (
GtkToﬁIãmGroup
 *
group
);

77 
gboﬁón
 
	`gtk_toﬁ_ôem_group_gë_cﬁœp£d
 (
GtkToﬁIãmGroup
 *
group
);

78 
P™goEŒùsizeMode
 
	`gtk_toﬁ_ôem_group_gë_ñlùsize
 (
GtkToﬁIãmGroup
 *
group
);

79 
GtkRñõfStyÀ
 
	`gtk_toﬁ_ôem_group_gë_hódî_ªlõf
 (
GtkToﬁIãmGroup
 *
group
);

81 
	`gtk_toﬁ_ôem_group_ö£π
 (
GtkToﬁIãmGroup
 *
group
,

82 
GtkToﬁIãm
 *
ôem
,

83 
göt
 
posôi⁄
);

84 
	`gtk_toﬁ_ôem_group_£t_ôem_posôi⁄
 (
GtkToﬁIãmGroup
 *
group
,

85 
GtkToﬁIãm
 *
ôem
,

86 
göt
 
posôi⁄
);

87 
göt
 
	`gtk_toﬁ_ôem_group_gë_ôem_posôi⁄
 (
GtkToﬁIãmGroup
 *
group
,

88 
GtkToﬁIãm
 *
ôem
);

90 
guöt
 
	`gtk_toﬁ_ôem_group_gë_n_ôems
 (
GtkToﬁIãmGroup
 *
group
);

91 
GtkToﬁIãm
* 
	`gtk_toﬁ_ôem_group_gë_¡h_ôem
 (
GtkToﬁIãmGroup
 *
group
,

92 
guöt
 
ödex
);

93 
GtkToﬁIãm
* 
	`gtk_toﬁ_ôem_group_gë_dr›_ôem
 (
GtkToﬁIãmGroup
 *
group
,

94 
göt
 
x
,

95 
göt
 
y
);

97 
G_END_DECLS


	@/usr/include/gtk/gtktoolpalette.h

22 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_TOOL_PALETTE_H__


27 
	#__GTK_TOOL_PALETTE_H__


	)

29 
	~<gtk/gtkc⁄èöî.h
>

30 
	~<gtk/gtkdnd.h
>

31 
	~<gtk/gtktoﬁôem.h
>

33 
	gG_BEGIN_DECLS


35 
	#GTK_TYPE_TOOL_PALETTE
 (
	`gtk_toﬁ_∑Àâe_gë_ty≥
 ())

	)

36 
	#GTK_TOOL_PALETTE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 (obj, 
GTK_TYPE_TOOL_PALETTE
, 
GtkToﬁPÆëã
))

	)

37 
	#GTK_TOOL_PALETTE_CLASS
(
˛s
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 (˛s, 
GTK_TYPE_TOOL_PALETTE
, 
GtkToﬁPÆëãCœss
))

	)

38 
	#GTK_IS_TOOL_PALETTE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 (obj, 
GTK_TYPE_TOOL_PALETTE
))

	)

39 
	#GTK_IS_TOOL_PALETTE_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 (obj, 
GTK_TYPE_TOOL_PALETTE
))

	)

40 
	#GTK_TOOL_PALETTE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TOOL_PALETTE
, 
GtkToﬁPÆëãCœss
))

	)

42 
_GtkToﬁPÆëã
 
	tGtkToﬁPÆëã
;

43 
_GtkToﬁPÆëãCœss
 
	tGtkToﬁPÆëãCœss
;

44 
_GtkToﬁPÆëãPriv©e
 
	tGtkToﬁPÆëãPriv©e
;

55 
	mGTK_TOOL_PALETTE_DRAG_ITEMS
 = (1 << 0),

56 
	mGTK_TOOL_PALETTE_DRAG_GROUPS
 = (1 << 1)

58 
	tGtkToﬁPÆëãDøgT¨gës
;

65 
	s_GtkToﬁPÆëã


67 
GtkC⁄èöî
 
	m∑ª¡_ö°™˚
;

68 
GtkToﬁPÆëãPriv©e
 *
	m¥iv
;

71 
	s_GtkToﬁPÆëãCœss


73 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

75 (*
	m£t_s¸ﬁl_adju°míts
Ë(
GtkWidgë
 *
	mwidgë
,

76 
GtkAdju°mít
 *
	mhadju°mít
,

77 
GtkAdju°mít
 *
	mvadju°mít
);

80 (*
	m_gtk_ª£rved1
) ();

81 (*
	m_gtk_ª£rved2
) ();

82 (*
	m_gtk_ª£rved3
) ();

83 (*
	m_gtk_ª£rved4
) ();

84 (*
	m_gtk_ª£rved5
) ();

85 (*
	m_gtk_ª£rved6
) ();

88 
GTy≥
 
	$gtk_toﬁ_∑Àâe_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
GtkWidgë
* 
	`gtk_toﬁ_∑Àâe_√w
 ();

91 
	`gtk_toﬁ_∑Àâe_£t_group_posôi⁄
 (
GtkToﬁPÆëã
 *
∑Àâe
,

92 
GtkToﬁIãmGroup
 *
group
,

93 
göt
 
posôi⁄
);

94 
	`gtk_toﬁ_∑Àâe_£t_ex˛usive
 (
GtkToﬁPÆëã
 *
∑Àâe
,

95 
GtkToﬁIãmGroup
 *
group
,

96 
gboﬁón
 
ex˛usive
);

97 
	`gtk_toﬁ_∑Àâe_£t_ex∑nd
 (
GtkToﬁPÆëã
 *
∑Àâe
,

98 
GtkToﬁIãmGroup
 *
group
,

99 
gboﬁón
 
ex∑nd
);

101 
göt
 
	`gtk_toﬁ_∑Àâe_gë_group_posôi⁄
 (
GtkToﬁPÆëã
 *
∑Àâe
,

102 
GtkToﬁIãmGroup
 *
group
);

103 
gboﬁón
 
	`gtk_toﬁ_∑Àâe_gë_ex˛usive
 (
GtkToﬁPÆëã
 *
∑Àâe
,

104 
GtkToﬁIãmGroup
 *
group
);

105 
gboﬁón
 
	`gtk_toﬁ_∑Àâe_gë_ex∑nd
 (
GtkToﬁPÆëã
 *
∑Àâe
,

106 
GtkToﬁIãmGroup
 *
group
);

108 
	`gtk_toﬁ_∑Àâe_£t_ic⁄_size
 (
GtkToﬁPÆëã
 *
∑Àâe
,

109 
GtkIc⁄Size
 
ic⁄_size
);

110 
	`gtk_toﬁ_∑Àâe_un£t_ic⁄_size
 (
GtkToﬁPÆëã
 *
∑Àâe
);

111 
	`gtk_toﬁ_∑Àâe_£t_°yÀ
 (
GtkToﬁPÆëã
 *
∑Àâe
,

112 
GtkToﬁb¨StyÀ
 
°yÀ
);

113 
	`gtk_toﬁ_∑Àâe_un£t_°yÀ
 (
GtkToﬁPÆëã
 *
∑Àâe
);

115 
GtkIc⁄Size
 
	`gtk_toﬁ_∑Àâe_gë_ic⁄_size
 (
GtkToﬁPÆëã
 *
∑Àâe
);

116 
GtkToﬁb¨StyÀ
 
	`gtk_toﬁ_∑Àâe_gë_°yÀ
 (
GtkToﬁPÆëã
 *
∑Àâe
);

118 
GtkToﬁIãm
* 
	`gtk_toﬁ_∑Àâe_gë_dr›_ôem
 (
GtkToﬁPÆëã
 *
∑Àâe
,

119 
göt
 
x
,

120 
göt
 
y
);

121 
GtkToﬁIãmGroup
* 
	`gtk_toﬁ_∑Àâe_gë_dr›_group
 (
GtkToﬁPÆëã
 *
∑Àâe
,

122 
göt
 
x
,

123 
göt
 
y
);

124 
GtkWidgë
* 
	`gtk_toﬁ_∑Àâe_gë_døg_ôem
 (
GtkToﬁPÆëã
 *
∑Àâe
,

125 c⁄° 
GtkSñe˘i⁄D©a
 *
£À˘i⁄
);

127 
	`gtk_toﬁ_∑Àâe_£t_døg_sour˚
 (
GtkToﬁPÆëã
 *
∑Àâe
,

128 
GtkToﬁPÆëãDøgT¨gës
 
èrgës
);

129 
	`gtk_toﬁ_∑Àâe_add_døg_de°
 (
GtkToﬁPÆëã
 *
∑Àâe
,

130 
GtkWidgë
 *
widgë
,

131 
GtkDe°DeÁu…s
 
Êags
,

132 
GtkToﬁPÆëãDøgT¨gës
 
èrgës
,

133 
GdkDøgA˘i⁄
 
a˘i⁄s
);

135 
GtkAdju°mít
* 
	`gtk_toﬁ_∑Àâe_gë_hadju°mít
 (
GtkToﬁPÆëã
 *
∑Àâe
);

136 
GtkAdju°mít
* 
	`gtk_toﬁ_∑Àâe_gë_vadju°mít
 (
GtkToﬁPÆëã
 *
∑Àâe
);

138 
G_CONST_RETURN
 
GtkT¨gëE¡ry
* 
	$gtk_toﬁ_∑Àâe_gë_døg_èrgë_ôem
 (Ë
G_GNUC_CONST
;

139 
G_CONST_RETURN
 
GtkT¨gëE¡ry
* 
	$gtk_toﬁ_∑Àâe_gë_døg_èrgë_group
 (Ë
G_GNUC_CONST
;

142 
G_END_DECLS


	@/usr/include/gtk/gtktoolshell.h

23 #i‡!
deföed
 (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

27 #i‚de‡
__GTK_TOOL_SHELL_H__


28 
	#__GTK_TOOL_SHELL_H__


	)

31 
	~<gtk/gtkíums.h
>

32 
	~<∑ngo/∑ngo.h
>

33 
	~<gtk/gtksizegroup.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_TOOL_SHELL
 (
	`gtk_toﬁ_shñl_gë_ty≥
 ())

	)

39 
	#GTK_TOOL_SHELL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOOL_SHELL
, 
GtkToﬁShñl
))

	)

40 
	#GTK_IS_TOOL_SHELL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOOL_SHELL
))

	)

41 
	#GTK_TOOL_SHELL_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_TOOL_SHELL
, 
GtkToﬁShñlIÁ˚
))

	)

43 
_GtkToﬁShñl
 
	tGtkToﬁShñl
;

44 
_GtkToﬁShñlIÁ˚
 
	tGtkToﬁShñlIÁ˚
;

60 
	s_GtkToﬁShñlIÁ˚


63 
GTy≥I¡îÁ˚
 
	mg_iÁ˚
;

66 
GtkIc⁄Size
 (*
gë_ic⁄_size
Ë(
GtkToﬁShñl
 *
	mshñl
);

67 
GtkOrõ¡©i⁄
 (*
gë_‹õ¡©i⁄
Ë(
GtkToﬁShñl
 *
	mshñl
);

68 
GtkToﬁb¨StyÀ
 (*
gë_°yÀ
Ë(
GtkToﬁShñl
 *
	mshñl
);

69 
GtkRñõfStyÀ
 (*
gë_ªlõf_°yÀ
Ë(
GtkToﬁShñl
 *
	mshñl
);

70 (*
	mªbuûd_míu
Ë(
GtkToﬁShñl
 *
	mshñl
);

71 
GtkOrõ¡©i⁄
 (*
gë_ãxt_‹õ¡©i⁄
Ë(
GtkToﬁShñl
 *
	mshñl
);

72 
gÊﬂt
 (*
gë_ãxt_Æignmít
Ë(
GtkToﬁShñl
 *
	mshñl
);

73 
P™goEŒùsizeMode
 (*
gë_ñlùsize_mode
Ë(
GtkToﬁShñl
 *
	mshñl
);

74 
	mGtkSizeGroup
 * (*
	mgë_ãxt_size_group
Ë(
GtkToﬁShñl
 *
	mshñl
);

77 
GTy≥
 
	$gtk_toﬁ_shñl_gë_ty≥
 (Ë
G_GNUC_CONST
;

79 
GtkIc⁄Size
 
	`gtk_toﬁ_shñl_gë_ic⁄_size
 (
GtkToﬁShñl
 *
shñl
);

80 
GtkOrõ¡©i⁄
 
	`gtk_toﬁ_shñl_gë_‹õ¡©i⁄
 (
GtkToﬁShñl
 *
shñl
);

81 
GtkToﬁb¨StyÀ
 
	`gtk_toﬁ_shñl_gë_°yÀ
 (
GtkToﬁShñl
 *
shñl
);

82 
GtkRñõfStyÀ
 
	`gtk_toﬁ_shñl_gë_ªlõf_°yÀ
 (
GtkToﬁShñl
 *
shñl
);

83 
	`gtk_toﬁ_shñl_ªbuûd_míu
 (
GtkToﬁShñl
 *
shñl
);

84 
GtkOrõ¡©i⁄
 
	`gtk_toﬁ_shñl_gë_ãxt_‹õ¡©i⁄
 (
GtkToﬁShñl
 *
shñl
);

85 
gÊﬂt
 
	`gtk_toﬁ_shñl_gë_ãxt_Æignmít
 (
GtkToﬁShñl
 *
shñl
);

86 
P™goEŒùsizeMode
 
	`gtk_toﬁ_shñl_gë_ñlùsize_mode
 (
GtkToﬁShñl
 *
shñl
);

87 
GtkSizeGroup
 * 
	`gtk_toﬁ_shñl_gë_ãxt_size_group
 (
GtkToﬁShñl
 *
shñl
);

89 
G_END_DECLS


	@/usr/include/gtk/gtktooltip.h

22 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

26 #i‚de‡
__GTK_TOOLTIP_H__


27 
	#__GTK_TOOLTIP_H__


	)

29 
	~<gtk/gtkwödow.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_TOOLTIP
 (
	`gtk_toﬁtù_gë_ty≥
 ())

	)

34 
	#GTK_TOOLTIP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOOLTIP
, 
GtkToﬁtù
))

	)

35 
	#GTK_IS_TOOLTIP
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOOLTIP
))

	)

37 
GTy≥
 
gtk_toﬁtù_gë_ty≥
 ();

39 
gtk_toﬁtù_£t_m¨kup
 (
GtkToﬁtù
 *
toﬁtù
,

40 c⁄° 
gch¨
 *
m¨kup
);

41 
gtk_toﬁtù_£t_ãxt
 (
GtkToﬁtù
 *
toﬁtù
,

42 c⁄° 
gch¨
 *
ãxt
);

43 
gtk_toﬁtù_£t_ic⁄
 (
GtkToﬁtù
 *
toﬁtù
,

44 
GdkPixbuf
 *
pixbuf
);

45 
gtk_toﬁtù_£t_ic⁄_‰om_°ock
 (
GtkToﬁtù
 *
toﬁtù
,

46 c⁄° 
gch¨
 *
°ock_id
,

47 
GtkIc⁄Size
 
size
);

48 
gtk_toﬁtù_£t_ic⁄_‰om_ic⁄_«me
 (
GtkToﬁtù
 *
toﬁtù
,

49 c⁄° 
gch¨
 *
ic⁄_«me
,

50 
GtkIc⁄Size
 
size
);

51 
gtk_toﬁtù_£t_ic⁄_‰om_gic⁄
 (
GtkToﬁtù
 *
toﬁtù
,

52 
GIc⁄
 *
gic⁄
,

53 
GtkIc⁄Size
 
size
);

54 
gtk_toﬁtù_£t_cu°om
 (
GtkToﬁtù
 *
toﬁtù
,

55 
GtkWidgë
 *
cu°om_widgë
);

57 
gtk_toﬁtù_£t_tù_¨ó
 (
GtkToﬁtù
 *
toﬁtù
,

58 c⁄° 
GdkRe˘™gÀ
 *
ª˘
);

60 
gtk_toﬁtù_åiggî_toﬁtù_quîy
 (
GdkDi•œy
 *
di•œy
);

63 
_gtk_toﬁtù_focus_ö
 (
GtkWidgë
 *
widgë
);

64 
_gtk_toﬁtù_focus_out
 (
GtkWidgë
 *
widgë
);

65 
_gtk_toﬁtù_toggÀ_keybﬂrd_mode
 (
GtkWidgë
 *
widgë
);

66 
_gtk_toﬁtù_h™dÀ_evít
 (
GdkEvít
 *
evít
);

67 
_gtk_toﬁtù_hide
 (
GtkWidgë
 *
widgë
);

69 
	gG_END_DECLS


	@/usr/include/gtk/gtktooltips.h

27 #i‚de‡
GTK_DISABLE_DEPRECATED


29 #i‚de‡
__GTK_TOOLTIPS_H__


30 
	#__GTK_TOOLTIPS_H__


	)

32 
	~<gtk/gtkwidgë.h
>

33 
	~<gtk/gtkwödow.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_TOOLTIPS
 (
	`gtk_toﬁtùs_gë_ty≥
 ())

	)

39 
	#GTK_TOOLTIPS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TOOLTIPS
, 
GtkToﬁtùs
))

	)

40 
	#GTK_TOOLTIPS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TOOLTIPS
, 
GtkToﬁtùsCœss
))

	)

41 
	#GTK_IS_TOOLTIPS
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TOOLTIPS
))

	)

42 
	#GTK_IS_TOOLTIPS_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TOOLTIPS
))

	)

43 
	#GTK_TOOLTIPS_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TOOLTIPS
, 
GtkToﬁtùsCœss
))

	)

46 
_GtkToﬁtùs
 
	tGtkToﬁtùs
;

47 
_GtkToﬁtùsCœss
 
	tGtkToﬁtùsCœss
;

48 
_GtkToﬁtùsD©a
 
	tGtkToﬁtùsD©a
;

50 
	s_GtkToﬁtùsD©a


52 
GtkToﬁtùs
 *
	mtoﬁtùs
;

53 
GtkWidgë
 *
	mwidgë
;

54 
gch¨
 *
	mtù_ãxt
;

55 
gch¨
 *
	mtù_¥iv©e
;

58 
	s_GtkToﬁtùs


60 
GtkObje˘
 
	m∑ª¡_ö°™˚
;

63 
GtkWidgë
 *
	mtù_wödow
;

64 
GtkWidgë
 *
	mtù_œbñ
;

65 
GtkToﬁtùsD©a
 *
	ma˘ive_tùs_d©a
;

66 
GLi°
 *
	mtùs_d©a_li°
;

68 
guöt
 
	mdñay
 : 30;

69 
guöt
 
	míabÀd
 : 1;

70 
guöt
 
	mhave_gøb
 : 1;

71 
guöt
 
	mu£_°icky_dñay
 : 1;

72 
göt
 
	mtimî_èg
;

73 
GTimeVÆ
 
	mœ°_p›down
;

76 
	s_GtkToﬁtùsCœss


78 
GtkObje˘Cœss
 
	m∑ª¡_˛ass
;

81 (*
	m_gtk_ª£rved1
) ();

82 (*
	m_gtk_ª£rved2
) ();

83 (*
	m_gtk_ª£rved3
) ();

84 (*
	m_gtk_ª£rved4
) ();

87 
GTy≥
 
	$gtk_toﬁtùs_gë_ty≥
 (Ë
G_GNUC_CONST
;

88 
GtkToﬁtùs
* 
	`gtk_toﬁtùs_√w
 ();

90 
	`gtk_toﬁtùs_íabÀ
 (
GtkToﬁtùs
 *
toﬁtùs
);

91 
	`gtk_toﬁtùs_dißbÀ
 (
GtkToﬁtùs
 *
toﬁtùs
);

92 
	`gtk_toﬁtùs_£t_dñay
 (
GtkToﬁtùs
 *
toﬁtùs
,

93 
guöt
 
dñay
);

94 
	`gtk_toﬁtùs_£t_tù
 (
GtkToﬁtùs
 *
toﬁtùs
,

95 
GtkWidgë
 *
widgë
,

96 c⁄° 
gch¨
 *
tù_ãxt
,

97 c⁄° 
gch¨
 *
tù_¥iv©e
);

98 
GtkToﬁtùsD©a
* 
	`gtk_toﬁtùs_d©a_gë
 (
GtkWidgë
 *
widgë
);

99 
	`gtk_toﬁtùs_f‹˚_wödow
 (
GtkToﬁtùs
 *
toﬁtùs
);

101 
gboﬁón
 
	`gtk_toﬁtùs_gë_öfo_‰om_tù_wödow
 (
GtkWödow
 *
tù_wödow
,

102 
GtkToﬁtùs
 **
toﬁtùs
,

103 
GtkWidgë
 **
cuºít_widgë
);

105 
G_END_DECLS


	@/usr/include/gtk/gtktree.h

27 #ifde‡
GTK_ENABLE_BROKEN


29 #i‚de‡
__GTK_TREE_H__


30 
	#__GTK_TREE_H__


	)

33 
	~<gtk/gtkc⁄èöî.h
>

36 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_TREE
 (
	`gtk_åì_gë_ty≥
 ())

	)

42 
	#GTK_TREE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE
, 
GtkTªe
))

	)

43 
	#GTK_TREE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TREE
, 
GtkTªeCœss
))

	)

44 
	#GTK_IS_TREE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE
))

	)

45 
	#GTK_IS_TREE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TREE
))

	)

46 
	#GTK_TREE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE
, 
GtkTªeCœss
))

	)

49 
	#GTK_IS_ROOT_TREE
(
obj
Ë((
GtkObje˘
*Ë
	`GTK_TREE
(obj)->
roŸ_åì
 =(GtkObje˘*)obj)

	)

50 
	#GTK_TREE_ROOT_TREE
(
obj
Ë(
	`GTK_TREE
(obj)->
roŸ_åì
 ? GTK_TREE(obj)->roŸ_åì : GTK_TREE(obj))

	)

51 
	#GTK_TREE_SELECTION_OLD
(
obj
Ë(
	`GTK_TREE_ROOT_TREE
(obj)->
£À˘i⁄
)

	)

55 
	mGTK_TREE_VIEW_LINE
,

56 
	mGTK_TREE_VIEW_ITEM


57 } 
	tGtkTªeVõwMode
;

59 
_GtkTªe
 
	tGtkTªe
;

60 
_GtkTªeCœss
 
	tGtkTªeCœss
;

62 
	s_GtkTªe


64 
GtkC⁄èöî
 
	mc⁄èöî
;

66 
GLi°
 *
	mchûdªn
;

68 
GtkTªe
* 
	mroŸ_åì
;

69 
GtkWidgë
* 
	måì_ow√r
;

70 
GLi°
 *
	m£À˘i⁄
;

71 
guöt
 
	mÀvñ
;

72 
guöt
 
	mödít_vÆue
;

73 
guöt
 
	mcuºít_ödít
;

74 
guöt
 
	m£À˘i⁄_mode
 : 2;

75 
guöt
 
	mvõw_mode
 : 1;

76 
guöt
 
	mvõw_löe
 : 1;

79 
	s_GtkTªeCœss


81 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

83 (* 
	m£À˘i⁄_ch™ged
Ë(
GtkTªe
 *
	måì
);

84 (* 
	m£À˘_chûd
Ë(
GtkTªe
 *
	måì
,

85 
GtkWidgë
 *
	mchûd
);

86 (* 
	mun£À˘_chûd
Ë(
GtkTªe
 *
	måì
,

87 
GtkWidgë
 *
	mchûd
);

91 
GTy≥
 
	$gtk_åì_gë_ty≥
 (Ë
G_GNUC_CONST
;

92 
GtkWidgë
* 
	`gtk_åì_√w
 ();

93 
	`gtk_åì_≠≥nd
 (
GtkTªe
 *
åì
,

94 
GtkWidgë
 *
åì_ôem
);

95 
	`gtk_åì_¥ïíd
 (
GtkTªe
 *
åì
,

96 
GtkWidgë
 *
åì_ôem
);

97 
	`gtk_åì_ö£π
 (
GtkTªe
 *
åì
,

98 
GtkWidgë
 *
åì_ôem
,

99 
göt
 
posôi⁄
);

100 
	`gtk_åì_ªmove_ôems
 (
GtkTªe
 *
åì
,

101 
GLi°
 *
ôems
);

102 
	`gtk_åì_˛ór_ôems
 (
GtkTªe
 *
åì
,

103 
göt
 
°¨t
,

104 
göt
 
íd
);

105 
	`gtk_åì_£À˘_ôem
 (
GtkTªe
 *
åì
,

106 
göt
 
ôem
);

107 
	`gtk_åì_un£À˘_ôem
 (
GtkTªe
 *
åì
,

108 
göt
 
ôem
);

109 
	`gtk_åì_£À˘_chûd
 (
GtkTªe
 *
åì
,

110 
GtkWidgë
 *
åì_ôem
);

111 
	`gtk_åì_un£À˘_chûd
 (
GtkTªe
 *
åì
,

112 
GtkWidgë
 *
åì_ôem
);

113 
göt
 
	`gtk_åì_chûd_posôi⁄
 (
GtkTªe
 *
åì
,

114 
GtkWidgë
 *
chûd
);

115 
	`gtk_åì_£t_£À˘i⁄_mode
 (
GtkTªe
 *
åì
,

116 
GtkSñe˘i⁄Mode
 
mode
);

117 
	`gtk_åì_£t_võw_mode
 (
GtkTªe
 *
åì
,

118 
GtkTªeVõwMode
 
mode
);

119 
	`gtk_åì_£t_võw_löes
 (
GtkTªe
 *
åì
,

120 
gboﬁón
 
Êag
);

124 
	`gtk_åì_ªmove_ôem
 (
GtkTªe
 *
åì
,

125 
GtkWidgë
 *
chûd
);

128 
G_END_DECLS


	@/usr/include/gtk/gtktreednd.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_DND_H__


25 
	#__GTK_TREE_DND_H__


	)

27 
	~<gtk/gtkåìmodñ.h
>

28 
	~<gtk/gtkdnd.h
>

30 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_TREE_DRAG_SOURCE
 (
	`gtk_åì_døg_sour˚_gë_ty≥
 ())

	)

33 
	#GTK_TREE_DRAG_SOURCE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_DRAG_SOURCE
, 
GtkTªeDøgSour˚
))

	)

34 
	#GTK_IS_TREE_DRAG_SOURCE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_DRAG_SOURCE
))

	)

35 
	#GTK_TREE_DRAG_SOURCE_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_TREE_DRAG_SOURCE
, 
GtkTªeDøgSour˚IÁ˚
))

	)

37 
_GtkTªeDøgSour˚
 
	tGtkTªeDøgSour˚
;

38 
_GtkTªeDøgSour˚IÁ˚
 
	tGtkTªeDøgSour˚IÁ˚
;

40 
	s_GtkTªeDøgSour˚IÁ˚


42 
GTy≥I¡îÁ˚
 
	mg_iÁ˚
;

46 
gboﬁón
 (* 
row_døggabÀ
Ë(
GtkTªeDøgSour˚
 *
	mdøg_sour˚
,

47 
GtkTªeP©h
 *
	m∑th
);

49 
gboﬁón
 (* 
døg_d©a_gë
Ë(
GtkTªeDøgSour˚
 *
	mdøg_sour˚
,

50 
GtkTªeP©h
 *
	m∑th
,

51 
GtkSñe˘i⁄D©a
 *
	m£À˘i⁄_d©a
);

53 
gboﬁón
 (* 
døg_d©a_dñëe
Ë(
GtkTªeDøgSour˚
 *
	mdøg_sour˚
,

54 
GtkTªeP©h
 *
	m∑th
);

57 
GTy≥
 
	$gtk_åì_døg_sour˚_gë_ty≥
 (Ë
G_GNUC_CONST
;

60 
gboﬁón
 
	`gtk_åì_døg_sour˚_row_døggabÀ
 (
GtkTªeDøgSour˚
 *
døg_sour˚
,

61 
GtkTªeP©h
 *
∑th
);

64 
gboﬁón
 
	`gtk_åì_døg_sour˚_døg_d©a_dñëe
 (
GtkTªeDøgSour˚
 *
døg_sour˚
,

65 
GtkTªeP©h
 *
∑th
);

70 
gboﬁón
 
	`gtk_åì_døg_sour˚_døg_d©a_gë
 (
GtkTªeDøgSour˚
 *
døg_sour˚
,

71 
GtkTªeP©h
 *
∑th
,

72 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

74 
	#GTK_TYPE_TREE_DRAG_DEST
 (
	`gtk_åì_døg_de°_gë_ty≥
 ())

	)

75 
	#GTK_TREE_DRAG_DEST
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_DRAG_DEST
, 
GtkTªeDøgDe°
))

	)

76 
	#GTK_IS_TREE_DRAG_DEST
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_DRAG_DEST
))

	)

77 
	#GTK_TREE_DRAG_DEST_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_TREE_DRAG_DEST
, 
GtkTªeDøgDe°IÁ˚
))

	)

79 
_GtkTªeDøgDe°
 
	tGtkTªeDøgDe°
;

80 
_GtkTªeDøgDe°IÁ˚
 
	tGtkTªeDøgDe°IÁ˚
;

82 
	s_GtkTªeDøgDe°IÁ˚


84 
GTy≥I¡îÁ˚
 
g_iÁ˚
;

88 
	`gboﬁón
 (* 
døg_d©a_ª˚ived
Ë(
GtkTªeDøgDe°
 *
døg_de°
,

89 
GtkTªeP©h
 *
de°
,

90 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

92 
	`gboﬁón
 (* 
row_dr›_possibÀ
Ë(
GtkTªeDøgDe°
 *
døg_de°
,

93 
GtkTªeP©h
 *
de°_∑th
,

94 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

97 
GTy≥
 
	$gtk_åì_døg_de°_gë_ty≥
 (Ë
G_GNUC_CONST
;

102 
gboﬁón
 
	`gtk_åì_døg_de°_døg_d©a_ª˚ived
 (
GtkTªeDøgDe°
 *
døg_de°
,

103 
GtkTªeP©h
 *
de°
,

104 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

108 
gboﬁón
 
	`gtk_åì_døg_de°_row_dr›_possibÀ
 (
GtkTªeDøgDe°
 *
døg_de°
,

109 
GtkTªeP©h
 *
de°_∑th
,

110 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
);

116 
gboﬁón
 
	`gtk_åì_£t_row_døg_d©a
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

117 
GtkTªeModñ
 *
åì_modñ
,

118 
GtkTªeP©h
 *
∑th
);

119 
gboﬁón
 
	`gtk_åì_gë_row_døg_d©a
 (
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

120 
GtkTªeModñ
 **
åì_modñ
,

121 
GtkTªeP©h
 **
∑th
);

123 
G_END_DECLS


	@/usr/include/gtk/gtktreeitem.h

27 #ifde‡
GTK_ENABLE_BROKEN


29 #i‚de‡
__GTK_TREE_ITEM_H__


30 
	#__GTK_TREE_ITEM_H__


	)

33 
	~<gtk/gtkôem.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_TREE_ITEM
 (
	`gtk_åì_ôem_gë_ty≥
 ())

	)

39 
	#GTK_TREE_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_ITEM
, 
GtkTªeIãm
))

	)

40 
	#GTK_TREE_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TREE_ITEM
, 
GtkTªeIãmCœss
))

	)

41 
	#GTK_IS_TREE_ITEM
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_ITEM
))

	)

42 
	#GTK_IS_TREE_ITEM_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TREE_ITEM
))

	)

43 
	#GTK_TREE_ITEM_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE_ITEM
, 
GtkTªeIãmCœss
))

	)

46 
	#GTK_TREE_ITEM_SUBTREE
(
obj
Ë(
	`GTK_TREE_ITEM
(obj)->
subåì
)

	)

49 
_GtkTªeIãm
 
	tGtkTªeIãm
;

50 
_GtkTªeIãmCœss
 
	tGtkTªeIãmCœss
;

52 
	s_GtkTªeIãm


54 
GtkIãm
 
	môem
;

56 
GtkWidgë
 *
	msubåì
;

57 
GtkWidgë
 *
	mpixm≠s_box
;

58 
GtkWidgë
 *
	m∂us_pix_widgë
, *
	mmöus_pix_widgë
;

60 
GLi°
 *
	mpixm≠s
;

62 
guöt
 
	mex∑nded
 : 1;

65 
	s_GtkTªeIãmCœss


67 
GtkIãmCœss
 
	m∑ª¡_˛ass
;

69 (* 
	mex∑nd
Ë(
GtkTªeIãm
 *
	måì_ôem
);

70 (* 
	mcﬁœp£
Ë(
GtkTªeIãm
 *
	måì_ôem
);

74 
GTy≥
 
	$gtk_åì_ôem_gë_ty≥
 (Ë
G_GNUC_CONST
;

75 
GtkWidgë
* 
	`gtk_åì_ôem_√w
 ();

76 
GtkWidgë
* 
	`gtk_åì_ôem_√w_wôh_œbñ
 (c⁄° 
gch¨
 *
œbñ
);

77 
	`gtk_åì_ôem_£t_subåì
 (
GtkTªeIãm
 *
åì_ôem
,

78 
GtkWidgë
 *
subåì
);

79 
	`gtk_åì_ôem_ªmove_subåì
 (
GtkTªeIãm
 *
åì_ôem
);

80 
	`gtk_åì_ôem_£À˘
 (
GtkTªeIãm
 *
åì_ôem
);

81 
	`gtk_åì_ôem_de£À˘
 (
GtkTªeIãm
 *
åì_ôem
);

82 
	`gtk_åì_ôem_ex∑nd
 (
GtkTªeIãm
 *
åì_ôem
);

83 
	`gtk_åì_ôem_cﬁœp£
 (
GtkTªeIãm
 *
åì_ôem
);

86 
G_END_DECLS


	@/usr/include/gtk/gtktreemodel.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_MODEL_H__


25 
	#__GTK_TREE_MODEL_H__


	)

27 
	~<glib-obje˘.h
>

30 
	~<gtk/gtkobje˘.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_TREE_MODEL
 (
	`gtk_åì_modñ_gë_ty≥
 ())

	)

35 
	#GTK_TREE_MODEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_MODEL
, 
GtkTªeModñ
))

	)

36 
	#GTK_IS_TREE_MODEL
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_MODEL
))

	)

37 
	#GTK_TREE_MODEL_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_TREE_MODEL
, 
GtkTªeModñIÁ˚
))

	)

39 
	#GTK_TYPE_TREE_ITER
 (
	`gtk_åì_ôî_gë_ty≥
 ())

	)

40 
	#GTK_TYPE_TREE_PATH
 (
	`gtk_åì_∑th_gë_ty≥
 ())

	)

41 
	#GTK_TYPE_TREE_ROW_REFERENCE
 (
	`gtk_åì_row_ª„ªn˚_gë_ty≥
 ())

	)

43 
_GtkTªeIãr
 
	tGtkTªeIãr
;

44 
_GtkTªeP©h
 
	tGtkTªeP©h
;

45 
_GtkTªeRowRe„ªn˚
 
	tGtkTªeRowRe„ªn˚
;

46 
_GtkTªeModñ
 
	tGtkTªeModñ
;

47 
_GtkTªeModñIÁ˚
 
	tGtkTªeModñIÁ˚
;

48 
	$gboﬁón
 (* 
	tGtkTªeModñF‹óchFunc
Ë(
	tGtkTªeModñ
 *
	tmodñ
, 
	tGtkTªeP©h
 *
	t∑th
, 
	tGtkTªeIãr
 *
	tôî
, 
	tgpoöãr
 
	td©a
);

53 
GTK_TREE_MODEL_ITERS_PERSIST
 = 1 << 0,

54 
GTK_TREE_MODEL_LIST_ONLY
 = 1 << 1

55 } 
	tGtkTªeModñFœgs
;

57 
	s_GtkTªeIãr


59 
göt
 
°amp
;

60 
gpoöãr
 
u£r_d©a
;

61 
gpoöãr
 
u£r_d©a2
;

62 
gpoöãr
 
u£r_d©a3
;

65 
	s_GtkTªeModñIÁ˚


67 
GTy≥I¡îÁ˚
 
g_iÁ˚
;

70 (* 
row_ch™ged
Ë(
GtkTªeModñ
 *
åì_modñ
,

71 
GtkTªeP©h
 *
∑th
,

72 
GtkTªeIãr
 *
ôî
);

73 (* 
row_ö£πed
Ë(
GtkTªeModñ
 *
åì_modñ
,

74 
GtkTªeP©h
 *
∑th
,

75 
GtkTªeIãr
 *
ôî
);

76 (* 
row_has_chûd_toggÀd
Ë(
GtkTªeModñ
 *
åì_modñ
,

77 
GtkTªeP©h
 *
∑th
,

78 
GtkTªeIãr
 *
ôî
);

79 (* 
row_dñëed
Ë(
GtkTªeModñ
 *
åì_modñ
,

80 
GtkTªeP©h
 *
∑th
);

81 (* 
rows_ª‹dîed
Ë(
GtkTªeModñ
 *
åì_modñ
,

82 
GtkTªeP©h
 *
∑th
,

83 
GtkTªeIãr
 *
ôî
,

84 
göt
 *
√w_‹dî
);

87 
	`GtkTªeModñFœgs
 (* 
gë_Êags
Ë(
GtkTªeModñ
 *
åì_modñ
);

89 
	`göt
 (* 
gë_n_cﬁumns
Ë(
GtkTªeModñ
 *
åì_modñ
);

90 
	`GTy≥
 (* 
gë_cﬁumn_ty≥
Ë(
GtkTªeModñ
 *
åì_modñ
,

91 
göt
 
ödex_
);

92 
	`gboﬁón
 (* 
gë_ôî
Ë(
GtkTªeModñ
 *
åì_modñ
,

93 
GtkTªeIãr
 *
ôî
,

94 
GtkTªeP©h
 *
∑th
);

95 
GtkTªeP©h
 *(* 
gë_∑th
Ë(
GtkTªeModñ
 *
åì_modñ
,

96 
GtkTªeIãr
 *
ôî
);

97 (* 
gë_vÆue
Ë(
GtkTªeModñ
 *
åì_modñ
,

98 
GtkTªeIãr
 *
ôî
,

99 
göt
 
cﬁumn
,

100 
GVÆue
 *
vÆue
);

101 
	`gboﬁón
 (* 
ôî_√xt
Ë(
GtkTªeModñ
 *
åì_modñ
,

102 
GtkTªeIãr
 *
ôî
);

103 
	`gboﬁón
 (* 
ôî_chûdªn
Ë(
GtkTªeModñ
 *
åì_modñ
,

104 
GtkTªeIãr
 *
ôî
,

105 
GtkTªeIãr
 *
∑ª¡
);

106 
	`gboﬁón
 (* 
ôî_has_chûd
Ë(
GtkTªeModñ
 *
åì_modñ
,

107 
GtkTªeIãr
 *
ôî
);

108 
	`göt
 (* 
ôî_n_chûdªn
Ë(
GtkTªeModñ
 *
åì_modñ
,

109 
GtkTªeIãr
 *
ôî
);

110 
	`gboﬁón
 (* 
ôî_¡h_chûd
Ë(
GtkTªeModñ
 *
åì_modñ
,

111 
GtkTªeIãr
 *
ôî
,

112 
GtkTªeIãr
 *
∑ª¡
,

113 
göt
 
n
);

114 
	`gboﬁón
 (* 
ôî_∑ª¡
Ë(
GtkTªeModñ
 *
åì_modñ
,

115 
GtkTªeIãr
 *
ôî
,

116 
GtkTªeIãr
 *
chûd
);

117 (* 
ªf_node
Ë(
GtkTªeModñ
 *
åì_modñ
,

118 
GtkTªeIãr
 *
ôî
);

119 (* 
uƒef_node
Ë(
GtkTªeModñ
 *
åì_modñ
,

120 
GtkTªeIãr
 *
ôî
);

125 
GtkTªeP©h
 *
	`gtk_åì_∑th_√w
 ();

126 
GtkTªeP©h
 *
	`gtk_åì_∑th_√w_‰om_°rög
 (c⁄° 
gch¨
 *
∑th
);

127 
GtkTªeP©h
 *
	`gtk_åì_∑th_√w_‰om_ödi˚s
 (
göt
 
fú°_ödex
,

129 
gch¨
 *
	`gtk_åì_∑th_to_°rög
 (
GtkTªeP©h
 *
∑th
);

130 
GtkTªeP©h
 *
	`gtk_åì_∑th_√w_fú°
 ();

131 
	`gtk_åì_∑th_≠≥nd_ödex
 (
GtkTªeP©h
 *
∑th
,

132 
göt
 
ödex_
);

133 
	`gtk_åì_∑th_¥ïíd_ödex
 (
GtkTªeP©h
 *
∑th
,

134 
göt
 
ödex_
);

135 
göt
 
	`gtk_åì_∑th_gë_dïth
 (
GtkTªeP©h
 *
∑th
);

136 
göt
 *
	`gtk_åì_∑th_gë_ödi˚s
 (
GtkTªeP©h
 *
∑th
);

137 
	`gtk_åì_∑th_‰ì
 (
GtkTªeP©h
 *
∑th
);

138 
GtkTªeP©h
 *
	`gtk_åì_∑th_c›y
 (c⁄° GtkTªeP©h *
∑th
);

139 
GTy≥
 
	$gtk_åì_∑th_gë_ty≥
 (Ë
G_GNUC_CONST
;

140 
göt
 
	`gtk_åì_∑th_com∑ª
 (c⁄° 
GtkTªeP©h
 *
a
,

141 c⁄° 
GtkTªeP©h
 *
b
);

142 
	`gtk_åì_∑th_√xt
 (
GtkTªeP©h
 *
∑th
);

143 
gboﬁón
 
	`gtk_åì_∑th_¥ev
 (
GtkTªeP©h
 *
∑th
);

144 
gboﬁón
 
	`gtk_åì_∑th_up
 (
GtkTªeP©h
 *
∑th
);

145 
	`gtk_åì_∑th_down
 (
GtkTªeP©h
 *
∑th
);

147 
gboﬁón
 
	`gtk_åì_∑th_is_™˚°‹
 (
GtkTªeP©h
 *
∑th
,

148 
GtkTªeP©h
 *
des˚nd™t
);

149 
gboﬁón
 
	`gtk_åì_∑th_is_des˚nd™t
 (
GtkTªeP©h
 *
∑th
,

150 
GtkTªeP©h
 *
™˚°‹
);

152 #i‚de‡
GTK_DISABLE_DEPRECATED


153 
	#gtk_åì_∑th_√w_roŸ
(Ë
	`gtk_åì_∑th_√w_fú°
()

	)

161 
GTy≥
 
	$gtk_åì_row_ª„ªn˚_gë_ty≥
 (Ë
G_GNUC_CONST
;

162 
GtkTªeRowRe„ªn˚
 *
	`gtk_åì_row_ª„ªn˚_√w
 (
GtkTªeModñ
 *
modñ
,

163 
GtkTªeP©h
 *
∑th
);

164 
GtkTªeRowRe„ªn˚
 *
	`gtk_åì_row_ª„ªn˚_√w_¥oxy
 (
GObje˘
 *
¥oxy
,

165 
GtkTªeModñ
 *
modñ
,

166 
GtkTªeP©h
 *
∑th
);

167 
GtkTªeP©h
 *
	`gtk_åì_row_ª„ªn˚_gë_∑th
 (
GtkTªeRowRe„ªn˚
 *
ª„ªn˚
);

168 
GtkTªeModñ
 *
	`gtk_åì_row_ª„ªn˚_gë_modñ
 (
GtkTªeRowRe„ªn˚
 *
ª„ªn˚
);

169 
gboﬁón
 
	`gtk_åì_row_ª„ªn˚_vÆid
 (
GtkTªeRowRe„ªn˚
 *
ª„ªn˚
);

170 
GtkTªeRowRe„ªn˚
 *
	`gtk_åì_row_ª„ªn˚_c›y
 (GtkTªeRowRe„ªn˚ *
ª„ªn˚
);

171 
	`gtk_åì_row_ª„ªn˚_‰ì
 (
GtkTªeRowRe„ªn˚
 *
ª„ªn˚
);

174 
	`gtk_åì_row_ª„ªn˚_ö£πed
 (
GObje˘
 *
¥oxy
,

175 
GtkTªeP©h
 *
∑th
);

176 
	`gtk_åì_row_ª„ªn˚_dñëed
 (
GObje˘
 *
¥oxy
,

177 
GtkTªeP©h
 *
∑th
);

178 
	`gtk_åì_row_ª„ªn˚_ª‹dîed
 (
GObje˘
 *
¥oxy
,

179 
GtkTªeP©h
 *
∑th
,

180 
GtkTªeIãr
 *
ôî
,

181 
göt
 *
√w_‹dî
);

184 
GtkTªeIãr
 * 
	`gtk_åì_ôî_c›y
 (GtkTªeIã∏*
ôî
);

185 
	`gtk_åì_ôî_‰ì
 (
GtkTªeIãr
 *
ôî
);

186 
GTy≥
 
	$gtk_åì_ôî_gë_ty≥
 (Ë
G_GNUC_CONST
;

188 
GTy≥
 
	$gtk_åì_modñ_gë_ty≥
 (Ë
G_GNUC_CONST
;

189 
GtkTªeModñFœgs
 
	`gtk_åì_modñ_gë_Êags
 (
GtkTªeModñ
 *
åì_modñ
);

190 
göt
 
	`gtk_åì_modñ_gë_n_cﬁumns
 (
GtkTªeModñ
 *
åì_modñ
);

191 
GTy≥
 
	`gtk_åì_modñ_gë_cﬁumn_ty≥
 (
GtkTªeModñ
 *
åì_modñ
,

192 
göt
 
ödex_
);

196 
gboﬁón
 
	`gtk_åì_modñ_gë_ôî
 (
GtkTªeModñ
 *
åì_modñ
,

197 
GtkTªeIãr
 *
ôî
,

198 
GtkTªeP©h
 *
∑th
);

199 
gboﬁón
 
	`gtk_åì_modñ_gë_ôî_‰om_°rög
 (
GtkTªeModñ
 *
åì_modñ
,

200 
GtkTªeIãr
 *
ôî
,

201 c⁄° 
gch¨
 *
∑th_°rög
);

202 
gch¨
 * 
	`gtk_åì_modñ_gë_°rög_‰om_ôî
 (
GtkTªeModñ
 *
åì_modñ
,

203 
GtkTªeIãr
 *
ôî
);

204 
gboﬁón
 
	`gtk_åì_modñ_gë_ôî_fú°
 (
GtkTªeModñ
 *
åì_modñ
,

205 
GtkTªeIãr
 *
ôî
);

206 
GtkTªeP©h
 * 
	`gtk_åì_modñ_gë_∑th
 (
GtkTªeModñ
 *
åì_modñ
,

207 
GtkTªeIãr
 *
ôî
);

208 
	`gtk_åì_modñ_gë_vÆue
 (
GtkTªeModñ
 *
åì_modñ
,

209 
GtkTªeIãr
 *
ôî
,

210 
göt
 
cﬁumn
,

211 
GVÆue
 *
vÆue
);

212 
gboﬁón
 
	`gtk_åì_modñ_ôî_√xt
 (
GtkTªeModñ
 *
åì_modñ
,

213 
GtkTªeIãr
 *
ôî
);

214 
gboﬁón
 
	`gtk_åì_modñ_ôî_chûdªn
 (
GtkTªeModñ
 *
åì_modñ
,

215 
GtkTªeIãr
 *
ôî
,

216 
GtkTªeIãr
 *
∑ª¡
);

217 
gboﬁón
 
	`gtk_åì_modñ_ôî_has_chûd
 (
GtkTªeModñ
 *
åì_modñ
,

218 
GtkTªeIãr
 *
ôî
);

219 
göt
 
	`gtk_åì_modñ_ôî_n_chûdªn
 (
GtkTªeModñ
 *
åì_modñ
,

220 
GtkTªeIãr
 *
ôî
);

221 
gboﬁón
 
	`gtk_åì_modñ_ôî_¡h_chûd
 (
GtkTªeModñ
 *
åì_modñ
,

222 
GtkTªeIãr
 *
ôî
,

223 
GtkTªeIãr
 *
∑ª¡
,

224 
göt
 
n
);

225 
gboﬁón
 
	`gtk_åì_modñ_ôî_∑ª¡
 (
GtkTªeModñ
 *
åì_modñ
,

226 
GtkTªeIãr
 *
ôî
,

227 
GtkTªeIãr
 *
chûd
);

228 
	`gtk_åì_modñ_ªf_node
 (
GtkTªeModñ
 *
åì_modñ
,

229 
GtkTªeIãr
 *
ôî
);

230 
	`gtk_åì_modñ_uƒef_node
 (
GtkTªeModñ
 *
åì_modñ
,

231 
GtkTªeIãr
 *
ôî
);

232 
	`gtk_åì_modñ_gë
 (
GtkTªeModñ
 *
åì_modñ
,

233 
GtkTªeIãr
 *
ôî
,

235 
	`gtk_åì_modñ_gë_vÆi°
 (
GtkTªeModñ
 *
åì_modñ
,

236 
GtkTªeIãr
 *
ôî
,

237 
va_li°
 
v¨_¨gs
);

240 
	`gtk_åì_modñ_f‹óch
 (
GtkTªeModñ
 *
modñ
,

241 
GtkTªeModñF‹óchFunc
 
func
,

242 
gpoöãr
 
u£r_d©a
);

245 #i‚de‡
GTK_DISABLE_DEPRECATED


246 
	#gtk_åì_modñ_gë_ôî_roŸ
(
åì_modñ
, 
ôî
Ë
	`gtk_åì_modñ_gë_ôî_fú°
—ªe_modñ, iãr)

	)

250 
	`gtk_åì_modñ_row_ch™ged
 (
GtkTªeModñ
 *
åì_modñ
,

251 
GtkTªeP©h
 *
∑th
,

252 
GtkTªeIãr
 *
ôî
);

253 
	`gtk_åì_modñ_row_ö£πed
 (
GtkTªeModñ
 *
åì_modñ
,

254 
GtkTªeP©h
 *
∑th
,

255 
GtkTªeIãr
 *
ôî
);

256 
	`gtk_åì_modñ_row_has_chûd_toggÀd
 (
GtkTªeModñ
 *
åì_modñ
,

257 
GtkTªeP©h
 *
∑th
,

258 
GtkTªeIãr
 *
ôî
);

259 
	`gtk_åì_modñ_row_dñëed
 (
GtkTªeModñ
 *
åì_modñ
,

260 
GtkTªeP©h
 *
∑th
);

261 
	`gtk_åì_modñ_rows_ª‹dîed
 (
GtkTªeModñ
 *
åì_modñ
,

262 
GtkTªeP©h
 *
∑th
,

263 
GtkTªeIãr
 *
ôî
,

264 
göt
 *
√w_‹dî
);

266 
G_END_DECLS


	@/usr/include/gtk/gtktreemodelfilter.h

21 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

25 #i‚de‡
__GTK_TREE_MODEL_FILTER_H__


26 
	#__GTK_TREE_MODEL_FILTER_H__


	)

28 
	~<gdkc⁄fig.h
>

29 
	~<gtk/gtkåìmodñ.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_TREE_MODEL_FILTER
 (
	`gtk_åì_modñ_fûãr_gë_ty≥
 ())

	)

34 
	#GTK_TREE_MODEL_FILTER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_MODEL_FILTER
, 
GtkTªeModñFûãr
))

	)

35 
	#GTK_TREE_MODEL_FILTER_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((vèbÀ), 
GTK_TYPE_TREE_MODEL_FILTER
, 
GtkTªeModñFûãrCœss
))

	)

36 
	#GTK_IS_TREE_MODEL_FILTER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_MODEL_FILTER
))

	)

37 
	#GTK_IS_TREE_MODEL_FILTER_CLASS
(
vèbÀ
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((vèbÀ), 
GTK_TYPE_TREE_MODEL_FILTER
))

	)

38 
	#GTK_TREE_MODEL_FILTER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE_MODEL_FILTER
, 
GtkTªeModñFûãrCœss
))

	)

40 
	$gboﬁón
 (* 
	tGtkTªeModñFûãrVisibÀFunc
Ë(
	tGtkTªeModñ
 *
	tmodñ
,

41 
	tGtkTªeIãr
 *
	tôî
,

42 
	tgpoöãr
 
	td©a
);

43 (* 
	tGtkTªeModñFûãrModifyFunc
Ë(
	tGtkTªeModñ
 *
	tmodñ
,

44 
	tGtkTªeIãr
 *
	tôî
,

45 
	tGVÆue
 *
	tvÆue
,

46 
	tgöt
 
	tcﬁumn
,

47 
	tgpoöãr
 
	td©a
);

49 
_GtkTªeModñFûãr
 
	tGtkTªeModñFûãr
;

50 
_GtkTªeModñFûãrCœss
 
	tGtkTªeModñFûãrCœss
;

51 
_GtkTªeModñFûãrPriv©e
 
	tGtkTªeModñFûãrPriv©e
;

53 
	s_GtkTªeModñFûãr


55 
GObje˘
 
∑ª¡
;

58 
GtkTªeModñFûãrPriv©e
 *
	`GSEAL
 (
¥iv
);

61 
	s_GtkTªeModñFûãrCœss


63 
GObje˘Cœss
 
∑ª¡_˛ass
;

66 (*
_gtk_ª£rved0
) ();

67 (*
_gtk_ª£rved1
) ();

68 (*
_gtk_ª£rved2
) ();

69 (*
_gtk_ª£rved3
) ();

73 
GTy≥
 
	$gtk_åì_modñ_fûãr_gë_ty≥
 (Ë
G_GNUC_CONST
;

74 
GtkTªeModñ
 *
	`gtk_åì_modñ_fûãr_√w
 (GtkTªeModñ *
chûd_modñ
,

75 
GtkTªeP©h
 *
roŸ
);

76 
	`gtk_åì_modñ_fûãr_£t_visibÀ_func
 (
GtkTªeModñFûãr
 *
fûãr
,

77 
GtkTªeModñFûãrVisibÀFunc
 
func
,

78 
gpoöãr
 
d©a
,

79 
GDe°royNŸify
 
de°roy
);

80 
	`gtk_åì_modñ_fûãr_£t_modify_func
 (
GtkTªeModñFûãr
 *
fûãr
,

81 
göt
 
n_cﬁumns
,

82 
GTy≥
 *
ty≥s
,

83 
GtkTªeModñFûãrModifyFunc
 
func
,

84 
gpoöãr
 
d©a
,

85 
GDe°royNŸify
 
de°roy
);

86 
	`gtk_åì_modñ_fûãr_£t_visibÀ_cﬁumn
 (
GtkTªeModñFûãr
 *
fûãr
,

87 
göt
 
cﬁumn
);

89 
GtkTªeModñ
 *
	`gtk_åì_modñ_fûãr_gë_modñ
 (
GtkTªeModñFûãr
 *
fûãr
);

92 
gboﬁón
 
	`gtk_åì_modñ_fûãr_c⁄vît_chûd_ôî_to_ôî
 (
GtkTªeModñFûãr
 *
fûãr
,

93 
GtkTªeIãr
 *
fûãr_ôî
,

94 
GtkTªeIãr
 *
chûd_ôî
);

95 
	`gtk_åì_modñ_fûãr_c⁄vît_ôî_to_chûd_ôî
 (
GtkTªeModñFûãr
 *
fûãr
,

96 
GtkTªeIãr
 *
chûd_ôî
,

97 
GtkTªeIãr
 *
fûãr_ôî
);

98 
GtkTªeP©h
 *
	`gtk_åì_modñ_fûãr_c⁄vît_chûd_∑th_to_∑th
 (
GtkTªeModñFûãr
 *
fûãr
,

99 
GtkTªeP©h
 *
chûd_∑th
);

100 
GtkTªeP©h
 *
	`gtk_åì_modñ_fûãr_c⁄vît_∑th_to_chûd_∑th
 (
GtkTªeModñFûãr
 *
fûãr
,

101 
GtkTªeP©h
 *
fûãr_∑th
);

104 
	`gtk_åì_modñ_fûãr_ªfûãr
 (
GtkTªeModñFûãr
 *
fûãr
);

105 
	`gtk_åì_modñ_fûãr_˛ór_ˇche
 (
GtkTªeModñFûãr
 *
fûãr
);

107 
G_END_DECLS


	@/usr/include/gtk/gtktreemodelsort.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_MODEL_SORT_H__


25 
	#__GTK_TREE_MODEL_SORT_H__


	)

27 
	~<gdkc⁄fig.h
>

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtkåìs‹èbÀ.h
>

31 
	gG_BEGIN_DECLS


33 
	#GTK_TYPE_TREE_MODEL_SORT
 (
	`gtk_åì_modñ_s‹t_gë_ty≥
 ())

	)

34 
	#GTK_TREE_MODEL_SORT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_MODEL_SORT
, 
GtkTªeModñS‹t
))

	)

35 
	#GTK_TREE_MODEL_SORT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TREE_MODEL_SORT
, 
GtkTªeModñS‹tCœss
))

	)

36 
	#GTK_IS_TREE_MODEL_SORT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_MODEL_SORT
))

	)

37 
	#GTK_IS_TREE_MODEL_SORT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TREE_MODEL_SORT
))

	)

38 
	#GTK_TREE_MODEL_SORT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE_MODEL_SORT
, 
GtkTªeModñS‹tCœss
))

	)

40 
_GtkTªeModñS‹t
 
	tGtkTªeModñS‹t
;

41 
_GtkTªeModñS‹tCœss
 
	tGtkTªeModñS‹tCœss
;

43 
	s_GtkTªeModñS‹t


45 
GObje˘
 
	m∑ª¡
;

48 
gpoöãr
 
GSEAL
 (
roŸ
);

49 
göt
 
GSEAL
 (
°amp
);

50 
guöt
 
GSEAL
 (
chûd_Êags
);

51 
GtkTªeModñ
 *
GSEAL
 (
chûd_modñ
);

52 
göt
 
GSEAL
 (
zîo_ªf_cou¡
);

55 
GLi°
 *
GSEAL
 (
s‹t_li°
);

56 
göt
 
GSEAL
 (
s‹t_cﬁumn_id
);

57 
GtkS‹tTy≥
 
GSEAL
 (
‹dî
);

60 
GtkTªeIãrCom∑ªFunc
 
GSEAL
 (
deÁu…_s‹t_func
);

61 
gpoöãr
 
GSEAL
 (
deÁu…_s‹t_d©a
);

62 
GDe°royNŸify
 
GSEAL
 (
deÁu…_s‹t_de°roy
);

65 
guöt
 
GSEAL
 (
ch™ged_id
);

66 
guöt
 
GSEAL
 (
ö£πed_id
);

67 
guöt
 
GSEAL
 (
has_chûd_toggÀd_id
);

68 
guöt
 
GSEAL
 (
dñëed_id
);

69 
guöt
 
GSEAL
 (
ª‹dîed_id
);

72 
	s_GtkTªeModñS‹tCœss


74 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

77 (*
	m_gtk_ª£rved1
) ();

78 (*
	m_gtk_ª£rved2
) ();

79 (*
	m_gtk_ª£rved3
) ();

80 (*
	m_gtk_ª£rved4
) ();

84 
GTy≥
 
	$gtk_åì_modñ_s‹t_gë_ty≥
 (Ë
G_GNUC_CONST
;

85 
GtkTªeModñ
 *
	`gtk_åì_modñ_s‹t_√w_wôh_modñ
 (GtkTªeModñ *
chûd_modñ
);

87 
GtkTªeModñ
 *
	`gtk_åì_modñ_s‹t_gë_modñ
 (
GtkTªeModñS‹t
 *
åì_modñ
);

88 
GtkTªeP©h
 *
	`gtk_åì_modñ_s‹t_c⁄vît_chûd_∑th_to_∑th
 (
GtkTªeModñS‹t
 *
åì_modñ_s‹t
,

89 
GtkTªeP©h
 *
chûd_∑th
);

90 
gboﬁón
 
	`gtk_åì_modñ_s‹t_c⁄vît_chûd_ôî_to_ôî
 (
GtkTªeModñS‹t
 *
åì_modñ_s‹t
,

91 
GtkTªeIãr
 *
s‹t_ôî
,

92 
GtkTªeIãr
 *
chûd_ôî
);

93 
GtkTªeP©h
 *
	`gtk_åì_modñ_s‹t_c⁄vît_∑th_to_chûd_∑th
 (
GtkTªeModñS‹t
 *
åì_modñ_s‹t
,

94 
GtkTªeP©h
 *
s‹ãd_∑th
);

95 
	`gtk_åì_modñ_s‹t_c⁄vît_ôî_to_chûd_ôî
 (
GtkTªeModñS‹t
 *
åì_modñ_s‹t
,

96 
GtkTªeIãr
 *
chûd_ôî
,

97 
GtkTªeIãr
 *
s‹ãd_ôî
);

98 
	`gtk_åì_modñ_s‹t_ª£t_deÁu…_s‹t_func
 (
GtkTªeModñS‹t
 *
åì_modñ_s‹t
);

99 
	`gtk_åì_modñ_s‹t_˛ór_ˇche
 (
GtkTªeModñS‹t
 *
åì_modñ_s‹t
);

100 
gboﬁón
 
	`gtk_åì_modñ_s‹t_ôî_is_vÆid
 (
GtkTªeModñS‹t
 *
åì_modñ_s‹t
,

101 
GtkTªeIãr
 *
ôî
);

104 
G_END_DECLS


	@/usr/include/gtk/gtktreeselection.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_SELECTION_H__


25 
	#__GTK_TREE_SELECTION_H__


	)

27 
	~<gtk/gtkåìvõw.h
>

29 
	gG_BEGIN_DECLS


32 
	#GTK_TYPE_TREE_SELECTION
 (
	`gtk_åì_£À˘i⁄_gë_ty≥
 ())

	)

33 
	#GTK_TREE_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_SELECTION
, 
GtkTªeSñe˘i⁄
))

	)

34 
	#GTK_TREE_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TREE_SELECTION
, 
GtkTªeSñe˘i⁄Cœss
))

	)

35 
	#GTK_IS_TREE_SELECTION
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_SELECTION
))

	)

36 
	#GTK_IS_TREE_SELECTION_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TREE_SELECTION
))

	)

37 
	#GTK_TREE_SELECTION_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE_SELECTION
, 
GtkTªeSñe˘i⁄Cœss
))

	)

39 
	$gboﬁón
 (* 
	tGtkTªeSñe˘i⁄Func
Ë(
	tGtkTªeSñe˘i⁄
 *
	t£À˘i⁄
,

40 
	tGtkTªeModñ
 *
	tmodñ
,

41 
	tGtkTªeP©h
 *
	t∑th
,

42 
	tgboﬁón
 
	t∑th_cuºíéy_£À˘ed
,

43 
	tgpoöãr
 
	td©a
);

44 (* 
	tGtkTªeSñe˘i⁄F‹óchFunc
Ë(
	tGtkTªeModñ
 *
	tmodñ
,

45 
	tGtkTªeP©h
 *
	t∑th
,

46 
	tGtkTªeIãr
 *
	tôî
,

47 
	tgpoöãr
 
	td©a
);

49 
	s_GtkTªeSñe˘i⁄


51 
GObje˘
 
∑ª¡
;

55 
GtkTªeVõw
 *
	`GSEAL
 (
åì_võw
);

56 
GtkSñe˘i⁄Mode
 
	`GSEAL
 (
ty≥
);

57 
GtkTªeSñe˘i⁄Func
 
	`GSEAL
 (
u£r_func
);

58 
gpoöãr
 
	`GSEAL
 (
u£r_d©a
);

59 
GDe°royNŸify
 
	`GSEAL
 (
de°roy
);

62 
	s_GtkTªeSñe˘i⁄Cœss


64 
GObje˘Cœss
 
∑ª¡_˛ass
;

66 (* 
ch™ged
Ë(
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

69 (*
_gtk_ª£rved1
) ();

70 (*
_gtk_ª£rved2
) ();

71 (*
_gtk_ª£rved3
) ();

72 (*
_gtk_ª£rved4
) ();

76 
GTy≥
 
	$gtk_åì_£À˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

78 
	`gtk_åì_£À˘i⁄_£t_mode
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

79 
GtkSñe˘i⁄Mode
 
ty≥
);

80 
GtkSñe˘i⁄Mode
 
	`gtk_åì_£À˘i⁄_gë_mode
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

81 
	`gtk_åì_£À˘i⁄_£t_£À˘_fun˘i⁄
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

82 
GtkTªeSñe˘i⁄Func
 
func
,

83 
gpoöãr
 
d©a
,

84 
GDe°royNŸify
 
de°roy
);

85 
gpoöãr
 
	`gtk_åì_£À˘i⁄_gë_u£r_d©a
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

86 
GtkTªeVõw
* 
	`gtk_åì_£À˘i⁄_gë_åì_võw
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

88 
GtkTªeSñe˘i⁄Func
 
	`gtk_åì_£À˘i⁄_gë_£À˘_fun˘i⁄
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

92 
gboﬁón
 
	`gtk_åì_£À˘i⁄_gë_£À˘ed
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

93 
GtkTªeModñ
 **
modñ
,

94 
GtkTªeIãr
 *
ôî
);

95 
GLi°
 * 
	`gtk_åì_£À˘i⁄_gë_£À˘ed_rows
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

96 
GtkTªeModñ
 **
modñ
);

97 
göt
 
	`gtk_åì_£À˘i⁄_cou¡_£À˘ed_rows
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

98 
	`gtk_åì_£À˘i⁄_£À˘ed_f‹óch
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

99 
GtkTªeSñe˘i⁄F‹óchFunc
 
func
,

100 
gpoöãr
 
d©a
);

101 
	`gtk_åì_£À˘i⁄_£À˘_∑th
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

102 
GtkTªeP©h
 *
∑th
);

103 
	`gtk_åì_£À˘i⁄_un£À˘_∑th
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

104 
GtkTªeP©h
 *
∑th
);

105 
	`gtk_åì_£À˘i⁄_£À˘_ôî
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

106 
GtkTªeIãr
 *
ôî
);

107 
	`gtk_åì_£À˘i⁄_un£À˘_ôî
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

108 
GtkTªeIãr
 *
ôî
);

109 
gboﬁón
 
	`gtk_åì_£À˘i⁄_∑th_is_£À˘ed
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

110 
GtkTªeP©h
 *
∑th
);

111 
gboﬁón
 
	`gtk_åì_£À˘i⁄_ôî_is_£À˘ed
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

112 
GtkTªeIãr
 *
ôî
);

113 
	`gtk_åì_£À˘i⁄_£À˘_Æl
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

114 
	`gtk_åì_£À˘i⁄_un£À˘_Æl
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
);

115 
	`gtk_åì_£À˘i⁄_£À˘_ønge
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

116 
GtkTªeP©h
 *
°¨t_∑th
,

117 
GtkTªeP©h
 *
íd_∑th
);

118 
	`gtk_åì_£À˘i⁄_un£À˘_ønge
 (
GtkTªeSñe˘i⁄
 *
£À˘i⁄
,

119 
GtkTªeP©h
 *
°¨t_∑th
,

120 
GtkTªeP©h
 *
íd_∑th
);

123 
G_END_DECLS


	@/usr/include/gtk/gtktreesortable.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_SORTABLE_H__


25 
	#__GTK_TREE_SORTABLE_H__


	)

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtkty≥utûs.h
>

32 
	gG_BEGIN_DECLS


34 
	#GTK_TYPE_TREE_SORTABLE
 (
	`gtk_åì_s‹èbÀ_gë_ty≥
 ())

	)

35 
	#GTK_TREE_SORTABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_SORTABLE
, 
GtkTªeS‹èbÀ
))

	)

36 
	#GTK_TREE_SORTABLE_CLASS
(
obj
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((obj), 
GTK_TYPE_TREE_SORTABLE
, 
GtkTªeS‹èbÀIÁ˚
))

	)

37 
	#GTK_IS_TREE_SORTABLE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_SORTABLE
))

	)

38 
	#GTK_TREE_SORTABLE_GET_IFACE
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_INTERFACE
 ((obj), 
GTK_TYPE_TREE_SORTABLE
, 
GtkTªeS‹èbÀIÁ˚
))

	)

41 
	mGTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID
 = -1,

42 
	mGTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID
 = -2

45 
_GtkTªeS‹èbÀ
 
	tGtkTªeS‹èbÀ
;

46 
_GtkTªeS‹èbÀIÁ˚
 
	tGtkTªeS‹èbÀIÁ˚
;

48 
	$göt
 (* 
	tGtkTªeIãrCom∑ªFunc
Ë(
	tGtkTªeModñ
 *
	tmodñ
,

49 
	tGtkTªeIãr
 *
	ta
,

50 
	tGtkTªeIãr
 *
	tb
,

51 
	tgpoöãr
 
	tu£r_d©a
);

54 
	s_GtkTªeS‹èbÀIÁ˚


56 
GTy≥I¡îÁ˚
 
g_iÁ˚
;

59 (* 
s‹t_cﬁumn_ch™ged
Ë(
GtkTªeS‹èbÀ
 *
s‹èbÀ
);

62 
	`gboﬁón
 (* 
gë_s‹t_cﬁumn_id
Ë(
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

63 
göt
 *
s‹t_cﬁumn_id
,

64 
GtkS‹tTy≥
 *
‹dî
);

65 (* 
£t_s‹t_cﬁumn_id
Ë(
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

66 
göt
 
s‹t_cﬁumn_id
,

67 
GtkS‹tTy≥
 
‹dî
);

68 (* 
£t_s‹t_func
Ë(
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

69 
göt
 
s‹t_cﬁumn_id
,

70 
GtkTªeIãrCom∑ªFunc
 
func
,

71 
gpoöãr
 
d©a
,

72 
GDe°royNŸify
 
de°roy
);

73 (* 
£t_deÁu…_s‹t_func
Ë(
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

74 
GtkTªeIãrCom∑ªFunc
 
func
,

75 
gpoöãr
 
d©a
,

76 
GDe°royNŸify
 
de°roy
);

77 
	`gboﬁón
 (* 
has_deÁu…_s‹t_func
Ë(
GtkTªeS‹èbÀ
 *
s‹èbÀ
);

81 
GTy≥
 
	$gtk_åì_s‹èbÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

83 
	`gtk_åì_s‹èbÀ_s‹t_cﬁumn_ch™ged
 (
GtkTªeS‹èbÀ
 *
s‹èbÀ
);

84 
gboﬁón
 
	`gtk_åì_s‹èbÀ_gë_s‹t_cﬁumn_id
 (
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

85 
göt
 *
s‹t_cﬁumn_id
,

86 
GtkS‹tTy≥
 *
‹dî
);

87 
	`gtk_åì_s‹èbÀ_£t_s‹t_cﬁumn_id
 (
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

88 
göt
 
s‹t_cﬁumn_id
,

89 
GtkS‹tTy≥
 
‹dî
);

90 
	`gtk_åì_s‹èbÀ_£t_s‹t_func
 (
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

91 
göt
 
s‹t_cﬁumn_id
,

92 
GtkTªeIãrCom∑ªFunc
 
s‹t_func
,

93 
gpoöãr
 
u£r_d©a
,

94 
GDe°royNŸify
 
de°roy
);

95 
	`gtk_åì_s‹èbÀ_£t_deÁu…_s‹t_func
 (
GtkTªeS‹èbÀ
 *
s‹èbÀ
,

96 
GtkTªeIãrCom∑ªFunc
 
s‹t_func
,

97 
gpoöãr
 
u£r_d©a
,

98 
GDe°royNŸify
 
de°roy
);

99 
gboﬁón
 
	`gtk_åì_s‹èbÀ_has_deÁu…_s‹t_func
 (
GtkTªeS‹èbÀ
 *
s‹èbÀ
);

101 
G_END_DECLS


	@/usr/include/gtk/gtktreestore.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_STORE_H__


25 
	#__GTK_TREE_STORE_H__


	)

27 
	~<gdkc⁄fig.h
>

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtkåìs‹èbÀ.h
>

30 
	~<°d¨g.h
>

33 
	gG_BEGIN_DECLS


36 
	#GTK_TYPE_TREE_STORE
 (
	`gtk_åì_°‹e_gë_ty≥
 ())

	)

37 
	#GTK_TREE_STORE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_STORE
, 
GtkTªeSt‹e
))

	)

38 
	#GTK_TREE_STORE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TREE_STORE
, 
GtkTªeSt‹eCœss
))

	)

39 
	#GTK_IS_TREE_STORE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_STORE
))

	)

40 
	#GTK_IS_TREE_STORE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TREE_STORE
))

	)

41 
	#GTK_TREE_STORE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE_STORE
, 
GtkTªeSt‹eCœss
))

	)

43 
_GtkTªeSt‹e
 
	tGtkTªeSt‹e
;

44 
_GtkTªeSt‹eCœss
 
	tGtkTªeSt‹eCœss
;

46 
	s_GtkTªeSt‹e


48 
GObje˘
 
	m∑ª¡
;

50 
göt
 
GSEAL
 (
°amp
);

51 
gpoöãr
 
GSEAL
 (
roŸ
);

52 
gpoöãr
 
GSEAL
 (
œ°
);

53 
göt
 
GSEAL
 (
n_cﬁumns
);

54 
göt
 
GSEAL
 (
s‹t_cﬁumn_id
);

55 
GLi°
 *
GSEAL
 (
s‹t_li°
);

56 
GtkS‹tTy≥
 
GSEAL
 (
‹dî
);

57 
GTy≥
 *
GSEAL
 (
cﬁumn_hódîs
);

58 
GtkTªeIãrCom∑ªFunc
 
GSEAL
 (
deÁu…_s‹t_func
);

59 
gpoöãr
 
GSEAL
 (
deÁu…_s‹t_d©a
);

60 
GDe°royNŸify
 
GSEAL
 (
deÁu…_s‹t_de°roy
);

61 
guöt
 
GSEAL
 (
cﬁumns_dúty
) : 1;

64 
	s_GtkTªeSt‹eCœss


66 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

69 (*
	m_gtk_ª£rved1
) ();

70 (*
	m_gtk_ª£rved2
) ();

71 (*
	m_gtk_ª£rved3
) ();

72 (*
	m_gtk_ª£rved4
) ();

76 
GTy≥
 
	$gtk_åì_°‹e_gë_ty≥
 (Ë
G_GNUC_CONST
;

77 
GtkTªeSt‹e
 *
	`gtk_åì_°‹e_√w
 (
göt
 
n_cﬁumns
,

79 
GtkTªeSt‹e
 *
	`gtk_åì_°‹e_√wv
 (
göt
 
n_cﬁumns
,

80 
GTy≥
 *
ty≥s
);

81 
	`gtk_åì_°‹e_£t_cﬁumn_ty≥s
 (
GtkTªeSt‹e
 *
åì_°‹e
,

82 
göt
 
n_cﬁumns
,

83 
GTy≥
 *
ty≥s
);

87 
	`gtk_åì_°‹e_£t_vÆue
 (
GtkTªeSt‹e
 *
åì_°‹e
,

88 
GtkTªeIãr
 *
ôî
,

89 
göt
 
cﬁumn
,

90 
GVÆue
 *
vÆue
);

91 
	`gtk_åì_°‹e_£t
 (
GtkTªeSt‹e
 *
åì_°‹e
,

92 
GtkTªeIãr
 *
ôî
,

94 
	`gtk_åì_°‹e_£t_vÆuesv
 (
GtkTªeSt‹e
 *
åì_°‹e
,

95 
GtkTªeIãr
 *
ôî
,

96 
göt
 *
cﬁumns
,

97 
GVÆue
 *
vÆues
,

98 
göt
 
n_vÆues
);

99 
	`gtk_åì_°‹e_£t_vÆi°
 (
GtkTªeSt‹e
 *
åì_°‹e
,

100 
GtkTªeIãr
 *
ôî
,

101 
va_li°
 
v¨_¨gs
);

102 
gboﬁón
 
	`gtk_åì_°‹e_ªmove
 (
GtkTªeSt‹e
 *
åì_°‹e
,

103 
GtkTªeIãr
 *
ôî
);

104 
	`gtk_åì_°‹e_ö£π
 (
GtkTªeSt‹e
 *
åì_°‹e
,

105 
GtkTªeIãr
 *
ôî
,

106 
GtkTªeIãr
 *
∑ª¡
,

107 
göt
 
posôi⁄
);

108 
	`gtk_åì_°‹e_ö£π_bef‹e
 (
GtkTªeSt‹e
 *
åì_°‹e
,

109 
GtkTªeIãr
 *
ôî
,

110 
GtkTªeIãr
 *
∑ª¡
,

111 
GtkTªeIãr
 *
siblög
);

112 
	`gtk_åì_°‹e_ö£π_a·î
 (
GtkTªeSt‹e
 *
åì_°‹e
,

113 
GtkTªeIãr
 *
ôî
,

114 
GtkTªeIãr
 *
∑ª¡
,

115 
GtkTªeIãr
 *
siblög
);

116 
	`gtk_åì_°‹e_ö£π_wôh_vÆues
 (
GtkTªeSt‹e
 *
åì_°‹e
,

117 
GtkTªeIãr
 *
ôî
,

118 
GtkTªeIãr
 *
∑ª¡
,

119 
göt
 
posôi⁄
,

121 
	`gtk_åì_°‹e_ö£π_wôh_vÆuesv
 (
GtkTªeSt‹e
 *
åì_°‹e
,

122 
GtkTªeIãr
 *
ôî
,

123 
GtkTªeIãr
 *
∑ª¡
,

124 
göt
 
posôi⁄
,

125 
göt
 *
cﬁumns
,

126 
GVÆue
 *
vÆues
,

127 
göt
 
n_vÆues
);

128 
	`gtk_åì_°‹e_¥ïíd
 (
GtkTªeSt‹e
 *
åì_°‹e
,

129 
GtkTªeIãr
 *
ôî
,

130 
GtkTªeIãr
 *
∑ª¡
);

131 
	`gtk_åì_°‹e_≠≥nd
 (
GtkTªeSt‹e
 *
åì_°‹e
,

132 
GtkTªeIãr
 *
ôî
,

133 
GtkTªeIãr
 *
∑ª¡
);

134 
gboﬁón
 
	`gtk_åì_°‹e_is_™˚°‹
 (
GtkTªeSt‹e
 *
åì_°‹e
,

135 
GtkTªeIãr
 *
ôî
,

136 
GtkTªeIãr
 *
des˚nd™t
);

137 
göt
 
	`gtk_åì_°‹e_ôî_dïth
 (
GtkTªeSt‹e
 *
åì_°‹e
,

138 
GtkTªeIãr
 *
ôî
);

139 
	`gtk_åì_°‹e_˛ór
 (
GtkTªeSt‹e
 *
åì_°‹e
);

140 
gboﬁón
 
	`gtk_åì_°‹e_ôî_is_vÆid
 (
GtkTªeSt‹e
 *
åì_°‹e
,

141 
GtkTªeIãr
 *
ôî
);

142 
	`gtk_åì_°‹e_ª‹dî
 (
GtkTªeSt‹e
 *
åì_°‹e
,

143 
GtkTªeIãr
 *
∑ª¡
,

144 
göt
 *
√w_‹dî
);

145 
	`gtk_åì_°‹e_sw≠
 (
GtkTªeSt‹e
 *
åì_°‹e
,

146 
GtkTªeIãr
 *
a
,

147 
GtkTªeIãr
 *
b
);

148 
	`gtk_åì_°‹e_move_bef‹e
 (
GtkTªeSt‹e
 *
åì_°‹e
,

149 
GtkTªeIãr
 *
ôî
,

150 
GtkTªeIãr
 *
posôi⁄
);

151 
	`gtk_åì_°‹e_move_a·î
 (
GtkTªeSt‹e
 *
åì_°‹e
,

152 
GtkTªeIãr
 *
ôî
,

153 
GtkTªeIãr
 *
posôi⁄
);

156 
G_END_DECLS


	@/usr/include/gtk/gtktreeview.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_VIEW_H__


25 
	#__GTK_TREE_VIEW_H__


	)

27 
	~<gtk/gtkc⁄èöî.h
>

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtkåìvõwcﬁumn.h
>

30 
	~<gtk/gtkdnd.h
>

31 
	~<gtk/gtkíåy.h
>

33 
G_BEGIN_DECLS


39 
	mGTK_TREE_VIEW_DROP_BEFORE
,

40 
	mGTK_TREE_VIEW_DROP_AFTER
,

44 
	mGTK_TREE_VIEW_DROP_INTO_OR_BEFORE
,

45 
	mGTK_TREE_VIEW_DROP_INTO_OR_AFTER


46 } 
	tGtkTªeVõwDr›Posôi⁄
;

48 
	#GTK_TYPE_TREE_VIEW
 (
	`gtk_åì_võw_gë_ty≥
 ())

	)

49 
	#GTK_TREE_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_VIEW
, 
GtkTªeVõw
))

	)

50 
	#GTK_TREE_VIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TREE_VIEW
, 
GtkTªeVõwCœss
))

	)

51 
	#GTK_IS_TREE_VIEW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_VIEW
))

	)

52 
	#GTK_IS_TREE_VIEW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TREE_VIEW
))

	)

53 
	#GTK_TREE_VIEW_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE_VIEW
, 
GtkTªeVõwCœss
))

	)

55 
_GtkTªeVõw
 
	tGtkTªeVõw
;

56 
_GtkTªeVõwCœss
 
	tGtkTªeVõwCœss
;

57 
_GtkTªeVõwPriv©e
 
	tGtkTªeVõwPriv©e
;

58 
_GtkTªeSñe˘i⁄
 
	tGtkTªeSñe˘i⁄
;

59 
_GtkTªeSñe˘i⁄Cœss
 
	tGtkTªeSñe˘i⁄Cœss
;

61 
	s_GtkTªeVõw


63 
GtkC⁄èöî
 
	m∑ª¡
;

65 
GtkTªeVõwPriv©e
 *
GSEAL
 (
¥iv
);

68 
	s_GtkTªeVõwCœss


70 
GtkC⁄èöîCœss
 
	m∑ª¡_˛ass
;

72 (* 
	m£t_s¸ﬁl_adju°míts
Ë(
GtkTªeVõw
 *
	måì_võw
,

73 
GtkAdju°mít
 *
	mhadju°mít
,

74 
GtkAdju°mít
 *
	mvadju°mít
);

75 (* 
	mrow_a˘iv©ed
Ë(
GtkTªeVõw
 *
	måì_võw
,

76 
GtkTªeP©h
 *
	m∑th
,

77 
GtkTªeVõwCﬁumn
 *
	mcﬁumn
);

78 
gboﬁón
 (* 
ã°_ex∑nd_row
Ë(
GtkTªeVõw
 *
	måì_võw
,

79 
GtkTªeIãr
 *
	môî
,

80 
GtkTªeP©h
 *
	m∑th
);

81 
gboﬁón
 (* 
ã°_cﬁœp£_row
Ë(
GtkTªeVõw
 *
	måì_võw
,

82 
GtkTªeIãr
 *
	môî
,

83 
GtkTªeP©h
 *
	m∑th
);

84 (* 
	mrow_ex∑nded
Ë(
GtkTªeVõw
 *
	måì_võw
,

85 
GtkTªeIãr
 *
	môî
,

86 
GtkTªeP©h
 *
	m∑th
);

87 (* 
	mrow_cﬁœp£d
Ë(
GtkTªeVõw
 *
	måì_võw
,

88 
GtkTªeIãr
 *
	môî
,

89 
GtkTªeP©h
 *
	m∑th
);

90 (* 
	mcﬁumns_ch™ged
Ë(
GtkTªeVõw
 *
	måì_võw
);

91 (* 
	mcurs‹_ch™ged
Ë(
GtkTªeVõw
 *
	måì_võw
);

94 
gboﬁón
 (* 
move_curs‹
Ë(
GtkTªeVõw
 *
	måì_võw
,

95 
GtkMovemítSãp
 
	m°ï
,

96 
göt
 
	mcou¡
);

97 
gboﬁón
 (* 
£À˘_Æl
Ë(
GtkTªeVõw
 *
	måì_võw
);

98 
gboﬁón
 (* 
un£À˘_Æl
Ë(
GtkTªeVõw
 *
	måì_võw
);

99 
gboﬁón
 (* 
£À˘_curs‹_row
Ë(
GtkTªeVõw
 *
	måì_võw
,

100 
gboﬁón
 
	m°¨t_edôög
);

101 
gboﬁón
 (* 
toggÀ_curs‹_row
Ë(
GtkTªeVõw
 *
	måì_võw
);

102 
gboﬁón
 (* 
ex∑nd_cﬁœp£_curs‹_row
Ë(
GtkTªeVõw
 *
	måì_võw
,

103 
gboﬁón
 
	mlogiˇl
,

104 
gboﬁón
 
	mex∑nd
,

105 
gboﬁón
 
	m›í_Æl
);

106 
gboﬁón
 (* 
£À˘_curs‹_∑ª¡
Ë(
GtkTªeVõw
 *
	måì_võw
);

107 
gboﬁón
 (* 
°¨t_öãø˘ive_£¨ch
Ë(
GtkTªeVõw
 *
	måì_võw
);

110 (*
	m_gtk_ª£rved0
) ();

111 (*
	m_gtk_ª£rved1
) ();

112 (*
	m_gtk_ª£rved2
) ();

113 (*
	m_gtk_ª£rved3
) ();

114 (*
	m_gtk_ª£rved4
) ();

118 
	$gboﬁón
 (* 
	tGtkTªeVõwCﬁumnDr›Func
Ë(
	tGtkTªeVõw
 *
	tåì_võw
,

119 
	tGtkTªeVõwCﬁumn
 *
	tcﬁumn
,

120 
	tGtkTªeVõwCﬁumn
 *
	t¥ev_cﬁumn
,

121 
	tGtkTªeVõwCﬁumn
 *
	t√xt_cﬁumn
,

122 
	tgpoöãr
 
	td©a
);

123 (* 
	tGtkTªeVõwM≠pögFunc
Ë(
	tGtkTªeVõw
 *
	tåì_võw
,

124 
	tGtkTªeP©h
 *
	t∑th
,

125 
	tgpoöãr
 
	tu£r_d©a
);

126 
	$gboﬁón
 (*
	tGtkTªeVõwSórchEquÆFunc
Ë(
	tGtkTªeModñ
 *
	tmodñ
,

127 
	tgöt
 
	tcﬁumn
,

128 c⁄° 
	tgch¨
 *
	tkey
,

129 
	tGtkTªeIãr
 *
	tôî
,

130 
	tgpoöãr
 
	t£¨ch_d©a
);

131 
	$gboﬁón
 (*
	tGtkTªeVõwRowSï¨©‹Func
Ë(
	tGtkTªeModñ
 *
	tmodñ
,

132 
	tGtkTªeIãr
 *
	tôî
,

133 
	tgpoöãr
 
	td©a
);

134 (*
	tGtkTªeVõwSórchPosôi⁄Func
Ë(
	tGtkTªeVõw
 *
	tåì_võw
,

135 
	tGtkWidgë
 *
	t£¨ch_dülog
,

136 
	tgpoöãr
 
	tu£r_d©a
);

140 
GTy≥
 
	$gtk_åì_võw_gë_ty≥
 (Ë
G_GNUC_CONST
;

141 
GtkWidgë
 *
	`gtk_åì_võw_√w
 ();

142 
GtkWidgë
 *
	`gtk_åì_võw_√w_wôh_modñ
 (
GtkTªeModñ
 *
modñ
);

145 
GtkTªeModñ
 *
	`gtk_åì_võw_gë_modñ
 (
GtkTªeVõw
 *
åì_võw
);

146 
	`gtk_åì_võw_£t_modñ
 (
GtkTªeVõw
 *
åì_võw
,

147 
GtkTªeModñ
 *
modñ
);

148 
GtkTªeSñe˘i⁄
 *
	`gtk_åì_võw_gë_£À˘i⁄
 (
GtkTªeVõw
 *
åì_võw
);

149 
GtkAdju°mít
 *
	`gtk_åì_võw_gë_hadju°mít
 (
GtkTªeVõw
 *
åì_võw
);

150 
	`gtk_åì_võw_£t_hadju°mít
 (
GtkTªeVõw
 *
åì_võw
,

151 
GtkAdju°mít
 *
adju°mít
);

152 
GtkAdju°mít
 *
	`gtk_åì_võw_gë_vadju°mít
 (
GtkTªeVõw
 *
åì_võw
);

153 
	`gtk_åì_võw_£t_vadju°mít
 (
GtkTªeVõw
 *
åì_võw
,

154 
GtkAdju°mít
 *
adju°mít
);

155 
gboﬁón
 
	`gtk_åì_võw_gë_hódîs_visibÀ
 (
GtkTªeVõw
 *
åì_võw
);

156 
	`gtk_åì_võw_£t_hódîs_visibÀ
 (
GtkTªeVõw
 *
åì_võw
,

157 
gboﬁón
 
hódîs_visibÀ
);

158 
	`gtk_åì_võw_cﬁumns_autosize
 (
GtkTªeVõw
 *
åì_võw
);

159 
gboﬁón
 
	`gtk_åì_võw_gë_hódîs_˛ickabÀ
 (
GtkTªeVõw
 *
åì_võw
);

160 
	`gtk_åì_võw_£t_hódîs_˛ickabÀ
 (
GtkTªeVõw
 *
åì_võw
,

161 
gboﬁón
 
£âög
);

162 
	`gtk_åì_võw_£t_ruÀs_höt
 (
GtkTªeVõw
 *
åì_võw
,

163 
gboﬁón
 
£âög
);

164 
gboﬁón
 
	`gtk_åì_võw_gë_ruÀs_höt
 (
GtkTªeVõw
 *
åì_võw
);

167 
göt
 
	`gtk_åì_võw_≠≥nd_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
,

168 
GtkTªeVõwCﬁumn
 *
cﬁumn
);

169 
göt
 
	`gtk_åì_võw_ªmove_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
,

170 
GtkTªeVõwCﬁumn
 *
cﬁumn
);

171 
göt
 
	`gtk_åì_võw_ö£π_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
,

172 
GtkTªeVõwCﬁumn
 *
cﬁumn
,

173 
göt
 
posôi⁄
);

174 
göt
 
	$gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
 (
GtkTªeVõw
 *
åì_võw
,

175 
göt
 
posôi⁄
,

176 c⁄° 
gch¨
 *
tôÀ
,

177 
GtkCñlRídîî
 *
˚Œ
,

178 ...Ë
G_GNUC_NULL_TERMINATED
;

179 
göt
 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_d©a_func
 (
GtkTªeVõw
 *
åì_võw
,

180 
göt
 
posôi⁄
,

181 c⁄° 
gch¨
 *
tôÀ
,

182 
GtkCñlRídîî
 *
˚Œ
,

183 
GtkTªeCñlD©aFunc
 
func
,

184 
gpoöãr
 
d©a
,

185 
GDe°royNŸify
 
dnŸify
);

186 
GtkTªeVõwCﬁumn
 *
	`gtk_åì_võw_gë_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
,

187 
göt
 
n
);

188 
GLi°
 *
	`gtk_åì_võw_gë_cﬁumns
 (
GtkTªeVõw
 *
åì_võw
);

189 
	`gtk_åì_võw_move_cﬁumn_a·î
 (
GtkTªeVõw
 *
åì_võw
,

190 
GtkTªeVõwCﬁumn
 *
cﬁumn
,

191 
GtkTªeVõwCﬁumn
 *
ba£_cﬁumn
);

192 
	`gtk_åì_võw_£t_ex∑ndî_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
,

193 
GtkTªeVõwCﬁumn
 *
cﬁumn
);

194 
GtkTªeVõwCﬁumn
 *
	`gtk_åì_võw_gë_ex∑ndî_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
);

195 
	`gtk_åì_võw_£t_cﬁumn_døg_fun˘i⁄
 (
GtkTªeVõw
 *
åì_võw
,

196 
GtkTªeVõwCﬁumnDr›Func
 
func
,

197 
gpoöãr
 
u£r_d©a
,

198 
GDe°royNŸify
 
de°roy
);

201 
	`gtk_åì_võw_s¸ﬁl_to_poöt
 (
GtkTªeVõw
 *
åì_võw
,

202 
göt
 
åì_x
,

203 
göt
 
åì_y
);

204 
	`gtk_åì_võw_s¸ﬁl_to_˚Œ
 (
GtkTªeVõw
 *
åì_võw
,

205 
GtkTªeP©h
 *
∑th
,

206 
GtkTªeVõwCﬁumn
 *
cﬁumn
,

207 
gboﬁón
 
u£_Æign
,

208 
gÊﬂt
 
row_Æign
,

209 
gÊﬂt
 
cﬁ_Æign
);

210 
	`gtk_åì_võw_row_a˘iv©ed
 (
GtkTªeVõw
 *
åì_võw
,

211 
GtkTªeP©h
 *
∑th
,

212 
GtkTªeVõwCﬁumn
 *
cﬁumn
);

213 
	`gtk_åì_võw_ex∑nd_Æl
 (
GtkTªeVõw
 *
åì_võw
);

214 
	`gtk_åì_võw_cﬁœp£_Æl
 (
GtkTªeVõw
 *
åì_võw
);

215 
	`gtk_åì_võw_ex∑nd_to_∑th
 (
GtkTªeVõw
 *
åì_võw
,

216 
GtkTªeP©h
 *
∑th
);

217 
gboﬁón
 
	`gtk_åì_võw_ex∑nd_row
 (
GtkTªeVõw
 *
åì_võw
,

218 
GtkTªeP©h
 *
∑th
,

219 
gboﬁón
 
›í_Æl
);

220 
gboﬁón
 
	`gtk_åì_võw_cﬁœp£_row
 (
GtkTªeVõw
 *
åì_võw
,

221 
GtkTªeP©h
 *
∑th
);

222 
	`gtk_åì_võw_m≠_ex∑nded_rows
 (
GtkTªeVõw
 *
åì_võw
,

223 
GtkTªeVõwM≠pögFunc
 
func
,

224 
gpoöãr
 
d©a
);

225 
gboﬁón
 
	`gtk_åì_võw_row_ex∑nded
 (
GtkTªeVõw
 *
åì_võw
,

226 
GtkTªeP©h
 *
∑th
);

227 
	`gtk_åì_võw_£t_ª‹dîabÀ
 (
GtkTªeVõw
 *
åì_võw
,

228 
gboﬁón
 
ª‹dîabÀ
);

229 
gboﬁón
 
	`gtk_åì_võw_gë_ª‹dîabÀ
 (
GtkTªeVõw
 *
åì_võw
);

230 
	`gtk_åì_võw_£t_curs‹
 (
GtkTªeVõw
 *
åì_võw
,

231 
GtkTªeP©h
 *
∑th
,

232 
GtkTªeVõwCﬁumn
 *
focus_cﬁumn
,

233 
gboﬁón
 
°¨t_edôög
);

234 
	`gtk_åì_võw_£t_curs‹_⁄_˚Œ
 (
GtkTªeVõw
 *
åì_võw
,

235 
GtkTªeP©h
 *
∑th
,

236 
GtkTªeVõwCﬁumn
 *
focus_cﬁumn
,

237 
GtkCñlRídîî
 *
focus_˚Œ
,

238 
gboﬁón
 
°¨t_edôög
);

239 
	`gtk_åì_võw_gë_curs‹
 (
GtkTªeVõw
 *
åì_võw
,

240 
GtkTªeP©h
 **
∑th
,

241 
GtkTªeVõwCﬁumn
 **
focus_cﬁumn
);

245 
GdkWödow
 *
	`gtk_åì_võw_gë_bö_wödow
 (
GtkTªeVõw
 *
åì_võw
);

246 
gboﬁón
 
	`gtk_åì_võw_gë_∑th_©_pos
 (
GtkTªeVõw
 *
åì_võw
,

247 
göt
 
x
,

248 
göt
 
y
,

249 
GtkTªeP©h
 **
∑th
,

250 
GtkTªeVõwCﬁumn
 **
cﬁumn
,

251 
göt
 *
˚Œ_x
,

252 
göt
 *
˚Œ_y
);

253 
	`gtk_åì_võw_gë_˚Œ_¨ó
 (
GtkTªeVõw
 *
åì_võw
,

254 
GtkTªeP©h
 *
∑th
,

255 
GtkTªeVõwCﬁumn
 *
cﬁumn
,

256 
GdkRe˘™gÀ
 *
ª˘
);

257 
	`gtk_åì_võw_gë_background_¨ó
 (
GtkTªeVõw
 *
åì_võw
,

258 
GtkTªeP©h
 *
∑th
,

259 
GtkTªeVõwCﬁumn
 *
cﬁumn
,

260 
GdkRe˘™gÀ
 *
ª˘
);

261 
	`gtk_åì_võw_gë_visibÀ_ª˘
 (
GtkTªeVõw
 *
åì_võw
,

262 
GdkRe˘™gÀ
 *
visibÀ_ª˘
);

264 #i‚de‡
GTK_DISABLE_DEPRECATED


265 
	`gtk_åì_võw_widgë_to_åì_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

266 
göt
 
wx
,

267 
göt
 
wy
,

268 
göt
 *
tx
,

269 
göt
 *
ty
);

270 
	`gtk_åì_võw_åì_to_widgë_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

271 
göt
 
tx
,

272 
göt
 
ty
,

273 
göt
 *
wx
,

274 
göt
 *
wy
);

276 
gboﬁón
 
	`gtk_åì_võw_gë_visibÀ_ønge
 (
GtkTªeVõw
 *
åì_võw
,

277 
GtkTªeP©h
 **
°¨t_∑th
,

278 
GtkTªeP©h
 **
íd_∑th
);

281 
	`gtk_åì_võw_íabÀ_modñ_døg_sour˚
 (
GtkTªeVõw
 *
åì_võw
,

282 
GdkModifõrTy≥
 
°¨t_buâ⁄_mask
,

283 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

284 
göt
 
n_èrgës
,

285 
GdkDøgA˘i⁄
 
a˘i⁄s
);

286 
	`gtk_åì_võw_íabÀ_modñ_døg_de°
 (
GtkTªeVõw
 *
åì_võw
,

287 c⁄° 
GtkT¨gëE¡ry
 *
èrgës
,

288 
göt
 
n_èrgës
,

289 
GdkDøgA˘i⁄
 
a˘i⁄s
);

290 
	`gtk_åì_võw_un£t_rows_døg_sour˚
 (
GtkTªeVõw
 *
åì_võw
);

291 
	`gtk_åì_võw_un£t_rows_døg_de°
 (
GtkTªeVõw
 *
åì_võw
);

295 
	`gtk_åì_võw_£t_døg_de°_row
 (
GtkTªeVõw
 *
åì_võw
,

296 
GtkTªeP©h
 *
∑th
,

297 
GtkTªeVõwDr›Posôi⁄
 
pos
);

298 
	`gtk_åì_võw_gë_døg_de°_row
 (
GtkTªeVõw
 *
åì_võw
,

299 
GtkTªeP©h
 **
∑th
,

300 
GtkTªeVõwDr›Posôi⁄
 *
pos
);

301 
gboﬁón
 
	`gtk_åì_võw_gë_de°_row_©_pos
 (
GtkTªeVõw
 *
åì_võw
,

302 
göt
 
døg_x
,

303 
göt
 
døg_y
,

304 
GtkTªeP©h
 **
∑th
,

305 
GtkTªeVõwDr›Posôi⁄
 *
pos
);

306 
GdkPixm≠
 *
	`gtk_åì_võw_¸óã_row_døg_ic⁄
 (
GtkTªeVõw
 *
åì_võw
,

307 
GtkTªeP©h
 *
∑th
);

310 
	`gtk_åì_võw_£t_íabÀ_£¨ch
 (
GtkTªeVõw
 *
åì_võw
,

311 
gboﬁón
 
íabÀ_£¨ch
);

312 
gboﬁón
 
	`gtk_åì_võw_gë_íabÀ_£¨ch
 (
GtkTªeVõw
 *
åì_võw
);

313 
göt
 
	`gtk_åì_võw_gë_£¨ch_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
);

314 
	`gtk_åì_võw_£t_£¨ch_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
,

315 
göt
 
cﬁumn
);

316 
GtkTªeVõwSórchEquÆFunc
 
	`gtk_åì_võw_gë_£¨ch_equÆ_func
 (
GtkTªeVõw
 *
åì_võw
);

317 
	`gtk_åì_võw_£t_£¨ch_equÆ_func
 (
GtkTªeVõw
 *
åì_võw
,

318 
GtkTªeVõwSórchEquÆFunc
 
£¨ch_equÆ_func
,

319 
gpoöãr
 
£¨ch_u£r_d©a
,

320 
GDe°royNŸify
 
£¨ch_de°roy
);

322 
GtkE¡ry
 *
	`gtk_åì_võw_gë_£¨ch_íåy
 (
GtkTªeVõw
 *
åì_võw
);

323 
	`gtk_åì_võw_£t_£¨ch_íåy
 (
GtkTªeVõw
 *
åì_võw
,

324 
GtkE¡ry
 *
íåy
);

325 
GtkTªeVõwSórchPosôi⁄Func
 
	`gtk_åì_võw_gë_£¨ch_posôi⁄_func
 (
GtkTªeVõw
 *
åì_võw
);

326 
	`gtk_åì_võw_£t_£¨ch_posôi⁄_func
 (
GtkTªeVõw
 *
åì_võw
,

327 
GtkTªeVõwSórchPosôi⁄Func
 
func
,

328 
gpoöãr
 
d©a
,

329 
GDe°royNŸify
 
de°roy
);

332 
	`gtk_åì_võw_c⁄vît_widgë_to_åì_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

333 
göt
 
wx
,

334 
göt
 
wy
,

335 
göt
 *
tx
,

336 
göt
 *
ty
);

337 
	`gtk_åì_võw_c⁄vît_åì_to_widgë_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

338 
göt
 
tx
,

339 
göt
 
ty
,

340 
göt
 *
wx
,

341 
göt
 *
wy
);

342 
	`gtk_åì_võw_c⁄vît_widgë_to_bö_wödow_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

343 
göt
 
wx
,

344 
göt
 
wy
,

345 
göt
 *
bx
,

346 
göt
 *
by
);

347 
	`gtk_åì_võw_c⁄vît_bö_wödow_to_widgë_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

348 
göt
 
bx
,

349 
göt
 
by
,

350 
göt
 *
wx
,

351 
göt
 *
wy
);

352 
	`gtk_åì_võw_c⁄vît_åì_to_bö_wödow_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

353 
göt
 
tx
,

354 
göt
 
ty
,

355 
göt
 *
bx
,

356 
göt
 *
by
);

357 
	`gtk_åì_võw_c⁄vît_bö_wödow_to_åì_co‹ds
 (
GtkTªeVõw
 *
åì_võw
,

358 
göt
 
bx
,

359 
göt
 
by
,

360 
göt
 *
tx
,

361 
göt
 *
ty
);

365 (* 
	tGtkTªeDe°royCou¡Func
Ë(
	tGtkTªeVõw
 *
	tåì_võw
,

366 
	tGtkTªeP©h
 *
	t∑th
,

367 
	tgöt
 
	tchûdªn
,

368 
	tgpoöãr
 
	tu£r_d©a
);

369 
	`gtk_åì_võw_£t_de°roy_cou¡_func
 (
GtkTªeVõw
 *
åì_võw
,

370 
GtkTªeDe°royCou¡Func
 
func
,

371 
gpoöãr
 
d©a
,

372 
GDe°royNŸify
 
de°roy
);

374 
	`gtk_åì_võw_£t_fixed_height_mode
 (
GtkTªeVõw
 *
åì_võw
,

375 
gboﬁón
 
íabÀ
);

376 
gboﬁón
 
	`gtk_åì_võw_gë_fixed_height_mode
 (
GtkTªeVõw
 *
åì_võw
);

377 
	`gtk_åì_võw_£t_hovî_£À˘i⁄
 (
GtkTªeVõw
 *
åì_võw
,

378 
gboﬁón
 
hovî
);

379 
gboﬁón
 
	`gtk_åì_võw_gë_hovî_£À˘i⁄
 (
GtkTªeVõw
 *
åì_võw
);

380 
	`gtk_åì_võw_£t_hovî_ex∑nd
 (
GtkTªeVõw
 *
åì_võw
,

381 
gboﬁón
 
ex∑nd
);

382 
gboﬁón
 
	`gtk_åì_võw_gë_hovî_ex∑nd
 (
GtkTªeVõw
 *
åì_võw
);

383 
	`gtk_åì_võw_£t_rubbî_b™dög
 (
GtkTªeVõw
 *
åì_võw
,

384 
gboﬁón
 
íabÀ
);

385 
gboﬁón
 
	`gtk_åì_võw_gë_rubbî_b™dög
 (
GtkTªeVõw
 *
åì_võw
);

387 
gboﬁón
 
	`gtk_åì_võw_is_rubbî_b™dög_a˘ive
 (
GtkTªeVõw
 *
åì_võw
);

389 
GtkTªeVõwRowSï¨©‹Func
 
	`gtk_åì_võw_gë_row_£∑øt‹_func
 (
GtkTªeVõw
 *
åì_võw
);

390 
	`gtk_åì_võw_£t_row_£∑øt‹_func
 (
GtkTªeVõw
 *
åì_võw
,

391 
GtkTªeVõwRowSï¨©‹Func
 
func
,

392 
gpoöãr
 
d©a
,

393 
GDe°royNŸify
 
de°roy
);

395 
GtkTªeVõwGridLöes
 
	`gtk_åì_võw_gë_grid_löes
 (
GtkTªeVõw
 *
åì_võw
);

396 
	`gtk_åì_võw_£t_grid_löes
 (
GtkTªeVõw
 *
åì_võw
,

397 
GtkTªeVõwGridLöes
 
grid_löes
);

398 
gboﬁón
 
	`gtk_åì_võw_gë_íabÀ_åì_löes
 (
GtkTªeVõw
 *
åì_võw
);

399 
	`gtk_åì_võw_£t_íabÀ_åì_löes
 (
GtkTªeVõw
 *
åì_võw
,

400 
gboﬁón
 
íabÀd
);

401 
	`gtk_åì_võw_£t_show_ex∑ndîs
 (
GtkTªeVõw
 *
åì_võw
,

402 
gboﬁón
 
íabÀd
);

403 
gboﬁón
 
	`gtk_åì_võw_gë_show_ex∑ndîs
 (
GtkTªeVõw
 *
åì_võw
);

404 
	`gtk_åì_võw_£t_Àvñ_ödíèti⁄
 (
GtkTªeVõw
 *
åì_võw
,

405 
göt
 
ödíèti⁄
);

406 
göt
 
	`gtk_åì_võw_gë_Àvñ_ödíèti⁄
 (
GtkTªeVõw
 *
åì_võw
);

409 
	`gtk_åì_võw_£t_toﬁtù_row
 (
GtkTªeVõw
 *
åì_võw
,

410 
GtkToﬁtù
 *
toﬁtù
,

411 
GtkTªeP©h
 *
∑th
);

412 
	`gtk_åì_võw_£t_toﬁtù_˚Œ
 (
GtkTªeVõw
 *
åì_võw
,

413 
GtkToﬁtù
 *
toﬁtù
,

414 
GtkTªeP©h
 *
∑th
,

415 
GtkTªeVõwCﬁumn
 *
cﬁumn
,

416 
GtkCñlRídîî
 *
˚Œ
);

417 
gboﬁón
 
	`gtk_åì_võw_gë_toﬁtù_c⁄ãxt
(
GtkTªeVõw
 *
åì_võw
,

418 
göt
 *
x
,

419 
göt
 *
y
,

420 
gboﬁón
 
keybﬂrd_tù
,

421 
GtkTªeModñ
 **
modñ
,

422 
GtkTªeP©h
 **
∑th
,

423 
GtkTªeIãr
 *
ôî
);

424 
	`gtk_åì_võw_£t_toﬁtù_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
,

425 
göt
 
cﬁumn
);

426 
göt
 
	`gtk_åì_võw_gë_toﬁtù_cﬁumn
 (
GtkTªeVõw
 *
åì_võw
);

428 
G_END_DECLS


	@/usr/include/gtk/gtktreeviewcolumn.h

20 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

24 #i‚de‡
__GTK_TREE_VIEW_COLUMN_H__


25 
	#__GTK_TREE_VIEW_COLUMN_H__


	)

27 
	~<gtk/gtk˚Œªndîî.h
>

28 
	~<gtk/gtkåìmodñ.h
>

29 
	~<gtk/gtkåìs‹èbÀ.h
>

32 
	~<gtk/gtkobje˘.h
>

35 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_TREE_VIEW_COLUMN
 (
	`gtk_åì_võw_cﬁumn_gë_ty≥
 ())

	)

39 
	#GTK_TREE_VIEW_COLUMN
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_TREE_VIEW_COLUMN
, 
GtkTªeVõwCﬁumn
))

	)

40 
	#GTK_TREE_VIEW_COLUMN_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_TREE_VIEW_COLUMN
, 
GtkTªeVõwCﬁumnCœss
))

	)

41 
	#GTK_IS_TREE_VIEW_COLUMN
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_TREE_VIEW_COLUMN
))

	)

42 
	#GTK_IS_TREE_VIEW_COLUMN_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_TREE_VIEW_COLUMN
))

	)

43 
	#GTK_TREE_VIEW_COLUMN_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_TREE_VIEW_COLUMN
, 
GtkTªeVõwCﬁumnCœss
))

	)

47 
	mGTK_TREE_VIEW_COLUMN_GROW_ONLY
,

48 
	mGTK_TREE_VIEW_COLUMN_AUTOSIZE
,

49 
	mGTK_TREE_VIEW_COLUMN_FIXED


50 } 
	tGtkTªeVõwCﬁumnSizög
;

52 
_GtkTªeVõwCﬁumn
 
	tGtkTªeVõwCﬁumn
;

53 
_GtkTªeVõwCﬁumnCœss
 
	tGtkTªeVõwCﬁumnCœss
;

55 (* 
	tGtkTªeCñlD©aFunc
Ë(
	tGtkTªeVõwCﬁumn
 *
	tåì_cﬁumn
,

56 
	tGtkCñlRídîî
 *
	t˚Œ
,

57 
	tGtkTªeModñ
 *
	tåì_modñ
,

58 
	tGtkTªeIãr
 *
	tôî
,

59 
	tgpoöãr
 
	td©a
);

62 
	s_GtkTªeVõwCﬁumn


64 
GtkObje˘
 
∑ª¡
;

66 
GtkWidgë
 *
	`GSEAL
 (
åì_võw
);

67 
GtkWidgë
 *
	`GSEAL
 (
buâ⁄
);

68 
GtkWidgë
 *
	`GSEAL
 (
chûd
);

69 
GtkWidgë
 *
	`GSEAL
 (
¨row
);

70 
GtkWidgë
 *
	`GSEAL
 (
Æignmít
);

71 
GdkWödow
 *
	`GSEAL
 (
wödow
);

72 
GtkCñlEdôabÀ
 *
	`GSEAL
 (
edôabÀ_widgë
);

73 
gÊﬂt
 
	`GSEAL
 (
xÆign
);

74 
guöt
 
	`GSEAL
 (
¥›îty_ch™ged_sig«l
);

75 
göt
 
	`GSEAL
 (
•acög
);

79 
GtkTªeVõwCﬁumnSizög
 
	`GSEAL
 (
cﬁumn_ty≥
);

80 
göt
 
	`GSEAL
 (
ªque°ed_width
);

81 
göt
 
	`GSEAL
 (
buâ⁄_ªque°
);

82 
göt
 
	`GSEAL
 (
ªsized_width
);

83 
göt
 
	`GSEAL
 (
width
);

84 
göt
 
	`GSEAL
 (
fixed_width
);

85 
göt
 
	`GSEAL
 (
mö_width
);

86 
göt
 
	`GSEAL
 (
max_width
);

89 
göt
 
	`GSEAL
 (
døg_x
);

90 
göt
 
	`GSEAL
 (
døg_y
);

92 
gch¨
 *
	`GSEAL
 (
tôÀ
);

93 
GLi°
 *
	`GSEAL
 (
˚Œ_li°
);

96 
guöt
 
	`GSEAL
 (
s‹t_˛icked_sig«l
);

97 
guöt
 
	`GSEAL
 (
s‹t_cﬁumn_ch™ged_sig«l
);

98 
göt
 
	`GSEAL
 (
s‹t_cﬁumn_id
);

99 
GtkS‹tTy≥
 
	`GSEAL
 (
s‹t_‹dî
);

102 
guöt
 
	`GSEAL
 (
visibÀ
) : 1;

103 
guöt
 
	`GSEAL
 (
ªsizabÀ
) : 1;

104 
guöt
 
	`GSEAL
 (
˛ickabÀ
) : 1;

105 
guöt
 
	`GSEAL
 (
dúty
) : 1;

106 
guöt
 
	`GSEAL
 (
show_s‹t_ödiˇt‹
) : 1;

107 
guöt
 
	`GSEAL
 (
maybe_ª‹dîed
) : 1;

108 
guöt
 
	`GSEAL
 (
ª‹dîabÀ
) : 1;

109 
guöt
 
	`GSEAL
 (
u£_ªsized_width
) : 1;

110 
guöt
 
	`GSEAL
 (
ex∑nd
) : 1;

113 
	s_GtkTªeVõwCﬁumnCœss


115 
GtkObje˘Cœss
 
∑ª¡_˛ass
;

117 (*
˛icked
Ë(
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

120 (*
_gtk_ª£rved1
) ();

121 (*
_gtk_ª£rved2
) ();

122 (*
_gtk_ª£rved3
) ();

123 (*
_gtk_ª£rved4
) ();

126 
GTy≥
 
	$gtk_åì_võw_cﬁumn_gë_ty≥
 (Ë
G_GNUC_CONST
;

127 
GtkTªeVõwCﬁumn
 *
	`gtk_åì_võw_cﬁumn_√w
 ();

128 
GtkTªeVõwCﬁumn
 *
	$gtk_åì_võw_cﬁumn_√w_wôh_©åibuãs
 (c⁄° 
gch¨
 *
tôÀ
,

129 
GtkCñlRídîî
 *
˚Œ
,

130 ...Ë
G_GNUC_NULL_TERMINATED
;

131 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

132 
GtkCñlRídîî
 *
˚Œ
,

133 
gboﬁón
 
ex∑nd
);

134 
	`gtk_åì_võw_cﬁumn_∑ck_íd
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

135 
GtkCñlRídîî
 *
˚Œ
,

136 
gboﬁón
 
ex∑nd
);

137 
	`gtk_åì_võw_cﬁumn_˛ór
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

138 #i‚de‡
GTK_DISABLE_DEPRECATED


139 
GLi°
 *
	`gtk_åì_võw_cﬁumn_gë_˚Œ_ªndîîs
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

141 
	`gtk_åì_võw_cﬁumn_add_©åibuã
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

142 
GtkCñlRídîî
 *
˚Œ_ªndîî
,

143 c⁄° 
gch¨
 *
©åibuã
,

144 
göt
 
cﬁumn
);

145 
	$gtk_åì_võw_cﬁumn_£t_©åibuãs
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

146 
GtkCñlRídîî
 *
˚Œ_ªndîî
,

147 ...Ë
G_GNUC_NULL_TERMINATED
;

148 
	`gtk_åì_võw_cﬁumn_£t_˚Œ_d©a_func
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

149 
GtkCñlRídîî
 *
˚Œ_ªndîî
,

150 
GtkTªeCñlD©aFunc
 
func
,

151 
gpoöãr
 
func_d©a
,

152 
GDe°royNŸify
 
de°roy
);

153 
	`gtk_åì_võw_cﬁumn_˛ór_©åibuãs
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

154 
GtkCñlRídîî
 *
˚Œ_ªndîî
);

155 
	`gtk_åì_võw_cﬁumn_£t_•acög
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

156 
göt
 
•acög
);

157 
göt
 
	`gtk_åì_võw_cﬁumn_gë_•acög
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

158 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

159 
gboﬁón
 
visibÀ
);

160 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_gë_visibÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

161 
	`gtk_åì_võw_cﬁumn_£t_ªsizabÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

162 
gboﬁón
 
ªsizabÀ
);

163 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_gë_ªsizabÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

164 
	`gtk_åì_võw_cﬁumn_£t_sizög
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

165 
GtkTªeVõwCﬁumnSizög
 
ty≥
);

166 
GtkTªeVõwCﬁumnSizög
 
	`gtk_åì_võw_cﬁumn_gë_sizög
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

167 
göt
 
	`gtk_åì_võw_cﬁumn_gë_width
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

168 
göt
 
	`gtk_åì_võw_cﬁumn_gë_fixed_width
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

169 
	`gtk_åì_võw_cﬁumn_£t_fixed_width
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

170 
göt
 
fixed_width
);

171 
	`gtk_åì_võw_cﬁumn_£t_mö_width
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

172 
göt
 
mö_width
);

173 
göt
 
	`gtk_åì_võw_cﬁumn_gë_mö_width
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

174 
	`gtk_åì_võw_cﬁumn_£t_max_width
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

175 
göt
 
max_width
);

176 
göt
 
	`gtk_åì_võw_cﬁumn_gë_max_width
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

177 
	`gtk_åì_võw_cﬁumn_˛icked
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

183 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

184 c⁄° 
gch¨
 *
tôÀ
);

185 
G_CONST_RETURN
 
gch¨
 *
	`gtk_åì_võw_cﬁumn_gë_tôÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

186 
	`gtk_åì_võw_cﬁumn_£t_ex∑nd
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

187 
gboﬁón
 
ex∑nd
);

188 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_gë_ex∑nd
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

189 
	`gtk_åì_võw_cﬁumn_£t_˛ickabÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

190 
gboﬁón
 
˛ickabÀ
);

191 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_gë_˛ickabÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

192 
	`gtk_åì_võw_cﬁumn_£t_widgë
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

193 
GtkWidgë
 *
widgë
);

194 
GtkWidgë
 *
	`gtk_åì_võw_cﬁumn_gë_widgë
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

195 
	`gtk_åì_võw_cﬁumn_£t_Æignmít
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

196 
gÊﬂt
 
xÆign
);

197 
gÊﬂt
 
	`gtk_åì_võw_cﬁumn_gë_Æignmít
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

198 
	`gtk_åì_võw_cﬁumn_£t_ª‹dîabÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

199 
gboﬁón
 
ª‹dîabÀ
);

200 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_gë_ª‹dîabÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

207 
	`gtk_åì_võw_cﬁumn_£t_s‹t_cﬁumn_id
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

208 
göt
 
s‹t_cﬁumn_id
);

209 
göt
 
	`gtk_åì_võw_cﬁumn_gë_s‹t_cﬁumn_id
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

210 
	`gtk_åì_võw_cﬁumn_£t_s‹t_ödiˇt‹
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

211 
gboﬁón
 
£âög
);

212 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_gë_s‹t_ödiˇt‹
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

213 
	`gtk_åì_võw_cﬁumn_£t_s‹t_‹dî
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

214 
GtkS‹tTy≥
 
‹dî
);

215 
GtkS‹tTy≥
 
	`gtk_åì_võw_cﬁumn_gë_s‹t_‹dî
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

220 
	`gtk_åì_võw_cﬁumn_˚Œ_£t_˚Œ_d©a
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

221 
GtkTªeModñ
 *
åì_modñ
,

222 
GtkTªeIãr
 *
ôî
,

223 
gboﬁón
 
is_ex∑ndî
,

224 
gboﬁón
 
is_ex∑nded
);

225 
	`gtk_åì_võw_cﬁumn_˚Œ_gë_size
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

226 c⁄° 
GdkRe˘™gÀ
 *
˚Œ_¨ó
,

227 
göt
 *
x_off£t
,

228 
göt
 *
y_off£t
,

229 
göt
 *
width
,

230 
göt
 *
height
);

231 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_˚Œ_is_visibÀ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

232 
	`gtk_åì_võw_cﬁumn_focus_˚Œ
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

233 
GtkCñlRídîî
 *
˚Œ
);

234 
gboﬁón
 
	`gtk_åì_võw_cﬁumn_˚Œ_gë_posôi⁄
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
,

235 
GtkCñlRídîî
 *
˚Œ_ªndîî
,

236 
göt
 *
°¨t_pos
,

237 
göt
 *
width
);

238 
	`gtk_åì_võw_cﬁumn_queue_ªsize
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

239 
GtkWidgë
 *
	`gtk_åì_võw_cﬁumn_gë_åì_võw
 (
GtkTªeVõwCﬁumn
 *
åì_cﬁumn
);

242 
G_END_DECLS


	@/usr/include/gtk/gtktypeutils.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_TYPE_UTILS_H__


32 
	#__GTK_TYPE_UTILS_H__


	)

36 
	~<gtk/gtkty≥buûtös.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_IDENTIFIER
 (
	`gtk_idítifõr_gë_ty≥
 ())

	)

42 
GTy≥
 
	$gtk_idítifõr_gë_ty≥
 (Ë
G_GNUC_CONST
;

48 
_GtkArg
 
	tGtkArg
;

49 
_GtkObje˘
 
	tGtkObje˘
;

50 
	$gboﬁón
 (*
	tGtkFun˘i⁄
Ë(
	tgpoöãr
 
	td©a
);

51 (*
	tGtkCÆlbackM¨shÆ
Ë(
	tGtkObje˘
 *
	tobje˘
,

52 
	tgpoöãr
 
	td©a
,

53 
	tguöt
 
	tn_¨gs
,

54 
	tGtkArg
 *
	t¨gs
);

59 
gch¨
 * (*
	tGtkTøn¶©eFunc
Ë(c⁄° 
	tgch¨
 *
	t∑th
,

60 
	tgpoöãr
 
	tfunc_d©a
);

66 #i‚de‡
GTK_DISABLE_DEPRECATED


73 
	#GTK_TYPE_INVALID
 
G_TYPE_INVALID


	)

74 
	#GTK_TYPE_NONE
 
G_TYPE_NONE


	)

75 
	#GTK_TYPE_ENUM
 
G_TYPE_ENUM


	)

76 
	#GTK_TYPE_FLAGS
 
G_TYPE_FLAGS


	)

79 
	#GTK_TYPE_CHAR
 
G_TYPE_CHAR


	)

80 
	#GTK_TYPE_UCHAR
 
G_TYPE_UCHAR


	)

81 
	#GTK_TYPE_BOOL
 
G_TYPE_BOOLEAN


	)

82 
	#GTK_TYPE_INT
 
G_TYPE_INT


	)

83 
	#GTK_TYPE_UINT
 
G_TYPE_UINT


	)

84 
	#GTK_TYPE_LONG
 
G_TYPE_LONG


	)

85 
	#GTK_TYPE_ULONG
 
G_TYPE_ULONG


	)

86 
	#GTK_TYPE_FLOAT
 
G_TYPE_FLOAT


	)

87 
	#GTK_TYPE_DOUBLE
 
G_TYPE_DOUBLE


	)

88 
	#GTK_TYPE_STRING
 
G_TYPE_STRING


	)

89 
	#GTK_TYPE_BOXED
 
G_TYPE_BOXED


	)

90 
	#GTK_TYPE_POINTER
 
G_TYPE_POINTER


	)

92 
GTy≥
 
	tGtkFundamíèlTy≥
;

95 
	#GTK_CLASS_NAME
(
˛ass
Ë(
	`g_ty≥_«me
 (
	`G_TYPE_FROM_CLASS
 (˛ass)))

	)

96 
	#GTK_CLASS_TYPE
(
˛ass
Ë(
	`G_TYPE_FROM_CLASS
 (˛ass))

	)

97 
	#GTK_TYPE_IS_OBJECT
(
ty≥
Ë(
	`g_ty≥_is_a
 (—y≥), 
GTK_TYPE_OBJECT
))

	)

102 
	#GTK_TYPE_FUNDAMENTAL_LAST
 (
G_TYPE_LAST_RESERVED_FUNDAMENTAL
 - 1)

	)

103 
	#GTK_TYPE_FUNDAMENTAL_MAX
 (
G_TYPE_FUNDAMENTAL_MAX
)

	)

105 
	#GTK_FUNDAMENTAL_TYPE
 
G_TYPE_FUNDAMENTAL


	)

106 
	#GTK_STRUCT_OFFSET
 
G_STRUCT_OFFSET


	)

109 
	#GTK_CHECK_CAST
 
G_TYPE_CHECK_INSTANCE_CAST


	)

110 
	#GTK_CHECK_CLASS_CAST
 
G_TYPE_CHECK_CLASS_CAST


	)

111 
	#GTK_CHECK_GET_CLASS
 
G_TYPE_INSTANCE_GET_CLASS


	)

112 
	#GTK_CHECK_TYPE
 
G_TYPE_CHECK_INSTANCE_TYPE


	)

113 
	#GTK_CHECK_CLASS_TYPE
 
G_TYPE_CHECK_CLASS_TYPE


	)

117 
GTy≥
 
	tGtkTy≥
;

118 
GTy≥In°™˚
 
	tGtkTy≥Obje˘
;

119 
GTy≥Cœss
 
	tGtkTy≥Cœss
;

120 
GBa£InôFunc
 
	tGtkCœssInôFunc
;

121 
GIn°™˚InôFunc
 
	tGtkObje˘InôFunc
;

122 
GSig«lCM¨shÆÀr
 
	tGtkSig«lM¨shÆÀr
;

124 (*
	tGtkDe°royNŸify
Ë(
	tgpoöãr
 
	td©a
);

125 (*
	tGtkSig«lFunc
) ();

127 
	#GTK_SIGNAL_FUNC
(
f
Ë
	`G_CALLBACK
(f)

	)

131 #i‡!
	`deföed
 (
GTK_DISABLE_DEPRECATED
Ë|| deföed (
GTK_COMPILATION
)

136 
	s_GtkArg


138 
GTy≥
 
ty≥
;

139 
gch¨
 *
«me
;

149 
gch¨
 
ch¨_d©a
;

150 
guch¨
 
uch¨_d©a
;

151 
gboﬁón
 
boﬁ_d©a
;

152 
göt
 
öt_d©a
;

153 
guöt
 
uöt_d©a
;

154 
gl⁄g
 
l⁄g_d©a
;

155 
gul⁄g
 
ul⁄g_d©a
;

156 
gÊﬂt
 
Êﬂt_d©a
;

157 
gdoubÀ
 
doubÀ_d©a
;

158 
gch¨
 *
°rög_d©a
;

159 
GtkObje˘
 *
obje˘_d©a
;

160 
gpoöãr
 
poöãr_d©a
;

164 
GCÆlback
 
f
;

165 
gpoöãr
 
d
;

166 } 
sig«l_d©a
;

167 } 
d
;

174 
	#GTK_VALUE_CHAR
(
a
Ë(◊).
d
.
ch¨_d©a
)

	)

175 
	#GTK_VALUE_UCHAR
(
a
Ë(◊).
d
.
uch¨_d©a
)

	)

176 
	#GTK_VALUE_BOOL
(
a
Ë(◊).
d
.
boﬁ_d©a
)

	)

177 
	#GTK_VALUE_INT
(
a
Ë(◊).
d
.
öt_d©a
)

	)

178 
	#GTK_VALUE_UINT
(
a
Ë(◊).
d
.
uöt_d©a
)

	)

179 
	#GTK_VALUE_LONG
(
a
Ë(◊).
d
.
l⁄g_d©a
)

	)

180 
	#GTK_VALUE_ULONG
(
a
Ë(◊).
d
.
ul⁄g_d©a
)

	)

181 
	#GTK_VALUE_FLOAT
(
a
Ë(◊).
d
.
Êﬂt_d©a
)

	)

182 
	#GTK_VALUE_DOUBLE
(
a
Ë(◊).
d
.
doubÀ_d©a
)

	)

183 
	#GTK_VALUE_STRING
(
a
Ë(◊).
d
.
°rög_d©a
)

	)

184 
	#GTK_VALUE_ENUM
(
a
Ë(◊).
d
.
öt_d©a
)

	)

185 
	#GTK_VALUE_FLAGS
(
a
Ë(◊).
d
.
uöt_d©a
)

	)

186 
	#GTK_VALUE_BOXED
(
a
Ë(◊).
d
.
poöãr_d©a
)

	)

187 
	#GTK_VALUE_OBJECT
(
a
Ë(◊).
d
.
obje˘_d©a
)

	)

188 
	#GTK_VALUE_POINTER
(
a
Ë(◊).
d
.
poöãr_d©a
)

	)

189 
	#GTK_VALUE_SIGNAL
(
a
Ë(◊).
d
.
sig«l_d©a
)

	)

193 #i‚de‡
GTK_DISABLE_DEPRECATED


199 
	#GTK_RETLOC_CHAR
(
a
Ë((
gch¨
*Ë◊).
d
.
poöãr_d©a
)

	)

200 
	#GTK_RETLOC_UCHAR
(
a
Ë((
guch¨
*Ë◊).
d
.
poöãr_d©a
)

	)

201 
	#GTK_RETLOC_BOOL
(
a
Ë((
gboﬁón
*Ë◊).
d
.
poöãr_d©a
)

	)

202 
	#GTK_RETLOC_INT
(
a
Ë((
göt
*Ë◊).
d
.
poöãr_d©a
)

	)

203 
	#GTK_RETLOC_UINT
(
a
Ë((
guöt
*Ë◊).
d
.
poöãr_d©a
)

	)

204 
	#GTK_RETLOC_LONG
(
a
Ë((
gl⁄g
*Ë◊).
d
.
poöãr_d©a
)

	)

205 
	#GTK_RETLOC_ULONG
(
a
Ë((
gul⁄g
*Ë◊).
d
.
poöãr_d©a
)

	)

206 
	#GTK_RETLOC_FLOAT
(
a
Ë((
gÊﬂt
*Ë◊).
d
.
poöãr_d©a
)

	)

207 
	#GTK_RETLOC_DOUBLE
(
a
Ë((
gdoubÀ
*Ë◊).
d
.
poöãr_d©a
)

	)

208 
	#GTK_RETLOC_STRING
(
a
Ë((
gch¨
**Ë◊).
d
.
poöãr_d©a
)

	)

209 
	#GTK_RETLOC_ENUM
(
a
Ë((
göt
*Ë◊).
d
.
poöãr_d©a
)

	)

210 
	#GTK_RETLOC_FLAGS
(
a
Ë((
guöt
*Ë◊).
d
.
poöãr_d©a
)

	)

211 
	#GTK_RETLOC_BOXED
(
a
Ë((
gpoöãr
*Ë◊).
d
.
poöãr_d©a
)

	)

212 
	#GTK_RETLOC_OBJECT
(
a
Ë((
GtkObje˘
**Ë◊).
d
.
poöãr_d©a
)

	)

213 
	#GTK_RETLOC_POINTER
(
a
Ë((
gpoöãr
*Ë◊).
d
.
poöãr_d©a
)

	)

220 
_GtkTy≥Info
 
	tGtkTy≥Info
;

222 
	s_GtkTy≥Info


224 
gch¨
 *
ty≥_«me
;

225 
guöt
 
obje˘_size
;

226 
guöt
 
˛ass_size
;

227 
GtkCœssInôFunc
 
˛ass_öô_func
;

228 
GtkObje˘InôFunc
 
obje˘_öô_func
;

229 
gpoöãr
 
ª£rved_1
;

230 
gpoöãr
 
ª£rved_2
;

231 
GtkCœssInôFunc
 
ba£_˛ass_öô_func
;

234 
	`gtk_ty≥_öô
 (
GTy≥DebugFœgs
 
debug_Êags
);

235 
GtkTy≥
 
	`gtk_ty≥_unique
 (GtkTy≥ 
∑ª¡_ty≥
,

236 c⁄° 
GtkTy≥Info
 *
gtköfo
);

237 
gpoöãr
 
	`gtk_ty≥_˛ass
 (
GtkTy≥
 
ty≥
);

238 
gpoöãr
 
	`gtk_ty≥_√w
 (
GtkTy≥
 
ty≥
);

241 
	#gtk_ty≥_«me
(
ty≥
Ë
	`g_ty≥_«me
 (ty≥)

	)

242 
	#gtk_ty≥_‰om_«me
(
«me
Ë
	`g_ty≥_‰om_«me
 («me)

	)

243 
	#gtk_ty≥_∑ª¡
(
ty≥
Ë
	`g_ty≥_∑ª¡
 (ty≥)

	)

244 
	#gtk_ty≥_is_a
(
ty≥
, 
is_a_ty≥
Ë
	`g_ty≥_is_a
 (—y≥), (is_a_ty≥))

	)

249 
GEnumVÆue
 
	tGtkEnumVÆue
;

250 
GFœgsVÆue
 
	tGtkFœgVÆue
;

251 
GtkEnumVÆue
* 
	`gtk_ty≥_íum_gë_vÆues
 (
GtkTy≥
 
íum_ty≥
);

252 
GtkFœgVÆue
* 
	`gtk_ty≥_Êags_gë_vÆues
 (
GtkTy≥
 
Êags_ty≥
);

253 
GtkEnumVÆue
* 
	`gtk_ty≥_íum_föd_vÆue
 (
GtkTy≥
 
íum_ty≥
,

254 c⁄° 
gch¨
 *
vÆue_«me
);

255 
GtkFœgVÆue
* 
	`gtk_ty≥_Êags_föd_vÆue
 (
GtkTy≥
 
Êags_ty≥
,

256 c⁄° 
gch¨
 *
vÆue_«me
);

260 
G_END_DECLS


	@/usr/include/gtk/gtkuimanager.h

31 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

35 #i‚de‡
__GTK_UI_MANAGER_H__


36 
	#__GTK_UI_MANAGER_H__


	)

38 
	~<gtk/gtkac˚lgroup.h
>

39 
	~<gtk/gtkwidgë.h
>

40 
	~<gtk/gtka˘i⁄.h
>

41 
	~<gtk/gtka˘i⁄group.h
>

43 
	gG_BEGIN_DECLS


45 
	#GTK_TYPE_UI_MANAGER
 (
	`gtk_ui_m™agî_gë_ty≥
 ())

	)

46 
	#GTK_UI_MANAGER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_UI_MANAGER
, 
GtkUIM™agî
))

	)

47 
	#GTK_UI_MANAGER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_UI_MANAGER
, 
GtkUIM™agîCœss
))

	)

48 
	#GTK_IS_UI_MANAGER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_UI_MANAGER
))

	)

49 
	#GTK_IS_UI_MANAGER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_UI_MANAGER
))

	)

50 
	#GTK_UI_MANAGER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
((obj), 
GTK_TYPE_UI_MANAGER
, 
GtkUIM™agîCœss
))

	)

52 
_GtkUIM™agî
 
	tGtkUIM™agî
;

53 
_GtkUIM™agîCœss
 
	tGtkUIM™agîCœss
;

54 
_GtkUIM™agîPriv©e
 
	tGtkUIM™agîPriv©e
;

57 
	s_GtkUIM™agî
 {

58 
GObje˘
 
	m∑ª¡
;

62 
GtkUIM™agîPriv©e
 *
GSEAL
 (
¥iv©e_d©a
);

65 
	s_GtkUIM™agîCœss
 {

66 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

69 (* 
	madd_widgë
Ë(
GtkUIM™agî
 *
	mmîge
,

70 
GtkWidgë
 *
	mwidgë
);

71 (* 
	ma˘i⁄s_ch™ged
Ë(
GtkUIM™agî
 *
	mmîge
);

72 (* 
	mc⁄√˘_¥oxy
Ë(
GtkUIM™agî
 *
	mmîge
,

73 
GtkA˘i⁄
 *
	ma˘i⁄
,

74 
GtkWidgë
 *
	m¥oxy
);

75 (* 
	mdisc⁄√˘_¥oxy
Ë(
GtkUIM™agî
 *
	mmîge
,

76 
GtkA˘i⁄
 *
	ma˘i⁄
,

77 
GtkWidgë
 *
	m¥oxy
);

78 (* 
	m¥e_a˘iv©e
Ë(
GtkUIM™agî
 *
	mmîge
,

79 
GtkA˘i⁄
 *
	ma˘i⁄
);

80 (* 
	mpo°_a˘iv©e
Ë(
GtkUIM™agî
 *
	mmîge
,

81 
GtkA˘i⁄
 *
	ma˘i⁄
);

84 
	mGtkWidgë
 * (* 
	mgë_widgë
Ë(
GtkUIM™agî
 *
	mm™agî
,

85 c⁄° 
gch¨
 *
	m∑th
);

86 
	mGtkA˘i⁄
 * (* 
	mgë_a˘i⁄
Ë(
GtkUIM™agî
 *
	mm™agî
,

87 c⁄° 
gch¨
 *
	m∑th
);

90 (*
	m_gtk_ª£rved1
) ();

91 (*
	m_gtk_ª£rved2
) ();

95 
	mGTK_UI_MANAGER_AUTO
 = 0,

96 
	mGTK_UI_MANAGER_MENUBAR
 = 1 << 0,

97 
	mGTK_UI_MANAGER_MENU
 = 1 << 1,

98 
	mGTK_UI_MANAGER_TOOLBAR
 = 1 << 2,

99 
	mGTK_UI_MANAGER_PLACEHOLDER
 = 1 << 3,

100 
	mGTK_UI_MANAGER_POPUP
 = 1 << 4,

101 
	mGTK_UI_MANAGER_MENUITEM
 = 1 << 5,

102 
	mGTK_UI_MANAGER_TOOLITEM
 = 1 << 6,

103 
	mGTK_UI_MANAGER_SEPARATOR
 = 1 << 7,

104 
	mGTK_UI_MANAGER_ACCELERATOR
 = 1 << 8,

105 
	mGTK_UI_MANAGER_POPUP_WITH_ACCELS
 = 1 << 9

106 } 
	tGtkUIM™agîIãmTy≥
;

108 #ifde‡
G_OS_WIN32


110 
	#gtk_ui_m™agî_add_ui_‰om_fûe
 
gtk_ui_m™agî_add_ui_‰om_fûe_utf8


	)

113 
GTy≥
 
	$gtk_ui_m™agî_gë_ty≥
 (Ë
G_GNUC_CONST
;

114 
GtkUIM™agî
 *
	`gtk_ui_m™agî_√w
 ();

115 
	`gtk_ui_m™agî_£t_add_ã¨offs
 (
GtkUIM™agî
 *
£lf
,

116 
gboﬁón
 
add_ã¨offs
);

117 
gboﬁón
 
	`gtk_ui_m™agî_gë_add_ã¨offs
 (
GtkUIM™agî
 *
£lf
);

118 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
 (
GtkUIM™agî
 *
£lf
,

119 
GtkA˘i⁄Group
 *
a˘i⁄_group
,

120 
göt
 
pos
);

121 
	`gtk_ui_m™agî_ªmove_a˘i⁄_group
 (
GtkUIM™agî
 *
£lf
,

122 
GtkA˘i⁄Group
 *
a˘i⁄_group
);

123 
GLi°
 *
	`gtk_ui_m™agî_gë_a˘i⁄_groups
 (
GtkUIM™agî
 *
£lf
);

124 
GtkAc˚lGroup
 *
	`gtk_ui_m™agî_gë_ac˚l_group
 (
GtkUIM™agî
 *
£lf
);

125 
GtkWidgë
 *
	`gtk_ui_m™agî_gë_widgë
 (
GtkUIM™agî
 *
£lf
,

126 c⁄° 
gch¨
 *
∑th
);

127 
GSLi°
 *
	`gtk_ui_m™agî_gë_t›Àvñs
 (
GtkUIM™agî
 *
£lf
,

128 
GtkUIM™agîIãmTy≥
 
ty≥s
);

129 
GtkA˘i⁄
 *
	`gtk_ui_m™agî_gë_a˘i⁄
 (
GtkUIM™agî
 *
£lf
,

130 c⁄° 
gch¨
 *
∑th
);

131 
guöt
 
	`gtk_ui_m™agî_add_ui_‰om_°rög
 (
GtkUIM™agî
 *
£lf
,

132 c⁄° 
gch¨
 *
buf„r
,

133 
gssize
 
Àngth
,

134 
GEº‹
 **
îr‹
);

135 
guöt
 
	`gtk_ui_m™agî_add_ui_‰om_fûe
 (
GtkUIM™agî
 *
£lf
,

136 c⁄° 
gch¨
 *
fûíame
,

137 
GEº‹
 **
îr‹
);

138 
	`gtk_ui_m™agî_add_ui
 (
GtkUIM™agî
 *
£lf
,

139 
guöt
 
mîge_id
,

140 c⁄° 
gch¨
 *
∑th
,

141 c⁄° 
gch¨
 *
«me
,

142 c⁄° 
gch¨
 *
a˘i⁄
,

143 
GtkUIM™agîIãmTy≥
 
ty≥
,

144 
gboﬁón
 
t›
);

145 
	`gtk_ui_m™agî_ªmove_ui
 (
GtkUIM™agî
 *
£lf
,

146 
guöt
 
mîge_id
);

147 
gch¨
 *
	`gtk_ui_m™agî_gë_ui
 (
GtkUIM™agî
 *
£lf
);

148 
	`gtk_ui_m™agî_ísuª_upd©e
 (
GtkUIM™agî
 *
£lf
);

149 
guöt
 
	`gtk_ui_m™agî_√w_mîge_id
 (
GtkUIM™agî
 *
£lf
);

151 
G_END_DECLS


	@/usr/include/gtk/gtkvbbox.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VBBOX_H__


32 
	#__GTK_VBBOX_H__


	)

35 
	~<gtk/gtkbbox.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_VBUTTON_BOX
 (
	`gtk_vbuâ⁄_box_gë_ty≥
 ())

	)

42 
	#GTK_VBUTTON_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VBUTTON_BOX
, 
GtkVBuâ⁄Box
))

	)

43 
	#GTK_VBUTTON_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VBUTTON_BOX
, 
GtkVBuâ⁄BoxCœss
))

	)

44 
	#GTK_IS_VBUTTON_BOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VBUTTON_BOX
))

	)

45 
	#GTK_IS_VBUTTON_BOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VBUTTON_BOX
))

	)

46 
	#GTK_VBUTTON_BOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VBUTTON_BOX
, 
GtkVBuâ⁄BoxCœss
))

	)

49 
_GtkVBuâ⁄Box
 
	tGtkVBuâ⁄Box
;

50 
_GtkVBuâ⁄BoxCœss
 
	tGtkVBuâ⁄BoxCœss
;

52 
	s_GtkVBuâ⁄Box


54 
GtkBuâ⁄Box
 
	mbuâ⁄_box
;

57 
	s_GtkVBuâ⁄BoxCœss


59 
GtkBuâ⁄BoxCœss
 
	m∑ª¡_˛ass
;

63 
GTy≥
 
	$gtk_vbuâ⁄_box_gë_ty≥
 (Ë
G_GNUC_CONST
;

64 
GtkWidgë
 *
	`gtk_vbuâ⁄_box_√w
 ();

68 #i‚de‡
GTK_DISABLE_DEPRECATED


69 
göt
 
	`gtk_vbuâ⁄_box_gë_•acög_deÁu…
 ();

70 
	`gtk_vbuâ⁄_box_£t_•acög_deÁu…
 (
göt
 
•acög
);

72 
GtkBuâ⁄BoxStyÀ
 
	`gtk_vbuâ⁄_box_gë_œyout_deÁu…
 ();

73 
	`gtk_vbuâ⁄_box_£t_œyout_deÁu…
 (
GtkBuâ⁄BoxStyÀ
 
œyout
);

77 
GtkBuâ⁄BoxStyÀ
 
	`_gtk_vbuâ⁄_box_gë_œyout_deÁu…
 ();

79 
G_END_DECLS


	@/usr/include/gtk/gtkvbox.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VBOX_H__


32 
	#__GTK_VBOX_H__


	)

35 
	~<gtk/gtkbox.h
>

38 
	gG_BEGIN_DECLS


40 
	#GTK_TYPE_VBOX
 (
	`gtk_vbox_gë_ty≥
 ())

	)

41 
	#GTK_VBOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VBOX
, 
GtkVBox
))

	)

42 
	#GTK_VBOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VBOX
, 
GtkVBoxCœss
))

	)

43 
	#GTK_IS_VBOX
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VBOX
))

	)

44 
	#GTK_IS_VBOX_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VBOX
))

	)

45 
	#GTK_VBOX_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VBOX
, 
GtkVBoxCœss
))

	)

48 
_GtkVBox
 
	tGtkVBox
;

49 
_GtkVBoxCœss
 
	tGtkVBoxCœss
;

51 
	s_GtkVBox


53 
GtkBox
 
	mbox
;

56 
	s_GtkVBoxCœss


58 
GtkBoxCœss
 
	m∑ª¡_˛ass
;

62 
GTy≥
 
	$gtk_vbox_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
GtkWidgë
 * 
	`gtk_vbox_√w
 (
gboﬁón
 
homogíeous
,

64 
göt
 
•acög
);

66 
G_END_DECLS


	@/usr/include/gtk/gtkversion.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VERSION_H__


32 
	#__GTK_VERSION_H__


	)

36 
	#GTK_MAJOR_VERSION
 (2)

	)

37 
	#GTK_MINOR_VERSION
 (20)

	)

38 
	#GTK_MICRO_VERSION
 (1)

	)

39 
	#GTK_BINARY_AGE
 (2001)

	)

40 
	#GTK_INTERFACE_AGE
 (1)

	)

45 
	#GTK_CHECK_VERSION
(
maj‹
,
mö‹
,
mi¸o
) \

46 (
GTK_MAJOR_VERSION
 > (
maj‹
) || \

47 (
GTK_MAJOR_VERSION
 =(
maj‹
Ë&& 
GTK_MINOR_VERSION
 > (
mö‹
)) || \

48 (
GTK_MAJOR_VERSION
 =(
maj‹
Ë&& 
GTK_MINOR_VERSION
 =(
mö‹
) && \

49 
GTK_MICRO_VERSION
 >(
mi¸o
)))

	)

	@/usr/include/gtk/gtkviewport.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VIEWPORT_H__


32 
	#__GTK_VIEWPORT_H__


	)

35 
	~<gtk/gtkadju°mít.h
>

36 
	~<gtk/gtkbö.h
>

39 
	gG_BEGIN_DECLS


42 
	#GTK_TYPE_VIEWPORT
 (
	`gtk_võwp‹t_gë_ty≥
 ())

	)

43 
	#GTK_VIEWPORT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VIEWPORT
, 
GtkVõwp‹t
))

	)

44 
	#GTK_VIEWPORT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VIEWPORT
, 
GtkVõwp‹tCœss
))

	)

45 
	#GTK_IS_VIEWPORT
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VIEWPORT
))

	)

46 
	#GTK_IS_VIEWPORT_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VIEWPORT
))

	)

47 
	#GTK_VIEWPORT_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VIEWPORT
, 
GtkVõwp‹tCœss
))

	)

50 
_GtkVõwp‹t
 
	tGtkVõwp‹t
;

51 
_GtkVõwp‹tCœss
 
	tGtkVõwp‹tCœss
;

53 
	s_GtkVõwp‹t


55 
GtkBö
 
	mbö
;

57 
GtkShadowTy≥
 
GSEAL
 (
shadow_ty≥
);

58 
GdkWödow
 *
GSEAL
 (
võw_wödow
);

59 
GdkWödow
 *
GSEAL
 (
bö_wödow
);

60 
GtkAdju°mít
 *
GSEAL
 (
hadju°mít
);

61 
GtkAdju°mít
 *
GSEAL
 (
vadju°mít
);

64 
	s_GtkVõwp‹tCœss


66 
GtkBöCœss
 
	m∑ª¡_˛ass
;

68 (*
	m£t_s¸ﬁl_adju°míts
Ë(
GtkVõwp‹t
 *
	mvõwp‹t
,

69 
GtkAdju°mít
 *
	mhadju°mít
,

70 
GtkAdju°mít
 *
	mvadju°mít
);

74 
GTy≥
 
	$gtk_võwp‹t_gë_ty≥
 (Ë
G_GNUC_CONST
;

75 
GtkWidgë
* 
	`gtk_võwp‹t_√w
 (
GtkAdju°mít
 *
hadju°mít
,

76 
GtkAdju°mít
 *
vadju°mít
);

77 
GtkAdju°mít
* 
	`gtk_võwp‹t_gë_hadju°mít
 (
GtkVõwp‹t
 *
võwp‹t
);

78 
GtkAdju°mít
* 
	`gtk_võwp‹t_gë_vadju°mít
 (
GtkVõwp‹t
 *
võwp‹t
);

79 
	`gtk_võwp‹t_£t_hadju°mít
 (
GtkVõwp‹t
 *
võwp‹t
,

80 
GtkAdju°mít
 *
adju°mít
);

81 
	`gtk_võwp‹t_£t_vadju°mít
 (
GtkVõwp‹t
 *
võwp‹t
,

82 
GtkAdju°mít
 *
adju°mít
);

83 
	`gtk_võwp‹t_£t_shadow_ty≥
 (
GtkVõwp‹t
 *
võwp‹t
,

84 
GtkShadowTy≥
 
ty≥
);

85 
GtkShadowTy≥
 
	`gtk_võwp‹t_gë_shadow_ty≥
 (
GtkVõwp‹t
 *
võwp‹t
);

86 
GdkWödow
* 
	`gtk_võwp‹t_gë_bö_wödow
 (
GtkVõwp‹t
 *
võwp‹t
);

89 
G_END_DECLS


	@/usr/include/gtk/gtkvolumebutton.h

30 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

34 #i‚de‡
__GTK_VOLUME_BUTTON_H__


35 
	#__GTK_VOLUME_BUTTON_H__


	)

37 
	~<gtk/gtksˇÀbuâ⁄.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_VOLUME_BUTTON
 (
	`gtk_vﬁume_buâ⁄_gë_ty≥
 ())

	)

42 
	#GTK_VOLUME_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VOLUME_BUTTON
, 
GtkVﬁumeBuâ⁄
))

	)

43 
	#GTK_VOLUME_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VOLUME_BUTTON
, 
GtkVﬁumeBuâ⁄Cœss
))

	)

44 
	#GTK_IS_VOLUME_BUTTON
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VOLUME_BUTTON
))

	)

45 
	#GTK_IS_VOLUME_BUTTON_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VOLUME_BUTTON
))

	)

46 
	#GTK_VOLUME_BUTTON_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VOLUME_BUTTON
, 
GtkVﬁumeBuâ⁄Cœss
))

	)

48 
_GtkVﬁumeBuâ⁄
 
	tGtkVﬁumeBuâ⁄
;

49 
_GtkVﬁumeBuâ⁄Cœss
 
	tGtkVﬁumeBuâ⁄Cœss
;

51 
	s_GtkVﬁumeBuâ⁄


53 
GtkSˇÀBuâ⁄
 
	m∑ª¡
;

56 
	s_GtkVﬁumeBuâ⁄Cœss


58 
GtkSˇÀBuâ⁄Cœss
 
	m∑ª¡_˛ass
;

61 (*
	m_gtk_ª£rved1
) ();

62 (*
	m_gtk_ª£rved2
) ();

63 (*
	m_gtk_ª£rved3
) ();

64 (*
	m_gtk_ª£rved4
) ();

67 
GTy≥
 
	$gtk_vﬁume_buâ⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

68 
GtkWidgë
* 
	`gtk_vﬁume_buâ⁄_√w
 ();

70 
G_END_DECLS


	@/usr/include/gtk/gtkvpaned.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VPANED_H__


32 
	#__GTK_VPANED_H__


	)

34 
	~<gtk/gtk∑√d.h
>

36 
	gG_BEGIN_DECLS


38 
	#GTK_TYPE_VPANED
 (
	`gtk_v∑√d_gë_ty≥
 ())

	)

39 
	#GTK_VPANED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VPANED
, 
GtkVP™ed
))

	)

40 
	#GTK_VPANED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VPANED
, 
GtkVP™edCœss
))

	)

41 
	#GTK_IS_VPANED
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VPANED
))

	)

42 
	#GTK_IS_VPANED_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VPANED
))

	)

43 
	#GTK_VPANED_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VPANED
, 
GtkVP™edCœss
))

	)

46 
_GtkVP™ed
 
	tGtkVP™ed
;

47 
_GtkVP™edCœss
 
	tGtkVP™edCœss
;

49 
	s_GtkVP™ed


51 
GtkP™ed
 
	m∑√d
;

54 
	s_GtkVP™edCœss


56 
GtkP™edCœss
 
	m∑ª¡_˛ass
;

60 
GTy≥
 
	$gtk_v∑√d_gë_ty≥
 (Ë
G_GNUC_CONST
;

61 
GtkWidgë
 * 
	`gtk_v∑√d_√w
 ();

63 
G_END_DECLS


	@/usr/include/gtk/gtkvruler.h

37 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

41 #i‚de‡
__GTK_VRULER_H__


42 
	#__GTK_VRULER_H__


	)

45 
	~<gtk/gtkruÀr.h
>

48 
	gG_BEGIN_DECLS


51 
	#GTK_TYPE_VRULER
 (
	`gtk_vruÀr_gë_ty≥
 ())

	)

52 
	#GTK_VRULER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VRULER
, 
GtkVRuÀr
))

	)

53 
	#GTK_VRULER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VRULER
, 
GtkVRuÀrCœss
))

	)

54 
	#GTK_IS_VRULER
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VRULER
))

	)

55 
	#GTK_IS_VRULER_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VRULER
))

	)

56 
	#GTK_VRULER_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VRULER
, 
GtkVRuÀrCœss
))

	)

59 
_GtkVRuÀr
 
	tGtkVRuÀr
;

60 
_GtkVRuÀrCœss
 
	tGtkVRuÀrCœss
;

62 
	s_GtkVRuÀr


64 
GtkRuÀr
 
	mruÀr
;

67 
	s_GtkVRuÀrCœss


69 
GtkRuÀrCœss
 
	m∑ª¡_˛ass
;

73 
GTy≥
 
	$gtk_vruÀr_gë_ty≥
 (Ë
G_GNUC_CONST
;

74 
GtkWidgë
* 
	`gtk_vruÀr_√w
 ();

77 
G_END_DECLS


	@/usr/include/gtk/gtkvscale.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VSCALE_H__


32 
	#__GTK_VSCALE_H__


	)

35 
	~<gtk/gtksˇÀ.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_VSCALE
 (
	`gtk_vsˇÀ_gë_ty≥
 ())

	)

42 
	#GTK_VSCALE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VSCALE
, 
GtkVSˇÀ
))

	)

43 
	#GTK_VSCALE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VSCALE
, 
GtkVSˇÀCœss
))

	)

44 
	#GTK_IS_VSCALE
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VSCALE
))

	)

45 
	#GTK_IS_VSCALE_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VSCALE
))

	)

46 
	#GTK_VSCALE_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VSCALE
, 
GtkVSˇÀCœss
))

	)

49 
_GtkVSˇÀ
 
	tGtkVSˇÀ
;

50 
_GtkVSˇÀCœss
 
	tGtkVSˇÀCœss
;

58 
	s_GtkVSˇÀ


60 
GtkSˇÀ
 
	msˇÀ
;

63 
	s_GtkVSˇÀCœss


65 
GtkSˇÀCœss
 
	m∑ª¡_˛ass
;

69 
GTy≥
 
	$gtk_vsˇÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkWidgë
* 
	`gtk_vsˇÀ_√w
 (
GtkAdju°mít
 *
adju°mít
);

71 
GtkWidgë
* 
	`gtk_vsˇÀ_√w_wôh_ønge
 (
gdoubÀ
 
mö
,

72 
gdoubÀ
 
max
,

73 
gdoubÀ
 
°ï
);

76 
G_END_DECLS


	@/usr/include/gtk/gtkvscrollbar.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VSCROLLBAR_H__


32 
	#__GTK_VSCROLLBAR_H__


	)

35 
	~<gtk/gtks¸ﬁlb¨.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_VSCROLLBAR
 (
	`gtk_vs¸ﬁlb¨_gë_ty≥
 ())

	)

42 
	#GTK_VSCROLLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VSCROLLBAR
, 
GtkVS¸ﬁlb¨
))

	)

43 
	#GTK_VSCROLLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VSCROLLBAR
, 
GtkVS¸ﬁlb¨Cœss
))

	)

44 
	#GTK_IS_VSCROLLBAR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VSCROLLBAR
))

	)

45 
	#GTK_IS_VSCROLLBAR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VSCROLLBAR
))

	)

46 
	#GTK_VSCROLLBAR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VSCROLLBAR
, 
GtkVS¸ﬁlb¨Cœss
))

	)

49 
_GtkVS¸ﬁlb¨
 
	tGtkVS¸ﬁlb¨
;

50 
_GtkVS¸ﬁlb¨Cœss
 
	tGtkVS¸ﬁlb¨Cœss
;

58 
	s_GtkVS¸ﬁlb¨


60 
GtkS¸ﬁlb¨
 
	ms¸ﬁlb¨
;

63 
	s_GtkVS¸ﬁlb¨Cœss


65 
GtkS¸ﬁlb¨Cœss
 
	m∑ª¡_˛ass
;

69 
GTy≥
 
	$gtk_vs¸ﬁlb¨_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkWidgë
* 
	`gtk_vs¸ﬁlb¨_√w
 (
GtkAdju°mít
 *
adju°mít
);

73 
G_END_DECLS


	@/usr/include/gtk/gtkvseparator.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_VSEPARATOR_H__


32 
	#__GTK_VSEPARATOR_H__


	)

35 
	~<gtk/gtk£∑øt‹.h
>

38 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_VSEPARATOR
 (
	`gtk_v£∑øt‹_gë_ty≥
 ())

	)

42 
	#GTK_VSEPARATOR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_VSEPARATOR
, 
GtkVSï¨©‹
))

	)

43 
	#GTK_VSEPARATOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_VSEPARATOR
, 
GtkVSï¨©‹Cœss
))

	)

44 
	#GTK_IS_VSEPARATOR
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_VSEPARATOR
))

	)

45 
	#GTK_IS_VSEPARATOR_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_VSEPARATOR
))

	)

46 
	#GTK_VSEPARATOR_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_VSEPARATOR
, 
GtkVSï¨©‹Cœss
))

	)

49 
_GtkVSï¨©‹
 
	tGtkVSï¨©‹
;

50 
_GtkVSï¨©‹Cœss
 
	tGtkVSï¨©‹Cœss
;

58 
	s_GtkVSï¨©‹


60 
GtkSï¨©‹
 
	m£∑øt‹
;

63 
	s_GtkVSï¨©‹Cœss


65 
GtkSï¨©‹Cœss
 
	m∑ª¡_˛ass
;

69 
GTy≥
 
	$gtk_v£∑øt‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

70 
GtkWidgë
* 
	`gtk_v£∑øt‹_√w
 ();

73 
G_END_DECLS


	@/usr/include/gtk/gtkwidget.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_WIDGET_H__


32 
	#__GTK_WIDGET_H__


	)

34 
	~<gdk/gdk.h
>

35 
	~<gtk/gtkac˚lgroup.h
>

36 
	~<gtk/gtkobje˘.h
>

37 
	~<gtk/gtkadju°mít.h
>

38 
	~<gtk/gtk°yÀ.h
>

39 
	~<gtk/gtk£âögs.h
>

40 
	~<©k/©k.h
>

42 
G_BEGIN_DECLS


103 
	mGTK_TOPLEVEL
 = 1 << 4,

104 
	mGTK_NO_WINDOW
 = 1 << 5,

105 
	mGTK_REALIZED
 = 1 << 6,

106 
	mGTK_MAPPED
 = 1 << 7,

107 
	mGTK_VISIBLE
 = 1 << 8,

108 
	mGTK_SENSITIVE
 = 1 << 9,

109 
	mGTK_PARENT_SENSITIVE
 = 1 << 10,

110 
	mGTK_CAN_FOCUS
 = 1 << 11,

111 
	mGTK_HAS_FOCUS
 = 1 << 12,

112 
	mGTK_CAN_DEFAULT
 = 1 << 13,

113 
	mGTK_HAS_DEFAULT
 = 1 << 14,

114 
	mGTK_HAS_GRAB
 = 1 << 15,

115 
	mGTK_RC_STYLE
 = 1 << 16,

116 
	mGTK_COMPOSITE_CHILD
 = 1 << 17,

117 
	mGTK_NO_REPARENT
 = 1 << 18,

118 
	mGTK_APP_PAINTABLE
 = 1 << 19,

119 
	mGTK_RECEIVES_DEFAULT
 = 1 << 20,

120 
	mGTK_DOUBLE_BUFFERED
 = 1 << 21,

121 
	mGTK_NO_SHOW_ALL
 = 1 << 22

122 } 
	tGtkWidgëFœgs
;

127 
	mGTK_WIDGET_HELP_TOOLTIP
,

128 
	mGTK_WIDGET_HELP_WHATS_THIS


129 } 
	tGtkWidgëHñpTy≥
;

134 
	#GTK_TYPE_WIDGET
 (
	`gtk_widgë_gë_ty≥
 ())

	)

135 
	#GTK_WIDGET
(
widgë
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((widgë), 
GTK_TYPE_WIDGET
, 
GtkWidgë
))

	)

136 
	#GTK_WIDGET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_WIDGET
, 
GtkWidgëCœss
))

	)

137 
	#GTK_IS_WIDGET
(
widgë
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((widgë), 
GTK_TYPE_WIDGET
))

	)

138 
	#GTK_IS_WIDGET_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_WIDGET
))

	)

139 
	#GTK_WIDGET_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_WIDGET
, 
GtkWidgëCœss
))

	)

143 #i‚de‡
GTK_DISABLE_DEPRECATED


152 
	#GTK_WIDGET_TYPE
(
wid
Ë(
	`GTK_OBJECT_TYPE
 (wid))

	)

155 #i‚de‡
GTK_DISABLE_DEPRECATED


164 
	#GTK_WIDGET_STATE
(
wid
Ë(
	`GTK_WIDGET
 (wid)->
°©e
)

	)

167 #i‚de‡
GTK_DISABLE_DEPRECATED


180 
	#GTK_WIDGET_SAVED_STATE
(
wid
Ë(
	`GTK_WIDGET
 (wid)->
ßved_°©e
)

	)

202 
	#GTK_WIDGET_FLAGS
(
wid
Ë(
	`GTK_OBJECT_FLAGS
 (wid))

	)

205 #i‚de‡
GTK_DISABLE_DEPRECATED


214 
	#GTK_WIDGET_TOPLEVEL
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_TOPLEVEL
Ë!0)

	)

217 #i‚de‡
GTK_DISABLE_DEPRECATED


226 
	#GTK_WIDGET_NO_WINDOW
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_NO_WINDOW
Ë!0)

	)

229 #i‚de‡
GTK_DISABLE_DEPRECATED


238 
	#GTK_WIDGET_REALIZED
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_REALIZED
Ë!0)

	)

241 #i‚de‡
GTK_DISABLE_DEPRECATED


250 
	#GTK_WIDGET_MAPPED
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_MAPPED
Ë!0)

	)

253 #i‚de‡
GTK_DISABLE_DEPRECATED


262 
	#GTK_WIDGET_VISIBLE
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_VISIBLE
Ë!0)

	)

265 #i‚de‡
GTK_DISABLE_DEPRECATED


274 
	#GTK_WIDGET_DRAWABLE
(
wid
Ë(
	`GTK_WIDGET_VISIBLE
 (widË&& 
	`GTK_WIDGET_MAPPED
 (wid))

	)

277 #i‚de‡
GTK_DISABLE_DEPRECATED


286 
	#GTK_WIDGET_SENSITIVE
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_SENSITIVE
Ë!0)

	)

289 #i‚de‡
GTK_DISABLE_DEPRECATED


298 
	#GTK_WIDGET_PARENT_SENSITIVE
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_PARENT_SENSITIVE
Ë!0)

	)

301 #i‚de‡
GTK_DISABLE_DEPRECATED


310 
	#GTK_WIDGET_IS_SENSITIVE
(
wid
Ë(
	`GTK_WIDGET_SENSITIVE
 (wid) && \

311 
	`GTK_WIDGET_PARENT_SENSITIVE
 (
wid
))

	)

314 #i‚de‡
GTK_DISABLE_DEPRECATED


323 
	#GTK_WIDGET_CAN_FOCUS
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_CAN_FOCUS
Ë!0)

	)

326 #i‚de‡
GTK_DISABLE_DEPRECATED


336 
	#GTK_WIDGET_HAS_FOCUS
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_HAS_FOCUS
Ë!0)

	)

339 #i‚de‡
GTK_DISABLE_DEPRECATED


349 
	#GTK_WIDGET_CAN_DEFAULT
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_CAN_DEFAULT
Ë!0)

	)

352 #i‚de‡
GTK_DISABLE_DEPRECATED


361 
	#GTK_WIDGET_HAS_DEFAULT
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_HAS_DEFAULT
Ë!0)

	)

364 #i‚de‡
GTK_DISABLE_DEPRECATED


374 
	#GTK_WIDGET_HAS_GRAB
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_HAS_GRAB
Ë!0)

	)

377 #i‚de‡
GTK_DISABLE_DEPRECATED


387 
	#GTK_WIDGET_RC_STYLE
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_RC_STYLE
Ë!0)

	)

390 #i‚de‡
GTK_DISABLE_DEPRECATED


399 
	#GTK_WIDGET_COMPOSITE_CHILD
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_COMPOSITE_CHILD
Ë!0)

	)

402 #i‚de‡
GTK_DISABLE_DEPRECATED


411 
	#GTK_WIDGET_APP_PAINTABLE
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_APP_PAINTABLE
Ë!0)

	)

414 #i‚de‡
GTK_DISABLE_DEPRECATED


424 
	#GTK_WIDGET_RECEIVES_DEFAULT
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_RECEIVES_DEFAULT
Ë!0)

	)

427 #i‚de‡
GTK_DISABLE_DEPRECATED


436 
	#GTK_WIDGET_DOUBLE_BUFFERED
(
wid
Ë((
	`GTK_WIDGET_FLAGS
 (widË& 
GTK_DOUBLE_BUFFERED
Ë!0)

	)

449 
	#GTK_WIDGET_SET_FLAGS
(
wid
,
Êag
Ë
G_STMT_START
{ (
	`GTK_WIDGET_FLAGS
 (widË|(Êag)); }
G_STMT_END


	)

458 
	#GTK_WIDGET_UNSET_FLAGS
(
wid
,
Êag
Ë
G_STMT_START
{ (
	`GTK_WIDGET_FLAGS
 (widË&~(Êag)); }
G_STMT_END


	)

460 
	#GTK_TYPE_REQUISITION
 (
	`gtk_ªquisôi⁄_gë_ty≥
 ())

	)

464 
_GtkRequisôi⁄
 
	tGtkRequisôi⁄
;

465 
_GtkSñe˘i⁄D©a
 
	tGtkSñe˘i⁄D©a
;

466 
_GtkWidgëCœss
 
	tGtkWidgëCœss
;

467 
_GtkWidgëAuxInfo
 
	tGtkWidgëAuxInfo
;

468 
_GtkWidgëSh≠eInfo
 
	tGtkWidgëSh≠eInfo
;

469 
_GtkClùbﬂrd
 
	tGtkClùbﬂrd
;

470 
_GtkToﬁtù
 
	tGtkToﬁtù
;

471 
_GtkWödow
 
	tGtkWödow
;

484 
GdkRe˘™gÀ
 
	tGtkAŒoˇti⁄
;

494 (*
	tGtkCÆlback
Ë(
	tGtkWidgë
 *
	twidgë
,

495 
	tgpoöãr
 
	td©a
);

505 
	s_GtkRequisôi⁄


507 
göt
 
width
;

508 
göt
 
height
;

516 
	s_GtkWidgë


524 
GtkObje˘
 
obje˘
;

531 
guöt16
 
	`GSEAL
 (
¥iv©e_Êags
);

536 
guöt8
 
	`GSEAL
 (
°©e
);

544 
guöt8
 
	`GSEAL
 (
ßved_°©e
);

552 
gch¨
 *
	`GSEAL
 (
«me
);

561 
GtkStyÀ
 *
	`GSEAL
 (
°yÀ
);

565 
GtkRequisôi⁄
 
	`GSEAL
 (
ªquisôi⁄
);

569 
GtkAŒoˇti⁄
 
	`GSEAL
 (
Æloˇti⁄
);

575 
GdkWödow
 *
	`GSEAL
 (
wödow
);

579 
GtkWidgë
 *
	`GSEAL
 (
∑ª¡
);

600 
	s_GtkWidgëCœss


608 
GtkObje˘Cœss
 
∑ª¡_˛ass
;

612 
guöt
 
a˘iv©e_sig«l
;

614 
guöt
 
£t_s¸ﬁl_adju°míts_sig«l
;

619 (*
di•©ch_chûd_¥›îtõs_ch™ged
Ë(
GtkWidgë
 *
widgë
,

620 
guöt
 
n_p•ecs
,

621 
GP¨amS≥c
 **
p•ecs
);

624 (* 
show
Ë(
GtkWidgë
 *
widgë
);

625 (* 
show_Æl
Ë(
GtkWidgë
 *
widgë
);

626 (* 
hide
Ë(
GtkWidgë
 *
widgë
);

627 (* 
hide_Æl
Ë(
GtkWidgë
 *
widgë
);

628 (* 
m≠
Ë(
GtkWidgë
 *
widgë
);

629 (* 
unm≠
Ë(
GtkWidgë
 *
widgë
);

630 (* 
ªÆize
Ë(
GtkWidgë
 *
widgë
);

631 (* 
uƒólize
Ë(
GtkWidgë
 *
widgë
);

632 (* 
size_ªque°
Ë(
GtkWidgë
 *
widgë
,

633 
GtkRequisôi⁄
 *
ªquisôi⁄
);

634 (* 
size_Æloˇã
Ë(
GtkWidgë
 *
widgë
,

635 
GtkAŒoˇti⁄
 *
Æloˇti⁄
);

636 (* 
°©e_ch™ged
Ë(
GtkWidgë
 *
widgë
,

637 
GtkSèãTy≥
 
¥evious_°©e
);

638 (* 
∑ª¡_£t
Ë(
GtkWidgë
 *
widgë
,

639 
GtkWidgë
 *
¥evious_∑ª¡
);

640 (* 
hõørchy_ch™ged
Ë(
GtkWidgë
 *
widgë
,

641 
GtkWidgë
 *
¥evious_t›Àvñ
);

642 (* 
°yÀ_£t
Ë(
GtkWidgë
 *
widgë
,

643 
GtkStyÀ
 *
¥evious_°yÀ
);

644 (* 
dúe˘i⁄_ch™ged
Ë(
GtkWidgë
 *
widgë
,

645 
GtkTextDúe˘i⁄
 
¥evious_dúe˘i⁄
);

646 (* 
gøb_nŸify
Ë(
GtkWidgë
 *
widgë
,

647 
gboﬁón
 
was_gøbbed
);

648 (* 
chûd_nŸify
Ë(
GtkWidgë
 *
widgë
,

649 
GP¨amS≥c
 *
p•ec
);

652 
	`gboﬁón
 (* 
m√m⁄ic_a˘iv©e
Ë(
GtkWidgë
 *
widgë
,

653 
gboﬁón
 
group_cy˛ög
);

656 (* 
gøb_focus
Ë(
GtkWidgë
 *
widgë
);

657 
	`gboﬁón
 (* 
focus
Ë(
GtkWidgë
 *
widgë
,

658 
GtkDúe˘i⁄Ty≥
 
dúe˘i⁄
);

661 
	`gboﬁón
 (* 
evít
Ë(
GtkWidgë
 *
widgë
,

662 
GdkEvít
 *
evít
);

663 
	`gboﬁón
 (* 
buâ⁄_¥ess_evít
Ë(
GtkWidgë
 *
widgë
,

664 
GdkEvítBuâ⁄
 *
evít
);

665 
	`gboﬁón
 (* 
buâ⁄_ªÀa£_evít
Ë(
GtkWidgë
 *
widgë
,

666 
GdkEvítBuâ⁄
 *
evít
);

667 
	`gboﬁón
 (* 
s¸ﬁl_evít
Ë(
GtkWidgë
 *
widgë
,

668 
GdkEvítS¸ﬁl
 *
evít
);

669 
	`gboﬁón
 (* 
mŸi⁄_nŸify_evít
Ë(
GtkWidgë
 *
widgë
,

670 
GdkEvítMŸi⁄
 *
evít
);

671 
	`gboﬁón
 (* 
dñëe_evít
Ë(
GtkWidgë
 *
widgë
,

672 
GdkEvítAny
 *
evít
);

673 
	`gboﬁón
 (* 
de°roy_evít
Ë(
GtkWidgë
 *
widgë
,

674 
GdkEvítAny
 *
evít
);

675 
	`gboﬁón
 (* 
expo£_evít
Ë(
GtkWidgë
 *
widgë
,

676 
GdkEvítExpo£
 *
evít
);

677 
	`gboﬁón
 (* 
key_¥ess_evít
Ë(
GtkWidgë
 *
widgë
,

678 
GdkEvítKey
 *
evít
);

679 
	`gboﬁón
 (* 
key_ªÀa£_evít
Ë(
GtkWidgë
 *
widgë
,

680 
GdkEvítKey
 *
evít
);

681 
	`gboﬁón
 (* 
íãr_nŸify_evít
Ë(
GtkWidgë
 *
widgë
,

682 
GdkEvítCrossög
 *
evít
);

683 
	`gboﬁón
 (* 
Àave_nŸify_evít
Ë(
GtkWidgë
 *
widgë
,

684 
GdkEvítCrossög
 *
evít
);

685 
	`gboﬁón
 (* 
c⁄figuª_evít
Ë(
GtkWidgë
 *
widgë
,

686 
GdkEvítC⁄figuª
 *
evít
);

687 
	`gboﬁón
 (* 
focus_ö_evít
Ë(
GtkWidgë
 *
widgë
,

688 
GdkEvítFocus
 *
evít
);

689 
	`gboﬁón
 (* 
focus_out_evít
Ë(
GtkWidgë
 *
widgë
,

690 
GdkEvítFocus
 *
evít
);

691 
	`gboﬁón
 (* 
m≠_evít
Ë(
GtkWidgë
 *
widgë
,

692 
GdkEvítAny
 *
evít
);

693 
	`gboﬁón
 (* 
unm≠_evít
Ë(
GtkWidgë
 *
widgë
,

694 
GdkEvítAny
 *
evít
);

695 
	`gboﬁón
 (* 
¥›îty_nŸify_evít
Ë(
GtkWidgë
 *
widgë
,

696 
GdkEvítPr›îty
 *
evít
);

697 
	`gboﬁón
 (* 
£À˘i⁄_˛ór_evít
Ë(
GtkWidgë
 *
widgë
,

698 
GdkEvítSñe˘i⁄
 *
evít
);

699 
	`gboﬁón
 (* 
£À˘i⁄_ªque°_evít
Ë(
GtkWidgë
 *
widgë
,

700 
GdkEvítSñe˘i⁄
 *
evít
);

701 
	`gboﬁón
 (* 
£À˘i⁄_nŸify_evít
Ë(
GtkWidgë
 *
widgë
,

702 
GdkEvítSñe˘i⁄
 *
evít
);

703 
	`gboﬁón
 (* 
¥oximôy_ö_evít
Ë(
GtkWidgë
 *
widgë
,

704 
GdkEvítProximôy
 *
evít
);

705 
	`gboﬁón
 (* 
¥oximôy_out_evít
Ë(
GtkWidgë
 *
widgë
,

706 
GdkEvítProximôy
 *
evít
);

707 
	`gboﬁón
 (* 
visibûôy_nŸify_evít
Ë(
GtkWidgë
 *
widgë
,

708 
GdkEvítVisibûôy
 *
evít
);

709 
	`gboﬁón
 (* 
˛õ¡_evít
Ë(
GtkWidgë
 *
widgë
,

710 
GdkEvítClõ¡
 *
evít
);

711 
	`gboﬁón
 (* 
no_expo£_evít
Ë(
GtkWidgë
 *
widgë
,

712 
GdkEvítAny
 *
evít
);

713 
	`gboﬁón
 (* 
wödow_°©e_evít
Ë(
GtkWidgë
 *
widgë
,

714 
GdkEvítWödowSèã
 *
evít
);

717 (* 
£À˘i⁄_gë
Ë(
GtkWidgë
 *
widgë
,

718 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

719 
guöt
 
öfo
,

720 
guöt
 
time_
);

721 (* 
£À˘i⁄_ª˚ived
Ë(
GtkWidgë
 *
widgë
,

722 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

723 
guöt
 
time_
);

726 (* 
døg_begö
Ë(
GtkWidgë
 *
widgë
,

727 
GdkDøgC⁄ãxt
 *
c⁄ãxt
);

728 (* 
døg_íd
Ë(
GtkWidgë
 *
widgë
,

729 
GdkDøgC⁄ãxt
 *
c⁄ãxt
);

730 (* 
døg_d©a_gë
Ë(
GtkWidgë
 *
widgë
,

731 
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

732 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

733 
guöt
 
öfo
,

734 
guöt
 
time_
);

735 (* 
døg_d©a_dñëe
Ë(
GtkWidgë
 *
widgë
,

736 
GdkDøgC⁄ãxt
 *
c⁄ãxt
);

739 (* 
døg_Àave
Ë(
GtkWidgë
 *
widgë
,

740 
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

741 
guöt
 
time_
);

742 
	`gboﬁón
 (* 
døg_mŸi⁄
Ë(
GtkWidgë
 *
widgë
,

743 
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

744 
göt
 
x
,

745 
göt
 
y
,

746 
guöt
 
time_
);

747 
	`gboﬁón
 (* 
døg_dr›
Ë(
GtkWidgë
 *
widgë
,

748 
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

749 
göt
 
x
,

750 
göt
 
y
,

751 
guöt
 
time_
);

752 (* 
døg_d©a_ª˚ived
Ë(
GtkWidgë
 *
widgë
,

753 
GdkDøgC⁄ãxt
 *
c⁄ãxt
,

754 
göt
 
x
,

755 
göt
 
y
,

756 
GtkSñe˘i⁄D©a
 *
£À˘i⁄_d©a
,

757 
guöt
 
öfo
,

758 
guöt
 
time_
);

761 
	`gboﬁón
 (* 
p›up_míu
Ë(
GtkWidgë
 *
widgë
);

768 
	`gboﬁón
 (* 
show_hñp
Ë(
GtkWidgë
 *
widgë
,

769 
GtkWidgëHñpTy≥
 
hñp_ty≥
);

773 
AtkObje˘
* (*
gë_ac˚ssibÀ
Ë(
GtkWidgë
 *
widgë
);

775 (*
s¸ìn_ch™ged
Ë(
GtkWidgë
 *
widgë
,

776 
GdkS¸ìn
 *
¥evious_s¸ìn
);

777 
	`gboﬁón
 (*
ˇn_a˘iv©e_ac˚l
Ë(
GtkWidgë
 *
widgë
,

778 
guöt
 
sig«l_id
);

781 
	`gboﬁón
 (*
gøb_brokí_evít
Ë(
GtkWidgë
 *
widgë
,

782 
GdkEvítGøbBrokí
 *
evít
);

784 (* 
composôed_ch™ged
Ë(
GtkWidgë
 *
widgë
);

786 
	`gboﬁón
 (* 
quîy_toﬁtù
Ë(
GtkWidgë
 *
widgë
,

787 
göt
 
x
,

788 
göt
 
y
,

789 
gboﬁón
 
keybﬂrd_toﬁtù
,

790 
GtkToﬁtù
 *
toﬁtù
);

797 (*
_gtk_ª£rved5
) ();

798 (*
_gtk_ª£rved6
) ();

799 (*
_gtk_ª£rved7
) ();

802 
	s_GtkWidgëAuxInfo


804 
göt
 
x
;

805 
göt
 
y
;

806 
göt
 
width
;

807 
göt
 
height
;

808 
guöt
 
x_£t
 : 1;

809 
guöt
 
y_£t
 : 1;

812 
	s_GtkWidgëSh≠eInfo


814 
göt16
 
off£t_x
;

815 
göt16
 
off£t_y
;

816 
GdkBôm≠
 *
sh≠e_mask
;

819 
GTy≥
 
	$gtk_widgë_gë_ty≥
 (Ë
G_GNUC_CONST
;

820 
GtkWidgë
* 
	`gtk_widgë_√w
 (
GTy≥
 
ty≥
,

821 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

823 
	`gtk_widgë_de°roy
 (
GtkWidgë
 *
widgë
);

824 
	`gtk_widgë_de°royed
 (
GtkWidgë
 *
widgë
,

825 
GtkWidgë
 **
widgë_poöãr
);

826 #i‚de‡
GTK_DISABLE_DEPRECATED


827 
GtkWidgë
* 
	`gtk_widgë_ªf
 (GtkWidgë *
widgë
);

828 
	`gtk_widgë_uƒef
 (
GtkWidgë
 *
widgë
);

829 
	$gtk_widgë_£t
 (
GtkWidgë
 *
widgë
,

830 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

831 ...Ë
G_GNUC_NULL_TERMINATED
;

833 
	`gtk_widgë_u≈¨ít
 (
GtkWidgë
 *
widgë
);

834 
	`gtk_widgë_show
 (
GtkWidgë
 *
widgë
);

835 
	`gtk_widgë_show_now
 (
GtkWidgë
 *
widgë
);

836 
	`gtk_widgë_hide
 (
GtkWidgë
 *
widgë
);

837 
	`gtk_widgë_show_Æl
 (
GtkWidgë
 *
widgë
);

838 
	`gtk_widgë_hide_Æl
 (
GtkWidgë
 *
widgë
);

839 
	`gtk_widgë_£t_no_show_Æl
 (
GtkWidgë
 *
widgë
,

840 
gboﬁón
 
no_show_Æl
);

841 
gboﬁón
 
	`gtk_widgë_gë_no_show_Æl
 (
GtkWidgë
 *
widgë
);

842 
	`gtk_widgë_m≠
 (
GtkWidgë
 *
widgë
);

843 
	`gtk_widgë_unm≠
 (
GtkWidgë
 *
widgë
);

844 
	`gtk_widgë_ªÆize
 (
GtkWidgë
 *
widgë
);

845 
	`gtk_widgë_uƒólize
 (
GtkWidgë
 *
widgë
);

848 
	`gtk_widgë_queue_døw
 (
GtkWidgë
 *
widgë
);

849 
	`gtk_widgë_queue_døw_¨ó
 (
GtkWidgë
 *
widgë
,

850 
göt
 
x
,

851 
göt
 
y
,

852 
göt
 
width
,

853 
göt
 
height
);

854 #i‚de‡
GTK_DISABLE_DEPRECATED


855 
	`gtk_widgë_queue_˛ór
 (
GtkWidgë
 *
widgë
);

856 
	`gtk_widgë_queue_˛ór_¨ó
 (
GtkWidgë
 *
widgë
,

857 
göt
 
x
,

858 
göt
 
y
,

859 
göt
 
width
,

860 
göt
 
height
);

864 
	`gtk_widgë_queue_ªsize
 (
GtkWidgë
 *
widgë
);

865 
	`gtk_widgë_queue_ªsize_no_ªdøw
 (
GtkWidgë
 *
widgë
);

866 #i‚de‡
GTK_DISABLE_DEPRECATED


867 
	`gtk_widgë_døw
 (
GtkWidgë
 *
widgë
,

868 c⁄° 
GdkRe˘™gÀ
 *
¨ó
);

870 
	`gtk_widgë_size_ªque°
 (
GtkWidgë
 *
widgë
,

871 
GtkRequisôi⁄
 *
ªquisôi⁄
);

872 
	`gtk_widgë_size_Æloˇã
 (
GtkWidgë
 *
widgë
,

873 
GtkAŒoˇti⁄
 *
Æloˇti⁄
);

874 
	`gtk_widgë_gë_chûd_ªquisôi⁄
 (
GtkWidgë
 *
widgë
,

875 
GtkRequisôi⁄
 *
ªquisôi⁄
);

876 
	`gtk_widgë_add_ac˚Àøt‹
 (
GtkWidgë
 *
widgë
,

877 c⁄° 
gch¨
 *
ac˚l_sig«l
,

878 
GtkAc˚lGroup
 *
ac˚l_group
,

879 
guöt
 
ac˚l_key
,

880 
GdkModifõrTy≥
 
ac˚l_mods
,

881 
GtkAc˚lFœgs
 
ac˚l_Êags
);

882 
gboﬁón
 
	`gtk_widgë_ªmove_ac˚Àøt‹
 (
GtkWidgë
 *
widgë
,

883 
GtkAc˚lGroup
 *
ac˚l_group
,

884 
guöt
 
ac˚l_key
,

885 
GdkModifõrTy≥
 
ac˚l_mods
);

886 
	`gtk_widgë_£t_ac˚l_∑th
 (
GtkWidgë
 *
widgë
,

887 c⁄° 
gch¨
 *
ac˚l_∑th
,

888 
GtkAc˚lGroup
 *
ac˚l_group
);

889 c⁄° 
gch¨
* 
	`_gtk_widgë_gë_ac˚l_∑th
 (
GtkWidgë
 *
widgë
,

890 
gboﬁón
 *
locked
);

891 
GLi°
* 
	`gtk_widgë_li°_ac˚l_˛osuªs
 (
GtkWidgë
 *
widgë
);

892 
gboﬁón
 
	`gtk_widgë_ˇn_a˘iv©e_ac˚l
 (
GtkWidgë
 *
widgë
,

893 
guöt
 
sig«l_id
);

894 
gboﬁón
 
	`gtk_widgë_m√m⁄ic_a˘iv©e
 (
GtkWidgë
 *
widgë
,

895 
gboﬁón
 
group_cy˛ög
);

896 
gboﬁón
 
	`gtk_widgë_evít
 (
GtkWidgë
 *
widgë
,

897 
GdkEvít
 *
evít
);

898 
göt
 
	`gtk_widgë_£nd_expo£
 (
GtkWidgë
 *
widgë
,

899 
GdkEvít
 *
evít
);

901 
gboﬁón
 
	`gtk_widgë_a˘iv©e
 (
GtkWidgë
 *
widgë
);

902 
gboﬁón
 
	`gtk_widgë_£t_s¸ﬁl_adju°míts
 (
GtkWidgë
 *
widgë
,

903 
GtkAdju°mít
 *
hadju°mít
,

904 
GtkAdju°mít
 *
vadju°mít
);

906 
	`gtk_widgë_ª∑ª¡
 (
GtkWidgë
 *
widgë
,

907 
GtkWidgë
 *
√w_∑ª¡
);

908 
gboﬁón
 
	`gtk_widgë_öãr£˘
 (
GtkWidgë
 *
widgë
,

909 c⁄° 
GdkRe˘™gÀ
 *
¨ó
,

910 
GdkRe˘™gÀ
 *
öãr£˘i⁄
);

911 
GdkRegi⁄
 *
	`gtk_widgë_ªgi⁄_öãr£˘
 (
GtkWidgë
 *
widgë
,

912 c⁄° 
GdkRegi⁄
 *
ªgi⁄
);

914 
	`gtk_widgë_‰ìze_chûd_nŸify
 (
GtkWidgë
 *
widgë
);

915 
	`gtk_widgë_chûd_nŸify
 (
GtkWidgë
 *
widgë
,

916 c⁄° 
gch¨
 *
chûd_¥›îty
);

917 
	`gtk_widgë_thaw_chûd_nŸify
 (
GtkWidgë
 *
widgë
);

919 
	`gtk_widgë_£t_ˇn_focus
 (
GtkWidgë
 *
widgë
,

920 
gboﬁón
 
ˇn_focus
);

921 
gboﬁón
 
	`gtk_widgë_gë_ˇn_focus
 (
GtkWidgë
 *
widgë
);

922 
gboﬁón
 
	`gtk_widgë_has_focus
 (
GtkWidgë
 *
widgë
);

923 
gboﬁón
 
	`gtk_widgë_is_focus
 (
GtkWidgë
 *
widgë
);

924 
	`gtk_widgë_gøb_focus
 (
GtkWidgë
 *
widgë
);

926 
	`gtk_widgë_£t_ˇn_deÁu…
 (
GtkWidgë
 *
widgë
,

927 
gboﬁón
 
ˇn_deÁu…
);

928 
gboﬁón
 
	`gtk_widgë_gë_ˇn_deÁu…
 (
GtkWidgë
 *
widgë
);

929 
gboﬁón
 
	`gtk_widgë_has_deÁu…
 (
GtkWidgë
 *
widgë
);

930 
	`gtk_widgë_gøb_deÁu…
 (
GtkWidgë
 *
widgë
);

932 
	`gtk_widgë_£t_ª˚ives_deÁu…
 (
GtkWidgë
 *
widgë
,

933 
gboﬁón
 
ª˚ives_deÁu…
);

934 
gboﬁón
 
	`gtk_widgë_gë_ª˚ives_deÁu…
 (
GtkWidgë
 *
widgë
);

936 
gboﬁón
 
	`gtk_widgë_has_gøb
 (
GtkWidgë
 *
widgë
);

938 
	`gtk_widgë_£t_«me
 (
GtkWidgë
 *
widgë
,

939 c⁄° 
gch¨
 *
«me
);

940 
G_CONST_RETURN
 
gch¨
* 
	`gtk_widgë_gë_«me
 (
GtkWidgë
 *
widgë
);

942 
	`gtk_widgë_£t_°©e
 (
GtkWidgë
 *
widgë
,

943 
GtkSèãTy≥
 
°©e
);

944 
GtkSèãTy≥
 
	`gtk_widgë_gë_°©e
 (
GtkWidgë
 *
widgë
);

946 
	`gtk_widgë_£t_£nsôive
 (
GtkWidgë
 *
widgë
,

947 
gboﬁón
 
£nsôive
);

948 
gboﬁón
 
	`gtk_widgë_gë_£nsôive
 (
GtkWidgë
 *
widgë
);

949 
gboﬁón
 
	`gtk_widgë_is_£nsôive
 (
GtkWidgë
 *
widgë
);

951 
	`gtk_widgë_£t_visibÀ
 (
GtkWidgë
 *
widgë
,

952 
gboﬁón
 
visibÀ
);

953 
gboﬁón
 
	`gtk_widgë_gë_visibÀ
 (
GtkWidgë
 *
widgë
);

955 
	`gtk_widgë_£t_has_wödow
 (
GtkWidgë
 *
widgë
,

956 
gboﬁón
 
has_wödow
);

957 
gboﬁón
 
	`gtk_widgë_gë_has_wödow
 (
GtkWidgë
 *
widgë
);

959 
gboﬁón
 
	`gtk_widgë_is_t›Àvñ
 (
GtkWidgë
 *
widgë
);

960 
gboﬁón
 
	`gtk_widgë_is_døwabÀ
 (
GtkWidgë
 *
widgë
);

961 
	`gtk_widgë_£t_ªÆized
 (
GtkWidgë
 *
widgë
,

962 
gboﬁón
 
ªÆized
);

963 
gboﬁón
 
	`gtk_widgë_gë_ªÆized
 (
GtkWidgë
 *
widgë
);

964 
	`gtk_widgë_£t_m≠≥d
 (
GtkWidgë
 *
widgë
,

965 
gboﬁón
 
m≠≥d
);

966 
gboﬁón
 
	`gtk_widgë_gë_m≠≥d
 (
GtkWidgë
 *
widgë
);

968 
	`gtk_widgë_£t_≠p_∑öèbÀ
 (
GtkWidgë
 *
widgë
,

969 
gboﬁón
 
≠p_∑öèbÀ
);

970 
gboﬁón
 
	`gtk_widgë_gë_≠p_∑öèbÀ
 (
GtkWidgë
 *
widgë
);

972 
	`gtk_widgë_£t_doubÀ_buf„ªd
 (
GtkWidgë
 *
widgë
,

973 
gboﬁón
 
doubÀ_buf„ªd
);

974 
gboﬁón
 
	`gtk_widgë_gë_doubÀ_buf„ªd
 (
GtkWidgë
 *
widgë
);

976 
	`gtk_widgë_£t_ªdøw_⁄_Æloˇã
 (
GtkWidgë
 *
widgë
,

977 
gboﬁón
 
ªdøw_⁄_Æloˇã
);

979 
	`gtk_widgë_£t_∑ª¡
 (
GtkWidgë
 *
widgë
,

980 
GtkWidgë
 *
∑ª¡
);

981 
GtkWidgë
 * 
	`gtk_widgë_gë_∑ª¡
 (GtkWidgë *
widgë
);

983 
	`gtk_widgë_£t_∑ª¡_wödow
 (
GtkWidgë
 *
widgë
,

984 
GdkWödow
 *
∑ª¡_wödow
);

985 
GdkWödow
 * 
	`gtk_widgë_gë_∑ª¡_wödow
 (
GtkWidgë
 *
widgë
);

987 
	`gtk_widgë_£t_chûd_visibÀ
 (
GtkWidgë
 *
widgë
,

988 
gboﬁón
 
is_visibÀ
);

989 
gboﬁón
 
	`gtk_widgë_gë_chûd_visibÀ
 (
GtkWidgë
 *
widgë
);

991 
	`gtk_widgë_£t_wödow
 (
GtkWidgë
 *
widgë
,

992 
GdkWödow
 *
wödow
);

993 
GdkWödow
 * 
	`gtk_widgë_gë_wödow
 (
GtkWidgë
 *
widgë
);

995 
	`gtk_widgë_gë_Æloˇti⁄
 (
GtkWidgë
 *
widgë
,

996 
GtkAŒoˇti⁄
 *
Æloˇti⁄
);

997 
	`gtk_widgë_£t_Æloˇti⁄
 (
GtkWidgë
 *
widgë
,

998 c⁄° 
GtkAŒoˇti⁄
 *
Æloˇti⁄
);

1000 
	`gtk_widgë_gë_ªquisôi⁄
 (
GtkWidgë
 *
widgë
,

1001 
GtkRequisôi⁄
 *
ªquisôi⁄
);

1003 
gboﬁón
 
	`gtk_widgë_chûd_focus
 (
GtkWidgë
 *
widgë
,

1004 
GtkDúe˘i⁄Ty≥
 
dúe˘i⁄
);

1005 
gboﬁón
 
	`gtk_widgë_key«v_Áûed
 (
GtkWidgë
 *
widgë
,

1006 
GtkDúe˘i⁄Ty≥
 
dúe˘i⁄
);

1007 
	`gtk_widgë_îr‹_bñl
 (
GtkWidgë
 *
widgë
);

1009 
	`gtk_widgë_£t_size_ªque°
 (
GtkWidgë
 *
widgë
,

1010 
göt
 
width
,

1011 
göt
 
height
);

1012 
	`gtk_widgë_gë_size_ªque°
 (
GtkWidgë
 *
widgë
,

1013 
göt
 *
width
,

1014 
göt
 *
height
);

1015 #i‚de‡
GTK_DISABLE_DEPRECATED


1016 
	`gtk_widgë_£t_uposôi⁄
 (
GtkWidgë
 *
widgë
,

1017 
göt
 
x
,

1018 
göt
 
y
);

1019 
	`gtk_widgë_£t_usize
 (
GtkWidgë
 *
widgë
,

1020 
göt
 
width
,

1021 
göt
 
height
);

1024 
	`gtk_widgë_£t_evíts
 (
GtkWidgë
 *
widgë
,

1025 
göt
 
evíts
);

1026 
	`gtk_widgë_add_evíts
 (
GtkWidgë
 *
widgë
,

1027 
göt
 
evíts
);

1028 
	`gtk_widgë_£t_exãnsi⁄_evíts
 (
GtkWidgë
 *
widgë
,

1029 
GdkExãnsi⁄Mode
 
mode
);

1031 
GdkExãnsi⁄Mode
 
	`gtk_widgë_gë_exãnsi⁄_evíts
 (
GtkWidgë
 *
widgë
);

1032 
GtkWidgë
* 
	`gtk_widgë_gë_t›Àvñ
 (GtkWidgë *
widgë
);

1033 
GtkWidgë
* 
	`gtk_widgë_gë_™˚°‹
 (GtkWidgë *
widgë
,

1034 
GTy≥
 
widgë_ty≥
);

1035 
GdkCﬁ‹m≠
* 
	`gtk_widgë_gë_cﬁ‹m≠
 (
GtkWidgë
 *
widgë
);

1036 
GdkVisuÆ
* 
	`gtk_widgë_gë_visuÆ
 (
GtkWidgë
 *
widgë
);

1038 
GdkS¸ìn
 * 
	`gtk_widgë_gë_s¸ìn
 (
GtkWidgë
 *
widgë
);

1039 
gboﬁón
 
	`gtk_widgë_has_s¸ìn
 (
GtkWidgë
 *
widgë
);

1040 
GdkDi•œy
 * 
	`gtk_widgë_gë_di•œy
 (
GtkWidgë
 *
widgë
);

1041 
GdkWödow
 * 
	`gtk_widgë_gë_roŸ_wödow
 (
GtkWidgë
 *
widgë
);

1042 
GtkSëtögs
* 
	`gtk_widgë_gë_£âögs
 (
GtkWidgë
 *
widgë
);

1043 
GtkClùbﬂrd
 *
	`gtk_widgë_gë_˛ùbﬂrd
 (
GtkWidgë
 *
widgë
,

1044 
GdkAtom
 
£À˘i⁄
);

1045 
GdkPixm≠
 * 
	`gtk_widgë_gë_¢≠shŸ
 (
GtkWidgë
 *
widgë
,

1046 
GdkRe˘™gÀ
 *
˛ù_ª˘
);

1048 #i‚de‡
GTK_DISABLE_DEPRECATED


1057 
	#gtk_widgë_£t_visuÆ
(
widgë
,
visuÆ
Ë((Ë0)

	)

1065 
	#gtk_widgë_push_visuÆ
(
visuÆ
Ë((Ë0)

	)

1072 
	#gtk_widgë_p›_visuÆ
(Ë((Ë0)

	)

1080 
	#gtk_widgë_£t_deÁu…_visuÆ
(
visuÆ
Ë((Ë0)

	)

1085 
AtkObje˘
* 
	`gtk_widgë_gë_ac˚ssibÀ
 (
GtkWidgë
 *
widgë
);

1093 
	`gtk_widgë_£t_cﬁ‹m≠
 (
GtkWidgë
 *
widgë
,

1094 
GdkCﬁ‹m≠
 *
cﬁ‹m≠
);

1096 
göt
 
	`gtk_widgë_gë_evíts
 (
GtkWidgë
 *
widgë
);

1097 
	`gtk_widgë_gë_poöãr
 (
GtkWidgë
 *
widgë
,

1098 
göt
 *
x
,

1099 
göt
 *
y
);

1101 
gboﬁón
 
	`gtk_widgë_is_™˚°‹
 (
GtkWidgë
 *
widgë
,

1102 
GtkWidgë
 *
™˚°‹
);

1104 
gboﬁón
 
	`gtk_widgë_å™¶©e_co‹dö©es
 (
GtkWidgë
 *
§c_widgë
,

1105 
GtkWidgë
 *
de°_widgë
,

1106 
göt
 
§c_x
,

1107 
göt
 
§c_y
,

1108 
göt
 *
de°_x
,

1109 
göt
 *
de°_y
);

1113 
gboﬁón
 
	`gtk_widgë_hide_⁄_dñëe
 (
GtkWidgë
 *
widgë
);

1117 
	`gtk_widgë_°yÀ_©èch
 (
GtkWidgë
 *
°yÀ
);

1119 
gboﬁón
 
	`gtk_widgë_has_rc_°yÀ
 (
GtkWidgë
 *
widgë
);

1120 
	`gtk_widgë_£t_°yÀ
 (
GtkWidgë
 *
widgë
,

1121 
GtkStyÀ
 *
°yÀ
);

1122 
	`gtk_widgë_ísuª_°yÀ
 (
GtkWidgë
 *
widgë
);

1123 
GtkStyÀ
 * 
	`gtk_widgë_gë_°yÀ
 (
GtkWidgë
 *
widgë
);

1125 
	`gtk_widgë_modify_°yÀ
 (
GtkWidgë
 *
widgë
,

1126 
GtkRcStyÀ
 *
°yÀ
);

1127 
GtkRcStyÀ
 *
	`gtk_widgë_gë_modifõr_°yÀ
 (
GtkWidgë
 *
widgë
);

1128 
	`gtk_widgë_modify_fg
 (
GtkWidgë
 *
widgë
,

1129 
GtkSèãTy≥
 
°©e
,

1130 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

1131 
	`gtk_widgë_modify_bg
 (
GtkWidgë
 *
widgë
,

1132 
GtkSèãTy≥
 
°©e
,

1133 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

1134 
	`gtk_widgë_modify_ãxt
 (
GtkWidgë
 *
widgë
,

1135 
GtkSèãTy≥
 
°©e
,

1136 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

1137 
	`gtk_widgë_modify_ba£
 (
GtkWidgë
 *
widgë
,

1138 
GtkSèãTy≥
 
°©e
,

1139 c⁄° 
GdkCﬁ‹
 *
cﬁ‹
);

1140 
	`gtk_widgë_modify_curs‹
 (
GtkWidgë
 *
widgë
,

1141 c⁄° 
GdkCﬁ‹
 *
¥im¨y
,

1142 c⁄° 
GdkCﬁ‹
 *
£c⁄d¨y
);

1143 
	`gtk_widgë_modify_f⁄t
 (
GtkWidgë
 *
widgë
,

1144 
P™goF⁄tDes¸ùti⁄
 *
f⁄t_desc
);

1146 #i‚de‡
GTK_DISABLE_DEPRECATED


1156 
	#gtk_widgë_£t_rc_°yÀ
(
widgë
Ë(
	`gtk_widgë_£t_°yÀ
 (widgë, 
NULL
))

	)

1166 
	#gtk_widgë_ª°‹e_deÁu…_°yÀ
(
widgë
Ë(
	`gtk_widgë_£t_°yÀ
 (widgë, 
NULL
))

	)

1169 
P™goC⁄ãxt
 *
	`gtk_widgë_¸óã_∑ngo_c⁄ãxt
 (
GtkWidgë
 *
widgë
);

1170 
P™goC⁄ãxt
 *
	`gtk_widgë_gë_∑ngo_c⁄ãxt
 (
GtkWidgë
 *
widgë
);

1171 
P™goLayout
 *
	`gtk_widgë_¸óã_∑ngo_œyout
 (
GtkWidgë
 *
widgë
,

1172 c⁄° 
gch¨
 *
ãxt
);

1174 
GdkPixbuf
 *
	`gtk_widgë_ªndî_ic⁄
 (
GtkWidgë
 *
widgë
,

1175 c⁄° 
gch¨
 *
°ock_id
,

1176 
GtkIc⁄Size
 
size
,

1177 c⁄° 
gch¨
 *
dëaû
);

1182 
	`gtk_widgë_£t_composôe_«me
 (
GtkWidgë
 *
widgë
,

1183 c⁄° 
gch¨
 *
«me
);

1184 
gch¨
* 
	`gtk_widgë_gë_composôe_«me
 (
GtkWidgë
 *
widgë
);

1187 
	`gtk_widgë_ª£t_rc_°yÀs
 (
GtkWidgë
 *
widgë
);

1193 
	`gtk_widgë_push_cﬁ‹m≠
 (
GdkCﬁ‹m≠
 *
cm≠
);

1194 
	`gtk_widgë_push_composôe_chûd
 ();

1195 
	`gtk_widgë_p›_composôe_chûd
 ();

1196 
	`gtk_widgë_p›_cﬁ‹m≠
 ();

1200 
	`gtk_widgë_˛ass_ö°Æl_°yÀ_¥›îty
 (
GtkWidgëCœss
 *
kœss
,

1201 
GP¨amS≥c
 *
p•ec
);

1202 
	`gtk_widgë_˛ass_ö°Æl_°yÀ_¥›îty_∑r£r
 (
GtkWidgëCœss
 *
kœss
,

1203 
GP¨amS≥c
 *
p•ec
,

1204 
GtkRcPr›îtyP¨£r
 
∑r£r
);

1205 
GP¨amS≥c
* 
	`gtk_widgë_˛ass_föd_°yÀ_¥›îty
 (
GtkWidgëCœss
 *
kœss
,

1206 c⁄° 
gch¨
 *
¥›îty_«me
);

1207 
GP¨amS≥c
** 
	`gtk_widgë_˛ass_li°_°yÀ_¥›îtõs
 (
GtkWidgëCœss
 *
kœss
,

1208 
guöt
 *
n_¥›îtõs
);

1209 
	`gtk_widgë_°yÀ_gë_¥›îty
 (
GtkWidgë
 *
widgë
,

1210 c⁄° 
gch¨
 *
¥›îty_«me
,

1211 
GVÆue
 *
vÆue
);

1212 
	`gtk_widgë_°yÀ_gë_vÆi°
 (
GtkWidgë
 *
widgë
,

1213 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

1214 
va_li°
 
v¨_¨gs
);

1215 
	$gtk_widgë_°yÀ_gë
 (
GtkWidgë
 *
widgë
,

1216 c⁄° 
gch¨
 *
fú°_¥›îty_«me
,

1217 ...Ë
G_GNUC_NULL_TERMINATED
;

1222 
	`gtk_widgë_£t_deÁu…_cﬁ‹m≠
 (
GdkCﬁ‹m≠
 *
cﬁ‹m≠
);

1223 
GtkStyÀ
* 
	`gtk_widgë_gë_deÁu…_°yÀ
 ();

1224 #i‚de‡
GDK_MULTIHEAD_SAFE


1225 
GdkCﬁ‹m≠
* 
	`gtk_widgë_gë_deÁu…_cﬁ‹m≠
 ();

1226 
GdkVisuÆ
* 
	`gtk_widgë_gë_deÁu…_visuÆ
 ();

1232 
	`gtk_widgë_£t_dúe˘i⁄
 (
GtkWidgë
 *
widgë
,

1233 
GtkTextDúe˘i⁄
 
dú
);

1234 
GtkTextDúe˘i⁄
 
	`gtk_widgë_gë_dúe˘i⁄
 (
GtkWidgë
 *
widgë
);

1236 
	`gtk_widgë_£t_deÁu…_dúe˘i⁄
 (
GtkTextDúe˘i⁄
 
dú
);

1237 
GtkTextDúe˘i⁄
 
	`gtk_widgë_gë_deÁu…_dúe˘i⁄
 ();

1240 
gboﬁón
 
	`gtk_widgë_is_composôed
 (
GtkWidgë
 *
widgë
);

1244 
	`gtk_widgë_sh≠e_comböe_mask
 (
GtkWidgë
 *
widgë
,

1245 
GdkBôm≠
 *
sh≠e_mask
,

1246 
göt
 
off£t_x
,

1247 
göt
 
off£t_y
);

1248 
	`gtk_widgë_öput_sh≠e_comböe_mask
 (
GtkWidgë
 *
widgë
,

1249 
GdkBôm≠
 *
sh≠e_mask
,

1250 
göt
 
off£t_x
,

1251 
göt
 
off£t_y
);

1254 
	`gtk_widgë_ª£t_sh≠es
 (
GtkWidgë
 *
widgë
);

1259 
	`gtk_widgë_∑th
 (
GtkWidgë
 *
widgë
,

1260 
guöt
 *
∑th_Àngth
,

1261 
gch¨
 **
∑th
,

1262 
gch¨
 **
∑th_ªvî£d
);

1263 
	`gtk_widgë_˛ass_∑th
 (
GtkWidgë
 *
widgë
,

1264 
guöt
 *
∑th_Àngth
,

1265 
gch¨
 **
∑th
,

1266 
gch¨
 **
∑th_ªvî£d
);

1268 
GLi°
* 
	`gtk_widgë_li°_m√m⁄ic_œbñs
 (
GtkWidgë
 *
widgë
);

1269 
	`gtk_widgë_add_m√m⁄ic_œbñ
 (
GtkWidgë
 *
widgë
,

1270 
GtkWidgë
 *
œbñ
);

1271 
	`gtk_widgë_ªmove_m√m⁄ic_œbñ
 (
GtkWidgë
 *
widgë
,

1272 
GtkWidgë
 *
œbñ
);

1274 
	`gtk_widgë_£t_toﬁtù_wödow
 (
GtkWidgë
 *
widgë
,

1275 
GtkWödow
 *
cu°om_wödow
);

1276 
GtkWödow
 *
	`gtk_widgë_gë_toﬁtù_wödow
 (
GtkWidgë
 *
widgë
);

1277 
	`gtk_widgë_åiggî_toﬁtù_quîy
 (
GtkWidgë
 *
widgë
);

1278 
	`gtk_widgë_£t_toﬁtù_ãxt
 (
GtkWidgë
 *
widgë
,

1279 c⁄° 
gch¨
 *
ãxt
);

1280 
gch¨
 * 
	`gtk_widgë_gë_toﬁtù_ãxt
 (
GtkWidgë
 *
widgë
);

1281 
	`gtk_widgë_£t_toﬁtù_m¨kup
 (
GtkWidgë
 *
widgë
,

1282 c⁄° 
gch¨
 *
m¨kup
);

1283 
gch¨
 * 
	`gtk_widgë_gë_toﬁtù_m¨kup
 (
GtkWidgë
 *
widgë
);

1284 
	`gtk_widgë_£t_has_toﬁtù
 (
GtkWidgë
 *
widgë
,

1285 
gboﬁón
 
has_toﬁtù
);

1286 
gboﬁón
 
	`gtk_widgë_gë_has_toﬁtù
 (
GtkWidgë
 *
widgë
);

1288 
GTy≥
 
	$gtk_ªquisôi⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

1289 
GtkRequisôi⁄
 *
	`gtk_ªquisôi⁄_c›y
 (c⁄° GtkRequisôi⁄ *
ªquisôi⁄
);

1290 
	`gtk_ªquisôi⁄_‰ì
 (
GtkRequisôi⁄
 *
ªquisôi⁄
);

1292 #if 
	`deföed
 (
GTK_TRACE_OBJECTS
Ë&& deföed (
__GNUC__
)

1293 
	#gtk_widgë_ªf
 
g_obje˘_ªf


	)

1294 
	#gtk_widgë_uƒef
 
g_obje˘_uƒef


	)

1297 
	`_gtk_widgë_gøb_nŸify
 (
GtkWidgë
 *
widgë
,

1298 
gboﬁón
 
was_gøbbed
);

1300 
GtkWidgëAuxInfo
 *
	`_gtk_widgë_gë_aux_öfo
 (
GtkWidgë
 *
widgë
,

1301 
gboﬁón
 
¸óã
);

1302 
	`_gtk_widgë_¥›ag©e_hõørchy_ch™ged
 (
GtkWidgë
 *
widgë
,

1303 
GtkWidgë
 *
¥evious_t›Àvñ
);

1304 
	`_gtk_widgë_¥›ag©e_s¸ìn_ch™ged
 (
GtkWidgë
 *
widgë
,

1305 
GdkS¸ìn
 *
¥evious_s¸ìn
);

1306 
	`_gtk_widgë_¥›ag©e_composôed_ch™ged
 (
GtkWidgë
 *
widgë
);

1308 
	`_gtk_widgë_£t_poöãr_wödow
 (
GtkWidgë
 *
widgë
,

1309 
GdkWödow
 *
poöãr_wödow
);

1310 
GdkWödow
 *
	`_gtk_widgë_gë_poöãr_wödow
 (
GtkWidgë
 *
widgë
);

1311 
gboﬁón
 
	`_gtk_widgë_is_poöãr_widgë
 (
GtkWidgë
 *
widgë
);

1312 
	`_gtk_widgë_sy¡hesize_¸ossög
 (
GtkWidgë
 *
‰om
,

1313 
GtkWidgë
 *
to
,

1314 
GdkCrossögMode
 
mode
);

1316 
GdkCﬁ‹m≠
* 
	`_gtk_widgë_≥ek_cﬁ‹m≠
 ();

1318 
	`_gtk_widgë_buûdabÀ_föish_ac˚Àøt‹
 (
GtkWidgë
 *
widgë
,

1319 
GtkWidgë
 *
t›Àvñ
,

1320 
gpoöãr
 
u£r_d©a
);

1322 
G_END_DECLS


	@/usr/include/gtk/gtkwindow.h

27 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

31 #i‚de‡
__GTK_WINDOW_H__


32 
	#__GTK_WINDOW_H__


	)

35 
	~<gtk/gtkac˚lgroup.h
>

36 
	~<gtk/gtkbö.h
>

39 
	gG_BEGIN_DECLS


41 
	#GTK_TYPE_WINDOW
 (
	`gtk_wödow_gë_ty≥
 ())

	)

42 
	#GTK_WINDOW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obj), 
GTK_TYPE_WINDOW
, 
GtkWödow
))

	)

43 
	#GTK_WINDOW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_WINDOW
, 
GtkWödowCœss
))

	)

44 
	#GTK_IS_WINDOW
(
obj
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obj), 
GTK_TYPE_WINDOW
))

	)

45 
	#GTK_IS_WINDOW_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_WINDOW
))

	)

46 
	#GTK_WINDOW_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_WINDOW
, 
GtkWödowCœss
))

	)

49 
_GtkWödowCœss
 
	tGtkWödowCœss
;

50 
_GtkWödowGeomëryInfo
 
	tGtkWödowGeomëryInfo
;

51 
_GtkWödowGroup
 
	tGtkWödowGroup
;

52 
_GtkWödowGroupCœss
 
	tGtkWödowGroupCœss
;

54 
	s_GtkWödow


56 
GtkBö
 
	mbö
;

58 
gch¨
 *
GSEAL
 (
tôÀ
);

59 
gch¨
 *
GSEAL
 (
wm˛ass_«me
);

60 
gch¨
 *
GSEAL
 (
wm˛ass_˛ass
);

61 
gch¨
 *
GSEAL
 (
wm_rﬁe
);

63 
GtkWidgë
 *
GSEAL
 (
focus_widgë
);

64 
GtkWidgë
 *
GSEAL
 (
deÁu…_widgë
);

65 
GtkWödow
 *
GSEAL
 (
å™sõ¡_∑ª¡
);

66 
GtkWödowGeomëryInfo
 *
GSEAL
 (
geomëry_öfo
);

67 
GdkWödow
 *
GSEAL
 (
‰ame
);

68 
GtkWödowGroup
 *
GSEAL
 (
group
);

70 
guöt16
 
GSEAL
 (
c⁄figuª_ªque°_cou¡
);

71 
guöt
 
GSEAL
 (
Ælow_shrök
) : 1;

72 
guöt
 
GSEAL
 (
Ælow_grow
) : 1;

73 
guöt
 
GSEAL
 (
c⁄figuª_nŸify_ª˚ived
) : 1;

80 
guöt
 
GSEAL
 (
√ed_deÁu…_posôi⁄
) : 1;

81 
guöt
 
GSEAL
 (
√ed_deÁu…_size
) : 1;

82 
guöt
 
GSEAL
 (
posôi⁄
) : 3;

83 
guöt
 
GSEAL
 (
ty≥
) : 4;

84 
guöt
 
GSEAL
 (
has_u£r_ªf_cou¡
) : 1;

85 
guöt
 
GSEAL
 (
has_focus
) : 1;

87 
guöt
 
GSEAL
 (
modÆ
) : 1;

88 
guöt
 
GSEAL
 (
de°roy_wôh_∑ª¡
) : 1;

90 
guöt
 
GSEAL
 (
has_‰ame
) : 1;

93 
guöt
 
GSEAL
 (
ic⁄ify_öôüŒy
) : 1;

94 
guöt
 
GSEAL
 (
°ick_öôüŒy
) : 1;

95 
guöt
 
GSEAL
 (
maximize_öôüŒy
) : 1;

96 
guöt
 
GSEAL
 (
dec‹©ed
) : 1;

98 
guöt
 
GSEAL
 (
ty≥_höt
) : 3;

101 
guöt
 
GSEAL
 (
gøvôy
) : 5;

103 
guöt
 
GSEAL
 (
is_a˘ive
) : 1;

104 
guöt
 
GSEAL
 (
has_t›Àvñ_focus
) : 1;

106 
guöt
 
GSEAL
 (
‰ame_À·
);

107 
guöt
 
GSEAL
 (
‰ame_t›
);

108 
guöt
 
GSEAL
 (
‰ame_right
);

109 
guöt
 
GSEAL
 (
‰ame_bŸtom
);

111 
guöt
 
GSEAL
 (
keys_ch™ged_h™dÀr
);

113 
GdkModifõrTy≥
 
GSEAL
 (
m√m⁄ic_modifõr
);

114 
GdkS¸ìn
 *
GSEAL
 (
s¸ìn
);

117 
	s_GtkWödowCœss


119 
GtkBöCœss
 
	m∑ª¡_˛ass
;

121 (* 
	m£t_focus
Ë(
GtkWödow
 *
	mwödow
,

122 
GtkWidgë
 *
	mfocus
);

123 
gboﬁón
 (* 
‰ame_evít
Ë(
GtkWödow
 *
	mwödow
,

124 
GdkEvít
 *
	mevít
);

128 (* 
	ma˘iv©e_focus
Ë(
GtkWödow
 *
	mwödow
);

129 (* 
	ma˘iv©e_deÁu…
Ë(
GtkWödow
 *
	mwödow
);

135 (* 
	mmove_focus
Ë(
GtkWödow
 *
	mwödow
,

136 
GtkDúe˘i⁄Ty≥
 
	mdúe˘i⁄
);

138 (*
	mkeys_ch™ged
Ë(
GtkWödow
 *
	mwödow
);

141 (*
	m_gtk_ª£rved1
) ();

142 (*
	m_gtk_ª£rved2
) ();

143 (*
	m_gtk_ª£rved3
) ();

144 (*
	m_gtk_ª£rved4
) ();

147 
	#GTK_TYPE_WINDOW_GROUP
 (
	`gtk_wödow_group_gë_ty≥
 ())

	)

148 
	#GTK_WINDOW_GROUP
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_CAST
 ((obje˘), 
GTK_TYPE_WINDOW_GROUP
, 
GtkWödowGroup
))

	)

149 
	#GTK_WINDOW_GROUP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_CAST
 ((kœss), 
GTK_TYPE_WINDOW_GROUP
, 
GtkWödowGroupCœss
))

	)

150 
	#GTK_IS_WINDOW_GROUP
(
obje˘
Ë(
	`G_TYPE_CHECK_INSTANCE_TYPE
 ((obje˘), 
GTK_TYPE_WINDOW_GROUP
))

	)

151 
	#GTK_IS_WINDOW_GROUP_CLASS
(
kœss
Ë(
	`G_TYPE_CHECK_CLASS_TYPE
 ((kœss), 
GTK_TYPE_WINDOW_GROUP
))

	)

152 
	#GTK_WINDOW_GROUP_GET_CLASS
(
obj
Ë(
	`G_TYPE_INSTANCE_GET_CLASS
 ((obj), 
GTK_TYPE_WINDOW_GROUP
, 
GtkWödowGroupCœss
))

	)

154 
	s_GtkWödowGroup


156 
GObje˘
 
	m∑ª¡_ö°™˚
;

158 
GSLi°
 *
GSEAL
 (
gøbs
);

161 
	s_GtkWödowGroupCœss


163 
GObje˘Cœss
 
	m∑ª¡_˛ass
;

166 (*
	m_gtk_ª£rved1
) ();

167 (*
	m_gtk_ª£rved2
) ();

168 (*
	m_gtk_ª£rved3
) ();

169 (*
	m_gtk_ª£rved4
) ();

172 #ifde‡
G_OS_WIN32


174 
	#gtk_wödow_£t_ic⁄_‰om_fûe
 
gtk_wödow_£t_ic⁄_‰om_fûe_utf8


	)

175 
	#gtk_wödow_£t_deÁu…_ic⁄_‰om_fûe
 
gtk_wödow_£t_deÁu…_ic⁄_‰om_fûe_utf8


	)

178 
GTy≥
 
	$gtk_wödow_gë_ty≥
 (Ë
G_GNUC_CONST
;

179 
GtkWidgë
* 
	`gtk_wödow_√w
 (
GtkWödowTy≥
 
ty≥
);

180 
	`gtk_wödow_£t_tôÀ
 (
GtkWödow
 *
wödow
,

181 c⁄° 
gch¨
 *
tôÀ
);

182 
G_CONST_RETURN
 
gch¨
 *
	`gtk_wödow_gë_tôÀ
 (
GtkWödow
 *
wödow
);

183 
	`gtk_wödow_£t_wm˛ass
 (
GtkWödow
 *
wödow
,

184 c⁄° 
gch¨
 *
wm˛ass_«me
,

185 c⁄° 
gch¨
 *
wm˛ass_˛ass
);

186 
	`gtk_wödow_£t_rﬁe
 (
GtkWödow
 *
wödow
,

187 c⁄° 
gch¨
 *
rﬁe
);

188 
	`gtk_wödow_£t_°¨tup_id
 (
GtkWödow
 *
wödow
,

189 c⁄° 
gch¨
 *
°¨tup_id
);

190 
G_CONST_RETURN
 
gch¨
 *
	`gtk_wödow_gë_rﬁe
 (
GtkWödow
 *
wödow
);

191 
	`gtk_wödow_add_ac˚l_group
 (
GtkWödow
 *
wödow
,

192 
GtkAc˚lGroup
 *
ac˚l_group
);

193 
	`gtk_wödow_ªmove_ac˚l_group
 (
GtkWödow
 *
wödow
,

194 
GtkAc˚lGroup
 *
ac˚l_group
);

195 
	`gtk_wödow_£t_posôi⁄
 (
GtkWödow
 *
wödow
,

196 
GtkWödowPosôi⁄
 
posôi⁄
);

197 
gboﬁón
 
	`gtk_wödow_a˘iv©e_focus
 (
GtkWödow
 *
wödow
);

198 
	`gtk_wödow_£t_focus
 (
GtkWödow
 *
wödow
,

199 
GtkWidgë
 *
focus
);

200 
GtkWidgë
 *
	`gtk_wödow_gë_focus
 (
GtkWödow
 *
wödow
);

201 
	`gtk_wödow_£t_deÁu…
 (
GtkWödow
 *
wödow
,

202 
GtkWidgë
 *
deÁu…_widgë
);

203 
GtkWidgë
 *
	`gtk_wödow_gë_deÁu…_widgë
 (
GtkWödow
 *
wödow
);

204 
gboﬁón
 
	`gtk_wödow_a˘iv©e_deÁu…
 (
GtkWödow
 *
wödow
);

206 
	`gtk_wödow_£t_å™sõ¡_f‹
 (
GtkWödow
 *
wödow
,

207 
GtkWödow
 *
∑ª¡
);

208 
GtkWödow
 *
	`gtk_wödow_gë_å™sõ¡_f‹
 (GtkWödow *
wödow
);

209 
	`gtk_wödow_£t_›acôy
 (
GtkWödow
 *
wödow
,

210 
gdoubÀ
 
›acôy
);

211 
gdoubÀ
 
	`gtk_wödow_gë_›acôy
 (
GtkWödow
 *
wödow
);

212 
	`gtk_wödow_£t_ty≥_höt
 (
GtkWödow
 *
wödow
,

213 
GdkWödowTy≥Höt
 
höt
);

214 
GdkWödowTy≥Höt
 
	`gtk_wödow_gë_ty≥_höt
 (
GtkWödow
 *
wödow
);

215 
	`gtk_wödow_£t_skù_èskb¨_höt
 (
GtkWödow
 *
wödow
,

216 
gboﬁón
 
£âög
);

217 
gboﬁón
 
	`gtk_wödow_gë_skù_èskb¨_höt
 (
GtkWödow
 *
wödow
);

218 
	`gtk_wödow_£t_skù_∑gî_höt
 (
GtkWödow
 *
wödow
,

219 
gboﬁón
 
£âög
);

220 
gboﬁón
 
	`gtk_wödow_gë_skù_∑gî_höt
 (
GtkWödow
 *
wödow
);

221 
	`gtk_wödow_£t_urgícy_höt
 (
GtkWödow
 *
wödow
,

222 
gboﬁón
 
£âög
);

223 
gboﬁón
 
	`gtk_wödow_gë_urgícy_höt
 (
GtkWödow
 *
wödow
);

224 
	`gtk_wödow_£t_ac˚±_focus
 (
GtkWödow
 *
wödow
,

225 
gboﬁón
 
£âög
);

226 
gboﬁón
 
	`gtk_wödow_gë_ac˚±_focus
 (
GtkWödow
 *
wödow
);

227 
	`gtk_wödow_£t_focus_⁄_m≠
 (
GtkWödow
 *
wödow
,

228 
gboﬁón
 
£âög
);

229 
gboﬁón
 
	`gtk_wödow_gë_focus_⁄_m≠
 (
GtkWödow
 *
wödow
);

230 
	`gtk_wödow_£t_de°roy_wôh_∑ª¡
 (
GtkWödow
 *
wödow
,

231 
gboﬁón
 
£âög
);

232 
gboﬁón
 
	`gtk_wödow_gë_de°roy_wôh_∑ª¡
 (
GtkWödow
 *
wödow
);

233 
	`gtk_wödow_£t_m√m⁄ics_visibÀ
 (
GtkWödow
 *
wödow
,

234 
gboﬁón
 
£âög
);

235 
gboﬁón
 
	`gtk_wödow_gë_m√m⁄ics_visibÀ
 (
GtkWödow
 *
wödow
);

237 
	`gtk_wödow_£t_ªsizabÀ
 (
GtkWödow
 *
wödow
,

238 
gboﬁón
 
ªsizabÀ
);

239 
gboﬁón
 
	`gtk_wödow_gë_ªsizabÀ
 (
GtkWödow
 *
wödow
);

241 
	`gtk_wödow_£t_gøvôy
 (
GtkWödow
 *
wödow
,

242 
GdkGøvôy
 
gøvôy
);

243 
GdkGøvôy
 
	`gtk_wödow_gë_gøvôy
 (
GtkWödow
 *
wödow
);

246 
	`gtk_wödow_£t_geomëry_höts
 (
GtkWödow
 *
wödow
,

247 
GtkWidgë
 *
geomëry_widgë
,

248 
GdkGeomëry
 *
geomëry
,

249 
GdkWödowHöts
 
geom_mask
);

251 
	`gtk_wödow_£t_s¸ìn
 (
GtkWödow
 *
wödow
,

252 
GdkS¸ìn
 *
s¸ìn
);

253 
GdkS¸ìn
* 
	`gtk_wödow_gë_s¸ìn
 (
GtkWödow
 *
wödow
);

255 
gboﬁón
 
	`gtk_wödow_is_a˘ive
 (
GtkWödow
 *
wödow
);

256 
gboﬁón
 
	`gtk_wödow_has_t›Àvñ_focus
 (
GtkWödow
 *
wödow
);

261 
	`gtk_wödow_£t_has_‰ame
 (
GtkWödow
 *
wödow
,

262 
gboﬁón
 
£âög
);

263 
gboﬁón
 
	`gtk_wödow_gë_has_‰ame
 (
GtkWödow
 *
wödow
);

264 
	`gtk_wödow_£t_‰ame_dimísi⁄s
 (
GtkWödow
 *
wödow
,

265 
göt
 
À·
,

266 
göt
 
t›
,

267 
göt
 
right
,

268 
göt
 
bŸtom
);

269 
	`gtk_wödow_gë_‰ame_dimísi⁄s
 (
GtkWödow
 *
wödow
,

270 
göt
 *
À·
,

271 
göt
 *
t›
,

272 
göt
 *
right
,

273 
göt
 *
bŸtom
);

274 
	`gtk_wödow_£t_dec‹©ed
 (
GtkWödow
 *
wödow
,

275 
gboﬁón
 
£âög
);

276 
gboﬁón
 
	`gtk_wödow_gë_dec‹©ed
 (
GtkWödow
 *
wödow
);

277 
	`gtk_wödow_£t_dñëabÀ
 (
GtkWödow
 *
wödow
,

278 
gboﬁón
 
£âög
);

279 
gboﬁón
 
	`gtk_wödow_gë_dñëabÀ
 (
GtkWödow
 *
wödow
);

281 
	`gtk_wödow_£t_ic⁄_li°
 (
GtkWödow
 *
wödow
,

282 
GLi°
 *
li°
);

283 
GLi°
* 
	`gtk_wödow_gë_ic⁄_li°
 (
GtkWödow
 *
wödow
);

284 
	`gtk_wödow_£t_ic⁄
 (
GtkWödow
 *
wödow
,

285 
GdkPixbuf
 *
ic⁄
);

286 
	`gtk_wödow_£t_ic⁄_«me
 (
GtkWödow
 *
wödow
,

287 c⁄° 
gch¨
 *
«me
);

288 
gboﬁón
 
	`gtk_wödow_£t_ic⁄_‰om_fûe
 (
GtkWödow
 *
wödow
,

289 c⁄° 
gch¨
 *
fûíame
,

290 
GEº‹
 **
îr
);

291 
GdkPixbuf
* 
	`gtk_wödow_gë_ic⁄
 (
GtkWödow
 *
wödow
);

292 
G_CONST_RETURN


293 
gch¨
 *
	`gtk_wödow_gë_ic⁄_«me
 (
GtkWödow
 *
wödow
);

294 
	`gtk_wödow_£t_deÁu…_ic⁄_li°
 (
GLi°
 *
li°
);

295 
GLi°
* 
	`gtk_wödow_gë_deÁu…_ic⁄_li°
 ();

296 
	`gtk_wödow_£t_deÁu…_ic⁄
 (
GdkPixbuf
 *
ic⁄
);

297 
	`gtk_wödow_£t_deÁu…_ic⁄_«me
 (c⁄° 
gch¨
 *
«me
);

298 
G_CONST_RETURN


299 
gch¨
 *
	`gtk_wödow_gë_deÁu…_ic⁄_«me
 ();

300 
gboﬁón
 
	`gtk_wödow_£t_deÁu…_ic⁄_‰om_fûe
 (c⁄° 
gch¨
 *
fûíame
,

301 
GEº‹
 **
îr
);

303 
	`gtk_wödow_£t_auto_°¨tup_nŸifiˇti⁄
 (
gboﬁón
 
£âög
);

306 
	`gtk_wödow_£t_modÆ
 (
GtkWödow
 *
wödow
,

307 
gboﬁón
 
modÆ
);

308 
gboﬁón
 
	`gtk_wödow_gë_modÆ
 (
GtkWödow
 *
wödow
);

309 
GLi°
* 
	`gtk_wödow_li°_t›Àvñs
 ();

311 
	`gtk_wödow_add_m√m⁄ic
 (
GtkWödow
 *
wödow
,

312 
guöt
 
keyvÆ
,

313 
GtkWidgë
 *
èrgë
);

314 
	`gtk_wödow_ªmove_m√m⁄ic
 (
GtkWödow
 *
wödow
,

315 
guöt
 
keyvÆ
,

316 
GtkWidgë
 *
èrgë
);

317 
gboﬁón
 
	`gtk_wödow_m√m⁄ic_a˘iv©e
 (
GtkWödow
 *
wödow
,

318 
guöt
 
keyvÆ
,

319 
GdkModifõrTy≥
 
modifõr
);

320 
	`gtk_wödow_£t_m√m⁄ic_modifõr
 (
GtkWödow
 *
wödow
,

321 
GdkModifõrTy≥
 
modifõr
);

322 
GdkModifõrTy≥
 
	`gtk_wödow_gë_m√m⁄ic_modifõr
 (
GtkWödow
 *
wödow
);

324 
gboﬁón
 
	`gtk_wödow_a˘iv©e_key
 (
GtkWödow
 *
wödow
,

325 
GdkEvítKey
 *
evít
);

326 
gboﬁón
 
	`gtk_wödow_¥›ag©e_key_evít
 (
GtkWödow
 *
wödow
,

327 
GdkEvítKey
 *
evít
);

329 
	`gtk_wödow_¥e£¡
 (
GtkWödow
 *
wödow
);

330 
	`gtk_wödow_¥e£¡_wôh_time
 (
GtkWödow
 *
wödow
,

331 
guöt32
 
time°amp
);

332 
	`gtk_wödow_ic⁄ify
 (
GtkWödow
 *
wödow
);

333 
	`gtk_wödow_deic⁄ify
 (
GtkWödow
 *
wödow
);

334 
	`gtk_wödow_°ick
 (
GtkWödow
 *
wödow
);

335 
	`gtk_wödow_un°ick
 (
GtkWödow
 *
wödow
);

336 
	`gtk_wödow_maximize
 (
GtkWödow
 *
wödow
);

337 
	`gtk_wödow_unmaximize
 (
GtkWödow
 *
wödow
);

338 
	`gtk_wödow_fuŒs¸ìn
 (
GtkWödow
 *
wödow
);

339 
	`gtk_wödow_unfuŒs¸ìn
 (
GtkWödow
 *
wödow
);

340 
	`gtk_wödow_£t_kìp_above
 (
GtkWödow
 *
wödow
, 
gboﬁón
 
£âög
);

341 
	`gtk_wödow_£t_kìp_bñow
 (
GtkWödow
 *
wödow
, 
gboﬁón
 
£âög
);

343 
	`gtk_wödow_begö_ªsize_døg
 (
GtkWödow
 *
wödow
,

344 
GdkWödowEdge
 
edge
,

345 
göt
 
buâ⁄
,

346 
göt
 
roŸ_x
,

347 
göt
 
roŸ_y
,

348 
guöt32
 
time°amp
);

349 
	`gtk_wödow_begö_move_døg
 (
GtkWödow
 *
wödow
,

350 
göt
 
buâ⁄
,

351 
göt
 
roŸ_x
,

352 
göt
 
roŸ_y
,

353 
guöt32
 
time°amp
);

355 #i‚de‡
GTK_DISABLE_DEPRECATED


356 
	`gtk_wödow_£t_pﬁicy
 (
GtkWödow
 *
wödow
,

357 
göt
 
Ælow_shrök
,

358 
göt
 
Ælow_grow
,

359 
göt
 
auto_shrök
);

360 
	#gtk_wödow_posôi⁄
 
gtk_wödow_£t_posôi⁄


	)

366 
	`gtk_wödow_£t_deÁu…_size
 (
GtkWödow
 *
wödow
,

367 
göt
 
width
,

368 
göt
 
height
);

369 
	`gtk_wödow_gë_deÁu…_size
 (
GtkWödow
 *
wödow
,

370 
göt
 *
width
,

371 
göt
 *
height
);

372 
	`gtk_wödow_ªsize
 (
GtkWödow
 *
wödow
,

373 
göt
 
width
,

374 
göt
 
height
);

375 
	`gtk_wödow_gë_size
 (
GtkWödow
 *
wödow
,

376 
göt
 *
width
,

377 
göt
 *
height
);

378 
	`gtk_wödow_move
 (
GtkWödow
 *
wödow
,

379 
göt
 
x
,

380 
göt
 
y
);

381 
	`gtk_wödow_gë_posôi⁄
 (
GtkWödow
 *
wödow
,

382 
göt
 *
roŸ_x
,

383 
göt
 *
roŸ_y
);

384 
gboﬁón
 
	`gtk_wödow_∑r£_geomëry
 (
GtkWödow
 *
wödow
,

385 c⁄° 
gch¨
 *
geomëry
);

386 
GtkWödowGroup
 *
	`gtk_wödow_gë_group
 (
GtkWödow
 *
wödow
);

389 
	`gtk_wödow_ªshow_wôh_öôül_size
 (
GtkWödow
 *
wödow
);

391 
GtkWödowTy≥
 
	`gtk_wödow_gë_wödow_ty≥
 (
GtkWödow
 *
wödow
);

395 
GTy≥
 
	$gtk_wödow_group_gë_ty≥
 (Ë
G_GNUC_CONST
;

397 
GtkWödowGroup
 * 
	`gtk_wödow_group_√w
 ();

398 
	`gtk_wödow_group_add_wödow
 (
GtkWödowGroup
 *
wödow_group
,

399 
GtkWödow
 *
wödow
);

400 
	`gtk_wödow_group_ªmove_wödow
 (
GtkWödowGroup
 *
wödow_group
,

401 
GtkWödow
 *
wödow
);

402 
GLi°
 * 
	`gtk_wödow_group_li°_wödows
 (
GtkWödowGroup
 *
wödow_group
);

406 
	`_gtk_wödow_öã∫Æ_£t_focus
 (
GtkWödow
 *
wödow
,

407 
GtkWidgë
 *
focus
);

408 
	`gtk_wödow_ªmove_embedded_xid
 (
GtkWödow
 *
wödow
,

409 
GdkN©iveWödow
 
xid
);

410 
	`gtk_wödow_add_embedded_xid
 (
GtkWödow
 *
wödow
,

411 
GdkN©iveWödow
 
xid
);

412 
	`_gtk_wödow_ªposôi⁄
 (
GtkWödow
 *
wödow
,

413 
göt
 
x
,

414 
göt
 
y
);

415 
	`_gtk_wödow_c⁄°øö_size
 (
GtkWödow
 *
wödow
,

416 
göt
 
width
,

417 
göt
 
height
,

418 
göt
 *
√w_width
,

419 
göt
 *
√w_height
);

420 
GtkWidgë
 *
	`_gtk_wödow_group_gë_cuºít_gøb
 (
GtkWödowGroup
 *
wödow_group
);

422 
	`_gtk_wödow_£t_has_t›Àvñ_focus
 (
GtkWödow
 *
wödow
,

423 
gboﬁón
 
has_t›Àvñ_focus
);

424 
	`_gtk_wödow_un£t_focus_™d_deÁu…
 (
GtkWödow
 *
wödow
,

425 
GtkWidgë
 *
widgë
);

427 
	`_gtk_wödow_£t_is_a˘ive
 (
GtkWödow
 *
wödow
,

428 
gboﬁón
 
is_a˘ive
);

430 
	`_gtk_wödow_£t_is_t›Àvñ
 (
GtkWödow
 *
wödow
,

431 
gboﬁón
 
is_t›Àvñ
);

433 (*
	tGtkWödowKeysF‹óchFunc
Ë(
	tGtkWödow
 *
	twödow
,

434 
	tguöt
 
	tkeyvÆ
,

435 
	tGdkModifõrTy≥
 
	tmodifõrs
,

436 
	tgboﬁón
 
	tis_m√m⁄ic
,

437 
	tgpoöãr
 
	td©a
);

439 
	`_gtk_wödow_keys_f‹óch
 (
GtkWödow
 *
wödow
,

440 
GtkWödowKeysF‹óchFunc
 
func
,

441 
gpoöãr
 
func_d©a
);

444 
gboﬁón
 
	`_gtk_wödow_quîy_n⁄ac˚ls
 (
GtkWödow
 *
wödow
,

445 
guöt
 
ac˚l_key
,

446 
GdkModifõrTy≥
 
ac˚l_mods
);

448 
G_END_DECLS


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

38 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

39 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

40 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/gtk/gtkmarshal.h

1 #i‚de‡
GTK_DISABLE_DEPRECATED


3 #i‚de‡
__gtk_m¨shÆ_MARSHAL_H__


4 
	#__gtk_m¨shÆ_MARSHAL_H__


	)

6 
	~<glib-obje˘.h
>

8 
G_BEGIN_DECLS


11 
gtk_m¨shÆ_BOOLEAN__VOID
 (
GClosuª
 *
˛osuª
,

12 
GVÆue
 *
ªtu∫_vÆue
,

13 
guöt
 
n_∑øm_vÆues
,

14 c⁄° 
GVÆue
 *
∑øm_vÆues
,

15 
gpoöãr
 
övoˇti⁄_höt
,

16 
gpoöãr
 
m¨shÆ_d©a
);

17 
	#gtk_m¨shÆ_BOOL__NONE
 
gtk_m¨shÆ_BOOLEAN__VOID


	)

20 
gtk_m¨shÆ_BOOLEAN__POINTER
 (
GClosuª
 *
˛osuª
,

21 
GVÆue
 *
ªtu∫_vÆue
,

22 
guöt
 
n_∑øm_vÆues
,

23 c⁄° 
GVÆue
 *
∑øm_vÆues
,

24 
gpoöãr
 
övoˇti⁄_höt
,

25 
gpoöãr
 
m¨shÆ_d©a
);

26 
	#gtk_m¨shÆ_BOOL__POINTER
 
gtk_m¨shÆ_BOOLEAN__POINTER


	)

29 
gtk_m¨shÆ_BOOLEAN__POINTER_POINTER_INT_INT
 (
GClosuª
 *
˛osuª
,

30 
GVÆue
 *
ªtu∫_vÆue
,

31 
guöt
 
n_∑øm_vÆues
,

32 c⁄° 
GVÆue
 *
∑øm_vÆues
,

33 
gpoöãr
 
övoˇti⁄_höt
,

34 
gpoöãr
 
m¨shÆ_d©a
);

35 
	#gtk_m¨shÆ_BOOL__POINTER_POINTER_INT_INT
 
gtk_m¨shÆ_BOOLEAN__POINTER_POINTER_INT_INT


	)

38 
gtk_m¨shÆ_BOOLEAN__POINTER_INT_INT
 (
GClosuª
 *
˛osuª
,

39 
GVÆue
 *
ªtu∫_vÆue
,

40 
guöt
 
n_∑øm_vÆues
,

41 c⁄° 
GVÆue
 *
∑øm_vÆues
,

42 
gpoöãr
 
övoˇti⁄_höt
,

43 
gpoöãr
 
m¨shÆ_d©a
);

44 
	#gtk_m¨shÆ_BOOL__POINTER_INT_INT
 
gtk_m¨shÆ_BOOLEAN__POINTER_INT_INT


	)

47 
gtk_m¨shÆ_BOOLEAN__POINTER_INT_INT_UINT
 (
GClosuª
 *
˛osuª
,

48 
GVÆue
 *
ªtu∫_vÆue
,

49 
guöt
 
n_∑øm_vÆues
,

50 c⁄° 
GVÆue
 *
∑øm_vÆues
,

51 
gpoöãr
 
övoˇti⁄_höt
,

52 
gpoöãr
 
m¨shÆ_d©a
);

53 
	#gtk_m¨shÆ_BOOL__POINTER_INT_INT_UINT
 
gtk_m¨shÆ_BOOLEAN__POINTER_INT_INT_UINT


	)

56 
gtk_m¨shÆ_BOOLEAN__POINTER_STRING_STRING_POINTER
 (
GClosuª
 *
˛osuª
,

57 
GVÆue
 *
ªtu∫_vÆue
,

58 
guöt
 
n_∑øm_vÆues
,

59 c⁄° 
GVÆue
 *
∑øm_vÆues
,

60 
gpoöãr
 
övoˇti⁄_höt
,

61 
gpoöãr
 
m¨shÆ_d©a
);

62 
	#gtk_m¨shÆ_BOOL__POINTER_STRING_STRING_POINTER
 
gtk_m¨shÆ_BOOLEAN__POINTER_STRING_STRING_POINTER


	)

65 
gtk_m¨shÆ_ENUM__ENUM
 (
GClosuª
 *
˛osuª
,

66 
GVÆue
 *
ªtu∫_vÆue
,

67 
guöt
 
n_∑øm_vÆues
,

68 c⁄° 
GVÆue
 *
∑øm_vÆues
,

69 
gpoöãr
 
övoˇti⁄_höt
,

70 
gpoöãr
 
m¨shÆ_d©a
);

73 
gtk_m¨shÆ_INT__POINTER
 (
GClosuª
 *
˛osuª
,

74 
GVÆue
 *
ªtu∫_vÆue
,

75 
guöt
 
n_∑øm_vÆues
,

76 c⁄° 
GVÆue
 *
∑øm_vÆues
,

77 
gpoöãr
 
övoˇti⁄_höt
,

78 
gpoöãr
 
m¨shÆ_d©a
);

81 
gtk_m¨shÆ_INT__POINTER_CHAR_CHAR
 (
GClosuª
 *
˛osuª
,

82 
GVÆue
 *
ªtu∫_vÆue
,

83 
guöt
 
n_∑øm_vÆues
,

84 c⁄° 
GVÆue
 *
∑øm_vÆues
,

85 
gpoöãr
 
övoˇti⁄_höt
,

86 
gpoöãr
 
m¨shÆ_d©a
);

89 
	#gtk_m¨shÆ_VOID__BOOLEAN
 
g_c˛osuª_m¨shÆ_VOID__BOOLEAN


	)

90 
	#gtk_m¨shÆ_NONE__BOOL
 
gtk_m¨shÆ_VOID__BOOLEAN


	)

93 
	#gtk_m¨shÆ_VOID__BOXED
 
g_c˛osuª_m¨shÆ_VOID__BOXED


	)

94 
	#gtk_m¨shÆ_NONE__BOXED
 
gtk_m¨shÆ_VOID__BOXED


	)

97 
	#gtk_m¨shÆ_VOID__ENUM
 
g_c˛osuª_m¨shÆ_VOID__ENUM


	)

98 
	#gtk_m¨shÆ_NONE__ENUM
 
gtk_m¨shÆ_VOID__ENUM


	)

101 
gtk_m¨shÆ_VOID__ENUM_FLOAT
 (
GClosuª
 *
˛osuª
,

102 
GVÆue
 *
ªtu∫_vÆue
,

103 
guöt
 
n_∑øm_vÆues
,

104 c⁄° 
GVÆue
 *
∑øm_vÆues
,

105 
gpoöãr
 
övoˇti⁄_höt
,

106 
gpoöãr
 
m¨shÆ_d©a
);

107 
	#gtk_m¨shÆ_NONE__ENUM_FLOAT
 
gtk_m¨shÆ_VOID__ENUM_FLOAT


	)

110 
gtk_m¨shÆ_VOID__ENUM_FLOAT_BOOLEAN
 (
GClosuª
 *
˛osuª
,

111 
GVÆue
 *
ªtu∫_vÆue
,

112 
guöt
 
n_∑øm_vÆues
,

113 c⁄° 
GVÆue
 *
∑øm_vÆues
,

114 
gpoöãr
 
övoˇti⁄_höt
,

115 
gpoöãr
 
m¨shÆ_d©a
);

116 
	#gtk_m¨shÆ_NONE__ENUM_FLOAT_BOOL
 
gtk_m¨shÆ_VOID__ENUM_FLOAT_BOOLEAN


	)

119 
	#gtk_m¨shÆ_VOID__INT
 
g_c˛osuª_m¨shÆ_VOID__INT


	)

120 
	#gtk_m¨shÆ_NONE__INT
 
gtk_m¨shÆ_VOID__INT


	)

123 
gtk_m¨shÆ_VOID__INT_INT
 (
GClosuª
 *
˛osuª
,

124 
GVÆue
 *
ªtu∫_vÆue
,

125 
guöt
 
n_∑øm_vÆues
,

126 c⁄° 
GVÆue
 *
∑øm_vÆues
,

127 
gpoöãr
 
övoˇti⁄_höt
,

128 
gpoöãr
 
m¨shÆ_d©a
);

129 
	#gtk_m¨shÆ_NONE__INT_INT
 
gtk_m¨shÆ_VOID__INT_INT


	)

132 
gtk_m¨shÆ_VOID__INT_INT_POINTER
 (
GClosuª
 *
˛osuª
,

133 
GVÆue
 *
ªtu∫_vÆue
,

134 
guöt
 
n_∑øm_vÆues
,

135 c⁄° 
GVÆue
 *
∑øm_vÆues
,

136 
gpoöãr
 
övoˇti⁄_höt
,

137 
gpoöãr
 
m¨shÆ_d©a
);

138 
	#gtk_m¨shÆ_NONE__INT_INT_POINTER
 
gtk_m¨shÆ_VOID__INT_INT_POINTER


	)

141 
	#gtk_m¨shÆ_VOID__VOID
 
g_c˛osuª_m¨shÆ_VOID__VOID


	)

142 
	#gtk_m¨shÆ_NONE__NONE
 
gtk_m¨shÆ_VOID__VOID


	)

145 
	#gtk_m¨shÆ_VOID__OBJECT
 
g_c˛osuª_m¨shÆ_VOID__OBJECT


	)

146 
	#gtk_m¨shÆ_NONE__OBJECT
 
gtk_m¨shÆ_VOID__OBJECT


	)

149 
	#gtk_m¨shÆ_VOID__POINTER
 
g_c˛osuª_m¨shÆ_VOID__POINTER


	)

150 
	#gtk_m¨shÆ_NONE__POINTER
 
gtk_m¨shÆ_VOID__POINTER


	)

153 
gtk_m¨shÆ_VOID__POINTER_INT
 (
GClosuª
 *
˛osuª
,

154 
GVÆue
 *
ªtu∫_vÆue
,

155 
guöt
 
n_∑øm_vÆues
,

156 c⁄° 
GVÆue
 *
∑øm_vÆues
,

157 
gpoöãr
 
övoˇti⁄_höt
,

158 
gpoöãr
 
m¨shÆ_d©a
);

159 
	#gtk_m¨shÆ_NONE__POINTER_INT
 
gtk_m¨shÆ_VOID__POINTER_INT


	)

162 
gtk_m¨shÆ_VOID__POINTER_POINTER
 (
GClosuª
 *
˛osuª
,

163 
GVÆue
 *
ªtu∫_vÆue
,

164 
guöt
 
n_∑øm_vÆues
,

165 c⁄° 
GVÆue
 *
∑øm_vÆues
,

166 
gpoöãr
 
övoˇti⁄_höt
,

167 
gpoöãr
 
m¨shÆ_d©a
);

168 
	#gtk_m¨shÆ_NONE__POINTER_POINTER
 
gtk_m¨shÆ_VOID__POINTER_POINTER


	)

171 
gtk_m¨shÆ_VOID__POINTER_POINTER_POINTER
 (
GClosuª
 *
˛osuª
,

172 
GVÆue
 *
ªtu∫_vÆue
,

173 
guöt
 
n_∑øm_vÆues
,

174 c⁄° 
GVÆue
 *
∑øm_vÆues
,

175 
gpoöãr
 
övoˇti⁄_höt
,

176 
gpoöãr
 
m¨shÆ_d©a
);

177 
	#gtk_m¨shÆ_NONE__POINTER_POINTER_POINTER
 
gtk_m¨shÆ_VOID__POINTER_POINTER_POINTER


	)

180 
gtk_m¨shÆ_VOID__POINTER_STRING_STRING
 (
GClosuª
 *
˛osuª
,

181 
GVÆue
 *
ªtu∫_vÆue
,

182 
guöt
 
n_∑øm_vÆues
,

183 c⁄° 
GVÆue
 *
∑øm_vÆues
,

184 
gpoöãr
 
övoˇti⁄_höt
,

185 
gpoöãr
 
m¨shÆ_d©a
);

186 
	#gtk_m¨shÆ_NONE__POINTER_STRING_STRING
 
gtk_m¨shÆ_VOID__POINTER_STRING_STRING


	)

189 
gtk_m¨shÆ_VOID__POINTER_UINT
 (
GClosuª
 *
˛osuª
,

190 
GVÆue
 *
ªtu∫_vÆue
,

191 
guöt
 
n_∑øm_vÆues
,

192 c⁄° 
GVÆue
 *
∑øm_vÆues
,

193 
gpoöãr
 
övoˇti⁄_höt
,

194 
gpoöãr
 
m¨shÆ_d©a
);

195 
	#gtk_m¨shÆ_NONE__POINTER_UINT
 
gtk_m¨shÆ_VOID__POINTER_UINT


	)

198 
gtk_m¨shÆ_VOID__POINTER_UINT_ENUM
 (
GClosuª
 *
˛osuª
,

199 
GVÆue
 *
ªtu∫_vÆue
,

200 
guöt
 
n_∑øm_vÆues
,

201 c⁄° 
GVÆue
 *
∑øm_vÆues
,

202 
gpoöãr
 
övoˇti⁄_höt
,

203 
gpoöãr
 
m¨shÆ_d©a
);

204 
	#gtk_m¨shÆ_NONE__POINTER_UINT_ENUM
 
gtk_m¨shÆ_VOID__POINTER_UINT_ENUM


	)

207 
gtk_m¨shÆ_VOID__POINTER_POINTER_UINT_UINT
 (
GClosuª
 *
˛osuª
,

208 
GVÆue
 *
ªtu∫_vÆue
,

209 
guöt
 
n_∑øm_vÆues
,

210 c⁄° 
GVÆue
 *
∑øm_vÆues
,

211 
gpoöãr
 
övoˇti⁄_höt
,

212 
gpoöãr
 
m¨shÆ_d©a
);

213 
	#gtk_m¨shÆ_NONE__POINTER_POINTER_UINT_UINT
 
gtk_m¨shÆ_VOID__POINTER_POINTER_UINT_UINT


	)

216 
gtk_m¨shÆ_VOID__POINTER_INT_INT_POINTER_UINT_UINT
 (
GClosuª
 *
˛osuª
,

217 
GVÆue
 *
ªtu∫_vÆue
,

218 
guöt
 
n_∑øm_vÆues
,

219 c⁄° 
GVÆue
 *
∑øm_vÆues
,

220 
gpoöãr
 
övoˇti⁄_höt
,

221 
gpoöãr
 
m¨shÆ_d©a
);

222 
	#gtk_m¨shÆ_NONE__POINTER_INT_INT_POINTER_UINT_UINT
 
gtk_m¨shÆ_VOID__POINTER_INT_INT_POINTER_UINT_UINT


	)

225 
gtk_m¨shÆ_VOID__POINTER_UINT_UINT
 (
GClosuª
 *
˛osuª
,

226 
GVÆue
 *
ªtu∫_vÆue
,

227 
guöt
 
n_∑øm_vÆues
,

228 c⁄° 
GVÆue
 *
∑øm_vÆues
,

229 
gpoöãr
 
övoˇti⁄_höt
,

230 
gpoöãr
 
m¨shÆ_d©a
);

231 
	#gtk_m¨shÆ_NONE__POINTER_UINT_UINT
 
gtk_m¨shÆ_VOID__POINTER_UINT_UINT


	)

236 
	#gtk_m¨shÆ_VOID__STRING
 
g_c˛osuª_m¨shÆ_VOID__STRING


	)

237 
	#gtk_m¨shÆ_NONE__STRING
 
gtk_m¨shÆ_VOID__STRING


	)

240 
gtk_m¨shÆ_VOID__STRING_INT_POINTER
 (
GClosuª
 *
˛osuª
,

241 
GVÆue
 *
ªtu∫_vÆue
,

242 
guöt
 
n_∑øm_vÆues
,

243 c⁄° 
GVÆue
 *
∑øm_vÆues
,

244 
gpoöãr
 
övoˇti⁄_höt
,

245 
gpoöãr
 
m¨shÆ_d©a
);

246 
	#gtk_m¨shÆ_NONE__STRING_INT_POINTER
 
gtk_m¨shÆ_VOID__STRING_INT_POINTER


	)

249 
	#gtk_m¨shÆ_VOID__UINT
 
g_c˛osuª_m¨shÆ_VOID__UINT


	)

250 
	#gtk_m¨shÆ_NONE__UINT
 
gtk_m¨shÆ_VOID__UINT


	)

253 
gtk_m¨shÆ_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER
 (
GClosuª
 *
˛osuª
,

254 
GVÆue
 *
ªtu∫_vÆue
,

255 
guöt
 
n_∑øm_vÆues
,

256 c⁄° 
GVÆue
 *
∑øm_vÆues
,

257 
gpoöãr
 
övoˇti⁄_höt
,

258 
gpoöãr
 
m¨shÆ_d©a
);

259 
	#gtk_m¨shÆ_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER
 
gtk_m¨shÆ_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER


	)

262 
gtk_m¨shÆ_VOID__UINT_POINTER_UINT_UINT_ENUM
 (
GClosuª
 *
˛osuª
,

263 
GVÆue
 *
ªtu∫_vÆue
,

264 
guöt
 
n_∑øm_vÆues
,

265 c⁄° 
GVÆue
 *
∑øm_vÆues
,

266 
gpoöãr
 
övoˇti⁄_höt
,

267 
gpoöãr
 
m¨shÆ_d©a
);

268 
	#gtk_m¨shÆ_NONE__UINT_POINTER_UINT_UINT_ENUM
 
gtk_m¨shÆ_VOID__UINT_POINTER_UINT_UINT_ENUM


	)

271 
gtk_m¨shÆ_VOID__UINT_STRING
 (
GClosuª
 *
˛osuª
,

272 
GVÆue
 *
ªtu∫_vÆue
,

273 
guöt
 
n_∑øm_vÆues
,

274 c⁄° 
GVÆue
 *
∑øm_vÆues
,

275 
gpoöãr
 
övoˇti⁄_höt
,

276 
gpoöãr
 
m¨shÆ_d©a
);

277 
	#gtk_m¨shÆ_NONE__UINT_STRING
 
gtk_m¨shÆ_VOID__UINT_STRING


	)

279 
	gG_END_DECLS


	@/usr/include/gtk/gtktypebuiltins.h

4 #i‡
deföed
(
GTK_DISABLE_SINGLE_INCLUDES
Ë&& !deföed (
__GTK_H_INSIDE__
Ë&& !deföed (
GTK_COMPILATION
)

8 #i‚de‡
__GTK_TYPE_BUILTINS_H__


9 
	#__GTK_TYPE_BUILTINS_H__


	)

11 
	~<glib-obje˘.h
>

13 
G_BEGIN_DECLS


16 
GTy≥
 
	$gtk_ac˚l_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

17 
	#GTK_TYPE_ACCEL_FLAGS
 (
	`gtk_ac˚l_Êags_gë_ty≥
 ())

	)

20 
GTy≥
 
	$gtk_assi°™t_∑ge_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

21 
	#GTK_TYPE_ASSISTANT_PAGE_TYPE
 (
	`gtk_assi°™t_∑ge_ty≥_gë_ty≥
 ())

	)

24 
GTy≥
 
	$gtk_buûdî_îr‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

25 
	#GTK_TYPE_BUILDER_ERROR
 (
	`gtk_buûdî_îr‹_gë_ty≥
 ())

	)

28 
GTy≥
 
	$gtk_ˇÀnd¨_di•œy_›ti⁄s_gë_ty≥
 (Ë
G_GNUC_CONST
;

29 
	#GTK_TYPE_CALENDAR_DISPLAY_OPTIONS
 (
	`gtk_ˇÀnd¨_di•œy_›ti⁄s_gë_ty≥
 ())

	)

32 
GTy≥
 
	$gtk_˚Œ_ªndîî_°©e_gë_ty≥
 (Ë
G_GNUC_CONST
;

33 
	#GTK_TYPE_CELL_RENDERER_STATE
 (
	`gtk_˚Œ_ªndîî_°©e_gë_ty≥
 ())

	)

34 
GTy≥
 
	$gtk_˚Œ_ªndîî_mode_gë_ty≥
 (Ë
G_GNUC_CONST
;

35 
	#GTK_TYPE_CELL_RENDERER_MODE
 (
	`gtk_˚Œ_ªndîî_mode_gë_ty≥
 ())

	)

38 
GTy≥
 
	$gtk_˚Œ_ªndîî_ac˚l_mode_gë_ty≥
 (Ë
G_GNUC_CONST
;

39 
	#GTK_TYPE_CELL_RENDERER_ACCEL_MODE
 (
	`gtk_˚Œ_ªndîî_ac˚l_mode_gë_ty≥
 ())

	)

42 
GTy≥
 
	$gtk_debug_Êag_gë_ty≥
 (Ë
G_GNUC_CONST
;

43 
	#GTK_TYPE_DEBUG_FLAG
 (
	`gtk_debug_Êag_gë_ty≥
 ())

	)

46 
GTy≥
 
	$gtk_dülog_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

47 
	#GTK_TYPE_DIALOG_FLAGS
 (
	`gtk_dülog_Êags_gë_ty≥
 ())

	)

48 
GTy≥
 
	$gtk_ª•⁄£_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

49 
	#GTK_TYPE_RESPONSE_TYPE
 (
	`gtk_ª•⁄£_ty≥_gë_ty≥
 ())

	)

52 
GTy≥
 
	$gtk_de°_deÁu…s_gë_ty≥
 (Ë
G_GNUC_CONST
;

53 
	#GTK_TYPE_DEST_DEFAULTS
 (
	`gtk_de°_deÁu…s_gë_ty≥
 ())

	)

54 
GTy≥
 
	$gtk_èrgë_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

55 
	#GTK_TYPE_TARGET_FLAGS
 (
	`gtk_èrgë_Êags_gë_ty≥
 ())

	)

58 
GTy≥
 
	$gtk_íåy_ic⁄_posôi⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

59 
	#GTK_TYPE_ENTRY_ICON_POSITION
 (
	`gtk_íåy_ic⁄_posôi⁄_gë_ty≥
 ())

	)

62 
GTy≥
 
	$gtk_™ch‹_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

63 
	#GTK_TYPE_ANCHOR_TYPE
 (
	`gtk_™ch‹_ty≥_gë_ty≥
 ())

	)

64 
GTy≥
 
	$gtk_¨row_∂a˚mít_gë_ty≥
 (Ë
G_GNUC_CONST
;

65 
	#GTK_TYPE_ARROW_PLACEMENT
 (
	`gtk_¨row_∂a˚mít_gë_ty≥
 ())

	)

66 
GTy≥
 
	$gtk_¨row_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

67 
	#GTK_TYPE_ARROW_TYPE
 (
	`gtk_¨row_ty≥_gë_ty≥
 ())

	)

68 
GTy≥
 
	$gtk_©èch_›ti⁄s_gë_ty≥
 (Ë
G_GNUC_CONST
;

69 
	#GTK_TYPE_ATTACH_OPTIONS
 (
	`gtk_©èch_›ti⁄s_gë_ty≥
 ())

	)

70 
GTy≥
 
	$gtk_buâ⁄_box_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

71 
	#GTK_TYPE_BUTTON_BOX_STYLE
 (
	`gtk_buâ⁄_box_°yÀ_gë_ty≥
 ())

	)

72 
GTy≥
 
	$gtk_curve_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

73 
	#GTK_TYPE_CURVE_TYPE
 (
	`gtk_curve_ty≥_gë_ty≥
 ())

	)

74 
GTy≥
 
	$gtk_dñëe_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

75 
	#GTK_TYPE_DELETE_TYPE
 (
	`gtk_dñëe_ty≥_gë_ty≥
 ())

	)

76 
GTy≥
 
	$gtk_dúe˘i⁄_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

77 
	#GTK_TYPE_DIRECTION_TYPE
 (
	`gtk_dúe˘i⁄_ty≥_gë_ty≥
 ())

	)

78 
GTy≥
 
	$gtk_ex∑ndî_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

79 
	#GTK_TYPE_EXPANDER_STYLE
 (
	`gtk_ex∑ndî_°yÀ_gë_ty≥
 ())

	)

80 
GTy≥
 
	$gtk_ic⁄_size_gë_ty≥
 (Ë
G_GNUC_CONST
;

81 
	#GTK_TYPE_ICON_SIZE
 (
	`gtk_ic⁄_size_gë_ty≥
 ())

	)

82 
GTy≥
 
	$gtk_£nsôivôy_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

83 
	#GTK_TYPE_SENSITIVITY_TYPE
 (
	`gtk_£nsôivôy_ty≥_gë_ty≥
 ())

	)

84 
GTy≥
 
	$gtk_side_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

85 
	#GTK_TYPE_SIDE_TYPE
 (
	`gtk_side_ty≥_gë_ty≥
 ())

	)

86 
GTy≥
 
	$gtk_ãxt_dúe˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

87 
	#GTK_TYPE_TEXT_DIRECTION
 (
	`gtk_ãxt_dúe˘i⁄_gë_ty≥
 ())

	)

88 
GTy≥
 
	$gtk_ju°ifiˇti⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

89 
	#GTK_TYPE_JUSTIFICATION
 (
	`gtk_ju°ifiˇti⁄_gë_ty≥
 ())

	)

90 
GTy≥
 
	$gtk_m©ch_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

91 
	#GTK_TYPE_MATCH_TYPE
 (
	`gtk_m©ch_ty≥_gë_ty≥
 ())

	)

92 
GTy≥
 
	$gtk_míu_dúe˘i⁄_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

93 
	#GTK_TYPE_MENU_DIRECTION_TYPE
 (
	`gtk_míu_dúe˘i⁄_ty≥_gë_ty≥
 ())

	)

94 
GTy≥
 
	$gtk_mesßge_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

95 
	#GTK_TYPE_MESSAGE_TYPE
 (
	`gtk_mesßge_ty≥_gë_ty≥
 ())

	)

96 
GTy≥
 
	$gtk_mëric_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

97 
	#GTK_TYPE_METRIC_TYPE
 (
	`gtk_mëric_ty≥_gë_ty≥
 ())

	)

98 
GTy≥
 
	$gtk_movemít_°ï_gë_ty≥
 (Ë
G_GNUC_CONST
;

99 
	#GTK_TYPE_MOVEMENT_STEP
 (
	`gtk_movemít_°ï_gë_ty≥
 ())

	)

100 
GTy≥
 
	$gtk_s¸ﬁl_°ï_gë_ty≥
 (Ë
G_GNUC_CONST
;

101 
	#GTK_TYPE_SCROLL_STEP
 (
	`gtk_s¸ﬁl_°ï_gë_ty≥
 ())

	)

102 
GTy≥
 
	$gtk_‹õ¡©i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

103 
	#GTK_TYPE_ORIENTATION
 (
	`gtk_‹õ¡©i⁄_gë_ty≥
 ())

	)

104 
GTy≥
 
	$gtk_c‹√r_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

105 
	#GTK_TYPE_CORNER_TYPE
 (
	`gtk_c‹√r_ty≥_gë_ty≥
 ())

	)

106 
GTy≥
 
	$gtk_∑ck_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

107 
	#GTK_TYPE_PACK_TYPE
 (
	`gtk_∑ck_ty≥_gë_ty≥
 ())

	)

108 
GTy≥
 
	$gtk_∑th_¥i‹ôy_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

109 
	#GTK_TYPE_PATH_PRIORITY_TYPE
 (
	`gtk_∑th_¥i‹ôy_ty≥_gë_ty≥
 ())

	)

110 
GTy≥
 
	$gtk_∑th_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

111 
	#GTK_TYPE_PATH_TYPE
 (
	`gtk_∑th_ty≥_gë_ty≥
 ())

	)

112 
GTy≥
 
	$gtk_pﬁicy_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

113 
	#GTK_TYPE_POLICY_TYPE
 (
	`gtk_pﬁicy_ty≥_gë_ty≥
 ())

	)

114 
GTy≥
 
	$gtk_posôi⁄_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

115 
	#GTK_TYPE_POSITION_TYPE
 (
	`gtk_posôi⁄_ty≥_gë_ty≥
 ())

	)

116 
GTy≥
 
	$gtk_¥evõw_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

117 
	#GTK_TYPE_PREVIEW_TYPE
 (
	`gtk_¥evõw_ty≥_gë_ty≥
 ())

	)

118 
GTy≥
 
	$gtk_ªlõf_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

119 
	#GTK_TYPE_RELIEF_STYLE
 (
	`gtk_ªlõf_°yÀ_gë_ty≥
 ())

	)

120 
GTy≥
 
	$gtk_ªsize_mode_gë_ty≥
 (Ë
G_GNUC_CONST
;

121 
	#GTK_TYPE_RESIZE_MODE
 (
	`gtk_ªsize_mode_gë_ty≥
 ())

	)

122 
GTy≥
 
	$gtk_sig«l_run_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

123 
	#GTK_TYPE_SIGNAL_RUN_TYPE
 (
	`gtk_sig«l_run_ty≥_gë_ty≥
 ())

	)

124 
GTy≥
 
	$gtk_s¸ﬁl_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

125 
	#GTK_TYPE_SCROLL_TYPE
 (
	`gtk_s¸ﬁl_ty≥_gë_ty≥
 ())

	)

126 
GTy≥
 
	$gtk_£À˘i⁄_mode_gë_ty≥
 (Ë
G_GNUC_CONST
;

127 
	#GTK_TYPE_SELECTION_MODE
 (
	`gtk_£À˘i⁄_mode_gë_ty≥
 ())

	)

128 
GTy≥
 
	$gtk_shadow_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

129 
	#GTK_TYPE_SHADOW_TYPE
 (
	`gtk_shadow_ty≥_gë_ty≥
 ())

	)

130 
GTy≥
 
	$gtk_°©e_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

131 
	#GTK_TYPE_STATE_TYPE
 (
	`gtk_°©e_ty≥_gë_ty≥
 ())

	)

132 
GTy≥
 
	$gtk_submíu_dúe˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

133 
	#GTK_TYPE_SUBMENU_DIRECTION
 (
	`gtk_submíu_dúe˘i⁄_gë_ty≥
 ())

	)

134 
GTy≥
 
	$gtk_submíu_∂a˚mít_gë_ty≥
 (Ë
G_GNUC_CONST
;

135 
	#GTK_TYPE_SUBMENU_PLACEMENT
 (
	`gtk_submíu_∂a˚mít_gë_ty≥
 ())

	)

136 
GTy≥
 
	$gtk_toﬁb¨_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

137 
	#GTK_TYPE_TOOLBAR_STYLE
 (
	`gtk_toﬁb¨_°yÀ_gë_ty≥
 ())

	)

138 
GTy≥
 
	$gtk_upd©e_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

139 
	#GTK_TYPE_UPDATE_TYPE
 (
	`gtk_upd©e_ty≥_gë_ty≥
 ())

	)

140 
GTy≥
 
	$gtk_visibûôy_gë_ty≥
 (Ë
G_GNUC_CONST
;

141 
	#GTK_TYPE_VISIBILITY
 (
	`gtk_visibûôy_gë_ty≥
 ())

	)

142 
GTy≥
 
	$gtk_wödow_posôi⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

143 
	#GTK_TYPE_WINDOW_POSITION
 (
	`gtk_wödow_posôi⁄_gë_ty≥
 ())

	)

144 
GTy≥
 
	$gtk_wödow_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

145 
	#GTK_TYPE_WINDOW_TYPE
 (
	`gtk_wödow_ty≥_gë_ty≥
 ())

	)

146 
GTy≥
 
	$gtk_wøp_mode_gë_ty≥
 (Ë
G_GNUC_CONST
;

147 
	#GTK_TYPE_WRAP_MODE
 (
	`gtk_wøp_mode_gë_ty≥
 ())

	)

148 
GTy≥
 
	$gtk_s‹t_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

149 
	#GTK_TYPE_SORT_TYPE
 (
	`gtk_s‹t_ty≥_gë_ty≥
 ())

	)

150 
GTy≥
 
	$gtk_im_¥ìdô_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

151 
	#GTK_TYPE_IM_PREEDIT_STYLE
 (
	`gtk_im_¥ìdô_°yÀ_gë_ty≥
 ())

	)

152 
GTy≥
 
	$gtk_im_°©us_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

153 
	#GTK_TYPE_IM_STATUS_STYLE
 (
	`gtk_im_°©us_°yÀ_gë_ty≥
 ())

	)

154 
GTy≥
 
	$gtk_∑ck_dúe˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

155 
	#GTK_TYPE_PACK_DIRECTION
 (
	`gtk_∑ck_dúe˘i⁄_gë_ty≥
 ())

	)

156 
GTy≥
 
	$gtk_¥öt_∑ges_gë_ty≥
 (Ë
G_GNUC_CONST
;

157 
	#GTK_TYPE_PRINT_PAGES
 (
	`gtk_¥öt_∑ges_gë_ty≥
 ())

	)

158 
GTy≥
 
	$gtk_∑ge_£t_gë_ty≥
 (Ë
G_GNUC_CONST
;

159 
	#GTK_TYPE_PAGE_SET
 (
	`gtk_∑ge_£t_gë_ty≥
 ())

	)

160 
GTy≥
 
	$gtk_numbî_up_œyout_gë_ty≥
 (Ë
G_GNUC_CONST
;

161 
	#GTK_TYPE_NUMBER_UP_LAYOUT
 (
	`gtk_numbî_up_œyout_gë_ty≥
 ())

	)

162 
GTy≥
 
	$gtk_∑ge_‹õ¡©i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

163 
	#GTK_TYPE_PAGE_ORIENTATION
 (
	`gtk_∑ge_‹õ¡©i⁄_gë_ty≥
 ())

	)

164 
GTy≥
 
	$gtk_¥öt_quÆôy_gë_ty≥
 (Ë
G_GNUC_CONST
;

165 
	#GTK_TYPE_PRINT_QUALITY
 (
	`gtk_¥öt_quÆôy_gë_ty≥
 ())

	)

166 
GTy≥
 
	$gtk_¥öt_du∂ex_gë_ty≥
 (Ë
G_GNUC_CONST
;

167 
	#GTK_TYPE_PRINT_DUPLEX
 (
	`gtk_¥öt_du∂ex_gë_ty≥
 ())

	)

168 
GTy≥
 
	$gtk_unô_gë_ty≥
 (Ë
G_GNUC_CONST
;

169 
	#GTK_TYPE_UNIT
 (
	`gtk_unô_gë_ty≥
 ())

	)

170 
GTy≥
 
	$gtk_åì_võw_grid_löes_gë_ty≥
 (Ë
G_GNUC_CONST
;

171 
	#GTK_TYPE_TREE_VIEW_GRID_LINES
 (
	`gtk_åì_võw_grid_löes_gë_ty≥
 ())

	)

172 
GTy≥
 
	$gtk_døg_ªsu…_gë_ty≥
 (Ë
G_GNUC_CONST
;

173 
	#GTK_TYPE_DRAG_RESULT
 (
	`gtk_døg_ªsu…_gë_ty≥
 ())

	)

176 
GTy≥
 
	$gtk_fûe_choo£r_a˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

177 
	#GTK_TYPE_FILE_CHOOSER_ACTION
 (
	`gtk_fûe_choo£r_a˘i⁄_gë_ty≥
 ())

	)

178 
GTy≥
 
	$gtk_fûe_choo£r_c⁄fúm©i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

179 
	#GTK_TYPE_FILE_CHOOSER_CONFIRMATION
 (
	`gtk_fûe_choo£r_c⁄fúm©i⁄_gë_ty≥
 ())

	)

180 
GTy≥
 
	$gtk_fûe_choo£r_îr‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

181 
	#GTK_TYPE_FILE_CHOOSER_ERROR
 (
	`gtk_fûe_choo£r_îr‹_gë_ty≥
 ())

	)

184 
GTy≥
 
	$gtk_fûe_fûãr_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

185 
	#GTK_TYPE_FILE_FILTER_FLAGS
 (
	`gtk_fûe_fûãr_Êags_gë_ty≥
 ())

	)

188 
GTy≥
 
	$gtk_ic⁄_lookup_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

189 
	#GTK_TYPE_ICON_LOOKUP_FLAGS
 (
	`gtk_ic⁄_lookup_Êags_gë_ty≥
 ())

	)

190 
GTy≥
 
	$gtk_ic⁄_theme_îr‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

191 
	#GTK_TYPE_ICON_THEME_ERROR
 (
	`gtk_ic⁄_theme_îr‹_gë_ty≥
 ())

	)

194 
GTy≥
 
	$gtk_ic⁄_võw_dr›_posôi⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

195 
	#GTK_TYPE_ICON_VIEW_DROP_POSITION
 (
	`gtk_ic⁄_võw_dr›_posôi⁄_gë_ty≥
 ())

	)

198 
GTy≥
 
	$gtk_image_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

199 
	#GTK_TYPE_IMAGE_TYPE
 (
	`gtk_image_ty≥_gë_ty≥
 ())

	)

202 
GTy≥
 
	$gtk_buâ⁄s_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

203 
	#GTK_TYPE_BUTTONS_TYPE
 (
	`gtk_buâ⁄s_ty≥_gë_ty≥
 ())

	)

206 
GTy≥
 
	$gtk_nŸebook_èb_gë_ty≥
 (Ë
G_GNUC_CONST
;

207 
	#GTK_TYPE_NOTEBOOK_TAB
 (
	`gtk_nŸebook_èb_gë_ty≥
 ())

	)

210 
GTy≥
 
	$gtk_obje˘_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

211 
	#GTK_TYPE_OBJECT_FLAGS
 (
	`gtk_obje˘_Êags_gë_ty≥
 ())

	)

212 
GTy≥
 
	$gtk_¨g_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

213 
	#GTK_TYPE_ARG_FLAGS
 (
	`gtk_¨g_Êags_gë_ty≥
 ())

	)

216 
GTy≥
 
	$gtk_¥öt_°©us_gë_ty≥
 (Ë
G_GNUC_CONST
;

217 
	#GTK_TYPE_PRINT_STATUS
 (
	`gtk_¥öt_°©us_gë_ty≥
 ())

	)

218 
GTy≥
 
	$gtk_¥öt_›î©i⁄_ªsu…_gë_ty≥
 (Ë
G_GNUC_CONST
;

219 
	#GTK_TYPE_PRINT_OPERATION_RESULT
 (
	`gtk_¥öt_›î©i⁄_ªsu…_gë_ty≥
 ())

	)

220 
GTy≥
 
	$gtk_¥öt_›î©i⁄_a˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

221 
	#GTK_TYPE_PRINT_OPERATION_ACTION
 (
	`gtk_¥öt_›î©i⁄_a˘i⁄_gë_ty≥
 ())

	)

222 
GTy≥
 
	$gtk_¥öt_îr‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

223 
	#GTK_TYPE_PRINT_ERROR
 (
	`gtk_¥öt_îr‹_gë_ty≥
 ())

	)

226 
GTy≥
 
	$gtk_¥iv©e_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

227 
	#GTK_TYPE_PRIVATE_FLAGS
 (
	`gtk_¥iv©e_Êags_gë_ty≥
 ())

	)

230 
GTy≥
 
	$gtk_¥ogªss_b¨_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

231 
	#GTK_TYPE_PROGRESS_BAR_STYLE
 (
	`gtk_¥ogªss_b¨_°yÀ_gë_ty≥
 ())

	)

232 
GTy≥
 
	$gtk_¥ogªss_b¨_‹õ¡©i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

233 
	#GTK_TYPE_PROGRESS_BAR_ORIENTATION
 (
	`gtk_¥ogªss_b¨_‹õ¡©i⁄_gë_ty≥
 ())

	)

236 
GTy≥
 
	$gtk_rc_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

237 
	#GTK_TYPE_RC_FLAGS
 (
	`gtk_rc_Êags_gë_ty≥
 ())

	)

238 
GTy≥
 
	$gtk_rc_tokí_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

239 
	#GTK_TYPE_RC_TOKEN_TYPE
 (
	`gtk_rc_tokí_ty≥_gë_ty≥
 ())

	)

242 
GTy≥
 
	$gtk_ª˚¡_s‹t_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

243 
	#GTK_TYPE_RECENT_SORT_TYPE
 (
	`gtk_ª˚¡_s‹t_ty≥_gë_ty≥
 ())

	)

244 
GTy≥
 
	$gtk_ª˚¡_choo£r_îr‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

245 
	#GTK_TYPE_RECENT_CHOOSER_ERROR
 (
	`gtk_ª˚¡_choo£r_îr‹_gë_ty≥
 ())

	)

248 
GTy≥
 
	$gtk_ª˚¡_fûãr_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

249 
	#GTK_TYPE_RECENT_FILTER_FLAGS
 (
	`gtk_ª˚¡_fûãr_Êags_gë_ty≥
 ())

	)

252 
GTy≥
 
	$gtk_ª˚¡_m™agî_îr‹_gë_ty≥
 (Ë
G_GNUC_CONST
;

253 
	#GTK_TYPE_RECENT_MANAGER_ERROR
 (
	`gtk_ª˚¡_m™agî_îr‹_gë_ty≥
 ())

	)

256 
GTy≥
 
	$gtk_size_group_mode_gë_ty≥
 (Ë
G_GNUC_CONST
;

257 
	#GTK_TYPE_SIZE_GROUP_MODE
 (
	`gtk_size_group_mode_gë_ty≥
 ())

	)

260 
GTy≥
 
	$gtk_•ö_buâ⁄_upd©e_pﬁicy_gë_ty≥
 (Ë
G_GNUC_CONST
;

261 
	#GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY
 (
	`gtk_•ö_buâ⁄_upd©e_pﬁicy_gë_ty≥
 ())

	)

262 
GTy≥
 
	$gtk_•ö_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

263 
	#GTK_TYPE_SPIN_TYPE
 (
	`gtk_•ö_ty≥_gë_ty≥
 ())

	)

266 
GTy≥
 
	$gtk_ãxt_buf„r_èrgë_öfo_gë_ty≥
 (Ë
G_GNUC_CONST
;

267 
	#GTK_TYPE_TEXT_BUFFER_TARGET_INFO
 (
	`gtk_ãxt_buf„r_èrgë_öfo_gë_ty≥
 ())

	)

270 
GTy≥
 
	$gtk_ãxt_£¨ch_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

271 
	#GTK_TYPE_TEXT_SEARCH_FLAGS
 (
	`gtk_ãxt_£¨ch_Êags_gë_ty≥
 ())

	)

274 
GTy≥
 
	$gtk_ãxt_wödow_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

275 
	#GTK_TYPE_TEXT_WINDOW_TYPE
 (
	`gtk_ãxt_wödow_ty≥_gë_ty≥
 ())

	)

278 
GTy≥
 
	$gtk_toﬁb¨_chûd_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

279 
	#GTK_TYPE_TOOLBAR_CHILD_TYPE
 (
	`gtk_toﬁb¨_chûd_ty≥_gë_ty≥
 ())

	)

280 
GTy≥
 
	$gtk_toﬁb¨_•a˚_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

281 
	#GTK_TYPE_TOOLBAR_SPACE_STYLE
 (
	`gtk_toﬁb¨_•a˚_°yÀ_gë_ty≥
 ())

	)

284 
GTy≥
 
	$gtk_toﬁ_∑Àâe_døg_èrgës_gë_ty≥
 (Ë
G_GNUC_CONST
;

285 
	#GTK_TYPE_TOOL_PALETTE_DRAG_TARGETS
 (
	`gtk_toﬁ_∑Àâe_døg_èrgës_gë_ty≥
 ())

	)

288 
GTy≥
 
	$gtk_åì_modñ_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

289 
	#GTK_TYPE_TREE_MODEL_FLAGS
 (
	`gtk_åì_modñ_Êags_gë_ty≥
 ())

	)

292 
GTy≥
 
	$gtk_åì_võw_dr›_posôi⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

293 
	#GTK_TYPE_TREE_VIEW_DROP_POSITION
 (
	`gtk_åì_võw_dr›_posôi⁄_gë_ty≥
 ())

	)

296 
GTy≥
 
	$gtk_åì_võw_cﬁumn_sizög_gë_ty≥
 (Ë
G_GNUC_CONST
;

297 
	#GTK_TYPE_TREE_VIEW_COLUMN_SIZING
 (
	`gtk_åì_võw_cﬁumn_sizög_gë_ty≥
 ())

	)

300 
GTy≥
 
	$gtk_ui_m™agî_ôem_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

301 
	#GTK_TYPE_UI_MANAGER_ITEM_TYPE
 (
	`gtk_ui_m™agî_ôem_ty≥_gë_ty≥
 ())

	)

304 
GTy≥
 
	$gtk_widgë_Êags_gë_ty≥
 (Ë
G_GNUC_CONST
;

305 
	#GTK_TYPE_WIDGET_FLAGS
 (
	`gtk_widgë_Êags_gë_ty≥
 ())

	)

306 
GTy≥
 
	$gtk_widgë_hñp_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

307 
	#GTK_TYPE_WIDGET_HELP_TYPE
 (
	`gtk_widgë_hñp_ty≥_gë_ty≥
 ())

	)

310 
GTy≥
 
	$gtk_åì_võw_mode_gë_ty≥
 (Ë
G_GNUC_CONST
;

311 
	#GTK_TYPE_TREE_VIEW_MODE
 (
	`gtk_åì_võw_mode_gë_ty≥
 ())

	)

314 
GTy≥
 
	$gtk_˚Œ_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

315 
	#GTK_TYPE_CELL_TYPE
 (
	`gtk_˚Œ_ty≥_gë_ty≥
 ())

	)

316 
GTy≥
 
	$gtk_˛i°_døg_pos_gë_ty≥
 (Ë
G_GNUC_CONST
;

317 
	#GTK_TYPE_CLIST_DRAG_POS
 (
	`gtk_˛i°_døg_pos_gë_ty≥
 ())

	)

318 
GTy≥
 
	$gtk_buâ⁄_a˘i⁄_gë_ty≥
 (Ë
G_GNUC_CONST
;

319 
	#GTK_TYPE_BUTTON_ACTION
 (
	`gtk_buâ⁄_a˘i⁄_gë_ty≥
 ())

	)

322 
GTy≥
 
	$gtk_˘ªe_pos_gë_ty≥
 (Ë
G_GNUC_CONST
;

323 
	#GTK_TYPE_CTREE_POS
 (
	`gtk_˘ªe_pos_gë_ty≥
 ())

	)

324 
GTy≥
 
	$gtk_˘ªe_löe_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

325 
	#GTK_TYPE_CTREE_LINE_STYLE
 (
	`gtk_˘ªe_löe_°yÀ_gë_ty≥
 ())

	)

326 
GTy≥
 
	$gtk_˘ªe_ex∑ndî_°yÀ_gë_ty≥
 (Ë
G_GNUC_CONST
;

327 
	#GTK_TYPE_CTREE_EXPANDER_STYLE
 (
	`gtk_˘ªe_ex∑ndî_°yÀ_gë_ty≥
 ())

	)

328 
GTy≥
 
	$gtk_˘ªe_ex∑nsi⁄_ty≥_gë_ty≥
 (Ë
G_GNUC_CONST
;

329 
	#GTK_TYPE_CTREE_EXPANSION_TYPE
 (
	`gtk_˘ªe_ex∑nsi⁄_ty≥_gë_ty≥
 ())

	)

330 
G_END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@
1
.
1
/usr/include
357
10147
arp.c
ascii.c
asm_test.c
base.c
breakpoint.c
factorial.c
fcntl.c
fcntl_redirect.c
firstGTK.c
fputc.c
fseek.c
gdb_test.c
helloword.c
i++.c
ioctl.c
malloc.c
malloc_test.c
maze.c
maze_queue.c
maze_recursive.c
maze_ring.c
memcpy.c
memmove.c
mmap.c
noblock.c
noblock_timeout.c
observe.c
print_backward.c
printf.c
random.c
reverse_str.c
shell.c
shuzu.c
statck.c
swap.c
test.c
test2.c
/usr/include/arpa/inet.h
/usr/include/bits/ioctls.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/gtk/gtk.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/ip.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/socket.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/mman.h
/usr/include/bits/netdb.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/siginfo.h
/usr/include/bits/sigset.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/gtk/gtkaboutdialog.h
/usr/include/gtk/gtkaccelgroup.h
/usr/include/gtk/gtkaccellabel.h
/usr/include/gtk/gtkaccelmap.h
/usr/include/gtk/gtkaccessible.h
/usr/include/gtk/gtkaction.h
/usr/include/gtk/gtkactiongroup.h
/usr/include/gtk/gtkactivatable.h
/usr/include/gtk/gtkadjustment.h
/usr/include/gtk/gtkalignment.h
/usr/include/gtk/gtkarrow.h
/usr/include/gtk/gtkaspectframe.h
/usr/include/gtk/gtkassistant.h
/usr/include/gtk/gtkbbox.h
/usr/include/gtk/gtkbin.h
/usr/include/gtk/gtkbindings.h
/usr/include/gtk/gtkbox.h
/usr/include/gtk/gtkbuildable.h
/usr/include/gtk/gtkbuilder.h
/usr/include/gtk/gtkbutton.h
/usr/include/gtk/gtkcalendar.h
/usr/include/gtk/gtkcelleditable.h
/usr/include/gtk/gtkcelllayout.h
/usr/include/gtk/gtkcellrenderer.h
/usr/include/gtk/gtkcellrendereraccel.h
/usr/include/gtk/gtkcellrenderercombo.h
/usr/include/gtk/gtkcellrendererpixbuf.h
/usr/include/gtk/gtkcellrendererprogress.h
/usr/include/gtk/gtkcellrendererspin.h
/usr/include/gtk/gtkcellrendererspinner.h
/usr/include/gtk/gtkcellrenderertext.h
/usr/include/gtk/gtkcellrenderertoggle.h
/usr/include/gtk/gtkcellview.h
/usr/include/gtk/gtkcheckbutton.h
/usr/include/gtk/gtkcheckmenuitem.h
/usr/include/gtk/gtkclipboard.h
/usr/include/gtk/gtkclist.h
/usr/include/gtk/gtkcolorbutton.h
/usr/include/gtk/gtkcolorsel.h
/usr/include/gtk/gtkcolorseldialog.h
/usr/include/gtk/gtkcombo.h
/usr/include/gtk/gtkcombobox.h
/usr/include/gtk/gtkcomboboxentry.h
/usr/include/gtk/gtkcontainer.h
/usr/include/gtk/gtkctree.h
/usr/include/gtk/gtkcurve.h
/usr/include/gtk/gtkdebug.h
/usr/include/gtk/gtkdialog.h
/usr/include/gtk/gtkdnd.h
/usr/include/gtk/gtkdrawingarea.h
/usr/include/gtk/gtkeditable.h
/usr/include/gtk/gtkentry.h
/usr/include/gtk/gtkentrybuffer.h
/usr/include/gtk/gtkentrycompletion.h
/usr/include/gtk/gtkenums.h
/usr/include/gtk/gtkeventbox.h
/usr/include/gtk/gtkexpander.h
/usr/include/gtk/gtkfilechooser.h
/usr/include/gtk/gtkfilechooserbutton.h
/usr/include/gtk/gtkfilechooserdialog.h
/usr/include/gtk/gtkfilechooserwidget.h
/usr/include/gtk/gtkfilefilter.h
/usr/include/gtk/gtkfilesel.h
/usr/include/gtk/gtkfixed.h
/usr/include/gtk/gtkfontbutton.h
/usr/include/gtk/gtkfontsel.h
/usr/include/gtk/gtkframe.h
/usr/include/gtk/gtkgamma.h
/usr/include/gtk/gtkgc.h
/usr/include/gtk/gtkhandlebox.h
/usr/include/gtk/gtkhbbox.h
/usr/include/gtk/gtkhbox.h
/usr/include/gtk/gtkhpaned.h
/usr/include/gtk/gtkhruler.h
/usr/include/gtk/gtkhscale.h
/usr/include/gtk/gtkhscrollbar.h
/usr/include/gtk/gtkhseparator.h
/usr/include/gtk/gtkhsv.h
/usr/include/gtk/gtkiconfactory.h
/usr/include/gtk/gtkicontheme.h
/usr/include/gtk/gtkiconview.h
/usr/include/gtk/gtkimage.h
/usr/include/gtk/gtkimagemenuitem.h
/usr/include/gtk/gtkimcontext.h
/usr/include/gtk/gtkimcontextsimple.h
/usr/include/gtk/gtkimmulticontext.h
/usr/include/gtk/gtkinfobar.h
/usr/include/gtk/gtkinputdialog.h
/usr/include/gtk/gtkinvisible.h
/usr/include/gtk/gtkitem.h
/usr/include/gtk/gtkitemfactory.h
/usr/include/gtk/gtklabel.h
/usr/include/gtk/gtklayout.h
/usr/include/gtk/gtklinkbutton.h
/usr/include/gtk/gtklist.h
/usr/include/gtk/gtklistitem.h
/usr/include/gtk/gtkliststore.h
/usr/include/gtk/gtkmain.h
/usr/include/gtk/gtkmenu.h
/usr/include/gtk/gtkmenubar.h
/usr/include/gtk/gtkmenuitem.h
/usr/include/gtk/gtkmenushell.h
/usr/include/gtk/gtkmenutoolbutton.h
/usr/include/gtk/gtkmessagedialog.h
/usr/include/gtk/gtkmisc.h
/usr/include/gtk/gtkmodules.h
/usr/include/gtk/gtkmountoperation.h
/usr/include/gtk/gtknotebook.h
/usr/include/gtk/gtkobject.h
/usr/include/gtk/gtkoffscreenwindow.h
/usr/include/gtk/gtkoldeditable.h
/usr/include/gtk/gtkoptionmenu.h
/usr/include/gtk/gtkorientable.h
/usr/include/gtk/gtkpagesetup.h
/usr/include/gtk/gtkpaned.h
/usr/include/gtk/gtkpapersize.h
/usr/include/gtk/gtkpixmap.h
/usr/include/gtk/gtkplug.h
/usr/include/gtk/gtkpreview.h
/usr/include/gtk/gtkprintcontext.h
/usr/include/gtk/gtkprintoperation.h
/usr/include/gtk/gtkprintoperationpreview.h
/usr/include/gtk/gtkprintsettings.h
/usr/include/gtk/gtkprogress.h
/usr/include/gtk/gtkprogressbar.h
/usr/include/gtk/gtkradioaction.h
/usr/include/gtk/gtkradiobutton.h
/usr/include/gtk/gtkradiomenuitem.h
/usr/include/gtk/gtkradiotoolbutton.h
/usr/include/gtk/gtkrange.h
/usr/include/gtk/gtkrc.h
/usr/include/gtk/gtkrecentaction.h
/usr/include/gtk/gtkrecentchooser.h
/usr/include/gtk/gtkrecentchooserdialog.h
/usr/include/gtk/gtkrecentchoosermenu.h
/usr/include/gtk/gtkrecentchooserwidget.h
/usr/include/gtk/gtkrecentfilter.h
/usr/include/gtk/gtkrecentmanager.h
/usr/include/gtk/gtkruler.h
/usr/include/gtk/gtkscale.h
/usr/include/gtk/gtkscalebutton.h
/usr/include/gtk/gtkscrollbar.h
/usr/include/gtk/gtkscrolledwindow.h
/usr/include/gtk/gtkselection.h
/usr/include/gtk/gtkseparator.h
/usr/include/gtk/gtkseparatormenuitem.h
/usr/include/gtk/gtkseparatortoolitem.h
/usr/include/gtk/gtksettings.h
/usr/include/gtk/gtkshow.h
/usr/include/gtk/gtksignal.h
/usr/include/gtk/gtksizegroup.h
/usr/include/gtk/gtksocket.h
/usr/include/gtk/gtkspinbutton.h
/usr/include/gtk/gtkspinner.h
/usr/include/gtk/gtkstatusbar.h
/usr/include/gtk/gtkstatusicon.h
/usr/include/gtk/gtkstock.h
/usr/include/gtk/gtkstyle.h
/usr/include/gtk/gtktable.h
/usr/include/gtk/gtktearoffmenuitem.h
/usr/include/gtk/gtktestutils.h
/usr/include/gtk/gtktext.h
/usr/include/gtk/gtktextbuffer.h
/usr/include/gtk/gtktextbufferrichtext.h
/usr/include/gtk/gtktextchild.h
/usr/include/gtk/gtktextiter.h
/usr/include/gtk/gtktextmark.h
/usr/include/gtk/gtktexttag.h
/usr/include/gtk/gtktexttagtable.h
/usr/include/gtk/gtktextview.h
/usr/include/gtk/gtktipsquery.h
/usr/include/gtk/gtktoggleaction.h
/usr/include/gtk/gtktogglebutton.h
/usr/include/gtk/gtktoggletoolbutton.h
/usr/include/gtk/gtktoolbar.h
/usr/include/gtk/gtktoolbutton.h
/usr/include/gtk/gtktoolitem.h
/usr/include/gtk/gtktoolitemgroup.h
/usr/include/gtk/gtktoolpalette.h
/usr/include/gtk/gtktoolshell.h
/usr/include/gtk/gtktooltip.h
/usr/include/gtk/gtktooltips.h
/usr/include/gtk/gtktree.h
/usr/include/gtk/gtktreednd.h
/usr/include/gtk/gtktreeitem.h
/usr/include/gtk/gtktreemodel.h
/usr/include/gtk/gtktreemodelfilter.h
/usr/include/gtk/gtktreemodelsort.h
/usr/include/gtk/gtktreeselection.h
/usr/include/gtk/gtktreesortable.h
/usr/include/gtk/gtktreestore.h
/usr/include/gtk/gtktreeview.h
/usr/include/gtk/gtktreeviewcolumn.h
/usr/include/gtk/gtktypeutils.h
/usr/include/gtk/gtkuimanager.h
/usr/include/gtk/gtkvbbox.h
/usr/include/gtk/gtkvbox.h
/usr/include/gtk/gtkversion.h
/usr/include/gtk/gtkviewport.h
/usr/include/gtk/gtkvolumebutton.h
/usr/include/gtk/gtkvpaned.h
/usr/include/gtk/gtkvruler.h
/usr/include/gtk/gtkvscale.h
/usr/include/gtk/gtkvscrollbar.h
/usr/include/gtk/gtkvseparator.h
/usr/include/gtk/gtkwidget.h
/usr/include/gtk/gtkwindow.h
/usr/include/libio.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/socket.h
/usr/include/asm/types.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/gtk/gtkmarshal.h
/usr/include/gtk/gtktypebuiltins.h
/usr/include/linux/errno.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/ioctl.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/ioctl.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/bits/sched.h
