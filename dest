STRCPY(3)                  Linux Programmer’s Manual                 STRCPY(3)



NNAAMMEE
       strcpy, strncpy - copy a string

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttrriinngg..hh>>

       cchhaarr **ssttrrccppyy((cchhaarr **_d_e_s_t,, ccoonnsstt cchhaarr **_s_r_c));;

       cchhaarr **ssttrrnnccppyy((cchhaarr **_d_e_s_t,, ccoonnsstt cchhaarr **_s_r_c,, ssiizzee__tt _n));;

DDEESSCCRRIIPPTTIIOONN
       The  ssttrrccppyy()  function  copies the string pointed to by _s_r_c, including
       the terminating null byte ('\0'), to the buffer  pointed  to  by  _d_e_s_t.
       The  strings  may  not overlap, and the destination string _d_e_s_t must be
       large enough to receive the copy.

       The ssttrrnnccppyy() function is similar, except that at most _n bytes  of  _s_r_c
       are  copied.  WWaarrnniinngg: If there is no null byte among the first _n bytes
       of _s_r_c, the string placed in _d_e_s_t will not be null terminated.

       If the length of _s_r_c is less than _n, ssttrrnnccppyy() pads  the  remainder  of
       _d_e_s_t with null bytes.

       A simple implementation of ssttrrnnccppyy() might be:

           char*
           strncpy(char *dest, const char *src, size_t n){
               size_t i;

               for (i = 0 ; i < n && src[i] != '\0' ; i++)
                   dest[i] = src[i];
               for ( ; i < n ; i++)
                   dest[i] = '\0';

               return dest;
           }

RREETTUURRNN VVAALLUUEE
       The  ssttrrccppyy()  and ssttrrnnccppyy() functions return a pointer to the destina-
       tion string _d_e_s_t.

CCOONNFFOORRMMIINNGG TTOO
       SVr4, 4.3BSD, C89, C99.

NNOOTTEESS
       Some programmers consider ssttrrnnccppyy() to be inefficient and error  prone.
       If  the  programmer knows (i.e., includes code to test!)  that the size
       of _d_e_s_t is greater than the length of _s_r_c, then ssttrrccppyy() can be used.

       If there is no terminating null byte in the first _n characters of  _s_r_c,
       ssttrrnnccppyy()  produces  an unterminated string in _d_e_s_t.  Programmers often
       prevent this mistake by forcing termination as follows:

           strncpy(buf, str, n);
           if (n > 0)
               buf[n - 1]= '\0';

BBUUGGSS
       If the destination string of a ssttrrccppyy() is not large enough, then  any-
       thing  might  happen.   Overflowing  fixed-length  string  buffers is a
       favorite cracker technique for taking complete control of the  machine.
       Any  time  a  program  reads  or copies data into a buffer, the program
       first needs to check that there’s enough space.  This may  be  unneces-
       sary  if you can show that overflow is impossible, but be careful: pro-
       grams can get changed over time, in ways that may make  the  impossible
       possible.

SSEEEE AALLSSOO
       bbccooppyy(3),  mmeemmccccppyy(3),  mmeemmccppyy(3),  mmeemmmmoovvee(3),  ssttrrdduupp(3),  ssttppccppyy(3),
       wwccssccppyy(3), wwccssnnccppyy(3)

CCOOLLOOPPHHOONN
       This page is part of release 3.22 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, and information about reporting bugs, can
       be found at http://www.kernel.org/doc/man-pages/.



GNU                               2009-06-01                         STRCPY(3)
